(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
var Application,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Application = (function(superClass) {
  extend(Application, superClass);

  function Application() {
    return Application.__super__.constructor.apply(this, arguments);
  }

  Application.prototype.radioEvents = {
    'db ready': 'onReady',
    'app redirect': 'redirectTo'
  };

  Application.prototype.initialize = function() {
    Backbone.Radio.channel('header').trigger('reset');
    Backbone.Radio.channel('loading').trigger('ready');
    Backbone.Radio.channel('breadcrumb').trigger('ready');
    Backbone.Radio.channel('overlay').trigger('ready');
    return true;
  };

  Application.prototype.onReady = function() {
    Backbone.history.start();
    return Backbone.Radio.channel('sidebar').trigger('reset');
  };

  Application.prototype.redirectTo = function(route) {
    window.location = route;
    return true;
  };

  return Application;

})(Marionette.Service);

module.exports = Application;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL2Fla3Njby9naXRodWIvbWFnZWxsYW4vYXBwL2NvZmZlZS9hcHAuY29mZmVlIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiL1VzZXJzL2Fla3Njby9naXRodWIvbWFnZWxsYW4vYXBwL2NvZmZlZS9hcHAuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLElBQUEsV0FBQTtFQUFBOzs7QUFBTTs7Ozs7Ozt3QkFFSixXQUFBLEdBQ0U7SUFBQSxVQUFBLEVBQWdCLFNBQWhCO0lBQ0EsY0FBQSxFQUFnQixZQURoQjs7O3dCQUlGLFVBQUEsR0FBWSxTQUFBO0lBR1YsUUFBUSxDQUFDLEtBQUssQ0FBQyxPQUFmLENBQXVCLFFBQXZCLENBQWdDLENBQUMsT0FBakMsQ0FBeUMsT0FBekM7SUFHQSxRQUFRLENBQUMsS0FBSyxDQUFDLE9BQWYsQ0FBdUIsU0FBdkIsQ0FBaUMsQ0FBQyxPQUFsQyxDQUEwQyxPQUExQztJQUdBLFFBQVEsQ0FBQyxLQUFLLENBQUMsT0FBZixDQUF1QixZQUF2QixDQUFvQyxDQUFDLE9BQXJDLENBQTZDLE9BQTdDO0lBQ0EsUUFBUSxDQUFDLEtBQUssQ0FBQyxPQUFmLENBQXVCLFNBQXZCLENBQWlDLENBQUMsT0FBbEMsQ0FBMEMsT0FBMUM7QUFDQSxXQUFPO0VBWEc7O3dCQWdCWixPQUFBLEdBQVMsU0FBQTtJQUNQLFFBQVEsQ0FBQyxPQUFPLENBQUMsS0FBakIsQ0FBQTtXQUNBLFFBQVEsQ0FBQyxLQUFLLENBQUMsT0FBZixDQUF1QixTQUF2QixDQUFpQyxDQUFDLE9BQWxDLENBQTBDLE9BQTFDO0VBRk87O3dCQU9ULFVBQUEsR0FBWSxTQUFDLEtBQUQ7SUFDVixNQUFNLENBQUMsUUFBUCxHQUFrQjtBQUNsQixXQUFPO0VBRkc7Ozs7R0E5QlksVUFBVSxDQUFDOztBQW9DckMsTUFBTSxDQUFDLE9BQVAsR0FBaUIifQ==

},{}],2:[function(require,module,exports){
var ApplicationLayout,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

ApplicationLayout = (function(superClass) {
  extend(ApplicationLayout, superClass);

  function ApplicationLayout() {
    return ApplicationLayout.__super__.constructor.apply(this, arguments);
  }

  ApplicationLayout.prototype.el = 'body';

  ApplicationLayout.prototype.template = false;

  ApplicationLayout.prototype.regions = {
    header: '[app-region=header]',
    sidebar: '[app-region=sidebar]',
    breadcrumb: '[app-region=breadcrumb]',
    overlay: '[app-region=overlay]',
    loading: '[app-region=loading]',
    flash: '[app-region=flash]',
    modal: {
      selector: '[app-region=modal]',
      regionClass: require('hn_regions/lib/regions/modal')
    },
    main: '[app-region=main]'
  };

  return ApplicationLayout;

})(Marionette.LayoutView);

module.exports = new ApplicationLayout().render();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL2Fla3Njby9naXRodWIvbWFnZWxsYW4vYXBwL2NvZmZlZS9hcHBsaWNhdGlvbi92aWV3cy9sYXlvdXQuY29mZmVlIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiL1VzZXJzL2Fla3Njby9naXRodWIvbWFnZWxsYW4vYXBwL2NvZmZlZS9hcHBsaWNhdGlvbi92aWV3cy9sYXlvdXQuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUlBLElBQUEsaUJBQUE7RUFBQTs7O0FBQU07Ozs7Ozs7OEJBQ0osRUFBQSxHQUFJOzs4QkFFSixRQUFBLEdBQVU7OzhCQUVWLE9BQUEsR0FDRTtJQUFBLE1BQUEsRUFBWSxxQkFBWjtJQUNBLE9BQUEsRUFBWSxzQkFEWjtJQUVBLFVBQUEsRUFBWSx5QkFGWjtJQUdBLE9BQUEsRUFBWSxzQkFIWjtJQUlBLE9BQUEsRUFBWSxzQkFKWjtJQUtBLEtBQUEsRUFBWSxvQkFMWjtJQU9BLEtBQUEsRUFDRTtNQUFBLFFBQUEsRUFBYyxvQkFBZDtNQUNBLFdBQUEsRUFBYyxPQUFBLENBQVEsOEJBQVIsQ0FEZDtLQVJGO0lBaUJBLElBQUEsRUFBVSxtQkFqQlY7Ozs7O0dBTjRCLFVBQVUsQ0FBQzs7QUE0QjNDLE1BQU0sQ0FBQyxPQUFQLEdBQWlCLElBQUksaUJBQUosQ0FBQSxDQUF1QixDQUFDLE1BQXhCLENBQUEifQ==

},{"hn_regions/lib/regions/modal":176}],3:[function(require,module,exports){
var CancelButtonBehavior,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

CancelButtonBehavior = (function(superClass) {
  extend(CancelButtonBehavior, superClass);

  function CancelButtonBehavior() {
    return CancelButtonBehavior.__super__.constructor.apply(this, arguments);
  }

  CancelButtonBehavior.prototype.ui = {
    cancel: '[data-click=cancel]'
  };

  CancelButtonBehavior.prototype.events = {
    'click @ui.cancel:not(.disabled)': 'onCancelClick'
  };

  CancelButtonBehavior.prototype.initialize = function(options) {
    if (options == null) {
      options = {};
    }
    this.view.disableCancel = (function(_this) {
      return function() {
        return _this.disableCancel();
      };
    })(this);
    return this.view.enableCancel = (function(_this) {
      return function() {
        return _this.enableCancel();
      };
    })(this);
  };

  CancelButtonBehavior.prototype.onCancelClick = function(e) {
    var base;
    return typeof (base = this.view).onCancel === "function" ? base.onCancel(e) : void 0;
  };

  CancelButtonBehavior.prototype.disableCancel = function() {
    return this.ui.cancel.addClass('disabled');
  };

  CancelButtonBehavior.prototype.enableCancel = function() {
    return this.ui.cancel.removeClass('disabled');
  };

  return CancelButtonBehavior;

})(Mn.Behavior);

module.exports = CancelButtonBehavior;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL2Fla3Njby9naXRodWIvbWFnZWxsYW4vYXBwL2NvZmZlZS9iZWhhdmlvcnMvY2FuY2VsQnV0dG9uLmNvZmZlZSIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9hZWtzY28vZ2l0aHViL21hZ2VsbGFuL2FwcC9jb2ZmZWUvYmVoYXZpb3JzL2NhbmNlbEJ1dHRvbi5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsSUFBQSxvQkFBQTtFQUFBOzs7QUFBTTs7Ozs7OztpQ0FFSixFQUFBLEdBQ0U7SUFBQSxNQUFBLEVBQVEscUJBQVI7OztpQ0FFRixNQUFBLEdBQ0U7SUFBQSxpQ0FBQSxFQUFtQyxlQUFuQzs7O2lDQUVGLFVBQUEsR0FBWSxTQUFDLE9BQUQ7O01BQUMsVUFBUTs7SUFDbkIsSUFBQyxDQUFBLElBQUksQ0FBQyxhQUFOLEdBQXNCLENBQUEsU0FBQSxLQUFBO2FBQUEsU0FBQTtlQUFHLEtBQUMsQ0FBQSxhQUFELENBQUE7TUFBSDtJQUFBLENBQUEsQ0FBQSxDQUFBLElBQUE7V0FDdEIsSUFBQyxDQUFBLElBQUksQ0FBQyxZQUFOLEdBQXNCLENBQUEsU0FBQSxLQUFBO2FBQUEsU0FBQTtlQUFHLEtBQUMsQ0FBQSxZQUFELENBQUE7TUFBSDtJQUFBLENBQUEsQ0FBQSxDQUFBLElBQUE7RUFGWjs7aUNBSVosYUFBQSxHQUFlLFNBQUMsQ0FBRDtBQUFPLFFBQUE7bUVBQUssQ0FBQyxTQUFVO0VBQXZCOztpQ0FDZixhQUFBLEdBQWUsU0FBQTtXQUFHLElBQUMsQ0FBQSxFQUFFLENBQUMsTUFBTSxDQUFDLFFBQVgsQ0FBb0IsVUFBcEI7RUFBSDs7aUNBQ2YsWUFBQSxHQUFjLFNBQUE7V0FBSSxJQUFDLENBQUEsRUFBRSxDQUFDLE1BQU0sQ0FBQyxXQUFYLENBQXVCLFVBQXZCO0VBQUo7Ozs7R0FkbUIsRUFBRSxDQUFDOztBQWtCdEMsTUFBTSxDQUFDLE9BQVAsR0FBaUIifQ==

},{}],4:[function(require,module,exports){
var ClickableRelations,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

ClickableRelations = (function(superClass) {
  extend(ClickableRelations, superClass);

  function ClickableRelations() {
    return ClickableRelations.__super__.constructor.apply(this, arguments);
  }

  ClickableRelations.prototype.ui = {
    showRelation: '[data-relation]'
  };

  ClickableRelations.prototype.events = {
    'click @ui.showRelation': 'showRelation'
  };

  ClickableRelations.prototype.showRelation = function(e) {
    var relatedId;
    e.preventDefault();
    relatedId = $(e.currentTarget).data('relation');
    return this.view.trigger('show:relation', relatedId);
  };

  return ClickableRelations;

})(Marionette.Behavior);

module.exports = ClickableRelations;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL2Fla3Njby9naXRodWIvbWFnZWxsYW4vYXBwL2NvZmZlZS9iZWhhdmlvcnMvY2xpY2thYmxlUmVsYXRpb25zLmNvZmZlZSIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9hZWtzY28vZ2l0aHViL21hZ2VsbGFuL2FwcC9jb2ZmZWUvYmVoYXZpb3JzL2NsaWNrYWJsZVJlbGF0aW9ucy5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsSUFBQSxrQkFBQTtFQUFBOzs7QUFBTTs7Ozs7OzsrQkFFSixFQUFBLEdBQ0U7SUFBQSxZQUFBLEVBQWMsaUJBQWQ7OzsrQkFFRixNQUFBLEdBQ0U7SUFBQSx3QkFBQSxFQUEwQixjQUExQjs7OytCQUVGLFlBQUEsR0FBYyxTQUFDLENBQUQ7QUFDWixRQUFBO0lBQUEsQ0FBQyxDQUFDLGNBQUYsQ0FBQTtJQUNBLFNBQUEsR0FBWSxDQUFBLENBQUUsQ0FBQyxDQUFDLGFBQUosQ0FBa0IsQ0FBQyxJQUFuQixDQUF3QixVQUF4QjtXQUNaLElBQUMsQ0FBQSxJQUFJLENBQUMsT0FBTixDQUFjLGVBQWQsRUFBK0IsU0FBL0I7RUFIWTs7OztHQVJpQixVQUFVLENBQUM7O0FBZTVDLE1BQU0sQ0FBQyxPQUFQLEdBQWlCIn0=

},{}],5:[function(require,module,exports){
var ConfirmationsBehavior,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

ConfirmationsBehavior = (function(superClass) {
  extend(ConfirmationsBehavior, superClass);

  function ConfirmationsBehavior() {
    return ConfirmationsBehavior.__super__.constructor.apply(this, arguments);
  }

  ConfirmationsBehavior.prototype.events = {
    'click @ui.confirmationTrigger': 'showConfirmation'
  };

  ConfirmationsBehavior.prototype.showConfirmation = function(e) {
    e.stopPropagation();
    return Backbone.Radio.channel('confirm').request('show', this.options).then((function(_this) {
      return function(confirmView) {
        confirmView.on('confirmed', function() {
          return _this.view.triggerMethod('confirmed');
        });
        return confirmView.on('denied', function() {
          return _this.view.triggerMethod('denied');
        });
      };
    })(this));
  };

  return ConfirmationsBehavior;

})(Marionette.Behavior);

module.exports = ConfirmationsBehavior;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL2Fla3Njby9naXRodWIvbWFnZWxsYW4vYXBwL2NvZmZlZS9iZWhhdmlvcnMvY29uZmlybWF0aW9ucy5jb2ZmZWUiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIvVXNlcnMvYWVrc2NvL2dpdGh1Yi9tYWdlbGxhbi9hcHAvY29mZmVlL2JlaGF2aW9ycy9jb25maXJtYXRpb25zLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFJQSxJQUFBLHFCQUFBO0VBQUE7OztBQUFNOzs7Ozs7O2tDQUlKLE1BQUEsR0FDRTtJQUFBLCtCQUFBLEVBQWlDLGtCQUFqQzs7O2tDQUlGLGdCQUFBLEdBQWtCLFNBQUMsQ0FBRDtJQUNoQixDQUFDLENBQUMsZUFBRixDQUFBO1dBQ0EsUUFBUSxDQUFDLEtBQUssQ0FBQyxPQUFmLENBQXVCLFNBQXZCLENBQWlDLENBQUMsT0FBbEMsQ0FBMEMsTUFBMUMsRUFBa0QsSUFBQyxDQUFBLE9BQW5ELENBQTJELENBQUMsSUFBNUQsQ0FBaUUsQ0FBQSxTQUFBLEtBQUE7YUFBQSxTQUFDLFdBQUQ7UUFDL0QsV0FBVyxDQUFDLEVBQVosQ0FBZSxXQUFmLEVBQTRCLFNBQUE7aUJBQUcsS0FBQyxDQUFBLElBQUksQ0FBQyxhQUFOLENBQW9CLFdBQXBCO1FBQUgsQ0FBNUI7ZUFDQSxXQUFXLENBQUMsRUFBWixDQUFlLFFBQWYsRUFBNEIsU0FBQTtpQkFBRyxLQUFDLENBQUEsSUFBSSxDQUFDLGFBQU4sQ0FBb0IsUUFBcEI7UUFBSCxDQUE1QjtNQUYrRDtJQUFBLENBQUEsQ0FBQSxDQUFBLElBQUEsQ0FBakU7RUFGZ0I7Ozs7R0FUZ0IsVUFBVSxDQUFDOztBQWlCL0MsTUFBTSxDQUFDLE9BQVAsR0FBaUIifQ==

},{}],6:[function(require,module,exports){
module.exports = {
  BindInputs: require('hn_behaviors/lib/bindInputs'),
  CancelButton: require('./cancelButton'),
  ClickableRelations: require('./clickableRelations'),
  Confirmations: require('./confirmations'),
  CopyToClipboard: require('hn_behaviors/lib/copyToClipboard'),
  Flashes: require('hn_behaviors/lib/flashes'),
  FormSerialize: require('hn_behaviors/lib/formSerialize'),
  ModelEvents: require('hn_behaviors/lib/modelEvents'),
  SelectableChild: require('./selectableChild'),
  SubmitButton: require('hn_behaviors/lib/submitButton'),
  Tooltips: require('hn_behaviors/lib/tooltips'),
  SortableList: require('./sortableList'),
  SortableChild: require('./sortableChild')
};

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL2Fla3Njby9naXRodWIvbWFnZWxsYW4vYXBwL2NvZmZlZS9iZWhhdmlvcnMvaW5kZXguY29mZmVlIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiL1VzZXJzL2Fla3Njby9naXRodWIvbWFnZWxsYW4vYXBwL2NvZmZlZS9iZWhhdmlvcnMvaW5kZXguY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxPQUFQLEdBQ0U7RUFBQSxVQUFBLEVBQW9CLE9BQUEsQ0FBUSw2QkFBUixDQUFwQjtFQUNBLFlBQUEsRUFBb0IsT0FBQSxDQUFRLGdCQUFSLENBRHBCO0VBRUEsa0JBQUEsRUFBb0IsT0FBQSxDQUFRLHNCQUFSLENBRnBCO0VBR0EsYUFBQSxFQUFvQixPQUFBLENBQVEsaUJBQVIsQ0FIcEI7RUFJQSxlQUFBLEVBQW9CLE9BQUEsQ0FBUSxrQ0FBUixDQUpwQjtFQUtBLE9BQUEsRUFBb0IsT0FBQSxDQUFRLDBCQUFSLENBTHBCO0VBTUEsYUFBQSxFQUFvQixPQUFBLENBQVEsZ0NBQVIsQ0FOcEI7RUFPQSxXQUFBLEVBQW9CLE9BQUEsQ0FBUSw4QkFBUixDQVBwQjtFQVFBLGVBQUEsRUFBb0IsT0FBQSxDQUFRLG1CQUFSLENBUnBCO0VBU0EsWUFBQSxFQUFvQixPQUFBLENBQVEsK0JBQVIsQ0FUcEI7RUFVQSxRQUFBLEVBQW9CLE9BQUEsQ0FBUSwyQkFBUixDQVZwQjtFQVdBLFlBQUEsRUFBb0IsT0FBQSxDQUFRLGdCQUFSLENBWHBCO0VBWUEsYUFBQSxFQUFvQixPQUFBLENBQVEsaUJBQVIsQ0FacEIifQ==

},{"./cancelButton":3,"./clickableRelations":4,"./confirmations":5,"./selectableChild":7,"./sortableChild":8,"./sortableList":9,"hn_behaviors/lib/bindInputs":157,"hn_behaviors/lib/copyToClipboard":158,"hn_behaviors/lib/flashes":159,"hn_behaviors/lib/formSerialize":160,"hn_behaviors/lib/modelEvents":161,"hn_behaviors/lib/submitButton":162,"hn_behaviors/lib/tooltips":163}],7:[function(require,module,exports){
var SelectableChild,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

SelectableChild = (function(superClass) {
  extend(SelectableChild, superClass);

  function SelectableChild() {
    return SelectableChild.__super__.constructor.apply(this, arguments);
  }

  SelectableChild.prototype.css = {
    active: 'active'
  };

  SelectableChild.prototype.events = {
    'click': 'onClick'
  };

  SelectableChild.prototype.modelEvents = {
    'selected': 'onClick'
  };

  SelectableChild.prototype.onRender = function() {
    if (!this.options.setActive) {
      return;
    }
    if (this.view.model.collection._activeModel === this.view.model.id) {
      return this.$el.trigger('click');
    }
  };

  SelectableChild.prototype.onSelected = function() {
    if (!this.options.setActive) {
      return;
    }
    this.view.model.collection._setActiveModel(this.view.model.id);
    return this.view.model.collection.trigger('selected:model', this.view.model);
  };

  SelectableChild.prototype.onClick = function(e) {
    if (this.view.onClick) {
      return this.view.onClick(e);
    }
    if (!this.options.doubleClick) {
      if (e != null) {
        e.preventDefault();
      }
    }
    if (this.$el.hasClass(this.css.active)) {
      return;
    }
    if (e != null) {
      e.preventDefault();
    }
    this.view.triggerMethod('selected');
    return this.$el.addClass(this.css.active).siblings().removeClass(this.css.active);
  };

  return SelectableChild;

})(Marionette.Behavior);

module.exports = SelectableChild;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL2Fla3Njby9naXRodWIvbWFnZWxsYW4vYXBwL2NvZmZlZS9iZWhhdmlvcnMvc2VsZWN0YWJsZUNoaWxkLmNvZmZlZSIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9hZWtzY28vZ2l0aHViL21hZ2VsbGFuL2FwcC9jb2ZmZWUvYmVoYXZpb3JzL3NlbGVjdGFibGVDaGlsZC5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsSUFBQSxlQUFBO0VBQUE7OztBQUFNOzs7Ozs7OzRCQUVKLEdBQUEsR0FDRTtJQUFBLE1BQUEsRUFBUSxRQUFSOzs7NEJBRUYsTUFBQSxHQUNFO0lBQUEsT0FBQSxFQUFVLFNBQVY7Ozs0QkFFRixXQUFBLEdBQ0U7SUFBQSxVQUFBLEVBQVksU0FBWjs7OzRCQUdGLFFBQUEsR0FBVSxTQUFBO0lBQ1IsSUFBQSxDQUFjLElBQUMsQ0FBQSxPQUFPLENBQUMsU0FBdkI7QUFBQSxhQUFBOztJQUNBLElBQXlCLElBQUMsQ0FBQSxJQUFJLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxZQUF2QixLQUF1QyxJQUFDLENBQUEsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUE1RTthQUFBLElBQUMsQ0FBQSxHQUFHLENBQUMsT0FBTCxDQUFhLE9BQWIsRUFBQTs7RUFGUTs7NEJBS1YsVUFBQSxHQUFZLFNBQUE7SUFDVixJQUFBLENBQWMsSUFBQyxDQUFBLE9BQU8sQ0FBQyxTQUF2QjtBQUFBLGFBQUE7O0lBQ0EsSUFBQyxDQUFBLElBQUksQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLGVBQXZCLENBQXVDLElBQUMsQ0FBQSxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQW5EO1dBQ0EsSUFBQyxDQUFBLElBQUksQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLE9BQXZCLENBQStCLGdCQUEvQixFQUFpRCxJQUFDLENBQUEsSUFBSSxDQUFDLEtBQXZEO0VBSFU7OzRCQU1aLE9BQUEsR0FBUyxTQUFDLENBQUQ7SUFFUCxJQUEyQixJQUFDLENBQUEsSUFBSSxDQUFDLE9BQWpDO0FBQUEsYUFBTyxJQUFDLENBQUEsSUFBSSxDQUFDLE9BQU4sQ0FBYyxDQUFkLEVBQVA7O0lBR0EsSUFBQSxDQUEyQixJQUFDLENBQUEsT0FBTyxDQUFDLFdBQXBDOztRQUFBLENBQUMsQ0FBRSxjQUFILENBQUE7T0FBQTs7SUFHQSxJQUFVLElBQUMsQ0FBQSxHQUFHLENBQUMsUUFBTCxDQUFjLElBQUMsQ0FBQSxHQUFHLENBQUMsTUFBbkIsQ0FBVjtBQUFBLGFBQUE7OztNQUdBLENBQUMsQ0FBRSxjQUFILENBQUE7O0lBQ0EsSUFBQyxDQUFBLElBQUksQ0FBQyxhQUFOLENBQW9CLFVBQXBCO1dBQ0EsSUFBQyxDQUFBLEdBQUcsQ0FBQyxRQUFMLENBQWMsSUFBQyxDQUFBLEdBQUcsQ0FBQyxNQUFuQixDQUEwQixDQUFDLFFBQTNCLENBQUEsQ0FBcUMsQ0FBQyxXQUF0QyxDQUFrRCxJQUFDLENBQUEsR0FBRyxDQUFDLE1BQXZEO0VBYk87Ozs7R0F2Qm1CLFVBQVUsQ0FBQzs7QUF3Q3pDLE1BQU0sQ0FBQyxPQUFQLEdBQWlCIn0=

},{}],8:[function(require,module,exports){
var SortableChild,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

SortableChild = (function(superClass) {
  extend(SortableChild, superClass);

  function SortableChild() {
    return SortableChild.__super__.constructor.apply(this, arguments);
  }

  SortableChild.prototype.events = {
    'sorted': 'onSorted'
  };

  SortableChild.prototype.onSorted = function(e, order) {
    return this.view.model.set('order', order);
  };

  return SortableChild;

})(Mn.Behavior);

module.exports = SortableChild;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL2Fla3Njby9naXRodWIvbWFnZWxsYW4vYXBwL2NvZmZlZS9iZWhhdmlvcnMvc29ydGFibGVDaGlsZC5jb2ZmZWUiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIvVXNlcnMvYWVrc2NvL2dpdGh1Yi9tYWdlbGxhbi9hcHAvY29mZmVlL2JlaGF2aW9ycy9zb3J0YWJsZUNoaWxkLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFHQSxJQUFBLGFBQUE7RUFBQTs7O0FBQU07Ozs7Ozs7MEJBRUosTUFBQSxHQUNFO0lBQUEsUUFBQSxFQUFVLFVBQVY7OzswQkFFRixRQUFBLEdBQVUsU0FBQyxDQUFELEVBQUksS0FBSjtXQUNSLElBQUMsQ0FBQSxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQVosQ0FBZ0IsT0FBaEIsRUFBeUIsS0FBekI7RUFEUTs7OztHQUxnQixFQUFFLENBQUM7O0FBVS9CLE1BQU0sQ0FBQyxPQUFQLEdBQWlCIn0=

},{}],9:[function(require,module,exports){
var SortableList,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

SortableList = (function(superClass) {
  extend(SortableList, superClass);

  function SortableList() {
    this.reorderCollection = bind(this.reorderCollection, this);
    return SortableList.__super__.constructor.apply(this, arguments);
  }

  SortableList.prototype.initialize = function() {
    return this.view.reorderCollection = (function(_this) {
      return function() {
        return _this.reorderCollection();
      };
    })(this);
  };

  SortableList.prototype.onRender = function() {
    return Sortable.create(this.view.el, {
      handle: this.options.handle || '.sortable',
      animation: this.options.animation || 250,
      onEnd: (function(_this) {
        return function(e) {
          return _this.reorderCollection();
        };
      })(this)
    });
  };

  SortableList.prototype.reorderCollection = function() {
    var el, i, len, order, ref, results;
    order = 1;
    ref = this.view.$el[0].children;
    results = [];
    for (i = 0, len = ref.length; i < len; i++) {
      el = ref[i];
      $(el).trigger('sorted', order);
      results.push(order++);
    }
    return results;
  };

  return SortableList;

})(Mn.Behavior);

module.exports = SortableList;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL2Fla3Njby9naXRodWIvbWFnZWxsYW4vYXBwL2NvZmZlZS9iZWhhdmlvcnMvc29ydGFibGVMaXN0LmNvZmZlZSIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9hZWtzY28vZ2l0aHViL21hZ2VsbGFuL2FwcC9jb2ZmZWUvYmVoYXZpb3JzL3NvcnRhYmxlTGlzdC5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsSUFBQSxZQUFBO0VBQUE7Ozs7QUFBTTs7Ozs7Ozs7eUJBSUosVUFBQSxHQUFZLFNBQUE7V0FDVixJQUFDLENBQUEsSUFBSSxDQUFDLGlCQUFOLEdBQTBCLENBQUEsU0FBQSxLQUFBO2FBQUEsU0FBQTtlQUFHLEtBQUMsQ0FBQSxpQkFBRCxDQUFBO01BQUg7SUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBO0VBRGhCOzt5QkFHWixRQUFBLEdBQVUsU0FBQTtXQUdSLFFBQVEsQ0FBQyxNQUFULENBQWdCLElBQUMsQ0FBQSxJQUFJLENBQUMsRUFBdEIsRUFDRTtNQUFBLE1BQUEsRUFBYyxJQUFDLENBQUEsT0FBTyxDQUFDLE1BQVQsSUFBbUIsV0FBakM7TUFDQSxTQUFBLEVBQWMsSUFBQyxDQUFBLE9BQU8sQ0FBQyxTQUFULElBQXNCLEdBRHBDO01BRUEsS0FBQSxFQUFPLENBQUEsU0FBQSxLQUFBO2VBQUEsU0FBQyxDQUFEO2lCQUFPLEtBQUMsQ0FBQSxpQkFBRCxDQUFBO1FBQVA7TUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLENBRlA7S0FERjtFQUhROzt5QkFVVixpQkFBQSxHQUFtQixTQUFBO0FBR2pCLFFBQUE7SUFBQSxLQUFBLEdBQVE7QUFDUjtBQUFBO1NBQUEscUNBQUE7O01BQ0UsQ0FBQSxDQUFFLEVBQUYsQ0FBSyxDQUFDLE9BQU4sQ0FBYyxRQUFkLEVBQXVCLEtBQXZCO21CQUNBLEtBQUE7QUFGRjs7RUFKaUI7Ozs7R0FqQk0sRUFBRSxDQUFDOztBQTJCOUIsTUFBTSxDQUFDLE9BQVAsR0FBaUIifQ==

},{}],10:[function(require,module,exports){
var ConfirmComponent, ConfirmView,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

ConfirmView = require('./views/confirmView');

ConfirmComponent = (function(superClass) {
  extend(ConfirmComponent, superClass);

  function ConfirmComponent() {
    return ConfirmComponent.__super__.constructor.apply(this, arguments);
  }

  ConfirmComponent.prototype.radioRequests = {
    'confirm show': 'confirm'
  };

  ConfirmComponent.prototype.confirm = function(options) {
    if (options == null) {
      options = {};
    }
    return new Promise((function(_this) {
      return function(resolve, reject) {
        var confirmView;
        confirmView = new ConfirmView(options);
        confirmView.on('denied', function() {
          return _this.hideModal();
        });
        confirmView.on('confirmed', function() {
          return _this.hideModal();
        });
        _this.showModal(confirmView, {
          size: options.size
        });
        return resolve(confirmView);
      };
    })(this));
  };

  return ConfirmComponent;

})(require('../modal/abstract'));

module.exports = ConfirmComponent;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL2Fla3Njby9naXRodWIvbWFnZWxsYW4vYXBwL2NvZmZlZS9jb21wb25lbnRzL2NvbmZpcm0vY29tcG9uZW50LmNvZmZlZSIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9hZWtzY28vZ2l0aHViL21hZ2VsbGFuL2FwcC9jb2ZmZWUvY29tcG9uZW50cy9jb25maXJtL2NvbXBvbmVudC5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsSUFBQSw2QkFBQTtFQUFBOzs7QUFBQSxXQUFBLEdBQWMsT0FBQSxDQUFRLHFCQUFSOztBQU9SOzs7Ozs7OzZCQUVKLGFBQUEsR0FDRTtJQUFBLGNBQUEsRUFBZ0IsU0FBaEI7Ozs2QkFFRixPQUFBLEdBQVMsU0FBQyxPQUFEOztNQUFDLFVBQVE7O0FBQ2hCLFdBQU8sSUFBSSxPQUFKLENBQVksQ0FBQSxTQUFBLEtBQUE7YUFBQSxTQUFDLE9BQUQsRUFBVSxNQUFWO0FBQ2pCLFlBQUE7UUFBQSxXQUFBLEdBQWMsSUFBSSxXQUFKLENBQWdCLE9BQWhCO1FBR2QsV0FBVyxDQUFDLEVBQVosQ0FBZSxRQUFmLEVBQTRCLFNBQUE7aUJBQUcsS0FBQyxDQUFBLFNBQUQsQ0FBQTtRQUFILENBQTVCO1FBQ0EsV0FBVyxDQUFDLEVBQVosQ0FBZSxXQUFmLEVBQTRCLFNBQUE7aUJBQUcsS0FBQyxDQUFBLFNBQUQsQ0FBQTtRQUFILENBQTVCO1FBSUEsS0FBQyxDQUFBLFNBQUQsQ0FBVyxXQUFYLEVBQXdCO1VBQUUsSUFBQSxFQUFNLE9BQU8sQ0FBQyxJQUFoQjtTQUF4QjtlQUdBLE9BQUEsQ0FBUSxXQUFSO01BWmlCO0lBQUEsQ0FBQSxDQUFBLENBQUEsSUFBQSxDQUFaO0VBREE7Ozs7R0FMb0IsT0FBQSxDQUFRLG1CQUFSOztBQXNCL0IsTUFBTSxDQUFDLE9BQVAsR0FBaUIifQ==

},{"../modal/abstract":19,"./views/confirmView":11}],11:[function(require,module,exports){
var ConfirmView,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

ConfirmView = (function(superClass) {
  extend(ConfirmView, superClass);

  function ConfirmView() {
    return ConfirmView.__super__.constructor.apply(this, arguments);
  }

  ConfirmView.prototype.className = 'modal-content';

  ConfirmView.prototype.template = require('./templates/confirm_view');

  ConfirmView.prototype.ui = {
    deny: '[data-click=deny]',
    confirm: '[data-click=confirm]'
  };

  ConfirmView.prototype.triggers = {
    'click @ui.deny': 'denied',
    'click @ui.confirm': 'confirmed'
  };

  ConfirmView.prototype.defaultOptions = {
    message: 'Are you sure?',
    messageCss: '',
    denyIcon: 'fa-times',
    denyText: 'Cancel',
    denyCss: 'btn-secondary',
    confirmIcon: 'fa-check',
    confirmText: 'Confirm',
    confirmCss: 'btn-success'
  };

  ConfirmView.prototype.serializeData = function() {
    return _.extend(this.defaultOptions, this.options);
  };

  return ConfirmView;

})(Marionette.LayoutView);

module.exports = ConfirmView;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL2Fla3Njby9naXRodWIvbWFnZWxsYW4vYXBwL2NvZmZlZS9jb21wb25lbnRzL2NvbmZpcm0vdmlld3MvY29uZmlybVZpZXcuY29mZmVlIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiL1VzZXJzL2Fla3Njby9naXRodWIvbWFnZWxsYW4vYXBwL2NvZmZlZS9jb21wb25lbnRzL2NvbmZpcm0vdmlld3MvY29uZmlybVZpZXcuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUtBLElBQUEsV0FBQTtFQUFBOzs7QUFBTTs7Ozs7Ozt3QkFDSixTQUFBLEdBQVc7O3dCQUNYLFFBQUEsR0FBVSxPQUFBLENBQVEsMEJBQVI7O3dCQUVWLEVBQUEsR0FDRTtJQUFBLElBQUEsRUFBVSxtQkFBVjtJQUNBLE9BQUEsRUFBVSxzQkFEVjs7O3dCQUdGLFFBQUEsR0FDRTtJQUFBLGdCQUFBLEVBQXNCLFFBQXRCO0lBQ0EsbUJBQUEsRUFBc0IsV0FEdEI7Ozt3QkFHRixjQUFBLEdBQ0U7SUFBQSxPQUFBLEVBQWMsZUFBZDtJQUNBLFVBQUEsRUFBYyxFQURkO0lBR0EsUUFBQSxFQUFjLFVBSGQ7SUFJQSxRQUFBLEVBQWMsUUFKZDtJQUtBLE9BQUEsRUFBYyxlQUxkO0lBT0EsV0FBQSxFQUFjLFVBUGQ7SUFRQSxXQUFBLEVBQWMsU0FSZDtJQVNBLFVBQUEsRUFBYyxhQVRkOzs7d0JBV0YsYUFBQSxHQUFlLFNBQUE7QUFDYixXQUFPLENBQUMsQ0FBQyxNQUFGLENBQVMsSUFBQyxDQUFBLGNBQVYsRUFBMEIsSUFBQyxDQUFBLE9BQTNCO0VBRE07Ozs7R0F4QlMsVUFBVSxDQUFDOztBQTZCckMsTUFBTSxDQUFDLE9BQVAsR0FBaUIifQ==

},{"./templates/confirm_view":12}],12:[function(require,module,exports){
var jade = require("jade/runtime");

module.exports = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (confirmCss, confirmIcon, confirmText, denyCss, denyIcon, denyText, message, messageCss) {
jade_mixins["confirmButton"] = jade_interp = function(opts){
var block = (this && this.block), attributes = (this && this.attributes) || {};
buf.push("<button type=\"button\"" + (jade.attr("data-click", opts.click, true, false)) + (jade.cls(['btn','w-100',opts.css], [null,null,true])) + ">");
if ( opts.icon)
{
buf.push("<i" + (jade.cls(['fa','fa-fw',opts.icon], [null,null,true])) + "></i>&nbsp;");
}
buf.push((jade.escape(null == (jade_interp = opts.text) ? "" : jade_interp)) + "</button>");
};
buf.push("<div class=\"modal-body\"><p" + (jade.cls(['lead','m-b-0',messageCss], [null,null,true])) + ">" + (((jade_interp = message) == null ? '' : jade_interp)) + "</p></div><div class=\"modal-footer\"><div class=\"row\"><div class=\"col-xs-6\">");
jade_mixins["confirmButton"]({ click: 'deny', css: denyCss, icon: denyIcon, text: denyText });
buf.push("</div><div class=\"col-xs-6\">");
jade_mixins["confirmButton"]({ click: 'confirm', css: confirmCss, icon: confirmIcon, text: confirmText });
buf.push("</div></div></div>");}.call(this,"confirmCss" in locals_for_with?locals_for_with.confirmCss:typeof confirmCss!=="undefined"?confirmCss:undefined,"confirmIcon" in locals_for_with?locals_for_with.confirmIcon:typeof confirmIcon!=="undefined"?confirmIcon:undefined,"confirmText" in locals_for_with?locals_for_with.confirmText:typeof confirmText!=="undefined"?confirmText:undefined,"denyCss" in locals_for_with?locals_for_with.denyCss:typeof denyCss!=="undefined"?denyCss:undefined,"denyIcon" in locals_for_with?locals_for_with.denyIcon:typeof denyIcon!=="undefined"?denyIcon:undefined,"denyText" in locals_for_with?locals_for_with.denyText:typeof denyText!=="undefined"?denyText:undefined,"message" in locals_for_with?locals_for_with.message:typeof message!=="undefined"?message:undefined,"messageCss" in locals_for_with?locals_for_with.messageCss:typeof messageCss!=="undefined"?messageCss:undefined));;return buf.join("");
};
},{"jade/runtime":187}],13:[function(require,module,exports){
var HeaderService, LayoutView,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

LayoutView = require('./views/layout');

HeaderService = (function(superClass) {
  extend(HeaderService, superClass);

  function HeaderService() {
    return HeaderService.__super__.constructor.apply(this, arguments);
  }

  HeaderService.prototype.initialize = function() {
    return this.container = this.options.container;
  };

  HeaderService.prototype.radioEvents = {
    'header reset': 'reset'
  };

  HeaderService.prototype.reset = function() {
    return this.container.show(new LayoutView());
  };

  return HeaderService;

})(Marionette.Service);

module.exports = HeaderService;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL2Fla3Njby9naXRodWIvbWFnZWxsYW4vYXBwL2NvZmZlZS9jb21wb25lbnRzL2hlYWRlci9jb21wb25lbnQuY29mZmVlIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiL1VzZXJzL2Fla3Njby9naXRodWIvbWFnZWxsYW4vYXBwL2NvZmZlZS9jb21wb25lbnRzL2hlYWRlci9jb21wb25lbnQuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLElBQUEseUJBQUE7RUFBQTs7O0FBQUEsVUFBQSxHQUFhLE9BQUEsQ0FBUSxnQkFBUjs7QUFNUDs7Ozs7OzswQkFFSixVQUFBLEdBQVksU0FBQTtXQUNWLElBQUMsQ0FBQSxTQUFELEdBQWEsSUFBQyxDQUFBLE9BQU8sQ0FBQztFQURaOzswQkFHWixXQUFBLEdBQ0U7SUFBQSxjQUFBLEVBQWdCLE9BQWhCOzs7MEJBRUYsS0FBQSxHQUFPLFNBQUE7V0FDTCxJQUFDLENBQUEsU0FBUyxDQUFDLElBQVgsQ0FBZ0IsSUFBSSxVQUFKLENBQUEsQ0FBaEI7RUFESzs7OztHQVJtQixVQUFVLENBQUM7O0FBYXZDLE1BQU0sQ0FBQyxPQUFQLEdBQWlCIn0=

},{"./views/layout":14}],14:[function(require,module,exports){
var HeaderView,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

HeaderView = (function(superClass) {
  extend(HeaderView, superClass);

  function HeaderView() {
    return HeaderView.__super__.constructor.apply(this, arguments);
  }

  HeaderView.prototype.template = require('./templates/header');

  HeaderView.prototype.className = 'nav navbar navbar-static-top navbar-light';

  HeaderView.prototype.events = {
    'click .navbar-brand': 'toggleSidebar'
  };

  HeaderView.prototype.toggleSidebar = function() {
    return Backbone.Radio.channel('sidebar').trigger('toggle');
  };

  return HeaderView;

})(Marionette.LayoutView);

module.exports = HeaderView;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL2Fla3Njby9naXRodWIvbWFnZWxsYW4vYXBwL2NvZmZlZS9jb21wb25lbnRzL2hlYWRlci92aWV3cy9sYXlvdXQuY29mZmVlIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiL1VzZXJzL2Fla3Njby9naXRodWIvbWFnZWxsYW4vYXBwL2NvZmZlZS9jb21wb25lbnRzL2hlYWRlci92aWV3cy9sYXlvdXQuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQU1BLElBQUEsVUFBQTtFQUFBOzs7QUFBTTs7Ozs7Ozt1QkFDSixRQUFBLEdBQVUsT0FBQSxDQUFRLG9CQUFSOzt1QkFDVixTQUFBLEdBQVc7O3VCQUVYLE1BQUEsR0FDRTtJQUFBLHFCQUFBLEVBQXVCLGVBQXZCOzs7dUJBRUYsYUFBQSxHQUFlLFNBQUE7V0FDYixRQUFRLENBQUMsS0FBSyxDQUFDLE9BQWYsQ0FBdUIsU0FBdkIsQ0FBaUMsQ0FBQyxPQUFsQyxDQUEwQyxRQUExQztFQURhOzs7O0dBUFEsVUFBVSxDQUFDOztBQVlwQyxNQUFNLENBQUMsT0FBUCxHQUFpQiJ9

},{"./templates/header":15}],15:[function(require,module,exports){
var jade = require("jade/runtime");

module.exports = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;

buf.push("<a class=\"navbar-brand btn btn-secondary btn-circle\"><div class=\"icon\"></div></a><div class=\"navbar-brand title\">MAGELLAN</div><div class=\"navbar-brand\"><small class=\"text-muted\">Structured Data Explorer</small></div>");;return buf.join("");
};
},{"jade/runtime":187}],16:[function(require,module,exports){
var LoadingComponent, LoadingView,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

LoadingView = require('./views/layout');

LoadingComponent = (function(superClass) {
  extend(LoadingComponent, superClass);

  function LoadingComponent() {
    return LoadingComponent.__super__.constructor.apply(this, arguments);
  }

  LoadingComponent.prototype.initialize = function(options) {
    if (options == null) {
      options = {};
    }
    return this.container = options.container;
  };

  LoadingComponent.prototype.radioEvents = {
    'loading ready': 'onReady',
    'loading show': 'showLoading',
    'loading hide': 'hideLoading'
  };

  LoadingComponent.prototype.showLoading = function(message) {
    if (message == null) {
      message = 'LOADING';
    }
    $('.loading-region').addClass('active');
    return this.view.updateMessage(message);
  };

  LoadingComponent.prototype.hideLoading = function() {
    return $('.loading-region').removeClass('active');
  };

  LoadingComponent.prototype.onReady = function() {
    if (!this.view) {
      this.view = new LoadingView();
      return this.container.show(this.view);
    }
  };

  return LoadingComponent;

})(Mn.Service);

module.exports = LoadingComponent;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL2Fla3Njby9naXRodWIvbWFnZWxsYW4vYXBwL2NvZmZlZS9jb21wb25lbnRzL2xvYWRpbmcvY29tcG9uZW50LmNvZmZlZSIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9hZWtzY28vZ2l0aHViL21hZ2VsbGFuL2FwcC9jb2ZmZWUvY29tcG9uZW50cy9sb2FkaW5nL2NvbXBvbmVudC5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsSUFBQSw2QkFBQTtFQUFBOzs7QUFBQSxXQUFBLEdBQWMsT0FBQSxDQUFRLGdCQUFSOztBQUlSOzs7Ozs7OzZCQUVKLFVBQUEsR0FBWSxTQUFDLE9BQUQ7O01BQUMsVUFBVTs7V0FDckIsSUFBQyxDQUFBLFNBQUQsR0FBYyxPQUFPLENBQUM7RUFEWjs7NkJBR1osV0FBQSxHQUNFO0lBQUEsZUFBQSxFQUFrQixTQUFsQjtJQUNBLGNBQUEsRUFBa0IsYUFEbEI7SUFFQSxjQUFBLEVBQWtCLGFBRmxCOzs7NkJBSUYsV0FBQSxHQUFhLFNBQUMsT0FBRDs7TUFBQyxVQUFROztJQUNwQixDQUFBLENBQUUsaUJBQUYsQ0FBb0IsQ0FBQyxRQUFyQixDQUE4QixRQUE5QjtXQUNBLElBQUMsQ0FBQSxJQUFJLENBQUMsYUFBTixDQUFvQixPQUFwQjtFQUZXOzs2QkFJYixXQUFBLEdBQWEsU0FBQTtXQUNYLENBQUEsQ0FBRSxpQkFBRixDQUFvQixDQUFDLFdBQXJCLENBQWlDLFFBQWpDO0VBRFc7OzZCQUdiLE9BQUEsR0FBUyxTQUFBO0lBQ1AsSUFBQSxDQUFPLElBQUMsQ0FBQSxJQUFSO01BQ0UsSUFBQyxDQUFBLElBQUQsR0FBUSxJQUFJLFdBQUosQ0FBQTthQUNSLElBQUMsQ0FBQSxTQUFTLENBQUMsSUFBWCxDQUFnQixJQUFDLENBQUEsSUFBakIsRUFGRjs7RUFETzs7OztHQWpCb0IsRUFBRSxDQUFDOztBQXdCbEMsTUFBTSxDQUFDLE9BQVAsR0FBaUIifQ==

},{"./views/layout":17}],17:[function(require,module,exports){
var LoadingView,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

LoadingView = (function(superClass) {
  extend(LoadingView, superClass);

  function LoadingView() {
    return LoadingView.__super__.constructor.apply(this, arguments);
  }

  LoadingView.prototype.template = require('./templates/loading');

  LoadingView.prototype.className = 'loading-view';

  LoadingView.prototype.ui = {
    message: '[data-display=message]'
  };

  LoadingView.prototype.updateMessage = function(msg) {
    return this.ui.message.text(msg);
  };

  return LoadingView;

})(Mn.LayoutView);

module.exports = LoadingView;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL2Fla3Njby9naXRodWIvbWFnZWxsYW4vYXBwL2NvZmZlZS9jb21wb25lbnRzL2xvYWRpbmcvdmlld3MvbGF5b3V0LmNvZmZlZSIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9hZWtzY28vZ2l0aHViL21hZ2VsbGFuL2FwcC9jb2ZmZWUvY29tcG9uZW50cy9sb2FkaW5nL3ZpZXdzL2xheW91dC5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsSUFBQSxXQUFBO0VBQUE7OztBQUFNOzs7Ozs7O3dCQUNKLFFBQUEsR0FBVSxPQUFBLENBQVEscUJBQVI7O3dCQUNWLFNBQUEsR0FBVzs7d0JBRVgsRUFBQSxHQUNFO0lBQUEsT0FBQSxFQUFTLHdCQUFUOzs7d0JBRUYsYUFBQSxHQUFlLFNBQUMsR0FBRDtXQUNiLElBQUMsQ0FBQSxFQUFFLENBQUMsT0FBTyxDQUFDLElBQVosQ0FBaUIsR0FBakI7RUFEYTs7OztHQVBTLEVBQUUsQ0FBQzs7QUFZN0IsTUFBTSxDQUFDLE9BQVAsR0FBaUIifQ==

},{"./templates/loading":18}],18:[function(require,module,exports){
var jade = require("jade/runtime");

module.exports = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;

buf.push("<i class=\"fa fa-fw fa-spin fa-spinner\"></i><p data-display=\"message\" class=\"message\">LOADING</p>");;return buf.join("");
};
},{"jade/runtime":187}],19:[function(require,module,exports){
var AbstractModalComponent, ModalView, hideModalOnHashChange,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

ModalView = require('./view');

hideModalOnHashChange = function() {
  return window.modalWindow.hideModal();
};

AbstractModalComponent = (function(superClass) {
  extend(AbstractModalComponent, superClass);

  function AbstractModalComponent() {
    return AbstractModalComponent.__super__.constructor.apply(this, arguments);
  }

  AbstractModalComponent.prototype.initialize = function(options) {
    if (options == null) {
      options = {};
    }
    return this.container = options.container;
  };

  AbstractModalComponent.prototype.hideModal = function() {
    return this.modalView.hideModal();
  };

  AbstractModalComponent.prototype.showModal = function(contentView, modalViewOptions) {
    if (modalViewOptions == null) {
      modalViewOptions = {};
    }
    this.modalView = new ModalView(modalViewOptions);
    this.modalView.on('show', (function(_this) {
      return function() {
        _this.modalView.contentRegion.show(contentView);
        window.addEventListener('hashchange', hideModalOnHashChange);
        return window.modalWindow = _this.modalView;
      };
    })(this));
    this.modalView.on('destroy', function() {
      window.removeEventListener('hashchange', hideModalOnHashChange);
      return delete window.modalWindow;
    });
    this.modalView.on('hidden:modal', (function(_this) {
      return function() {
        return typeof _this.onModalHidden === "function" ? _this.onModalHidden() : void 0;
      };
    })(this));
    return this.container.show(this.modalView);
  };

  return AbstractModalComponent;

})(Marionette.Service);

module.exports = AbstractModalComponent;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL2Fla3Njby9naXRodWIvbWFnZWxsYW4vYXBwL2NvZmZlZS9jb21wb25lbnRzL21vZGFsL2Fic3RyYWN0LmNvZmZlZSIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9hZWtzY28vZ2l0aHViL21hZ2VsbGFuL2FwcC9jb2ZmZWUvY29tcG9uZW50cy9tb2RhbC9hYnN0cmFjdC5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsSUFBQSx3REFBQTtFQUFBOzs7QUFBQSxTQUFBLEdBQVksT0FBQSxDQUFRLFFBQVI7O0FBS1oscUJBQUEsR0FBd0IsU0FBQTtTQUFHLE1BQU0sQ0FBQyxXQUFXLENBQUMsU0FBbkIsQ0FBQTtBQUFIOztBQUdsQjs7Ozs7OzttQ0FFSixVQUFBLEdBQVksU0FBQyxPQUFEOztNQUFDLFVBQVU7O1dBQ3JCLElBQUMsQ0FBQSxTQUFELEdBQWEsT0FBTyxDQUFDO0VBRFg7O21DQUdaLFNBQUEsR0FBVyxTQUFBO1dBQ1QsSUFBQyxDQUFBLFNBQVMsQ0FBQyxTQUFYLENBQUE7RUFEUzs7bUNBR1gsU0FBQSxHQUFXLFNBQUMsV0FBRCxFQUFjLGdCQUFkOztNQUFjLG1CQUFpQjs7SUFHdEMsSUFBQyxDQUFBLFNBQUQsR0FBYSxJQUFJLFNBQUosQ0FBYyxnQkFBZDtJQUdiLElBQUMsQ0FBQSxTQUFTLENBQUMsRUFBWCxDQUFjLE1BQWQsRUFBc0IsQ0FBQSxTQUFBLEtBQUE7YUFBQSxTQUFBO1FBQ3BCLEtBQUMsQ0FBQSxTQUFTLENBQUMsYUFBYSxDQUFDLElBQXpCLENBQStCLFdBQS9CO1FBQ0EsTUFBTSxDQUFDLGdCQUFQLENBQXdCLFlBQXhCLEVBQXNDLHFCQUF0QztlQUNBLE1BQU0sQ0FBQyxXQUFQLEdBQXFCLEtBQUMsQ0FBQTtNQUhGO0lBQUEsQ0FBQSxDQUFBLENBQUEsSUFBQSxDQUF0QjtJQU1BLElBQUMsQ0FBQSxTQUFTLENBQUMsRUFBWCxDQUFjLFNBQWQsRUFBeUIsU0FBQTtNQUN2QixNQUFNLENBQUMsbUJBQVAsQ0FBMkIsWUFBM0IsRUFBeUMscUJBQXpDO2FBQ0EsT0FBTyxNQUFNLENBQUM7SUFGUyxDQUF6QjtJQUtBLElBQUMsQ0FBQSxTQUFTLENBQUMsRUFBWCxDQUFjLGNBQWQsRUFBOEIsQ0FBQSxTQUFBLEtBQUE7YUFBQSxTQUFBOzJEQUFHLEtBQUMsQ0FBQTtNQUFKO0lBQUEsQ0FBQSxDQUFBLENBQUEsSUFBQSxDQUE5QjtXQUdBLElBQUMsQ0FBQSxTQUFTLENBQUMsSUFBWCxDQUFnQixJQUFDLENBQUEsU0FBakI7RUFwQk87Ozs7R0FSd0IsVUFBVSxDQUFDOztBQWdDaEQsTUFBTSxDQUFDLE9BQVAsR0FBaUIifQ==

},{"./view":22}],20:[function(require,module,exports){
var ModalComponent,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

ModalComponent = (function(superClass) {
  extend(ModalComponent, superClass);

  function ModalComponent() {
    return ModalComponent.__super__.constructor.apply(this, arguments);
  }

  ModalComponent.prototype.radioEvents = {
    'modal show': 'showViewProxy'
  };

  ModalComponent.prototype.showViewProxy = function(view, modalViewOptions) {
    if (modalViewOptions == null) {
      modalViewOptions = {};
    }
    view.on('hide', (function(_this) {
      return function() {
        return _this.hideModal();
      };
    })(this));
    return this.showModal(view, modalViewOptions);
  };

  return ModalComponent;

})(require('./abstract'));

module.exports = ModalComponent;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL2Fla3Njby9naXRodWIvbWFnZWxsYW4vYXBwL2NvZmZlZS9jb21wb25lbnRzL21vZGFsL2NvbXBvbmVudC5jb2ZmZWUiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIvVXNlcnMvYWVrc2NvL2dpdGh1Yi9tYWdlbGxhbi9hcHAvY29mZmVlL2NvbXBvbmVudHMvbW9kYWwvY29tcG9uZW50LmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxJQUFBLGNBQUE7RUFBQTs7O0FBQU07Ozs7Ozs7MkJBRUosV0FBQSxHQUNFO0lBQUEsWUFBQSxFQUFjLGVBQWQ7OzsyQkFFRixhQUFBLEdBQWUsU0FBQyxJQUFELEVBQU8sZ0JBQVA7O01BQU8sbUJBQWlCOztJQUNyQyxJQUFJLENBQUMsRUFBTCxDQUFRLE1BQVIsRUFBZ0IsQ0FBQSxTQUFBLEtBQUE7YUFBQSxTQUFBO2VBQUcsS0FBQyxDQUFBLFNBQUQsQ0FBQTtNQUFIO0lBQUEsQ0FBQSxDQUFBLENBQUEsSUFBQSxDQUFoQjtXQUNBLElBQUMsQ0FBQSxTQUFELENBQVcsSUFBWCxFQUFpQixnQkFBakI7RUFGYTs7OztHQUxZLE9BQUEsQ0FBUSxZQUFSOztBQVc3QixNQUFNLENBQUMsT0FBUCxHQUFpQiJ9

},{"./abstract":19}],21:[function(require,module,exports){
var jade = require("jade/runtime");

module.exports = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (modalCss) {
buf.push("<div role=\"document\" data-region=\"modal-content\"" + (jade.cls([modalCss], [true])) + "></div>");}.call(this,"modalCss" in locals_for_with?locals_for_with.modalCss:typeof modalCss!=="undefined"?modalCss:undefined));;return buf.join("");
};
},{"jade/runtime":187}],22:[function(require,module,exports){
var ModalView,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

ModalView = (function(superClass) {
  extend(ModalView, superClass);

  function ModalView() {
    return ModalView.__super__.constructor.apply(this, arguments);
  }

  ModalView.prototype.template = require('./modal_template');

  ModalView.prototype.attributes = {
    role: 'dialog',
    tabindex: '-1'
  };

  ModalView.prototype.className = 'modal fade';

  ModalView.prototype.templateHelpers = function() {
    var css, size;
    size = this.options.size || '';
    css = 'modal-dialog';
    if (size === 'small') {
      css += ' modal-sm';
    }
    if (size === 'large') {
      css += ' modal-lg';
    }
    return {
      modalCss: css
    };
  };

  ModalView.prototype.regions = {
    contentRegion: '[data-region=modal-content]'
  };

  ModalView.prototype.events = {
    'show.bs.modal': function() {
      return this.triggerMethod('show:modal');
    },
    'shown.bs.modal': function() {
      return this.triggerMethod('shown:modal');
    },
    'hide.bs.modal': function() {
      return this.triggerMethod('hide:modal');
    },
    'hidden.bs.modal': function() {
      return this.triggerMethod('hidden:modal');
    },
    'loaded.bs.modal': function() {
      return this.triggerMethod('loaded:modal');
    }
  };

  ModalView.prototype.onShow = function() {
    return this.$el.modal(this.options.modalOptions || {});
  };

  ModalView.prototype.hideModal = function() {
    return this.$el.modal('hide');
  };

  return ModalView;

})(Marionette.LayoutView);

module.exports = ModalView;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL2Fla3Njby9naXRodWIvbWFnZWxsYW4vYXBwL2NvZmZlZS9jb21wb25lbnRzL21vZGFsL3ZpZXcuY29mZmVlIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiL1VzZXJzL2Fla3Njby9naXRodWIvbWFnZWxsYW4vYXBwL2NvZmZlZS9jb21wb25lbnRzL21vZGFsL3ZpZXcuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUlBLElBQUEsU0FBQTtFQUFBOzs7QUFBTTs7Ozs7OztzQkFDSixRQUFBLEdBQVUsT0FBQSxDQUFRLGtCQUFSOztzQkFFVixVQUFBLEdBQ0U7SUFBQSxJQUFBLEVBQVUsUUFBVjtJQUNBLFFBQUEsRUFBVSxJQURWOzs7c0JBR0YsU0FBQSxHQUFXOztzQkFHWCxlQUFBLEdBQWlCLFNBQUE7QUFDZixRQUFBO0lBQUEsSUFBQSxHQUFPLElBQUMsQ0FBQSxPQUFPLENBQUMsSUFBVCxJQUFpQjtJQUN4QixHQUFBLEdBQU07SUFDTixJQUFzQixJQUFBLEtBQVEsT0FBOUI7TUFBQSxHQUFBLElBQU8sWUFBUDs7SUFDQSxJQUFzQixJQUFBLEtBQVEsT0FBOUI7TUFBQSxHQUFBLElBQU8sWUFBUDs7QUFDQSxXQUFPO01BQUUsUUFBQSxFQUFVLEdBQVo7O0VBTFE7O3NCQU9qQixPQUFBLEdBQ0U7SUFBQSxhQUFBLEVBQWUsNkJBQWY7OztzQkFFRixNQUFBLEdBQ0U7SUFBQSxlQUFBLEVBQW9CLFNBQUE7YUFBRyxJQUFDLENBQUEsYUFBRCxDQUFlLFlBQWY7SUFBSCxDQUFwQjtJQUNBLGdCQUFBLEVBQW9CLFNBQUE7YUFBRyxJQUFDLENBQUEsYUFBRCxDQUFlLGFBQWY7SUFBSCxDQURwQjtJQUVBLGVBQUEsRUFBb0IsU0FBQTthQUFHLElBQUMsQ0FBQSxhQUFELENBQWUsWUFBZjtJQUFILENBRnBCO0lBR0EsaUJBQUEsRUFBb0IsU0FBQTthQUFHLElBQUMsQ0FBQSxhQUFELENBQWUsY0FBZjtJQUFILENBSHBCO0lBSUEsaUJBQUEsRUFBb0IsU0FBQTthQUFHLElBQUMsQ0FBQSxhQUFELENBQWUsY0FBZjtJQUFILENBSnBCOzs7c0JBTUYsTUFBQSxHQUFRLFNBQUE7V0FDTixJQUFDLENBQUEsR0FBRyxDQUFDLEtBQUwsQ0FBWSxJQUFDLENBQUEsT0FBTyxDQUFDLFlBQVQsSUFBeUIsRUFBckM7RUFETTs7c0JBR1IsU0FBQSxHQUFXLFNBQUE7V0FDVCxJQUFDLENBQUEsR0FBRyxDQUFDLEtBQUwsQ0FBVyxNQUFYO0VBRFM7Ozs7R0E5QlcsVUFBVSxDQUFDOztBQW1DbkMsTUFBTSxDQUFDLE9BQVAsR0FBaUIifQ==

},{"./modal_template":21}],23:[function(require,module,exports){
var crossDomainRoot, proxiedSync;

crossDomainRoot = 'http://192.168.33.33:3000';

proxiedSync = Backbone.sync;

Backbone.sync = (function(_this) {
  return function(method, model, options) {
    if (options == null) {
      options = {};
    }
    if (!options.url) {
      options.url = crossDomainRoot + _.result(model, 'url') || urlError();
    } else if (options.url.substring(0, 6) !== crossDomainRoot.substring(0, 6)) {
      options.url = crossDomainRoot + options.url;
    }
    if (!options.crossDomain) {
      options.crossDomain = true;
    }
    if (!options.xhrFields) {
      options.xhrFields = {
        withCredentials: true
      };
    }
    return proxiedSync(method, model, options);
  };
})(this);

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL2Fla3Njby9naXRodWIvbWFnZWxsYW4vYXBwL2NvZmZlZS9jb25maWcvY29ycy5jb2ZmZWUiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIvVXNlcnMvYWVrc2NvL2dpdGh1Yi9tYWdlbGxhbi9hcHAvY29mZmVlL2NvbmZpZy9jb3JzLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxJQUFBOztBQUFBLGVBQUEsR0FBa0I7O0FBRWxCLFdBQUEsR0FBYyxRQUFRLENBQUM7O0FBRXZCLFFBQVEsQ0FBQyxJQUFULEdBQWdCLENBQUEsU0FBQSxLQUFBO1NBQUEsU0FBQyxNQUFELEVBQVMsS0FBVCxFQUFnQixPQUFoQjs7TUFBZ0IsVUFBVTs7SUFFeEMsSUFBRyxDQUFDLE9BQU8sQ0FBQyxHQUFaO01BQ0UsT0FBTyxDQUFDLEdBQVIsR0FBYyxlQUFBLEdBQWtCLENBQUMsQ0FBQyxNQUFGLENBQVMsS0FBVCxFQUFnQixLQUFoQixDQUFsQixJQUE0QyxRQUFBLENBQUEsRUFENUQ7S0FBQSxNQUdLLElBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxTQUFaLENBQXNCLENBQXRCLEVBQXlCLENBQXpCLENBQUEsS0FBK0IsZUFBZSxDQUFDLFNBQWhCLENBQTBCLENBQTFCLEVBQTZCLENBQTdCLENBQWxDO01BQ0gsT0FBTyxDQUFDLEdBQVIsR0FBYyxlQUFBLEdBQWtCLE9BQU8sQ0FBQyxJQURyQzs7SUFHTCxJQUFHLENBQUMsT0FBTyxDQUFDLFdBQVo7TUFDRSxPQUFPLENBQUMsV0FBUixHQUFzQixLQUR4Qjs7SUFHQSxJQUFHLENBQUMsT0FBTyxDQUFDLFNBQVo7TUFDRSxPQUFPLENBQUMsU0FBUixHQUFvQjtRQUFFLGVBQUEsRUFBaUIsSUFBbkI7UUFEdEI7O0FBR0EsV0FBTyxXQUFBLENBQVksTUFBWixFQUFvQixLQUFwQixFQUEyQixPQUEzQjtFQWRPO0FBQUEsQ0FBQSxDQUFBLENBQUEsSUFBQSJ9

},{}],24:[function(require,module,exports){
require('./jwt');

require('./cors');

require('./marionette');

require('./window');

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL2Fla3Njby9naXRodWIvbWFnZWxsYW4vYXBwL2NvZmZlZS9jb25maWcvaW5kZXguY29mZmVlIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiL1VzZXJzL2Fla3Njby9naXRodWIvbWFnZWxsYW4vYXBwL2NvZmZlZS9jb25maWcvaW5kZXguY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQUEsQ0FBUSxPQUFSOztBQUNBLE9BQUEsQ0FBUSxRQUFSOztBQUNBLE9BQUEsQ0FBUSxjQUFSOztBQUNBLE9BQUEsQ0FBUSxVQUFSIn0=

},{"./cors":23,"./jwt":25,"./marionette":26,"./window":27}],25:[function(require,module,exports){
$.ajaxSetup({
  beforeSend: function(xhr) {
    var token;
    token = localStorage.getItem('token');
    if (token) {
      xhr.setRequestHeader('Authorization', 'JWT ' + token);
    }
  }
});

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL2Fla3Njby9naXRodWIvbWFnZWxsYW4vYXBwL2NvZmZlZS9jb25maWcvand0LmNvZmZlZSIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9hZWtzY28vZ2l0aHViL21hZ2VsbGFuL2FwcC9jb2ZmZWUvY29uZmlnL2p3dC5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsQ0FBQyxDQUFDLFNBQUYsQ0FDRTtFQUFBLFVBQUEsRUFBWSxTQUFDLEdBQUQ7QUFDVixRQUFBO0lBQUEsS0FBQSxHQUFRLFlBQVksQ0FBQyxPQUFiLENBQXFCLE9BQXJCO0lBQ1IsSUFBeUQsS0FBekQ7TUFBQSxHQUFHLENBQUMsZ0JBQUosQ0FBcUIsZUFBckIsRUFBc0MsTUFBQSxHQUFTLEtBQS9DLEVBQUE7O0VBRlUsQ0FBWjtDQURGIn0=

},{}],26:[function(require,module,exports){
Marionette.Behaviors.behaviorsLookup = function() {
  return require('../behaviors');
};

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL2Fla3Njby9naXRodWIvbWFnZWxsYW4vYXBwL2NvZmZlZS9jb25maWcvbWFyaW9uZXR0ZS5jb2ZmZWUiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIvVXNlcnMvYWVrc2NvL2dpdGh1Yi9tYWdlbGxhbi9hcHAvY29mZmVlL2NvbmZpZy9tYXJpb25ldHRlLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxVQUFVLENBQUMsU0FBUyxDQUFDLGVBQXJCLEdBQXVDLFNBQUE7U0FBRyxPQUFBLENBQVEsY0FBUjtBQUFIIn0=

},{"../behaviors":6}],27:[function(require,module,exports){
window._s = require('underscore.string');

window.Radio = Backbone.Radio;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL2Fla3Njby9naXRodWIvbWFnZWxsYW4vYXBwL2NvZmZlZS9jb25maWcvd2luZG93LmNvZmZlZSIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9hZWtzY28vZ2l0aHViL21hZ2VsbGFuL2FwcC9jb2ZmZWUvY29uZmlnL3dpbmRvdy5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTSxDQUFDLEVBQVAsR0FBWSxPQUFBLENBQVEsbUJBQVI7O0FBR1osTUFBTSxDQUFDLEtBQVAsR0FBZSxRQUFRLENBQUMifQ==

},{"underscore.string":216}],28:[function(require,module,exports){
var App, AppLayout, BreadcrumbComponent, ConfirmComponent, DatasetRouter, DexieService, FlashComponent, HeaderComponent, HomeRouter, IframeRouter, LoadingComponent, ModalComponent, OntologyRouter, OverlayComponent, SidebarComponent, dexieConfiguration, menuItems;

require('./config');

App = require('./app');

AppLayout = require('./application/views/layout');

require('hn_entities/lib/config');

DexieService = require('./modules/db/service');

HeaderComponent = require('./components/header/component');

new HeaderComponent({
  container: AppLayout.header
});

ModalComponent = require('./components/modal/component');

new ModalComponent({
  container: AppLayout.modal
});

ConfirmComponent = require('./components/confirm/component');

new ConfirmComponent({
  container: AppLayout.modal
});

LoadingComponent = require('./components/loading/component');

new LoadingComponent({
  container: AppLayout.loading
});

menuItems = [
  {
    href: '#datasets',
    icon: 'fa-search',
    title: 'Datasets',
    divider: true
  }, {
    href: '#ontologies',
    icon: 'fa-sitemap',
    title: 'Ontologies',
    divider: true
  }, {
    href: '#settings',
    icon: 'fa-cog',
    title: 'Settings',
    divider: true
  }
];

SidebarComponent = require('hn_sidebar/lib/component');

BreadcrumbComponent = require('hn_breadcrumb/lib/component');

OverlayComponent = require('hn_overlay/lib/component');

FlashComponent = require('hn_flash/lib/component');

new SidebarComponent({
  container: AppLayout.sidebar,
  menuItems: menuItems
});

new BreadcrumbComponent({
  container: AppLayout.breadcrumb
});

new OverlayComponent({
  container: AppLayout.overlay
});

new FlashComponent({
  container: AppLayout.flash
});

require('./modules/search/factory');

require('./modules/datapoint/factory');

require('./modules/facet/factory');

require('./modules/knowledge_rule/factory');

require('./modules/viewer_rule/factory');

DatasetRouter = require('./modules/dataset/router');

HomeRouter = require('./modules/home/router');

IframeRouter = require('./modules/iframe/router');

OntologyRouter = require('./modules/ontology/router');

new DatasetRouter({
  container: AppLayout.main
});

new HomeRouter({
  container: AppLayout.main
});

new IframeRouter({
  container: AppLayout.main
});

new OntologyRouter({
  container: AppLayout.main
});

dexieConfiguration = {
  db: 'dexie_database_alpha_12',
  schema: [
    {
      name: 'facets',
      attrs: 'id, dataset_id, label'
    }, {
      name: 'datasets',
      attrs: 'id, label'
    }, {
      name: 'datapoints',
      attrs: 'id, dataset_id'
    }, {
      name: 'ontologies',
      attrs: 'id, prefix'
    }, {
      name: 'knowledge_rules',
      attrs: 'id, dataset_id'
    }, {
      name: 'viewer_rules',
      attrs: 'id, dataset_id'
    }
  ]
};

$(document).on('ready', (function(_this) {
  return function() {
    new App();
    return new DexieService(dexieConfiguration);
  };
})(this));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL2Fla3Njby9naXRodWIvbWFnZWxsYW4vYXBwL2NvZmZlZS9tYW5pZmVzdC5jb2ZmZWUiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIvVXNlcnMvYWVrc2NvL2dpdGh1Yi9tYWdlbGxhbi9hcHAvY29mZmVlL21hbmlmZXN0LmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFPQSxJQUFBOztBQUFBLE9BQUEsQ0FBUSxVQUFSOztBQUdBLEdBQUEsR0FBTSxPQUFBLENBQVEsT0FBUjs7QUFDTixTQUFBLEdBQVksT0FBQSxDQUFRLDRCQUFSOztBQUdaLE9BQUEsQ0FBUSx3QkFBUjs7QUFPQSxZQUFBLEdBQWUsT0FBQSxDQUFRLHNCQUFSOztBQVVmLGVBQUEsR0FBa0IsT0FBQSxDQUFRLCtCQUFSOztBQUNsQixJQUFJLGVBQUosQ0FBb0I7RUFBRSxTQUFBLEVBQVcsU0FBUyxDQUFDLE1BQXZCO0NBQXBCOztBQUdBLGNBQUEsR0FBaUIsT0FBQSxDQUFRLDhCQUFSOztBQUNqQixJQUFJLGNBQUosQ0FBbUI7RUFBRSxTQUFBLEVBQVcsU0FBUyxDQUFDLEtBQXZCO0NBQW5COztBQUdBLGdCQUFBLEdBQW1CLE9BQUEsQ0FBUSxnQ0FBUjs7QUFDbkIsSUFBSSxnQkFBSixDQUFxQjtFQUFFLFNBQUEsRUFBVyxTQUFTLENBQUMsS0FBdkI7Q0FBckI7O0FBSUEsZ0JBQUEsR0FBbUIsT0FBQSxDQUFRLGdDQUFSOztBQUNuQixJQUFJLGdCQUFKLENBQXFCO0VBQUUsU0FBQSxFQUFXLFNBQVMsQ0FBQyxPQUF2QjtDQUFyQjs7QUFHQSxTQUFBLEdBQVk7RUFDVjtJQUFFLElBQUEsRUFBTSxXQUFSO0lBQXdCLElBQUEsRUFBTSxXQUE5QjtJQUE4QyxLQUFBLEVBQU8sVUFBckQ7SUFBaUUsT0FBQSxFQUFTLElBQTFFO0dBRFUsRUFFVjtJQUFFLElBQUEsRUFBTSxhQUFSO0lBQXdCLElBQUEsRUFBTSxZQUE5QjtJQUE4QyxLQUFBLEVBQU8sWUFBckQ7SUFBbUUsT0FBQSxFQUFTLElBQTVFO0dBRlUsRUFHVjtJQUFFLElBQUEsRUFBTSxXQUFSO0lBQXdCLElBQUEsRUFBTSxRQUE5QjtJQUE4QyxLQUFBLEVBQU8sVUFBckQ7SUFBaUUsT0FBQSxFQUFTLElBQTFFO0dBSFU7OztBQU9aLGdCQUFBLEdBQXNCLE9BQUEsQ0FBUSwwQkFBUjs7QUFDdEIsbUJBQUEsR0FBc0IsT0FBQSxDQUFRLDZCQUFSOztBQUN0QixnQkFBQSxHQUFzQixPQUFBLENBQVEsMEJBQVI7O0FBQ3RCLGNBQUEsR0FBc0IsT0FBQSxDQUFRLHdCQUFSOztBQUN0QixJQUFJLGdCQUFKLENBQXFCO0VBQUUsU0FBQSxFQUFXLFNBQVMsQ0FBQyxPQUF2QjtFQUFnQyxTQUFBLEVBQVcsU0FBM0M7Q0FBckI7O0FBQ0EsSUFBSSxtQkFBSixDQUF3QjtFQUFFLFNBQUEsRUFBVyxTQUFTLENBQUMsVUFBdkI7Q0FBeEI7O0FBQ0EsSUFBSSxnQkFBSixDQUFxQjtFQUFFLFNBQUEsRUFBVyxTQUFTLENBQUMsT0FBdkI7Q0FBckI7O0FBQ0EsSUFBSSxjQUFKLENBQW1CO0VBQUUsU0FBQSxFQUFXLFNBQVMsQ0FBQyxLQUF2QjtDQUFuQjs7QUFLQSxPQUFBLENBQVEsMEJBQVI7O0FBQ0EsT0FBQSxDQUFRLDZCQUFSOztBQUNBLE9BQUEsQ0FBUSx5QkFBUjs7QUFDQSxPQUFBLENBQVEsa0NBQVI7O0FBQ0EsT0FBQSxDQUFRLCtCQUFSOztBQVFBLGFBQUEsR0FBa0IsT0FBQSxDQUFRLDBCQUFSOztBQUNsQixVQUFBLEdBQWtCLE9BQUEsQ0FBUSx1QkFBUjs7QUFDbEIsWUFBQSxHQUFrQixPQUFBLENBQVEseUJBQVI7O0FBQ2xCLGNBQUEsR0FBa0IsT0FBQSxDQUFRLDJCQUFSOztBQUNsQixJQUFJLGFBQUosQ0FBa0I7RUFBRSxTQUFBLEVBQVcsU0FBUyxDQUFDLElBQXZCO0NBQWxCOztBQUNBLElBQUksVUFBSixDQUFlO0VBQUUsU0FBQSxFQUFXLFNBQVMsQ0FBQyxJQUF2QjtDQUFmOztBQUNBLElBQUksWUFBSixDQUFpQjtFQUFFLFNBQUEsRUFBVyxTQUFTLENBQUMsSUFBdkI7Q0FBakI7O0FBQ0EsSUFBSSxjQUFKLENBQW1CO0VBQUUsU0FBQSxFQUFXLFNBQVMsQ0FBQyxJQUF2QjtDQUFuQjs7QUFPQSxrQkFBQSxHQUNFO0VBQUEsRUFBQSxFQUFRLHlCQUFSO0VBSUEsTUFBQSxFQUFTO0lBQ1A7TUFBRSxJQUFBLEVBQU0sUUFBUjtNQUFvQixLQUFBLEVBQU8sdUJBQTNCO0tBRE8sRUFFUDtNQUFFLElBQUEsRUFBTSxVQUFSO01BQW9CLEtBQUEsRUFBTyxXQUEzQjtLQUZPLEVBR1A7TUFBRSxJQUFBLEVBQU0sWUFBUjtNQUFzQixLQUFBLEVBQU8sZ0JBQTdCO0tBSE8sRUFJUDtNQUFFLElBQUEsRUFBTSxZQUFSO01BQXNCLEtBQUEsRUFBTyxZQUE3QjtLQUpPLEVBS1A7TUFBRSxJQUFBLEVBQU0saUJBQVI7TUFBMkIsS0FBQSxFQUFPLGdCQUFsQztLQUxPLEVBTVA7TUFBRSxJQUFBLEVBQU0sY0FBUjtNQUF3QixLQUFBLEVBQU8sZ0JBQS9CO0tBTk87R0FKVDs7O0FBZ0JGLENBQUEsQ0FBRSxRQUFGLENBQVcsQ0FBQyxFQUFaLENBQWUsT0FBZixFQUF3QixDQUFBLFNBQUEsS0FBQTtTQUFBLFNBQUE7SUFJdEIsSUFBSSxHQUFKLENBQUE7V0FDQSxJQUFJLFlBQUosQ0FBaUIsa0JBQWpCO0VBTHNCO0FBQUEsQ0FBQSxDQUFBLENBQUEsSUFBQSxDQUF4QiJ9

},{"./app":1,"./application/views/layout":2,"./components/confirm/component":10,"./components/header/component":13,"./components/loading/component":16,"./components/modal/component":20,"./config":24,"./modules/datapoint/factory":32,"./modules/dataset/router":91,"./modules/db/service":93,"./modules/facet/factory":95,"./modules/home/router":100,"./modules/iframe/router":111,"./modules/knowledge_rule/factory":113,"./modules/ontology/router":128,"./modules/search/factory":145,"./modules/viewer_rule/factory":147,"hn_breadcrumb/lib/component":164,"hn_entities/lib/config":167,"hn_flash/lib/component":170,"hn_overlay/lib/component":175,"hn_sidebar/lib/component":179}],29:[function(require,module,exports){
var AbstractRuleCollection, AbstractRuleModel, DefinitionCollection, DefinitionModel, isSubstringOf,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

DefinitionModel = (function(superClass) {
  extend(DefinitionModel, superClass);

  function DefinitionModel() {
    this.evaluateAction = bind(this.evaluateAction, this);
    return DefinitionModel.__super__.constructor.apply(this, arguments);
  }

  DefinitionModel.prototype.defaults = {
    order: null,
    source: '@id',
    operation: 'ends_with',
    value: '',
    action: ''
  };

  DefinitionModel.prototype.isBlocking = function() {
    return this.get('action') === 'block';
  };

  DefinitionModel.prototype.evaluateAction = function(target, target_object, target_property, data) {
    var replace_source, replace_text, replace_with, result, target_object_data;
    target_object_data = target.get(target_object);
    if (this.get('action') === 'block') {
      return;
    }
    if (this.get('action') === 'literal') {
      target_object_data[target_property] = this.get('literal_text');
      target.set(target_object, target_object_data);
      return;
    }
    if (this.get('action') === 'replace') {
      replace_source = data[this.get('replace_source')];
      replace_text = this.get('replace_text');
      replace_with = this.get('replace_with');
      result = replace_source.replace(replace_text, replace_with);
      target_object_data[target_property] = result;
      target.set(target_object, target_object_data);
    }
  };

  return DefinitionModel;

})(Backbone.RelationalModel);

DefinitionCollection = (function(superClass) {
  extend(DefinitionCollection, superClass);

  function DefinitionCollection() {
    this.evaluate = bind(this.evaluate, this);
    return DefinitionCollection.__super__.constructor.apply(this, arguments);
  }

  DefinitionCollection.prototype.model = DefinitionModel;

  DefinitionCollection.prototype.comparator = 'order';

  DefinitionCollection.prototype.evaluate = function(target, target_object, target_property) {
    var conditionMatched, data, definition, i, len, operation, ref, source, value;
    conditionMatched = false;
    ref = this.models;
    for (i = 0, len = ref.length; i < len; i++) {
      definition = ref[i];
      data = target.get('data');
      source = data[definition.get('source')];
      operation = definition.get('operation');
      value = definition.get('value');
      if (operation === 'exact_match') {
        if (source === value) {
          conditionMatched = true;
          definition.evaluateAction(target, target_object, target_property, data);
        } else {
          if (definition.isBlocking()) {
            break;
          }
        }
      }
      if (operation === 'starts_with') {
        if (_s.startsWith(source, value)) {
          conditionMatched = true;
          definition.evaluateAction(target, target_object, target_property, data);
        } else {
          if (definition.isBlocking()) {
            break;
          }
        }
      }
      if (operation === 'contains') {
        if (_s.include(source, value)) {
          conditionMatched = true;
          definition.evaluateAction(target, target_object, target_property, data);
        } else {
          if (definition.isBlocking()) {
            break;
          }
        }
      }
      if (operation === 'contains_case_sensitive') {
        if (_s.startsWith(source.toLowerCase(), value.toLowerCase())) {
          conditionMatched = true;
          definition.evaluateAction(target, target_object, target_property, data);
        } else {
          if (definition.isBlocking()) {
            break;
          }
        }
      }
      if (operation === 'ends_with') {
        if (_s.endsWith(source, value)) {
          conditionMatched = true;
          definition.evaluateAction(target, target_object, target_property, data);
        } else {
          if (definition.isBlocking()) {
            break;
          }
        }
      }
    }
    return conditionMatched;
  };

  return DefinitionCollection;

})(Backbone.Collection);

AbstractRuleModel = (function(superClass) {
  extend(AbstractRuleModel, superClass);

  function AbstractRuleModel() {
    return AbstractRuleModel.__super__.constructor.apply(this, arguments);
  }

  AbstractRuleModel.prototype.radioChannel = null;

  AbstractRuleModel.prototype.defaults = {
    order: 0,
    enabled: true,
    target_property: '',
    definitions: []
  };

  AbstractRuleModel.prototype.relations = [
    {
      type: Backbone.HasMany,
      key: 'definitions',
      relatedModel: DefinitionModel,
      collectionType: DefinitionCollection
    }
  ];

  AbstractRuleModel.prototype.save = function() {
    return Backbone.Radio.channel(this.radioChannel).request('save', this);
  };

  AbstractRuleModel.prototype.destroy = function() {
    return Backbone.Radio.channel(this.radioChannel).request('destroy', this);
  };

  return AbstractRuleModel;

})(Backbone.RelationalModel);

isSubstringOf = function(str, sub) {
  return str.indexOf(sub) > -1;
};

AbstractRuleCollection = (function(superClass) {
  extend(AbstractRuleCollection, superClass);

  function AbstractRuleCollection() {
    return AbstractRuleCollection.__super__.constructor.apply(this, arguments);
  }

  AbstractRuleCollection.prototype.model = AbstractRuleModel;

  AbstractRuleCollection.prototype.target_object = null;

  AbstractRuleCollection.prototype.comparator = 'order';

  AbstractRuleCollection.prototype.applyRules = function(targetCollection) {
    var applyRuleToTarget, count, index;
    index = 0;
    count = _s.numberFormat(targetCollection.length);
    applyRuleToTarget = (function(_this) {
      return function(target) {
        var conditionMatched, definitionCollection, i, len, ref, rule, saveFlag, target_property;
        index = index + 1;
        Backbone.Radio.channel('loading').trigger('show', "Processing " + (_s.numberFormat(index)) + " of " + count);
        saveFlag = false;
        ref = _this.models;
        for (i = 0, len = ref.length; i < len; i++) {
          rule = ref[i];
          target_property = rule.get('target_property');
          definitionCollection = rule.get('definitions');
          conditionMatched = definitionCollection.evaluate(target, _this.target_object, target_property);
          if (conditionMatched) {
            saveFlag = true;
          }
        }
        if (saveFlag) {
          return target.save();
        }
        return new Promise(function(resolve, reject) {
          return resolve(true);
        });
      };
    })(this);
    return Promise.each(targetCollection.models, applyRuleToTarget);
  };

  return AbstractRuleCollection;

})(Backbone.Collection);

module.exports = {
  Model: AbstractRuleModel,
  Collection: AbstractRuleCollection
};

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL2Fla3Njby9naXRodWIvbWFnZWxsYW4vYXBwL2NvZmZlZS9tb2R1bGVzL2Fic3RyYWN0X3J1bGUvZW50aXRpZXMuY29mZmVlIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiL1VzZXJzL2Fla3Njby9naXRodWIvbWFnZWxsYW4vYXBwL2NvZmZlZS9tb2R1bGVzL2Fic3RyYWN0X3J1bGUvZW50aXRpZXMuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLElBQUEsK0ZBQUE7RUFBQTs7OztBQUFNOzs7Ozs7Ozs0QkFJSixRQUFBLEdBQ0U7SUFBQSxLQUFBLEVBQVksSUFBWjtJQUdBLE1BQUEsRUFBWSxLQUhaO0lBSUEsU0FBQSxFQUFZLFdBSlo7SUFLQSxLQUFBLEVBQVksRUFMWjtJQVFBLE1BQUEsRUFBWSxFQVJaOzs7NEJBWUYsVUFBQSxHQUFZLFNBQUE7QUFDVixXQUFPLElBQUMsQ0FBQSxHQUFELENBQUssUUFBTCxDQUFBLEtBQWtCO0VBRGY7OzRCQUtaLGNBQUEsR0FBZ0IsU0FBQyxNQUFELEVBQVMsYUFBVCxFQUF3QixlQUF4QixFQUF5QyxJQUF6QztBQUdkLFFBQUE7SUFBQSxrQkFBQSxHQUFxQixNQUFNLENBQUMsR0FBUCxDQUFXLGFBQVg7SUFHckIsSUFBRyxJQUFDLENBQUEsR0FBRCxDQUFLLFFBQUwsQ0FBQSxLQUFrQixPQUFyQjtBQUNFLGFBREY7O0lBSUEsSUFBRyxJQUFDLENBQUEsR0FBRCxDQUFLLFFBQUwsQ0FBQSxLQUFrQixTQUFyQjtNQUNFLGtCQUFtQixDQUFBLGVBQUEsQ0FBbkIsR0FBc0MsSUFBQyxDQUFBLEdBQUQsQ0FBSyxjQUFMO01BQ3RDLE1BQU0sQ0FBQyxHQUFQLENBQVcsYUFBWCxFQUEwQixrQkFBMUI7QUFDQSxhQUhGOztJQU1BLElBQUcsSUFBQyxDQUFBLEdBQUQsQ0FBSyxRQUFMLENBQUEsS0FBa0IsU0FBckI7TUFHRSxjQUFBLEdBQWtCLElBQUssQ0FBQSxJQUFDLENBQUEsR0FBRCxDQUFLLGdCQUFMLENBQUE7TUFDdkIsWUFBQSxHQUFrQixJQUFDLENBQUEsR0FBRCxDQUFLLGNBQUw7TUFDbEIsWUFBQSxHQUFrQixJQUFDLENBQUEsR0FBRCxDQUFLLGNBQUw7TUFDbEIsTUFBQSxHQUFrQixjQUFjLENBQUMsT0FBZixDQUF1QixZQUF2QixFQUFxQyxZQUFyQztNQUdsQixrQkFBbUIsQ0FBQSxlQUFBLENBQW5CLEdBQXNDO01BQ3RDLE1BQU0sQ0FBQyxHQUFQLENBQVcsYUFBWCxFQUEwQixrQkFBMUIsRUFWRjs7RUFoQmM7Ozs7R0F0QlksUUFBUSxDQUFDOztBQXFEakM7Ozs7Ozs7O2lDQUNKLEtBQUEsR0FBTzs7aUNBQ1AsVUFBQSxHQUFZOztpQ0FFWixRQUFBLEdBQVUsU0FBQyxNQUFELEVBQVMsYUFBVCxFQUF3QixlQUF4QjtBQUlSLFFBQUE7SUFBQSxnQkFBQSxHQUFtQjtBQUluQjtBQUFBLFNBQUEscUNBQUE7O01BR0UsSUFBQSxHQUFPLE1BQU0sQ0FBQyxHQUFQLENBQVcsTUFBWDtNQUdQLE1BQUEsR0FBWSxJQUFLLENBQUEsVUFBVSxDQUFDLEdBQVgsQ0FBZSxRQUFmLENBQUE7TUFDakIsU0FBQSxHQUFZLFVBQVUsQ0FBQyxHQUFYLENBQWUsV0FBZjtNQUNaLEtBQUEsR0FBWSxVQUFVLENBQUMsR0FBWCxDQUFlLE9BQWY7TUFXWixJQUFHLFNBQUEsS0FBYSxhQUFoQjtRQUNFLElBQUcsTUFBQSxLQUFVLEtBQWI7VUFDRSxnQkFBQSxHQUFtQjtVQUNuQixVQUFVLENBQUMsY0FBWCxDQUEwQixNQUExQixFQUFrQyxhQUFsQyxFQUFpRCxlQUFqRCxFQUFrRSxJQUFsRSxFQUZGO1NBQUEsTUFBQTtVQUlFLElBQVMsVUFBVSxDQUFDLFVBQVgsQ0FBQSxDQUFUO0FBQUEsa0JBQUE7V0FKRjtTQURGOztNQVNBLElBQUcsU0FBQSxLQUFhLGFBQWhCO1FBQ0UsSUFBRyxFQUFFLENBQUMsVUFBSCxDQUFjLE1BQWQsRUFBc0IsS0FBdEIsQ0FBSDtVQUNFLGdCQUFBLEdBQW1CO1VBQ25CLFVBQVUsQ0FBQyxjQUFYLENBQTBCLE1BQTFCLEVBQWtDLGFBQWxDLEVBQWlELGVBQWpELEVBQWtFLElBQWxFLEVBRkY7U0FBQSxNQUFBO1VBSUUsSUFBUyxVQUFVLENBQUMsVUFBWCxDQUFBLENBQVQ7QUFBQSxrQkFBQTtXQUpGO1NBREY7O01BUUEsSUFBRyxTQUFBLEtBQWEsVUFBaEI7UUFDRSxJQUFHLEVBQUUsQ0FBQyxPQUFILENBQVcsTUFBWCxFQUFtQixLQUFuQixDQUFIO1VBQ0UsZ0JBQUEsR0FBbUI7VUFDbkIsVUFBVSxDQUFDLGNBQVgsQ0FBMEIsTUFBMUIsRUFBa0MsYUFBbEMsRUFBaUQsZUFBakQsRUFBa0UsSUFBbEUsRUFGRjtTQUFBLE1BQUE7VUFJRSxJQUFTLFVBQVUsQ0FBQyxVQUFYLENBQUEsQ0FBVDtBQUFBLGtCQUFBO1dBSkY7U0FERjs7TUFRQSxJQUFHLFNBQUEsS0FBYSx5QkFBaEI7UUFDRSxJQUFHLEVBQUUsQ0FBQyxVQUFILENBQWMsTUFBTSxDQUFDLFdBQVAsQ0FBQSxDQUFkLEVBQW9DLEtBQUssQ0FBQyxXQUFOLENBQUEsQ0FBcEMsQ0FBSDtVQUNFLGdCQUFBLEdBQW1CO1VBQ25CLFVBQVUsQ0FBQyxjQUFYLENBQTBCLE1BQTFCLEVBQWtDLGFBQWxDLEVBQWlELGVBQWpELEVBQWtFLElBQWxFLEVBRkY7U0FBQSxNQUFBO1VBSUUsSUFBUyxVQUFVLENBQUMsVUFBWCxDQUFBLENBQVQ7QUFBQSxrQkFBQTtXQUpGO1NBREY7O01BU0EsSUFBRyxTQUFBLEtBQWEsV0FBaEI7UUFDRSxJQUFHLEVBQUUsQ0FBQyxRQUFILENBQVksTUFBWixFQUFvQixLQUFwQixDQUFIO1VBQ0UsZ0JBQUEsR0FBbUI7VUFDbkIsVUFBVSxDQUFDLGNBQVgsQ0FBMEIsTUFBMUIsRUFBa0MsYUFBbEMsRUFBaUQsZUFBakQsRUFBa0UsSUFBbEUsRUFGRjtTQUFBLE1BQUE7VUFJRSxJQUFTLFVBQVUsQ0FBQyxVQUFYLENBQUEsQ0FBVDtBQUFBLGtCQUFBO1dBSkY7U0FERjs7QUFyREY7QUFxRkEsV0FBTztFQTdGQzs7OztHQUp1QixRQUFRLENBQUM7O0FBd0d0Qzs7Ozs7Ozs4QkFLSixZQUFBLEdBQWM7OzhCQUdkLFFBQUEsR0FDRTtJQUFBLEtBQUEsRUFBa0IsQ0FBbEI7SUFDQSxPQUFBLEVBQWtCLElBRGxCO0lBRUEsZUFBQSxFQUFrQixFQUZsQjtJQUdBLFdBQUEsRUFBa0IsRUFIbEI7Ozs4QkFNRixTQUFBLEdBQVc7SUFDUDtNQUFBLElBQUEsRUFBZ0IsUUFBUSxDQUFDLE9BQXpCO01BQ0EsR0FBQSxFQUFnQixhQURoQjtNQUVBLFlBQUEsRUFBZ0IsZUFGaEI7TUFHQSxjQUFBLEVBQWdCLG9CQUhoQjtLQURPOzs7OEJBUVgsSUFBQSxHQUFNLFNBQUE7V0FDSixRQUFRLENBQUMsS0FBSyxDQUFDLE9BQWYsQ0FBdUIsSUFBQyxDQUFBLFlBQXhCLENBQXFDLENBQUMsT0FBdEMsQ0FBOEMsTUFBOUMsRUFBc0QsSUFBdEQ7RUFESTs7OEJBSU4sT0FBQSxHQUFTLFNBQUE7V0FDUCxRQUFRLENBQUMsS0FBSyxDQUFDLE9BQWYsQ0FBdUIsSUFBQyxDQUFBLFlBQXhCLENBQXFDLENBQUMsT0FBdEMsQ0FBOEMsU0FBOUMsRUFBeUQsSUFBekQ7RUFETzs7OztHQTNCcUIsUUFBUSxDQUFDOztBQWtDekMsYUFBQSxHQUFnQixTQUFDLEdBQUQsRUFBTSxHQUFOO0FBQ2QsU0FBTyxHQUFHLENBQUMsT0FBSixDQUFZLEdBQVosQ0FBQSxHQUFtQixDQUFDO0FBRGI7O0FBTVY7Ozs7Ozs7bUNBSUosS0FBQSxHQUFPOzttQ0FJUCxhQUFBLEdBQWU7O21DQUdmLFVBQUEsR0FBWTs7bUNBSVosVUFBQSxHQUFZLFNBQUMsZ0JBQUQ7QUFHVixRQUFBO0lBQUEsS0FBQSxHQUFRO0lBQ1IsS0FBQSxHQUFRLEVBQUUsQ0FBQyxZQUFILENBQWdCLGdCQUFnQixDQUFDLE1BQWpDO0lBS1IsaUJBQUEsR0FBb0IsQ0FBQSxTQUFBLEtBQUE7YUFBQSxTQUFDLE1BQUQ7QUFHbEIsWUFBQTtRQUFBLEtBQUEsR0FBUSxLQUFBLEdBQVE7UUFDaEIsUUFBUSxDQUFDLEtBQUssQ0FBQyxPQUFmLENBQXVCLFNBQXZCLENBQWlDLENBQUMsT0FBbEMsQ0FBMEMsTUFBMUMsRUFBa0QsYUFBQSxHQUFhLENBQUMsRUFBRSxDQUFDLFlBQUgsQ0FBZ0IsS0FBaEIsQ0FBRCxDQUFiLEdBQXFDLE1BQXJDLEdBQTJDLEtBQTdGO1FBTUEsUUFBQSxHQUFXO0FBR1g7QUFBQSxhQUFBLHFDQUFBOztVQUdFLGVBQUEsR0FBa0IsSUFBSSxDQUFDLEdBQUwsQ0FBUyxpQkFBVDtVQUNsQixvQkFBQSxHQUF1QixJQUFJLENBQUMsR0FBTCxDQUFTLGFBQVQ7VUFHdkIsZ0JBQUEsR0FBbUIsb0JBQW9CLENBQUMsUUFBckIsQ0FBOEIsTUFBOUIsRUFBc0MsS0FBQyxDQUFBLGFBQXZDLEVBQXNELGVBQXREO1VBR25CLElBQW1CLGdCQUFuQjtZQUFBLFFBQUEsR0FBVyxLQUFYOztBQVZGO1FBaUJBLElBQXdCLFFBQXhCO0FBQUEsaUJBQU8sTUFBTSxDQUFDLElBQVAsQ0FBQSxFQUFQOztBQUdBLGVBQU8sSUFBSSxPQUFKLENBQVksU0FBQyxPQUFELEVBQVUsTUFBVjtpQkFBcUIsT0FBQSxDQUFRLElBQVI7UUFBckIsQ0FBWjtNQWpDVztJQUFBLENBQUEsQ0FBQSxDQUFBLElBQUE7QUFvQ3BCLFdBQU8sT0FBTyxDQUFDLElBQVIsQ0FBYSxnQkFBZ0IsQ0FBQyxNQUE5QixFQUFzQyxpQkFBdEM7RUE3Q0c7Ozs7R0FmdUIsUUFBUSxDQUFDOztBQWdFOUMsTUFBTSxDQUFDLE9BQVAsR0FDRTtFQUFBLEtBQUEsRUFBWSxpQkFBWjtFQUNBLFVBQUEsRUFBWSxzQkFEWiJ9

},{}],30:[function(require,module,exports){
var DexieFactory,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

DexieFactory = (function(superClass) {
  extend(DexieFactory, superClass);

  function DexieFactory() {
    return DexieFactory.__super__.constructor.apply(this, arguments);
  }

  DexieFactory.prototype.ensureDb = function(options) {
    this.db || (this.db = Backbone.Radio.channel('db').request('db'));
    return this.db;
  };

  DexieFactory.prototype.getCollection = function(dataset_id) {
    this.ensureDb();
    return new Promise((function(_this) {
      return function(resolve, reject) {
        return _this.db[_this.tableName].where('dataset_id').equals(dataset_id).toArray().then(function(models) {
          _this.cachedCollection.reset(models);
          return resolve(_this.cachedCollection);
        })["catch"](function(err) {
          return reject(err);
        });
      };
    })(this));
  };

  DexieFactory.prototype.getModel = function(id) {
    this.ensureDb();
    return new Promise((function(_this) {
      return function(resolve, reject) {
        if (!id) {
          return resolve(new _this.cachedCollection.model());
        }
        if (_this.cachedCollection.get(id)) {
          return resolve(_this.cachedCollection.get(id));
        }
        return _this.getCollection().then(function() {
          return resolve(_this.cachedCollection.get(id));
        });
      };
    })(this));
  };

  DexieFactory.prototype.saveModel = function(model) {
    this.ensureDb();
    return new Promise((function(_this) {
      return function(resolve, reject) {
        var item;
        model.trigger('request');
        item = model.toJSON();
        return _this.db[_this.tableName].put(item).then(function(model_id) {
          model.trigger('sync');
          return resolve();
        })["catch"](function(err) {
          model.trigger('error', err);
          return reject(err);
        });
      };
    })(this));
  };

  DexieFactory.prototype.destroyModel = function(model) {
    this.ensureDb();
    return new Promise((function(_this) {
      return function(resolve, reject) {
        var primary_key;
        model.trigger('request');
        primary_key = model.id;
        return _this.db[_this.tableName]["delete"](primary_key).then(function(model_id) {
          model.trigger('destroy');
          return resolve();
        })["catch"](function(err) {
          model.trigger('error', err);
          return reject(err);
        });
      };
    })(this));
  };

  return DexieFactory;

})(Marionette.Service);

module.exports = DexieFactory;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL2Fla3Njby9naXRodWIvbWFnZWxsYW4vYXBwL2NvZmZlZS9tb2R1bGVzL2Jhc2UvZGV4aWVGYWN0b3J5LmNvZmZlZSIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9hZWtzY28vZ2l0aHViL21hZ2VsbGFuL2FwcC9jb2ZmZWUvbW9kdWxlcy9iYXNlL2RleGllRmFjdG9yeS5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBSUEsSUFBQSxZQUFBO0VBQUE7OztBQUFNOzs7Ozs7O3lCQUlKLFFBQUEsR0FBVSxTQUFDLE9BQUQ7SUFDUixJQUFDLENBQUEsT0FBRCxJQUFDLENBQUEsS0FBTyxRQUFRLENBQUMsS0FBSyxDQUFDLE9BQWYsQ0FBdUIsSUFBdkIsQ0FBNEIsQ0FBQyxPQUE3QixDQUFxQyxJQUFyQztBQUNSLFdBQU8sSUFBQyxDQUFBO0VBRkE7O3lCQU1WLGFBQUEsR0FBZSxTQUFDLFVBQUQ7SUFHYixJQUFDLENBQUEsUUFBRCxDQUFBO0FBR0EsV0FBTyxJQUFJLE9BQUosQ0FBWSxDQUFBLFNBQUEsS0FBQTthQUFBLFNBQUMsT0FBRCxFQUFVLE1BQVY7ZUFHakIsS0FBQyxDQUFBLEVBQUcsQ0FBQSxLQUFDLENBQUEsU0FBRCxDQUFXLENBQUMsS0FBaEIsQ0FBc0IsWUFBdEIsQ0FBbUMsQ0FBQyxNQUFwQyxDQUEyQyxVQUEzQyxDQUFzRCxDQUFDLE9BQXZELENBQUEsQ0FHQSxDQUFDLElBSEQsQ0FHTSxTQUFDLE1BQUQ7VUFHSixLQUFDLENBQUEsZ0JBQWdCLENBQUMsS0FBbEIsQ0FBd0IsTUFBeEI7QUFHQSxpQkFBTyxPQUFBLENBQVEsS0FBQyxDQUFBLGdCQUFUO1FBTkgsQ0FITixDQVlBLEVBQUMsS0FBRCxFQVpBLENBWU8sU0FBQyxHQUFEO0FBQVMsaUJBQU8sTUFBQSxDQUFPLEdBQVA7UUFBaEIsQ0FaUDtNQUhpQjtJQUFBLENBQUEsQ0FBQSxDQUFBLElBQUEsQ0FBWjtFQU5NOzt5QkF5QmYsUUFBQSxHQUFVLFNBQUMsRUFBRDtJQUdSLElBQUMsQ0FBQSxRQUFELENBQUE7QUFHQSxXQUFPLElBQUksT0FBSixDQUFZLENBQUEsU0FBQSxLQUFBO2FBQUEsU0FBQyxPQUFELEVBQVUsTUFBVjtRQUdqQixJQUFBLENBQXFELEVBQXJEO0FBQUEsaUJBQU8sT0FBQSxDQUFRLElBQUksS0FBQyxDQUFBLGdCQUFnQixDQUFDLEtBQXRCLENBQUEsQ0FBUixFQUFQOztRQUdBLElBQTZDLEtBQUMsQ0FBQSxnQkFBZ0IsQ0FBQyxHQUFsQixDQUFzQixFQUF0QixDQUE3QztBQUFBLGlCQUFPLE9BQUEsQ0FBUSxLQUFDLENBQUEsZ0JBQWdCLENBQUMsR0FBbEIsQ0FBc0IsRUFBdEIsQ0FBUixFQUFQOztBQUdBLGVBQU8sS0FBQyxDQUFBLGFBQUQsQ0FBQSxDQUFnQixDQUFDLElBQWpCLENBQXNCLFNBQUE7aUJBQU0sT0FBQSxDQUFRLEtBQUMsQ0FBQSxnQkFBZ0IsQ0FBQyxHQUFsQixDQUFzQixFQUF0QixDQUFSO1FBQU4sQ0FBdEI7TUFUVTtJQUFBLENBQUEsQ0FBQSxDQUFBLElBQUEsQ0FBWjtFQU5DOzt5QkFtQlYsU0FBQSxHQUFXLFNBQUMsS0FBRDtJQUdULElBQUMsQ0FBQSxRQUFELENBQUE7QUFHQSxXQUFPLElBQUksT0FBSixDQUFZLENBQUEsU0FBQSxLQUFBO2FBQUEsU0FBQyxPQUFELEVBQVUsTUFBVjtBQUdqQixZQUFBO1FBQUEsS0FBSyxDQUFDLE9BQU4sQ0FBYyxTQUFkO1FBR0EsSUFBQSxHQUFPLEtBQUssQ0FBQyxNQUFOLENBQUE7ZUFHUCxLQUFDLENBQUEsRUFBRyxDQUFBLEtBQUMsQ0FBQSxTQUFELENBQVcsQ0FBQyxHQUFoQixDQUFvQixJQUFwQixDQUNBLENBQUMsSUFERCxDQUNNLFNBQUMsUUFBRDtVQUNKLEtBQUssQ0FBQyxPQUFOLENBQWMsTUFBZDtBQUNBLGlCQUFPLE9BQUEsQ0FBQTtRQUZILENBRE4sQ0FNQSxFQUFDLEtBQUQsRUFOQSxDQU1PLFNBQUMsR0FBRDtVQUNMLEtBQUssQ0FBQyxPQUFOLENBQWMsT0FBZCxFQUF1QixHQUF2QjtBQUNBLGlCQUFPLE1BQUEsQ0FBTyxHQUFQO1FBRkYsQ0FOUDtNQVRpQjtJQUFBLENBQUEsQ0FBQSxDQUFBLElBQUEsQ0FBWjtFQU5FOzt5QkEyQlgsWUFBQSxHQUFjLFNBQUMsS0FBRDtJQUdaLElBQUMsQ0FBQSxRQUFELENBQUE7QUFHQSxXQUFPLElBQUksT0FBSixDQUFZLENBQUEsU0FBQSxLQUFBO2FBQUEsU0FBQyxPQUFELEVBQVUsTUFBVjtBQUdqQixZQUFBO1FBQUEsS0FBSyxDQUFDLE9BQU4sQ0FBYyxTQUFkO1FBR0EsV0FBQSxHQUFjLEtBQUssQ0FBQztlQUdwQixLQUFDLENBQUEsRUFBRyxDQUFBLEtBQUMsQ0FBQSxTQUFELENBQVcsRUFBQyxNQUFELEVBQWYsQ0FBdUIsV0FBdkIsQ0FDQSxDQUFDLElBREQsQ0FDTSxTQUFDLFFBQUQ7VUFDSixLQUFLLENBQUMsT0FBTixDQUFjLFNBQWQ7QUFDQSxpQkFBTyxPQUFBLENBQUE7UUFGSCxDQUROLENBTUEsRUFBQyxLQUFELEVBTkEsQ0FNTyxTQUFDLEdBQUQ7VUFDTCxLQUFLLENBQUMsT0FBTixDQUFjLE9BQWQsRUFBdUIsR0FBdkI7QUFDQSxpQkFBTyxNQUFBLENBQU8sR0FBUDtRQUZGLENBTlA7TUFUaUI7SUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLENBQVo7RUFOSzs7OztHQWpGVyxVQUFVLENBQUM7O0FBNEd0QyxNQUFNLENBQUMsT0FBUCxHQUFpQiJ9

},{}],31:[function(require,module,exports){
var DatapointCollection, DatapointModel,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

DatapointModel = (function(superClass) {
  extend(DatapointModel, superClass);

  function DatapointModel() {
    return DatapointModel.__super__.constructor.apply(this, arguments);
  }

  DatapointModel.prototype.urlRoot = 'datapoints';

  DatapointModel.prototype.save = function() {
    return Backbone.Radio.channel('datapoint').request('save', this);
  };

  return DatapointModel;

})(Backbone.Model);

DatapointCollection = (function(superClass) {
  extend(DatapointCollection, superClass);

  function DatapointCollection() {
    return DatapointCollection.__super__.constructor.apply(this, arguments);
  }

  DatapointCollection.prototype.model = DatapointModel;

  DatapointCollection.prototype.resetTargetObject = function(target_object) {
    var count, index, resetDatapoint;
    index = 0;
    count = _s.numberFormat(this.length);
    resetDatapoint = function(dp) {
      var raw;
      index = index + 1;
      Backbone.Radio.channel('loading').trigger('show', "Processing " + (_s.numberFormat(index)) + " of " + count);
      if (target_object === 'data') {
        raw = JSON.parse(JSON.stringify(dp.get('raw')));
        dp.set('data', raw);
      }
      if (target_object === 'views') {
        dp.set('views', {});
      }
      return dp.save();
    };
    return Promise.each(this.models, resetDatapoint);
  };

  return DatapointCollection;

})(Backbone.Collection);

module.exports = {
  Model: DatapointModel,
  Collection: DatapointCollection
};

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL2Fla3Njby9naXRodWIvbWFnZWxsYW4vYXBwL2NvZmZlZS9tb2R1bGVzL2RhdGFwb2ludC9lbnRpdGllcy5jb2ZmZWUiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIvVXNlcnMvYWVrc2NvL2dpdGh1Yi9tYWdlbGxhbi9hcHAvY29mZmVlL21vZHVsZXMvZGF0YXBvaW50L2VudGl0aWVzLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxJQUFBLG1DQUFBO0VBQUE7OztBQUFNOzs7Ozs7OzJCQUNKLE9BQUEsR0FBUzs7MkJBSVQsSUFBQSxHQUFNLFNBQUE7V0FDSixRQUFRLENBQUMsS0FBSyxDQUFDLE9BQWYsQ0FBdUIsV0FBdkIsQ0FBbUMsQ0FBQyxPQUFwQyxDQUE0QyxNQUE1QyxFQUFvRCxJQUFwRDtFQURJOzs7O0dBTHFCLFFBQVEsQ0FBQzs7QUFVaEM7Ozs7Ozs7Z0NBQ0osS0FBQSxHQUFPOztnQ0FJUCxpQkFBQSxHQUFtQixTQUFDLGFBQUQ7QUFHakIsUUFBQTtJQUFBLEtBQUEsR0FBUTtJQUNSLEtBQUEsR0FBUSxFQUFFLENBQUMsWUFBSCxDQUFnQixJQUFDLENBQUEsTUFBakI7SUFHUixjQUFBLEdBQWlCLFNBQUMsRUFBRDtBQUdmLFVBQUE7TUFBQSxLQUFBLEdBQVEsS0FBQSxHQUFRO01BQ2hCLFFBQVEsQ0FBQyxLQUFLLENBQUMsT0FBZixDQUF1QixTQUF2QixDQUFpQyxDQUFDLE9BQWxDLENBQTBDLE1BQTFDLEVBQWtELGFBQUEsR0FBYSxDQUFDLEVBQUUsQ0FBQyxZQUFILENBQWdCLEtBQWhCLENBQUQsQ0FBYixHQUFxQyxNQUFyQyxHQUEyQyxLQUE3RjtNQUlBLElBQUcsYUFBQSxLQUFpQixNQUFwQjtRQUNFLEdBQUEsR0FBTSxJQUFJLENBQUMsS0FBTCxDQUFXLElBQUksQ0FBQyxTQUFMLENBQWUsRUFBRSxDQUFDLEdBQUgsQ0FBTyxLQUFQLENBQWYsQ0FBWDtRQUNOLEVBQUUsQ0FBQyxHQUFILENBQU8sTUFBUCxFQUFlLEdBQWYsRUFGRjs7TUFLQSxJQUFHLGFBQUEsS0FBaUIsT0FBcEI7UUFDRSxFQUFFLENBQUMsR0FBSCxDQUFPLE9BQVAsRUFBZ0IsRUFBaEIsRUFERjs7QUFHQSxhQUFPLEVBQUUsQ0FBQyxJQUFILENBQUE7SUFoQlE7QUFtQmpCLFdBQU8sT0FBTyxDQUFDLElBQVIsQ0FBYSxJQUFDLENBQUEsTUFBZCxFQUFzQixjQUF0QjtFQTFCVTs7OztHQUxhLFFBQVEsQ0FBQzs7QUFtQzNDLE1BQU0sQ0FBQyxPQUFQLEdBQ0U7RUFBQSxLQUFBLEVBQVksY0FBWjtFQUNBLFVBQUEsRUFBWSxtQkFEWiJ9

},{}],32:[function(require,module,exports){
var DatapointFactory, DexieFactory, Entities,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Entities = require('./entities');

DexieFactory = require('../base/dexieFactory');

DatapointFactory = (function(superClass) {
  extend(DatapointFactory, superClass);

  function DatapointFactory() {
    return DatapointFactory.__super__.constructor.apply(this, arguments);
  }

  DatapointFactory.prototype.tableName = 'datapoints';

  DatapointFactory.prototype.radioRequests = {
    'datapoint collection': 'getCollection',
    'datapoint save': 'saveModel'
  };

  DatapointFactory.prototype.initialize = function() {
    return this.cachedCollection = new Entities.Collection();
  };

  return DatapointFactory;

})(DexieFactory);

module.exports = new DatapointFactory();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL2Fla3Njby9naXRodWIvbWFnZWxsYW4vYXBwL2NvZmZlZS9tb2R1bGVzL2RhdGFwb2ludC9mYWN0b3J5LmNvZmZlZSIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9hZWtzY28vZ2l0aHViL21hZ2VsbGFuL2FwcC9jb2ZmZWUvbW9kdWxlcy9kYXRhcG9pbnQvZmFjdG9yeS5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsSUFBQSx3Q0FBQTtFQUFBOzs7QUFBQSxRQUFBLEdBQWdCLE9BQUEsQ0FBUSxZQUFSOztBQUNoQixZQUFBLEdBQWdCLE9BQUEsQ0FBUSxzQkFBUjs7QUFJVjs7Ozs7Ozs2QkFHSixTQUFBLEdBQVc7OzZCQUdYLGFBQUEsR0FDRTtJQUFBLHNCQUFBLEVBQXdCLGVBQXhCO0lBQ0EsZ0JBQUEsRUFBd0IsV0FEeEI7Ozs2QkFHRixVQUFBLEdBQVksU0FBQTtXQUNWLElBQUMsQ0FBQSxnQkFBRCxHQUFvQixJQUFJLFFBQVEsQ0FBQyxVQUFiLENBQUE7RUFEVjs7OztHQVZpQjs7QUFlL0IsTUFBTSxDQUFDLE9BQVAsR0FBaUIsSUFBSSxnQkFBSixDQUFBIn0=

},{"../base/dexieFactory":30,"./entities":31}],33:[function(require,module,exports){
var FacetForm,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

FacetForm = (function(superClass) {
  extend(FacetForm, superClass);

  function FacetForm() {
    return FacetForm.__super__.constructor.apply(this, arguments);
  }

  FacetForm.prototype.className = 'card card-block';

  FacetForm.prototype.template = require('./templates/facet_form');

  FacetForm.prototype.behaviors = {
    CancelButton: {},
    ModelEvents: {},
    SubmitButton: {},
    Flashes: {
      success: {
        message: 'Successfully updated Facet.'
      },
      error: {
        message: 'Error updating Facet.'
      }
    }
  };

  FacetForm.prototype.ui = {
    checkbox: 'input[type=checkbox]',
    edit: '[data-click=edit]'
  };

  FacetForm.prototype.onRender = function() {
    Backbone.Syphon.deserialize(this, this.model.attributes);
    return this.ui.checkbox.bootstrapSwitch({
      wrapperClass: 'enable-facet',
      onText: 'Enabled',
      offText: 'Disabled'
    });
  };

  FacetForm.prototype.onCancel = function() {
    return this.trigger('cancel', this);
  };

  FacetForm.prototype.onSubmit = function() {
    var data;
    data = Backbone.Syphon.serialize(this);
    this.model.set(data);
    return this.model.save();
  };

  FacetForm.prototype.onRequest = function() {
    this.disableSubmit();
    return this.disableCancel();
  };

  FacetForm.prototype.onSync = function() {
    this.flashSuccess();
    return this.trigger('sync', this);
  };

  FacetForm.prototype.onError = function() {
    this.flashError();
    return this.trigger('sync', this);
  };

  return FacetForm;

})(Mn.LayoutView);

module.exports = FacetForm;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL2Fla3Njby9naXRodWIvbWFnZWxsYW4vYXBwL2NvZmZlZS9tb2R1bGVzL2RhdGFzZXQvY29uZmlnL2ZhY2V0X3ZpZXdzL2ZhY2V0Rm9ybS5jb2ZmZWUiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIvVXNlcnMvYWVrc2NvL2dpdGh1Yi9tYWdlbGxhbi9hcHAvY29mZmVlL21vZHVsZXMvZGF0YXNldC9jb25maWcvZmFjZXRfdmlld3MvZmFjZXRGb3JtLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxJQUFBLFNBQUE7RUFBQTs7O0FBQU07Ozs7Ozs7c0JBQ0osU0FBQSxHQUFXOztzQkFDWCxRQUFBLEdBQVUsT0FBQSxDQUFRLHdCQUFSOztzQkFFVixTQUFBLEdBQ0U7SUFBQSxZQUFBLEVBQWMsRUFBZDtJQUNBLFdBQUEsRUFBYSxFQURiO0lBRUEsWUFBQSxFQUFjLEVBRmQ7SUFHQSxPQUFBLEVBQ0U7TUFBQSxPQUFBLEVBQ0U7UUFBQSxPQUFBLEVBQVUsNkJBQVY7T0FERjtNQUVBLEtBQUEsRUFDRTtRQUFBLE9BQUEsRUFBVSx1QkFBVjtPQUhGO0tBSkY7OztzQkFTRixFQUFBLEdBQ0U7SUFBQSxRQUFBLEVBQVUsc0JBQVY7SUFDQSxJQUFBLEVBQVUsbUJBRFY7OztzQkFHRixRQUFBLEdBQVUsU0FBQTtJQUNSLFFBQVEsQ0FBQyxNQUFNLENBQUMsV0FBaEIsQ0FBNkIsSUFBN0IsRUFBZ0MsSUFBQyxDQUFBLEtBQUssQ0FBQyxVQUF2QztXQUNBLElBQUMsQ0FBQSxFQUFFLENBQUMsUUFBUSxDQUFDLGVBQWIsQ0FBNkI7TUFBRSxZQUFBLEVBQWMsY0FBaEI7TUFBZ0MsTUFBQSxFQUFRLFNBQXhDO01BQW1ELE9BQUEsRUFBUyxVQUE1RDtLQUE3QjtFQUZROztzQkFJVixRQUFBLEdBQVUsU0FBQTtXQUNSLElBQUMsQ0FBQSxPQUFELENBQVMsUUFBVCxFQUFtQixJQUFuQjtFQURROztzQkFHVixRQUFBLEdBQVUsU0FBQTtBQUNSLFFBQUE7SUFBQSxJQUFBLEdBQU8sUUFBUSxDQUFDLE1BQU0sQ0FBQyxTQUFoQixDQUEwQixJQUExQjtJQUNQLElBQUMsQ0FBQSxLQUFLLENBQUMsR0FBUCxDQUFXLElBQVg7V0FDQSxJQUFDLENBQUEsS0FBSyxDQUFDLElBQVAsQ0FBQTtFQUhROztzQkFLVixTQUFBLEdBQVcsU0FBQTtJQUNULElBQUMsQ0FBQSxhQUFELENBQUE7V0FDQSxJQUFDLENBQUEsYUFBRCxDQUFBO0VBRlM7O3NCQUlYLE1BQUEsR0FBUSxTQUFBO0lBQ04sSUFBQyxDQUFBLFlBQUQsQ0FBQTtXQUNBLElBQUMsQ0FBQSxPQUFELENBQVMsTUFBVCxFQUFpQixJQUFqQjtFQUZNOztzQkFJUixPQUFBLEdBQVMsU0FBQTtJQUNQLElBQUMsQ0FBQSxVQUFELENBQUE7V0FDQSxJQUFDLENBQUEsT0FBRCxDQUFTLE1BQVQsRUFBaUIsSUFBakI7RUFGTzs7OztHQXRDYSxFQUFFLENBQUM7O0FBNEMzQixNQUFNLENBQUMsT0FBUCxHQUFpQiJ9

},{"./templates/facet_form":38}],34:[function(require,module,exports){
var FacetChild, FacetList,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

FacetChild = (function(superClass) {
  extend(FacetChild, superClass);

  function FacetChild() {
    return FacetChild.__super__.constructor.apply(this, arguments);
  }

  FacetChild.prototype.template = require('./templates/facet_child');

  FacetChild.prototype.className = function() {
    var css;
    css = ['list-group-item'];
    if (this.model.get('enabled')) {
      css.push('list-group-item-success');
    }
    if (!this.model.get('enabled')) {
      css.push('list-group-item-warning');
    }
    return css.join(' ');
  };

  FacetChild.prototype.behaviors = {
    SelectableChild: {},
    SortableChild: {}
  };

  FacetChild.prototype.modelEvents = {
    'change:order': 'onReordered',
    'sync': 'onSync'
  };

  FacetChild.prototype.onSync = function() {
    var css;
    css = this.className();
    return this.$el.removeClass().addClass(css);
  };

  FacetChild.prototype.onReordered = function() {
    return this.model.save();
  };

  return FacetChild;

})(Mn.LayoutView);

FacetList = (function(superClass) {
  extend(FacetList, superClass);

  function FacetList() {
    return FacetList.__super__.constructor.apply(this, arguments);
  }

  FacetList.prototype.className = 'list-group';

  FacetList.prototype.childView = FacetChild;

  FacetList.prototype.behaviors = {
    SortableList: {}
  };

  return FacetList;

})(Mn.CollectionView);

module.exports = FacetList;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL2Fla3Njby9naXRodWIvbWFnZWxsYW4vYXBwL2NvZmZlZS9tb2R1bGVzL2RhdGFzZXQvY29uZmlnL2ZhY2V0X3ZpZXdzL2ZhY2V0TGlzdC5jb2ZmZWUiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIvVXNlcnMvYWVrc2NvL2dpdGh1Yi9tYWdlbGxhbi9hcHAvY29mZmVlL21vZHVsZXMvZGF0YXNldC9jb25maWcvZmFjZXRfdmlld3MvZmFjZXRMaXN0LmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxJQUFBLHFCQUFBO0VBQUE7OztBQUFNOzs7Ozs7O3VCQUNKLFFBQUEsR0FBVSxPQUFBLENBQVEseUJBQVI7O3VCQUVWLFNBQUEsR0FBVyxTQUFBO0FBQ1QsUUFBQTtJQUFBLEdBQUEsR0FBTSxDQUFDLGlCQUFEO0lBQ04sSUFBdUMsSUFBQyxDQUFBLEtBQUssQ0FBQyxHQUFQLENBQVcsU0FBWCxDQUF2QztNQUFBLEdBQUcsQ0FBQyxJQUFKLENBQVMseUJBQVQsRUFBQTs7SUFDQSxJQUF1QyxDQUFJLElBQUMsQ0FBQSxLQUFLLENBQUMsR0FBUCxDQUFXLFNBQVgsQ0FBM0M7TUFBQSxHQUFHLENBQUMsSUFBSixDQUFTLHlCQUFULEVBQUE7O0FBQ0EsV0FBTyxHQUFHLENBQUMsSUFBSixDQUFTLEdBQVQ7RUFKRTs7dUJBTVgsU0FBQSxHQUNFO0lBQUEsZUFBQSxFQUFpQixFQUFqQjtJQUNBLGFBQUEsRUFBZSxFQURmOzs7dUJBR0YsV0FBQSxHQUNFO0lBQUEsY0FBQSxFQUFnQixhQUFoQjtJQUNBLE1BQUEsRUFBZ0IsUUFEaEI7Ozt1QkFHRixNQUFBLEdBQVEsU0FBQTtBQUNOLFFBQUE7SUFBQSxHQUFBLEdBQU0sSUFBQyxDQUFBLFNBQUQsQ0FBQTtXQUVOLElBQUMsQ0FBQSxHQUFHLENBQUMsV0FBTCxDQUFBLENBQWtCLENBQUMsUUFBbkIsQ0FBNEIsR0FBNUI7RUFITTs7dUJBS1IsV0FBQSxHQUFhLFNBQUE7V0FDWCxJQUFDLENBQUEsS0FBSyxDQUFDLElBQVAsQ0FBQTtFQURXOzs7O0dBdEJVLEVBQUUsQ0FBQzs7QUEyQnRCOzs7Ozs7O3NCQUNKLFNBQUEsR0FBVzs7c0JBQ1gsU0FBQSxHQUFXOztzQkFFWCxTQUFBLEdBQ0U7SUFBQSxZQUFBLEVBQWMsRUFBZDs7Ozs7R0FMb0IsRUFBRSxDQUFDOztBQVMzQixNQUFNLENBQUMsT0FBUCxHQUFpQiJ9

},{"./templates/facet_child":37}],35:[function(require,module,exports){
var FacetViewer,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

FacetViewer = (function(superClass) {
  extend(FacetViewer, superClass);

  function FacetViewer() {
    return FacetViewer.__super__.constructor.apply(this, arguments);
  }

  FacetViewer.prototype.template = require('./templates/facet_viewer');

  FacetViewer.prototype.className = 'card card-block';

  FacetViewer.prototype.ui = {
    edit: '[data-click=edit]',
    link: '[data-click=link]'
  };

  FacetViewer.prototype.triggers = {
    'click @ui.edit': 'edit'
  };

  FacetViewer.prototype.events = {
    'click @ui.link': 'linkToOntology'
  };

  FacetViewer.prototype.linkToOntology = function() {
    return this.model.linkToOntology().then((function(_this) {
      return function() {
        return _this.render();
      };
    })(this));
  };

  return FacetViewer;

})(Mn.LayoutView);

module.exports = FacetViewer;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL2Fla3Njby9naXRodWIvbWFnZWxsYW4vYXBwL2NvZmZlZS9tb2R1bGVzL2RhdGFzZXQvY29uZmlnL2ZhY2V0X3ZpZXdzL2ZhY2V0Vmlld2VyLmNvZmZlZSIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9hZWtzY28vZ2l0aHViL21hZ2VsbGFuL2FwcC9jb2ZmZWUvbW9kdWxlcy9kYXRhc2V0L2NvbmZpZy9mYWNldF92aWV3cy9mYWNldFZpZXdlci5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsSUFBQSxXQUFBO0VBQUE7OztBQUFNOzs7Ozs7O3dCQUNKLFFBQUEsR0FBVSxPQUFBLENBQVEsMEJBQVI7O3dCQUNWLFNBQUEsR0FBVzs7d0JBRVgsRUFBQSxHQUNFO0lBQUEsSUFBQSxFQUFNLG1CQUFOO0lBQ0EsSUFBQSxFQUFNLG1CQUROOzs7d0JBR0YsUUFBQSxHQUNFO0lBQUEsZ0JBQUEsRUFBa0IsTUFBbEI7Ozt3QkFFRixNQUFBLEdBQ0U7SUFBQSxnQkFBQSxFQUFrQixnQkFBbEI7Ozt3QkFFRixjQUFBLEdBQWdCLFNBQUE7V0FDZCxJQUFDLENBQUEsS0FBSyxDQUFDLGNBQVAsQ0FBQSxDQUF1QixDQUFDLElBQXhCLENBQTZCLENBQUEsU0FBQSxLQUFBO2FBQUEsU0FBQTtlQUFNLEtBQUMsQ0FBQSxNQUFELENBQUE7TUFBTjtJQUFBLENBQUEsQ0FBQSxDQUFBLElBQUEsQ0FBN0I7RUFEYzs7OztHQWRRLEVBQUUsQ0FBQzs7QUFtQjdCLE1BQU0sQ0FBQyxPQUFQLEdBQWlCIn0=

},{"./templates/facet_viewer":40}],36:[function(require,module,exports){
var FacetForm, FacetList, FacetListLayout, FacetViewer,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

FacetList = require('./facetList');

FacetViewer = require('./facetViewer');

FacetForm = require('./facetForm');

FacetListLayout = (function(superClass) {
  extend(FacetListLayout, superClass);

  function FacetListLayout() {
    this.showFacetEditor = bind(this.showFacetEditor, this);
    this.showFacetViewer = bind(this.showFacetViewer, this);
    return FacetListLayout.__super__.constructor.apply(this, arguments);
  }

  FacetListLayout.prototype.className = 'row';

  FacetListLayout.prototype.template = require('./templates/facet_list_layout');

  FacetListLayout.prototype.behaviors = {
    Flashes: {
      success: {
        message: 'Successfully linked all facets.'
      }
    }
  };

  FacetListLayout.prototype.ui = {
    linkFacets: '[data-click=link-facets]'
  };

  FacetListLayout.prototype.events = {
    'click @ui.linkFacets': 'linkFacets'
  };

  FacetListLayout.prototype.regions = {
    listRegion: '[data-region=list]',
    viewerRegion: '[data-region=viewer]'
  };

  FacetListLayout.prototype.onRender = function() {
    var listView, ref;
    listView = new FacetList({
      collection: this.collection
    });
    listView.on('childview:selected', (function(_this) {
      return function(view) {
        return _this.showFacetViewer(view.model);
      };
    })(this));
    this.listRegion.show(listView);
    return (ref = this.collection.at(0)) != null ? ref.trigger('selected') : void 0;
  };

  FacetListLayout.prototype.linkFacets = function() {
    return this.collection.linkAllFacets().then((function(_this) {
      return function() {
        _this.flashSuccess();
        return _this.render();
      };
    })(this));
  };

  FacetListLayout.prototype.showFacetViewer = function(facetModel) {
    var facetViewer;
    facetViewer = new FacetViewer({
      model: facetModel
    });
    facetViewer.on('edit', (function(_this) {
      return function(view) {
        return _this.showFacetEditor(view.model);
      };
    })(this));
    return this.viewerRegion.show(facetViewer);
  };

  FacetListLayout.prototype.showFacetEditor = function(facetModel) {
    var facetForm;
    facetForm = new FacetForm({
      model: facetModel
    });
    facetForm.on('cancel', (function(_this) {
      return function(view) {
        return _this.showFacetViewer(view.model);
      };
    })(this));
    facetForm.on('sync', (function(_this) {
      return function(view) {
        return _this.showFacetViewer(view.model);
      };
    })(this));
    return this.viewerRegion.show(facetForm);
  };

  return FacetListLayout;

})(Mn.LayoutView);

module.exports = FacetListLayout;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL2Fla3Njby9naXRodWIvbWFnZWxsYW4vYXBwL2NvZmZlZS9tb2R1bGVzL2RhdGFzZXQvY29uZmlnL2ZhY2V0X3ZpZXdzL2xheW91dC5jb2ZmZWUiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIvVXNlcnMvYWVrc2NvL2dpdGh1Yi9tYWdlbGxhbi9hcHAvY29mZmVlL21vZHVsZXMvZGF0YXNldC9jb25maWcvZmFjZXRfdmlld3MvbGF5b3V0LmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxJQUFBLGtEQUFBO0VBQUE7Ozs7QUFBQSxTQUFBLEdBQVksT0FBQSxDQUFRLGFBQVI7O0FBQ1osV0FBQSxHQUFjLE9BQUEsQ0FBUSxlQUFSOztBQUNkLFNBQUEsR0FBWSxPQUFBLENBQVEsYUFBUjs7QUFJTjs7Ozs7Ozs7OzRCQUNKLFNBQUEsR0FBVzs7NEJBQ1gsUUFBQSxHQUFVLE9BQUEsQ0FBUSwrQkFBUjs7NEJBRVYsU0FBQSxHQUNFO0lBQUEsT0FBQSxFQUNFO01BQUEsT0FBQSxFQUNFO1FBQUEsT0FBQSxFQUFVLGlDQUFWO09BREY7S0FERjs7OzRCQUlGLEVBQUEsR0FDRTtJQUFBLFVBQUEsRUFBWSwwQkFBWjs7OzRCQUVGLE1BQUEsR0FDRTtJQUFBLHNCQUFBLEVBQXdCLFlBQXhCOzs7NEJBRUYsT0FBQSxHQUNFO0lBQUEsVUFBQSxFQUFjLG9CQUFkO0lBQ0EsWUFBQSxFQUFjLHNCQURkOzs7NEJBR0YsUUFBQSxHQUFVLFNBQUE7QUFDUixRQUFBO0lBQUEsUUFBQSxHQUFXLElBQUksU0FBSixDQUFjO01BQUUsVUFBQSxFQUFZLElBQUMsQ0FBQSxVQUFmO0tBQWQ7SUFDWCxRQUFRLENBQUMsRUFBVCxDQUFZLG9CQUFaLEVBQWtDLENBQUEsU0FBQSxLQUFBO2FBQUEsU0FBQyxJQUFEO2VBQVUsS0FBQyxDQUFBLGVBQUQsQ0FBaUIsSUFBSSxDQUFDLEtBQXRCO01BQVY7SUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLENBQWxDO0lBQ0EsSUFBQyxDQUFBLFVBQVUsQ0FBQyxJQUFaLENBQWlCLFFBQWpCO3NEQUNpQixDQUFFLE9BQW5CLENBQTJCLFVBQTNCO0VBSlE7OzRCQU1WLFVBQUEsR0FBWSxTQUFBO1dBQ1YsSUFBQyxDQUFBLFVBQVUsQ0FBQyxhQUFaLENBQUEsQ0FBMkIsQ0FBQyxJQUE1QixDQUFpQyxDQUFBLFNBQUEsS0FBQTthQUFBLFNBQUE7UUFDL0IsS0FBQyxDQUFBLFlBQUQsQ0FBQTtlQUNBLEtBQUMsQ0FBQSxNQUFELENBQUE7TUFGK0I7SUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLENBQWpDO0VBRFU7OzRCQUtaLGVBQUEsR0FBaUIsU0FBQyxVQUFEO0FBR2YsUUFBQTtJQUFBLFdBQUEsR0FBYyxJQUFJLFdBQUosQ0FBZ0I7TUFBRSxLQUFBLEVBQU8sVUFBVDtLQUFoQjtJQUdkLFdBQVcsQ0FBQyxFQUFaLENBQWUsTUFBZixFQUF1QixDQUFBLFNBQUEsS0FBQTthQUFBLFNBQUMsSUFBRDtlQUFVLEtBQUMsQ0FBQSxlQUFELENBQWlCLElBQUksQ0FBQyxLQUF0QjtNQUFWO0lBQUEsQ0FBQSxDQUFBLENBQUEsSUFBQSxDQUF2QjtXQUdBLElBQUMsQ0FBQSxZQUFZLENBQUMsSUFBZCxDQUFtQixXQUFuQjtFQVRlOzs0QkFXakIsZUFBQSxHQUFpQixTQUFDLFVBQUQ7QUFHZixRQUFBO0lBQUEsU0FBQSxHQUFZLElBQUksU0FBSixDQUFjO01BQUUsS0FBQSxFQUFPLFVBQVQ7S0FBZDtJQUdaLFNBQVMsQ0FBQyxFQUFWLENBQWEsUUFBYixFQUF1QixDQUFBLFNBQUEsS0FBQTthQUFBLFNBQUMsSUFBRDtlQUFVLEtBQUMsQ0FBQSxlQUFELENBQWlCLElBQUksQ0FBQyxLQUF0QjtNQUFWO0lBQUEsQ0FBQSxDQUFBLENBQUEsSUFBQSxDQUF2QjtJQUdBLFNBQVMsQ0FBQyxFQUFWLENBQWEsTUFBYixFQUFxQixDQUFBLFNBQUEsS0FBQTthQUFBLFNBQUMsSUFBRDtlQUFVLEtBQUMsQ0FBQSxlQUFELENBQWlCLElBQUksQ0FBQyxLQUF0QjtNQUFWO0lBQUEsQ0FBQSxDQUFBLENBQUEsSUFBQSxDQUFyQjtXQUdBLElBQUMsQ0FBQSxZQUFZLENBQUMsSUFBZCxDQUFtQixTQUFuQjtFQVplOzs7O0dBekNXLEVBQUUsQ0FBQzs7QUF5RGpDLE1BQU0sQ0FBQyxPQUFQLEdBQWlCIn0=

},{"./facetForm":33,"./facetList":34,"./facetViewer":35,"./templates/facet_list_layout":39}],37:[function(require,module,exports){
var jade = require("jade/runtime");

module.exports = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (label) {
jade_mixins["formGroup"] = jade_interp = function(opts){
var block = (this && this.block), attributes = (this && this.attributes) || {};
buf.push("<fieldset" + (jade.cls(['form-group',opts.formGroupCss], [null,true])) + ">");
if ( opts.label)
{
buf.push("<label class=\"form-control-label\">" + (jade.escape(null == (jade_interp = opts.label) ? "" : jade_interp)) + "</label>");
}
block && block();
buf.push("</fieldset>");
};
buf.push("");








buf.push("");








buf.push("");


































buf.push("");




buf.push("");
jade_mixins["button"] = jade_interp = function(opts){
var block = (this && this.block), attributes = (this && this.attributes) || {};
buf.push("<button" + (jade.attrs(jade.merge([{"type": "button","class": "btn"},attributes]), false)) + ">");
if ( opts.icon)
{
buf.push("<i" + (jade.cls(['fa','fa-fw',opts.icon], [null,null,true])) + "></i>&nbsp;");
}
buf.push((jade.escape(null == (jade_interp = opts.text) ? "" : jade_interp)) + "</button>");
};
buf.push("");














buf.push("");














buf.push("<div class=\"row\"><div class=\"col-xs-2\"><i class=\"fa fa-fw fa-bars cursor-pointer sortable\"></i></div><div class=\"col-xs-10\">" + (jade.escape(null == (jade_interp = label) ? "" : jade_interp)) + "</div></div>");}.call(this,"label" in locals_for_with?locals_for_with.label:typeof label!=="undefined"?label:undefined));;return buf.join("");
};
},{"jade/runtime":187}],38:[function(require,module,exports){
var jade = require("jade/runtime");

module.exports = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (enabled) {
jade_mixins["formGroup"] = jade_interp = function(opts){
var block = (this && this.block), attributes = (this && this.attributes) || {};
buf.push("<fieldset" + (jade.cls(['form-group',opts.formGroupCss], [null,true])) + ">");
if ( opts.label)
{
buf.push("<label class=\"form-control-label\">" + (jade.escape(null == (jade_interp = opts.label) ? "" : jade_interp)) + "</label>");
}
block && block();
buf.push("</fieldset>");
};
buf.push("");
jade_mixins["formInput"] = jade_interp = function(opts){
var block = (this && this.block), attributes = (this && this.attributes) || {};
jade_mixins["formGroup"].call({
block: function(){
buf.push("<input" + (jade.attrs(jade.merge([{"placeholder": jade.escape(opts.placeholder),"name": jade.escape(opts.name),"type": jade.escape(opts.type),"value": jade.escape(opts.value),"class": "form-control"},attributes]), false)) + "/>");
}
}, opts);
};
buf.push("");
jade_mixins["formTextArea"] = jade_interp = function(opts){
var block = (this && this.block), attributes = (this && this.attributes) || {};
jade_mixins["formGroup"].call({
block: function(){
buf.push("<textarea" + (jade.attrs(jade.merge([{"placeholder": jade.escape(opts.placeholder),"name": jade.escape(opts.name),"type": jade.escape(opts.type),"rows": jade.escape(opts.rows),"cols": jade.escape(opts.cols),"class": "form-control"},attributes]), false)) + "></textarea>");
}
}, opts);
};
buf.push("");


































buf.push("");




buf.push("");
jade_mixins["button"] = jade_interp = function(opts){
var block = (this && this.block), attributes = (this && this.attributes) || {};
buf.push("<button" + (jade.attrs(jade.merge([{"type": "button","class": "btn"},attributes]), false)) + ">");
if ( opts.icon)
{
buf.push("<i" + (jade.cls(['fa','fa-fw',opts.icon], [null,null,true])) + "></i>&nbsp;");
}
buf.push((jade.escape(null == (jade_interp = opts.text) ? "" : jade_interp)) + "</button>");
};
buf.push("");
jade_mixins["submitButton"] = jade_interp = function(opts){
var block = (this && this.block), attributes = (this && this.attributes) || {};
if (!( opts.text))
{
opts.text = 'Submit'
}
if (!( opts.icon))
{
opts.icon = 'fa-check'
}
jade_mixins["button"].call({
attributes: jade.merge([{"data-click": "submit","class": "btn-success"},attributes])
}, opts);
};
buf.push("");
jade_mixins["cancelButton"] = jade_interp = function(opts){
var block = (this && this.block), attributes = (this && this.attributes) || {};
if (!( opts.text))
{
opts.text = 'Cancel'
}
if (!( opts.icon))
{
opts.icon = 'fa-times'
}
jade_mixins["button"].call({
attributes: jade.merge([{"data-click": "cancel","class": "btn-secondary"},attributes])
}, opts);
};
buf.push("<div class=\"row\"><div class=\"col-xs-12\"><h4 class=\"card-title\">Edit Facet</h4></div><div class=\"col-xs-12\"><hr/></div></div><div class=\"row\"><div class=\"col-xs-6\">");
jade_mixins["formInput"]({ label: 'Label', placeholder: 'Label', name: 'label', type: 'text' });
buf.push("</div><div class=\"col-xs-6\">");
jade_mixins["formInput"]({ label: 'Enabled', formGroupCss: 'm-b-0', name: 'enabled', type: 'checkbox', value: enabled });
buf.push("</div><div class=\"col-xs-12\">");
jade_mixins["formTextArea"]({ label: 'Tooltip', placeholder: 'Tooltip', name: 'tooltip', type: 'text' });
buf.push("</div></div><div class=\"row\"><div class=\"col-xs-12\"><hr/></div><div class=\"col-xs-12\">");
jade_mixins["cancelButton"]({});
jade_mixins["submitButton"]({});
buf.push("</div></div>");}.call(this,"enabled" in locals_for_with?locals_for_with.enabled:typeof enabled!=="undefined"?enabled:undefined));;return buf.join("");
};
},{"jade/runtime":187}],39:[function(require,module,exports){
var jade = require("jade/runtime");

module.exports = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;

buf.push("<div class=\"col-xs-12\"><div class=\"row\"><div class=\"col-xs-6\"><p class=\"lead m-b-0\">Facets</p></div><div class=\"col-xs-6 text-xs-right\"><button data-click=\"link-facets\" class=\"btn btn-sm btn-secondary\"><i class=\"fa fa-fw fa-link\"></i>&nbsp;\nLink Facets to Ontologies</button></div></div><div class=\"row\"><div class=\"col-xs-12\"><hr/></div></div><div class=\"row\"><div data-region=\"list\" class=\"col-xs-3\"></div><div data-region=\"viewer\" class=\"col-xs-9\"></div></div></div>");;return buf.join("");
};
},{"jade/runtime":187}],40:[function(require,module,exports){
var jade = require("jade/runtime");

module.exports = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (attribute, enabled, label, tooltip) {
buf.push("<div class=\"row\"><div class=\"col-xs-6\"><h4 class=\"card-title\">" + (jade.escape(null == (jade_interp = label) ? "" : jade_interp)) + "</h4></div><div class=\"col-xs-6 text-xs-right\"><button data-click=\"link\" class=\"btn btn-sm btn-secondary m-r-1\"><i class=\"fa fa-fw fa-link\"></i>&nbsp;\nLink to Ontology</button><button data-click=\"edit\" class=\"btn btn-sm btn-success-outline\"><i class=\"fa fa-fw fa-pencil\"></i>&nbsp;\nEdit</button></div><div class=\"col-xs-12\"><hr/></div></div><div class=\"row\"><div class=\"col-xs-12\"><div class=\"alert alert-info\"><i class=\"fa fa-fw fa-search\"></i>&nbsp;\nMatches the<strong> " + (jade.escape((jade_interp = attribute) == null ? '' : jade_interp)) + "</strong> attribute.</div></div><div class=\"col-xs-12\">");
if ( tooltip)
{
buf.push("<div class=\"alert alert-info\"><i class=\"fa fa-fw fa-question-circle-o\"></i>&nbsp;" + (jade.escape(null == (jade_interp = tooltip) ? "" : jade_interp)) + "</div>");
}
else
{
buf.push("<div class=\"alert alert-warning\"><i class=\"fa fa-fw fa-warning\"></i>&nbsp;\nNo tooltip defined for this facet.</div>");
}
buf.push("</div><div class=\"col-xs-12\">");
if ( enabled)
{
buf.push("<div class=\"alert alert-success\"><i class=\"fa fa-fw fa-check-circle-o\"></i>&nbsp;\nFacet is enabled.</div>");
}
else
{
buf.push("<div class=\"alert alert-warning\"><i class=\"fa fa-fw fa-warning\"></i>&nbsp;\nFacet is not enabled.</div>");
}
buf.push("</div></div>");}.call(this,"attribute" in locals_for_with?locals_for_with.attribute:typeof attribute!=="undefined"?attribute:undefined,"enabled" in locals_for_with?locals_for_with.enabled:typeof enabled!=="undefined"?enabled:undefined,"label" in locals_for_with?locals_for_with.label:typeof label!=="undefined"?label:undefined,"tooltip" in locals_for_with?locals_for_with.tooltip:typeof tooltip!=="undefined"?tooltip:undefined));;return buf.join("");
};
},{"jade/runtime":187}],41:[function(require,module,exports){
var ActionForm, ActionTypeForm,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

ActionTypeForm = (function(superClass) {
  extend(ActionTypeForm, superClass);

  function ActionTypeForm() {
    return ActionTypeForm.__super__.constructor.apply(this, arguments);
  }

  ActionTypeForm.prototype.className = 'row';

  ActionTypeForm.prototype.templateMap = {
    block: require('./templates/action_type_block'),
    replace: require('./templates/action_type_replace'),
    literal: require('./templates/action_type_literal'),
    clone: require('./templates/action_type_clone')
  };

  ActionTypeForm.prototype.initialize = function(options) {
    return this.model.set('action', this.options.actionType);
  };

  ActionTypeForm.prototype.templateHelpers = function() {
    return {
      sourceOptions: this.options.sourceOptions
    };
  };

  ActionTypeForm.prototype.getTemplate = function() {
    return this.templateMap[this.options.actionType];
  };

  ActionTypeForm.prototype.onRender = function() {
    return Backbone.Syphon.deserialize(this, this.model.attributes);
  };

  return ActionTypeForm;

})(Mn.LayoutView);

ActionForm = (function(superClass) {
  extend(ActionForm, superClass);

  function ActionForm() {
    return ActionForm.__super__.constructor.apply(this, arguments);
  }

  ActionForm.prototype.className = 'row';

  ActionForm.prototype.template = require('./templates/action_form');

  ActionForm.prototype.ui = {
    actionSelect: '[data-select=action]'
  };

  ActionForm.prototype.events = {
    'click @ui.actionSelect': 'actionSelected'
  };

  ActionForm.prototype.regions = {
    actionTypeRegion: '[data-region=action-type]'
  };

  ActionForm.prototype.availableActions = [
    {
      action: 'literal',
      icon: 'fa-quote-right',
      text: 'Literal',
      "default": true
    }, {
      action: 'block',
      icon: 'fa-hand-stop-o',
      text: 'Blocking'
    }, {
      action: 'replace',
      icon: 'fa-strikethrough',
      text: 'Replace'
    }, {
      action: 'clone',
      icon: 'fa-copy',
      text: 'Clone'
    }
  ];

  ActionForm.prototype.templateHelpers = function() {
    return {
      isNew: this.options.isNew,
      availableActions: this.availableActions
    };
  };

  ActionForm.prototype.onRender = function() {
    return this.renderDefaultTypeForm();
  };

  ActionForm.prototype.actionSelected = function(e) {
    var actionType, el;
    el = $(e.currentTarget);
    actionType = el.data('action');
    el.addClass('active').siblings('.btn').removeClass('active');
    el.blur();
    return this.showActionTypeForm(actionType);
  };

  ActionForm.prototype.showActionTypeForm = function(actionType) {
    return this.actionTypeRegion.show(new ActionTypeForm({
      model: this.model,
      actionType: actionType,
      sourceOptions: this.options.sourceOptions
    }));
  };

  ActionForm.prototype.renderDefaultTypeForm = function() {
    var defaultAction;
    if (this.options.isNew) {
      defaultAction = _.findWhere(this.availableActions, {
        "default": true
      });
      return this.showActionTypeForm(defaultAction.action);
    } else {
      return this.showActionTypeForm(this.model.get('action'));
    }
  };

  return ActionForm;

})(Mn.LayoutView);

module.exports = ActionForm;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL2Fla3Njby9naXRodWIvbWFnZWxsYW4vYXBwL2NvZmZlZS9tb2R1bGVzL2RhdGFzZXQvY29uZmlnL2tub3dsZWRnZV9ydWxlX3ZpZXdzL2FjdGlvbkZvcm0uY29mZmVlIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiL1VzZXJzL2Fla3Njby9naXRodWIvbWFnZWxsYW4vYXBwL2NvZmZlZS9tb2R1bGVzL2RhdGFzZXQvY29uZmlnL2tub3dsZWRnZV9ydWxlX3ZpZXdzL2FjdGlvbkZvcm0uY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLElBQUEsMEJBQUE7RUFBQTs7O0FBQU07Ozs7Ozs7MkJBQ0osU0FBQSxHQUFXOzsyQkFFWCxXQUFBLEdBQ0U7SUFBQSxLQUFBLEVBQVUsT0FBQSxDQUFRLCtCQUFSLENBQVY7SUFDQSxPQUFBLEVBQVUsT0FBQSxDQUFRLGlDQUFSLENBRFY7SUFFQSxPQUFBLEVBQVUsT0FBQSxDQUFRLGlDQUFSLENBRlY7SUFHQSxLQUFBLEVBQVUsT0FBQSxDQUFRLCtCQUFSLENBSFY7OzsyQkFLRixVQUFBLEdBQVksU0FBQyxPQUFEO1dBQ1YsSUFBQyxDQUFBLEtBQUssQ0FBQyxHQUFQLENBQVcsUUFBWCxFQUFxQixJQUFDLENBQUEsT0FBTyxDQUFDLFVBQTlCO0VBRFU7OzJCQUdaLGVBQUEsR0FBaUIsU0FBQTtBQUNmLFdBQU87TUFBRSxhQUFBLEVBQWUsSUFBQyxDQUFBLE9BQU8sQ0FBQyxhQUExQjs7RUFEUTs7MkJBR2pCLFdBQUEsR0FBYSxTQUFBO0FBQ1gsV0FBTyxJQUFDLENBQUEsV0FBWSxDQUFBLElBQUMsQ0FBQSxPQUFPLENBQUMsVUFBVDtFQURUOzsyQkFHYixRQUFBLEdBQVUsU0FBQTtXQUNSLFFBQVEsQ0FBQyxNQUFNLENBQUMsV0FBaEIsQ0FBNkIsSUFBN0IsRUFBZ0MsSUFBQyxDQUFBLEtBQUssQ0FBQyxVQUF2QztFQURROzs7O0dBbEJpQixFQUFFLENBQUM7O0FBdUIxQjs7Ozs7Ozt1QkFDSixTQUFBLEdBQVc7O3VCQUNYLFFBQUEsR0FBVSxPQUFBLENBQVEseUJBQVI7O3VCQUVWLEVBQUEsR0FDRTtJQUFBLFlBQUEsRUFBYyxzQkFBZDs7O3VCQUVGLE1BQUEsR0FDRTtJQUFBLHdCQUFBLEVBQTBCLGdCQUExQjs7O3VCQUVGLE9BQUEsR0FDRTtJQUFBLGdCQUFBLEVBQWtCLDJCQUFsQjs7O3VCQUVGLGdCQUFBLEdBQWtCO0lBQ2hCO01BQUUsTUFBQSxFQUFRLFNBQVY7TUFBc0IsSUFBQSxFQUFNLGdCQUE1QjtNQUFnRCxJQUFBLEVBQU0sU0FBdEQ7TUFBaUUsQ0FBQSxPQUFBLENBQUEsRUFBUyxJQUExRTtLQURnQixFQUVoQjtNQUFFLE1BQUEsRUFBUSxPQUFWO01BQXNCLElBQUEsRUFBTSxnQkFBNUI7TUFBZ0QsSUFBQSxFQUFNLFVBQXREO0tBRmdCLEVBR2hCO01BQUUsTUFBQSxFQUFRLFNBQVY7TUFBc0IsSUFBQSxFQUFNLGtCQUE1QjtNQUFnRCxJQUFBLEVBQU0sU0FBdEQ7S0FIZ0IsRUFJaEI7TUFBRSxNQUFBLEVBQVEsT0FBVjtNQUFzQixJQUFBLEVBQU0sU0FBNUI7TUFBZ0QsSUFBQSxFQUFNLE9BQXREO0tBSmdCOzs7dUJBV2xCLGVBQUEsR0FBaUIsU0FBQTtBQUNmLFdBQU87TUFBRSxLQUFBLEVBQU8sSUFBQyxDQUFBLE9BQU8sQ0FBQyxLQUFsQjtNQUF5QixnQkFBQSxFQUFrQixJQUFDLENBQUEsZ0JBQTVDOztFQURROzt1QkFHakIsUUFBQSxHQUFVLFNBQUE7V0FDUixJQUFDLENBQUEscUJBQUQsQ0FBQTtFQURROzt1QkFHVixjQUFBLEdBQWdCLFNBQUMsQ0FBRDtBQUNkLFFBQUE7SUFBQSxFQUFBLEdBQUssQ0FBQSxDQUFFLENBQUMsQ0FBQyxhQUFKO0lBQ0wsVUFBQSxHQUFhLEVBQUUsQ0FBQyxJQUFILENBQVEsUUFBUjtJQUNiLEVBQUUsQ0FBQyxRQUFILENBQVksUUFBWixDQUFxQixDQUFDLFFBQXRCLENBQStCLE1BQS9CLENBQXNDLENBQUMsV0FBdkMsQ0FBbUQsUUFBbkQ7SUFDQSxFQUFFLENBQUMsSUFBSCxDQUFBO1dBQ0EsSUFBQyxDQUFBLGtCQUFELENBQW9CLFVBQXBCO0VBTGM7O3VCQU9oQixrQkFBQSxHQUFvQixTQUFDLFVBQUQ7V0FDbEIsSUFBQyxDQUFBLGdCQUFnQixDQUFDLElBQWxCLENBQXVCLElBQUksY0FBSixDQUFtQjtNQUFFLEtBQUEsRUFBTyxJQUFDLENBQUEsS0FBVjtNQUFpQixVQUFBLEVBQVksVUFBN0I7TUFBeUMsYUFBQSxFQUFlLElBQUMsQ0FBQSxPQUFPLENBQUMsYUFBakU7S0FBbkIsQ0FBdkI7RUFEa0I7O3VCQUlwQixxQkFBQSxHQUF1QixTQUFBO0FBR3JCLFFBQUE7SUFBQSxJQUFHLElBQUMsQ0FBQSxPQUFPLENBQUMsS0FBWjtNQUdFLGFBQUEsR0FBZ0IsQ0FBQyxDQUFDLFNBQUYsQ0FBWSxJQUFDLENBQUEsZ0JBQWIsRUFBK0I7UUFBRSxDQUFBLE9BQUEsQ0FBQSxFQUFTLElBQVg7T0FBL0I7YUFDaEIsSUFBQyxDQUFBLGtCQUFELENBQW9CLGFBQWEsQ0FBQyxNQUFsQyxFQUpGO0tBQUEsTUFBQTthQVFFLElBQUMsQ0FBQSxrQkFBRCxDQUFvQixJQUFDLENBQUEsS0FBSyxDQUFDLEdBQVAsQ0FBVyxRQUFYLENBQXBCLEVBUkY7O0VBSHFCOzs7O0dBekNBLEVBQUUsQ0FBQzs7QUF3RDVCLE1BQU0sQ0FBQyxPQUFQLEdBQWlCIn0=

},{"./templates/action_form":52,"./templates/action_type_block":53,"./templates/action_type_clone":54,"./templates/action_type_literal":55,"./templates/action_type_replace":56}],42:[function(require,module,exports){
var ApplyRulesView,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

ApplyRulesView = (function(superClass) {
  extend(ApplyRulesView, superClass);

  function ApplyRulesView() {
    return ApplyRulesView.__super__.constructor.apply(this, arguments);
  }

  ApplyRulesView.prototype.template = require('./templates/apply_rules');

  ApplyRulesView.prototype.className = 'card card-block';

  ApplyRulesView.prototype.behaviors = {
    CancelButton: {},
    Confirmations: {
      message: 'Are you sure you want to apply rules to this dataset?',
      confirmIcon: 'fa-check-circle-o',
      confirmText: 'Apply Rules',
      confirmCss: 'btn-success'
    },
    Flashes: {
      success: {
        message: 'Successfully applied rules to dataset.'
      }
    }
  };

  ApplyRulesView.prototype.ui = {
    confirmationTrigger: '[data-click=submit]'
  };

  ApplyRulesView.prototype.onCancel = function() {
    return this.trigger('cancel');
  };

  ApplyRulesView.prototype.onConfirmed = function() {
    this.disableCancel();
    return this.model.fetchDatapoints().then((function(_this) {
      return function(datapoints) {
        return _this.collection.applyRules(datapoints).then(function() {
          return _this.model.regenerateFacets().then(function() {
            Backbone.Radio.channel('loading').trigger('hide');
            _this.flashSuccess();
            return _this.trigger('success');
          });
        });
      };
    })(this));
  };

  return ApplyRulesView;

})(Mn.LayoutView);

module.exports = ApplyRulesView;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL2Fla3Njby9naXRodWIvbWFnZWxsYW4vYXBwL2NvZmZlZS9tb2R1bGVzL2RhdGFzZXQvY29uZmlnL2tub3dsZWRnZV9ydWxlX3ZpZXdzL2FwcGx5UnVsZXMuY29mZmVlIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiL1VzZXJzL2Fla3Njby9naXRodWIvbWFnZWxsYW4vYXBwL2NvZmZlZS9tb2R1bGVzL2RhdGFzZXQvY29uZmlnL2tub3dsZWRnZV9ydWxlX3ZpZXdzL2FwcGx5UnVsZXMuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLElBQUEsY0FBQTtFQUFBOzs7QUFBTTs7Ozs7OzsyQkFDSixRQUFBLEdBQVUsT0FBQSxDQUFRLHlCQUFSOzsyQkFDVixTQUFBLEdBQVc7OzJCQUVYLFNBQUEsR0FDRTtJQUFBLFlBQUEsRUFBYyxFQUFkO0lBR0EsYUFBQSxFQUNFO01BQUEsT0FBQSxFQUFjLHVEQUFkO01BQ0EsV0FBQSxFQUFjLG1CQURkO01BRUEsV0FBQSxFQUFjLGFBRmQ7TUFHQSxVQUFBLEVBQWMsYUFIZDtLQUpGO0lBU0EsT0FBQSxFQUNFO01BQUEsT0FBQSxFQUNFO1FBQUEsT0FBQSxFQUFVLHdDQUFWO09BREY7S0FWRjs7OzJCQWFGLEVBQUEsR0FDRTtJQUFBLG1CQUFBLEVBQXNCLHFCQUF0Qjs7OzJCQUVGLFFBQUEsR0FBVSxTQUFBO1dBQ1IsSUFBQyxDQUFBLE9BQUQsQ0FBUyxRQUFUO0VBRFE7OzJCQUdWLFdBQUEsR0FBYSxTQUFBO0lBRVgsSUFBQyxDQUFBLGFBQUQsQ0FBQTtXQUVBLElBQUMsQ0FBQSxLQUFLLENBQUMsZUFBUCxDQUFBLENBQXdCLENBQUMsSUFBekIsQ0FBOEIsQ0FBQSxTQUFBLEtBQUE7YUFBQSxTQUFDLFVBQUQ7ZUFFNUIsS0FBQyxDQUFBLFVBQVUsQ0FBQyxVQUFaLENBQXVCLFVBQXZCLENBQWtDLENBQUMsSUFBbkMsQ0FBd0MsU0FBQTtpQkFFdEMsS0FBQyxDQUFBLEtBQUssQ0FBQyxnQkFBUCxDQUFBLENBQXlCLENBQUMsSUFBMUIsQ0FBK0IsU0FBQTtZQUc3QixRQUFRLENBQUMsS0FBSyxDQUFDLE9BQWYsQ0FBdUIsU0FBdkIsQ0FBaUMsQ0FBQyxPQUFsQyxDQUEwQyxNQUExQztZQUdBLEtBQUMsQ0FBQSxZQUFELENBQUE7bUJBR0EsS0FBQyxDQUFBLE9BQUQsQ0FBUyxTQUFUO1VBVDZCLENBQS9CO1FBRnNDLENBQXhDO01BRjRCO0lBQUEsQ0FBQSxDQUFBLENBQUEsSUFBQSxDQUE5QjtFQUpXOzs7O0dBeEJjLEVBQUUsQ0FBQzs7QUE2Q2hDLE1BQU0sQ0FBQyxPQUFQLEdBQWlCIn0=

},{"./templates/apply_rules":57}],43:[function(require,module,exports){
var ConstraintForm,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

ConstraintForm = (function(superClass) {
  extend(ConstraintForm, superClass);

  function ConstraintForm() {
    return ConstraintForm.__super__.constructor.apply(this, arguments);
  }

  ConstraintForm.prototype.className = 'row';

  ConstraintForm.prototype.template = require('./templates/constraint_form');

  ConstraintForm.prototype.operationOptions = [['exact_match', 'Exact Match'], ['starts_with', 'Starts With'], ['ends_with', 'Ends With'], ['contains', 'Contains'], ['contains_case_sensitive', 'Contains (case sensitive)']];

  ConstraintForm.prototype.templateHelpers = function() {
    var helpers;
    return helpers = {
      sourceOptions: this.options.sourceOptions,
      operationOptions: this.operationOptions
    };
  };

  ConstraintForm.prototype.onRender = function() {
    return Backbone.Syphon.deserialize(this, this.model.attributes);
  };

  return ConstraintForm;

})(Mn.LayoutView);

module.exports = ConstraintForm;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL2Fla3Njby9naXRodWIvbWFnZWxsYW4vYXBwL2NvZmZlZS9tb2R1bGVzL2RhdGFzZXQvY29uZmlnL2tub3dsZWRnZV9ydWxlX3ZpZXdzL2NvbnN0cmFpbnRGb3JtLmNvZmZlZSIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9hZWtzY28vZ2l0aHViL21hZ2VsbGFuL2FwcC9jb2ZmZWUvbW9kdWxlcy9kYXRhc2V0L2NvbmZpZy9rbm93bGVkZ2VfcnVsZV92aWV3cy9jb25zdHJhaW50Rm9ybS5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsSUFBQSxjQUFBO0VBQUE7OztBQUFNOzs7Ozs7OzJCQUNKLFNBQUEsR0FBVzs7MkJBQ1gsUUFBQSxHQUFVLE9BQUEsQ0FBUSw2QkFBUjs7MkJBSVYsZ0JBQUEsR0FBa0IsQ0FDaEIsQ0FBQyxhQUFELEVBQTRCLGFBQTVCLENBRGdCLEVBRWhCLENBQUMsYUFBRCxFQUE0QixhQUE1QixDQUZnQixFQUdoQixDQUFDLFdBQUQsRUFBNEIsV0FBNUIsQ0FIZ0IsRUFJaEIsQ0FBQyxVQUFELEVBQTRCLFVBQTVCLENBSmdCLEVBS2hCLENBQUMseUJBQUQsRUFBNEIsMkJBQTVCLENBTGdCOzsyQkFRbEIsZUFBQSxHQUFpQixTQUFBO0FBQ2YsUUFBQTtBQUFBLFdBQU8sT0FBQSxHQUNMO01BQUEsYUFBQSxFQUFrQixJQUFDLENBQUEsT0FBTyxDQUFDLGFBQTNCO01BQ0EsZ0JBQUEsRUFBa0IsSUFBQyxDQUFBLGdCQURuQjs7RUFGYTs7MkJBS2pCLFFBQUEsR0FBVSxTQUFBO1dBQ1IsUUFBUSxDQUFDLE1BQU0sQ0FBQyxXQUFoQixDQUE2QixJQUE3QixFQUFnQyxJQUFDLENBQUEsS0FBSyxDQUFDLFVBQXZDO0VBRFE7Ozs7R0FuQmlCLEVBQUUsQ0FBQzs7QUF3QmhDLE1BQU0sQ0FBQyxPQUFQLEdBQWlCIn0=

},{"./templates/constraint_form":58}],44:[function(require,module,exports){
var ActionForm, ConstraintForm, DefinitionForm,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

ConstraintForm = require('./constraintForm');

ActionForm = require('./actionForm');

DefinitionForm = (function(superClass) {
  extend(DefinitionForm, superClass);

  function DefinitionForm() {
    return DefinitionForm.__super__.constructor.apply(this, arguments);
  }

  DefinitionForm.prototype.className = 'row';

  DefinitionForm.prototype.template = require('./templates/definition_form');

  DefinitionForm.prototype.behaviors = {
    CancelButton: {},
    SubmitButton: {}
  };

  DefinitionForm.prototype.regions = {
    constraintRegion: '[data-region=constraint]',
    actionRegion: '[data-region=action]'
  };

  DefinitionForm.prototype.templateHelpers = function() {
    return {
      isNew: this.options.isNew
    };
  };

  DefinitionForm.prototype.onRender = function() {
    this.constraintRegion.show(new ConstraintForm({
      model: this.model,
      sourceOptions: this.options.sourceOptions
    }));
    return this.actionRegion.show(new ActionForm({
      model: this.model,
      isNew: this.options.isNew,
      sourceOptions: this.options.sourceOptions
    }));
  };

  DefinitionForm.prototype.onCancel = function(e) {
    e.stopPropagation();
    return this.trigger('cancel', this);
  };

  DefinitionForm.prototype.onSubmit = function(e) {
    var data;
    e.stopPropagation();
    data = Backbone.Syphon.serialize(this);
    this.model.set(data);
    return this.trigger('submit', this);
  };

  return DefinitionForm;

})(Mn.LayoutView);

module.exports = DefinitionForm;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL2Fla3Njby9naXRodWIvbWFnZWxsYW4vYXBwL2NvZmZlZS9tb2R1bGVzL2RhdGFzZXQvY29uZmlnL2tub3dsZWRnZV9ydWxlX3ZpZXdzL2RlZmluaXRpb25Gb3JtLmNvZmZlZSIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9hZWtzY28vZ2l0aHViL21hZ2VsbGFuL2FwcC9jb2ZmZWUvbW9kdWxlcy9kYXRhc2V0L2NvbmZpZy9rbm93bGVkZ2VfcnVsZV92aWV3cy9kZWZpbml0aW9uRm9ybS5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsSUFBQSwwQ0FBQTtFQUFBOzs7QUFBQSxjQUFBLEdBQWlCLE9BQUEsQ0FBUSxrQkFBUjs7QUFDakIsVUFBQSxHQUFhLE9BQUEsQ0FBUSxjQUFSOztBQUlQOzs7Ozs7OzJCQUNKLFNBQUEsR0FBVzs7MkJBQ1gsUUFBQSxHQUFVLE9BQUEsQ0FBUSw2QkFBUjs7MkJBRVYsU0FBQSxHQUNFO0lBQUEsWUFBQSxFQUFjLEVBQWQ7SUFDQSxZQUFBLEVBQWMsRUFEZDs7OzJCQUdGLE9BQUEsR0FDRTtJQUFBLGdCQUFBLEVBQWtCLDBCQUFsQjtJQUNBLFlBQUEsRUFBa0Isc0JBRGxCOzs7MkJBR0YsZUFBQSxHQUFpQixTQUFBO0FBQ2YsV0FBTztNQUFFLEtBQUEsRUFBTyxJQUFDLENBQUEsT0FBTyxDQUFDLEtBQWxCOztFQURROzsyQkFHakIsUUFBQSxHQUFVLFNBQUE7SUFDUixJQUFDLENBQUEsZ0JBQWdCLENBQUMsSUFBbEIsQ0FBdUIsSUFBSSxjQUFKLENBQW1CO01BQUUsS0FBQSxFQUFPLElBQUMsQ0FBQSxLQUFWO01BQWlCLGFBQUEsRUFBZSxJQUFDLENBQUEsT0FBTyxDQUFDLGFBQXpDO0tBQW5CLENBQXZCO1dBQ0EsSUFBQyxDQUFBLFlBQVksQ0FBQyxJQUFkLENBQW1CLElBQUksVUFBSixDQUFlO01BQUUsS0FBQSxFQUFPLElBQUMsQ0FBQSxLQUFWO01BQWlCLEtBQUEsRUFBTyxJQUFDLENBQUEsT0FBTyxDQUFDLEtBQWpDO01BQXdDLGFBQUEsRUFBZSxJQUFDLENBQUEsT0FBTyxDQUFDLGFBQWhFO0tBQWYsQ0FBbkI7RUFGUTs7MkJBSVYsUUFBQSxHQUFVLFNBQUMsQ0FBRDtJQUNSLENBQUMsQ0FBQyxlQUFGLENBQUE7V0FDQSxJQUFDLENBQUEsT0FBRCxDQUFTLFFBQVQsRUFBbUIsSUFBbkI7RUFGUTs7MkJBSVYsUUFBQSxHQUFVLFNBQUMsQ0FBRDtBQUNSLFFBQUE7SUFBQSxDQUFDLENBQUMsZUFBRixDQUFBO0lBR0EsSUFBQSxHQUFPLFFBQVEsQ0FBQyxNQUFNLENBQUMsU0FBaEIsQ0FBMEIsSUFBMUI7SUFLUCxJQUFDLENBQUEsS0FBSyxDQUFDLEdBQVAsQ0FBVyxJQUFYO1dBR0EsSUFBQyxDQUFBLE9BQUQsQ0FBUyxRQUFULEVBQW1CLElBQW5CO0VBWlE7Ozs7R0F2QmlCLEVBQUUsQ0FBQzs7QUF1Q2hDLE1BQU0sQ0FBQyxPQUFQLEdBQWlCIn0=

},{"./actionForm":41,"./constraintForm":43,"./templates/definition_form":61}],45:[function(require,module,exports){
var DefinitionChild, DefinitionEmpty, DefinitionLayout, DefinitionList, DefinitionViewer,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

DefinitionViewer = require('./definitionViewer');

DefinitionEmpty = (function(superClass) {
  extend(DefinitionEmpty, superClass);

  function DefinitionEmpty() {
    return DefinitionEmpty.__super__.constructor.apply(this, arguments);
  }

  DefinitionEmpty.prototype.template = require('./templates/definition_empty');

  DefinitionEmpty.prototype.className = 'list-group-item list-group-item-warning';

  return DefinitionEmpty;

})(Mn.LayoutView);

DefinitionChild = (function(superClass) {
  extend(DefinitionChild, superClass);

  function DefinitionChild() {
    return DefinitionChild.__super__.constructor.apply(this, arguments);
  }

  DefinitionChild.prototype.template = require('./templates/definition_child');

  DefinitionChild.prototype.className = 'list-group-item';

  DefinitionChild.prototype.behaviors = {
    SortableChild: {},
    SelectableChild: {}
  };

  DefinitionChild.prototype.modelEvents = {
    'change:order': 'onReordered'
  };

  DefinitionChild.prototype.onReordered = function() {
    return this.render();
  };

  return DefinitionChild;

})(Mn.LayoutView);

DefinitionList = (function(superClass) {
  extend(DefinitionList, superClass);

  function DefinitionList() {
    return DefinitionList.__super__.constructor.apply(this, arguments);
  }

  DefinitionList.prototype.className = 'list-group';

  DefinitionList.prototype.childView = DefinitionChild;

  DefinitionList.prototype.emptyView = DefinitionEmpty;

  DefinitionList.prototype.behaviors = {
    SortableList: {}
  };

  DefinitionList.prototype.collectionEvents = {
    'remove': 'onCollectionRemove',
    'add': 'onCollectionRemove'
  };

  DefinitionList.prototype.onCollectionRemove = function() {
    var ref;
    setTimeout(this.reorderCollection, 250);
    return (ref = this.collection.at(0)) != null ? ref.trigger('selected') : void 0;
  };

  return DefinitionList;

})(Mn.CollectionView);

DefinitionLayout = (function(superClass) {
  extend(DefinitionLayout, superClass);

  function DefinitionLayout() {
    return DefinitionLayout.__super__.constructor.apply(this, arguments);
  }

  DefinitionLayout.prototype.className = 'row';

  DefinitionLayout.prototype.template = require('./templates/definition_list_layout');

  DefinitionLayout.prototype.collectionEvents = {
    'add': 'render',
    'remove': 'render'
  };

  DefinitionLayout.prototype.regions = {
    listRegion: '[data-region=list]',
    detailRegion: '[data-region=detail]'
  };

  DefinitionLayout.prototype.onRender = function() {
    return this.showDefinitionList();
  };

  DefinitionLayout.prototype.showDefinitionList = function() {
    var listView, ref;
    listView = new DefinitionList({
      collection: this.collection
    });
    listView.on('childview:selected', (function(_this) {
      return function(view) {
        return _this.showDefinitionViewer(view.model);
      };
    })(this));
    this.listRegion.show(listView);
    return (ref = this.collection.at(0)) != null ? ref.trigger('selected') : void 0;
  };

  DefinitionLayout.prototype.showDefinitionViewer = function(model) {
    var definitionViewer;
    definitionViewer = new DefinitionViewer({
      model: model
    });
    definitionViewer.on('edit', (function(_this) {
      return function(view) {
        return _this.trigger('edit:definition', view.model);
      };
    })(this));
    return this.detailRegion.show(definitionViewer);
  };

  return DefinitionLayout;

})(Mn.LayoutView);

module.exports = DefinitionLayout;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL2Fla3Njby9naXRodWIvbWFnZWxsYW4vYXBwL2NvZmZlZS9tb2R1bGVzL2RhdGFzZXQvY29uZmlnL2tub3dsZWRnZV9ydWxlX3ZpZXdzL2RlZmluaXRpb25MaXN0LmNvZmZlZSIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9hZWtzY28vZ2l0aHViL21hZ2VsbGFuL2FwcC9jb2ZmZWUvbW9kdWxlcy9kYXRhc2V0L2NvbmZpZy9rbm93bGVkZ2VfcnVsZV92aWV3cy9kZWZpbml0aW9uTGlzdC5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsSUFBQSxvRkFBQTtFQUFBOzs7QUFBQSxnQkFBQSxHQUFtQixPQUFBLENBQVEsb0JBQVI7O0FBSWI7Ozs7Ozs7NEJBQ0osUUFBQSxHQUFVLE9BQUEsQ0FBUSw4QkFBUjs7NEJBQ1YsU0FBQSxHQUFXOzs7O0dBRmlCLEVBQUUsQ0FBQzs7QUFNM0I7Ozs7Ozs7NEJBQ0osUUFBQSxHQUFVLE9BQUEsQ0FBUSw4QkFBUjs7NEJBQ1YsU0FBQSxHQUFXOzs0QkFFWCxTQUFBLEdBQ0U7SUFBQSxhQUFBLEVBQWUsRUFBZjtJQUNBLGVBQUEsRUFBaUIsRUFEakI7Ozs0QkFHRixXQUFBLEdBQ0U7SUFBQSxjQUFBLEVBQWdCLGFBQWhCOzs7NEJBRUYsV0FBQSxHQUFhLFNBQUE7V0FDWCxJQUFDLENBQUEsTUFBRCxDQUFBO0VBRFc7Ozs7R0FYZSxFQUFFLENBQUM7O0FBaUIzQjs7Ozs7OzsyQkFDSixTQUFBLEdBQVc7OzJCQUNYLFNBQUEsR0FBVzs7MkJBQ1gsU0FBQSxHQUFXOzsyQkFFWCxTQUFBLEdBQ0U7SUFBQSxZQUFBLEVBQWMsRUFBZDs7OzJCQUVGLGdCQUFBLEdBQ0U7SUFBQSxRQUFBLEVBQVUsb0JBQVY7SUFDQSxLQUFBLEVBQVUsb0JBRFY7OzsyQkFLRixrQkFBQSxHQUFvQixTQUFBO0FBQ2xCLFFBQUE7SUFBQSxVQUFBLENBQVksSUFBQyxDQUFBLGlCQUFiLEVBQWdDLEdBQWhDO3NEQUNpQixDQUFFLE9BQW5CLENBQTJCLFVBQTNCO0VBRmtCOzs7O0dBZE8sRUFBRSxDQUFDOztBQW9CMUI7Ozs7Ozs7NkJBQ0osU0FBQSxHQUFXOzs2QkFDWCxRQUFBLEdBQVUsT0FBQSxDQUFRLG9DQUFSOzs2QkFFVixnQkFBQSxHQUNFO0lBQUEsS0FBQSxFQUFVLFFBQVY7SUFDQSxRQUFBLEVBQVUsUUFEVjs7OzZCQUdGLE9BQUEsR0FDRTtJQUFBLFVBQUEsRUFBYyxvQkFBZDtJQUNBLFlBQUEsRUFBYyxzQkFEZDs7OzZCQUdGLFFBQUEsR0FBVSxTQUFBO1dBQ1IsSUFBQyxDQUFBLGtCQUFELENBQUE7RUFEUTs7NkJBR1Ysa0JBQUEsR0FBb0IsU0FBQTtBQUNsQixRQUFBO0lBQUEsUUFBQSxHQUFXLElBQUksY0FBSixDQUFtQjtNQUFFLFVBQUEsRUFBWSxJQUFDLENBQUEsVUFBZjtLQUFuQjtJQUNYLFFBQVEsQ0FBQyxFQUFULENBQVksb0JBQVosRUFBa0MsQ0FBQSxTQUFBLEtBQUE7YUFBQSxTQUFDLElBQUQ7ZUFBVSxLQUFDLENBQUEsb0JBQUQsQ0FBc0IsSUFBSSxDQUFDLEtBQTNCO01BQVY7SUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLENBQWxDO0lBQ0EsSUFBQyxDQUFBLFVBQVUsQ0FBQyxJQUFaLENBQWlCLFFBQWpCO3NEQUNpQixDQUFFLE9BQW5CLENBQTJCLFVBQTNCO0VBSmtCOzs2QkFNcEIsb0JBQUEsR0FBc0IsU0FBQyxLQUFEO0FBQ3BCLFFBQUE7SUFBQSxnQkFBQSxHQUFtQixJQUFJLGdCQUFKLENBQXFCO01BQUUsS0FBQSxFQUFPLEtBQVQ7S0FBckI7SUFDbkIsZ0JBQWdCLENBQUMsRUFBakIsQ0FBb0IsTUFBcEIsRUFBNEIsQ0FBQSxTQUFBLEtBQUE7YUFBQSxTQUFDLElBQUQ7ZUFBVSxLQUFDLENBQUEsT0FBRCxDQUFTLGlCQUFULEVBQTRCLElBQUksQ0FBQyxLQUFqQztNQUFWO0lBQUEsQ0FBQSxDQUFBLENBQUEsSUFBQSxDQUE1QjtXQUNBLElBQUMsQ0FBQSxZQUFZLENBQUMsSUFBZCxDQUFtQixnQkFBbkI7RUFIb0I7Ozs7R0FyQk8sRUFBRSxDQUFDOztBQTRCbEMsTUFBTSxDQUFDLE9BQVAsR0FBaUIifQ==

},{"./definitionViewer":46,"./templates/definition_child":59,"./templates/definition_empty":60,"./templates/definition_list_layout":62}],46:[function(require,module,exports){
var DefinitionViewer,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

DefinitionViewer = (function(superClass) {
  extend(DefinitionViewer, superClass);

  function DefinitionViewer() {
    return DefinitionViewer.__super__.constructor.apply(this, arguments);
  }

  DefinitionViewer.prototype.className = 'row';

  DefinitionViewer.prototype.template = require('./templates/definition_viewer');

  DefinitionViewer.prototype.behaviors = {
    Confirmations: {
      message: 'Are you sure you want to discard this definition?',
      confirmIcon: 'fa-trash',
      confirmText: 'DISCARD',
      confirmCss: 'btn-danger'
    }
  };

  DefinitionViewer.prototype.ui = {
    edit: '[data-click=edit]',
    confirmationTrigger: '[data-click=discard]'
  };

  DefinitionViewer.prototype.triggers = {
    'click @ui.edit': 'edit'
  };

  DefinitionViewer.prototype.onConfirmed = function() {
    return this.model.collection.remove(this.model);
  };

  return DefinitionViewer;

})(Mn.LayoutView);

module.exports = DefinitionViewer;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL2Fla3Njby9naXRodWIvbWFnZWxsYW4vYXBwL2NvZmZlZS9tb2R1bGVzL2RhdGFzZXQvY29uZmlnL2tub3dsZWRnZV9ydWxlX3ZpZXdzL2RlZmluaXRpb25WaWV3ZXIuY29mZmVlIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiL1VzZXJzL2Fla3Njby9naXRodWIvbWFnZWxsYW4vYXBwL2NvZmZlZS9tb2R1bGVzL2RhdGFzZXQvY29uZmlnL2tub3dsZWRnZV9ydWxlX3ZpZXdzL2RlZmluaXRpb25WaWV3ZXIuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLElBQUEsZ0JBQUE7RUFBQTs7O0FBQU07Ozs7Ozs7NkJBQ0osU0FBQSxHQUFXOzs2QkFDWCxRQUFBLEdBQVUsT0FBQSxDQUFRLCtCQUFSOzs2QkFFVixTQUFBLEdBQ0U7SUFBQSxhQUFBLEVBQ0U7TUFBQSxPQUFBLEVBQWMsbURBQWQ7TUFDQSxXQUFBLEVBQWMsVUFEZDtNQUVBLFdBQUEsRUFBYyxTQUZkO01BR0EsVUFBQSxFQUFjLFlBSGQ7S0FERjs7OzZCQU1GLEVBQUEsR0FDRTtJQUFBLElBQUEsRUFBc0IsbUJBQXRCO0lBQ0EsbUJBQUEsRUFBc0Isc0JBRHRCOzs7NkJBR0YsUUFBQSxHQUNFO0lBQUEsZ0JBQUEsRUFBa0IsTUFBbEI7Ozs2QkFHRixXQUFBLEdBQWEsU0FBQTtXQUNYLElBQUMsQ0FBQSxLQUFLLENBQUMsVUFBVSxDQUFDLE1BQWxCLENBQXlCLElBQUMsQ0FBQSxLQUExQjtFQURXOzs7O0dBbkJnQixFQUFFLENBQUM7O0FBd0JsQyxNQUFNLENBQUMsT0FBUCxHQUFpQiJ9

},{"./templates/definition_viewer":63}],47:[function(require,module,exports){
var ApplyRulesView, ResetRulesView, RuleForm, RuleLayout, RuleList,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

RuleList = require('./ruleList');

RuleForm = require('./ruleForm');

ApplyRulesView = require('./applyRules');

ResetRulesView = require('./resetRules');

RuleLayout = (function(superClass) {
  extend(RuleLayout, superClass);

  function RuleLayout() {
    return RuleLayout.__super__.constructor.apply(this, arguments);
  }

  RuleLayout.prototype.className = 'row';

  RuleLayout.prototype.template = require('./templates/layout');

  RuleLayout.prototype.ui = {
    newRule: '[data-click=new]',
    apply: '[data-click=apply]',
    reset: '[data-click=reset]'
  };

  RuleLayout.prototype.events = {
    'click @ui.newRule': 'showRuleForm',
    'click @ui.apply': 'applyRules',
    'click @ui.reset': 'resetDataset'
  };

  RuleLayout.prototype.regions = {
    contentRegion: '[data-region=content]'
  };

  RuleLayout.prototype.onRender = function() {
    return this.showRuleList();
  };

  RuleLayout.prototype.fetchSourceOptions = function() {
    return new Promise((function(_this) {
      return function(resolve, reject) {
        return _this.model.fetchFacets().then(function(facetCollection) {
          var attrs, labels, sourceOptions;
          attrs = facetCollection.pluck('attribute');
          labels = facetCollection.pluck('label');
          sourceOptions = _.zip(attrs, labels);
          return resolve(sourceOptions);
        });
      };
    })(this));
  };

  RuleLayout.prototype.showRuleList = function() {
    var ruleList;
    ruleList = new RuleList({
      collection: this.collection
    });
    ruleList.on('edit', (function(_this) {
      return function(ruleModel) {
        return _this.showRuleForm(ruleModel);
      };
    })(this));
    return this.contentRegion.show(ruleList);
  };

  RuleLayout.prototype.buildNewRule = function() {
    var params;
    params = {
      id: window.buildUniqueId('kn_'),
      order: this.collection.length + 1,
      dataset_id: this.model.id
    };
    return new this.collection.model(params);
  };

  RuleLayout.prototype.showRuleForm = function(model) {
    var formModel;
    if (model.currentTarget) {
      model = null;
    }
    formModel = model || this.buildNewRule();
    return this.fetchSourceOptions().then((function(_this) {
      return function(sourceOptions) {
        var formView;
        formView = new RuleForm({
          model: formModel,
          collection: formModel.get('definitions'),
          sourceOptions: sourceOptions
        });
        formView.on('cancel', function() {
          return _this.showRuleList();
        });
        formView.on('sync', function(model) {
          _this.collection.add(model);
          return _this.showRuleList();
        });
        return _this.contentRegion.show(formView);
      };
    })(this));
  };

  RuleLayout.prototype.applyRules = function() {
    var applyView;
    applyView = new ApplyRulesView({
      model: this.model,
      collection: this.collection
    });
    applyView.on('cancel', (function(_this) {
      return function() {
        return _this.showRuleList();
      };
    })(this));
    applyView.on('success', (function(_this) {
      return function() {
        return _this.showRuleList();
      };
    })(this));
    return this.contentRegion.show(applyView);
  };

  RuleLayout.prototype.resetDataset = function() {
    var resetView;
    resetView = new ResetRulesView({
      model: this.model,
      target_object: this.collection.target_object
    });
    resetView.on('cancel', (function(_this) {
      return function() {
        return _this.showRuleList();
      };
    })(this));
    resetView.on('success', (function(_this) {
      return function() {
        return _this.showRuleList();
      };
    })(this));
    return this.contentRegion.show(resetView);
  };

  return RuleLayout;

})(Mn.LayoutView);

module.exports = RuleLayout;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL2Fla3Njby9naXRodWIvbWFnZWxsYW4vYXBwL2NvZmZlZS9tb2R1bGVzL2RhdGFzZXQvY29uZmlnL2tub3dsZWRnZV9ydWxlX3ZpZXdzL2xheW91dC5jb2ZmZWUiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIvVXNlcnMvYWVrc2NvL2dpdGh1Yi9tYWdlbGxhbi9hcHAvY29mZmVlL21vZHVsZXMvZGF0YXNldC9jb25maWcva25vd2xlZGdlX3J1bGVfdmlld3MvbGF5b3V0LmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxJQUFBLDhEQUFBO0VBQUE7OztBQUFBLFFBQUEsR0FBa0IsT0FBQSxDQUFRLFlBQVI7O0FBQ2xCLFFBQUEsR0FBa0IsT0FBQSxDQUFRLFlBQVI7O0FBQ2xCLGNBQUEsR0FBa0IsT0FBQSxDQUFRLGNBQVI7O0FBQ2xCLGNBQUEsR0FBa0IsT0FBQSxDQUFRLGNBQVI7O0FBSVo7Ozs7Ozs7dUJBQ0osU0FBQSxHQUFXOzt1QkFDWCxRQUFBLEdBQVUsT0FBQSxDQUFRLG9CQUFSOzt1QkFFVixFQUFBLEdBQ0U7SUFBQSxPQUFBLEVBQVUsa0JBQVY7SUFDQSxLQUFBLEVBQVUsb0JBRFY7SUFFQSxLQUFBLEVBQVUsb0JBRlY7Ozt1QkFJRixNQUFBLEdBQ0U7SUFBQSxtQkFBQSxFQUFzQixjQUF0QjtJQUNBLGlCQUFBLEVBQXNCLFlBRHRCO0lBRUEsaUJBQUEsRUFBc0IsY0FGdEI7Ozt1QkFJRixPQUFBLEdBQ0U7SUFBQSxhQUFBLEVBQWUsdUJBQWY7Ozt1QkFFRixRQUFBLEdBQVUsU0FBQTtXQUNSLElBQUMsQ0FBQSxZQUFELENBQUE7RUFEUTs7dUJBTVYsa0JBQUEsR0FBb0IsU0FBQTtBQUdsQixXQUFPLElBQUksT0FBSixDQUFZLENBQUEsU0FBQSxLQUFBO2FBQUEsU0FBQyxPQUFELEVBQVUsTUFBVjtlQUdqQixLQUFDLENBQUEsS0FBSyxDQUFDLFdBQVAsQ0FBQSxDQUFvQixDQUFDLElBQXJCLENBQTBCLFNBQUMsZUFBRDtBQUl4QixjQUFBO1VBQUEsS0FBQSxHQUFRLGVBQWUsQ0FBQyxLQUFoQixDQUFzQixXQUF0QjtVQUNSLE1BQUEsR0FBUyxlQUFlLENBQUMsS0FBaEIsQ0FBc0IsT0FBdEI7VUFHVCxhQUFBLEdBQWdCLENBQUMsQ0FBQyxHQUFGLENBQU0sS0FBTixFQUFhLE1BQWI7QUFHaEIsaUJBQU8sT0FBQSxDQUFRLGFBQVI7UUFYaUIsQ0FBMUI7TUFIaUI7SUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLENBQVo7RUFIVzs7dUJBcUJwQixZQUFBLEdBQWMsU0FBQTtBQUNaLFFBQUE7SUFBQSxRQUFBLEdBQVcsSUFBSSxRQUFKLENBQWE7TUFBRSxVQUFBLEVBQVksSUFBQyxDQUFBLFVBQWY7S0FBYjtJQUNYLFFBQVEsQ0FBQyxFQUFULENBQVksTUFBWixFQUFvQixDQUFBLFNBQUEsS0FBQTthQUFBLFNBQUMsU0FBRDtlQUFlLEtBQUMsQ0FBQSxZQUFELENBQWMsU0FBZDtNQUFmO0lBQUEsQ0FBQSxDQUFBLENBQUEsSUFBQSxDQUFwQjtXQUNBLElBQUMsQ0FBQSxhQUFhLENBQUMsSUFBZixDQUFvQixRQUFwQjtFQUhZOzt1QkFPZCxZQUFBLEdBQWMsU0FBQTtBQUNaLFFBQUE7SUFBQSxNQUFBLEdBQ0U7TUFBQSxFQUFBLEVBQVksTUFBTSxDQUFDLGFBQVAsQ0FBcUIsS0FBckIsQ0FBWjtNQUNBLEtBQUEsRUFBWSxJQUFDLENBQUEsVUFBVSxDQUFDLE1BQVosR0FBcUIsQ0FEakM7TUFFQSxVQUFBLEVBQVksSUFBQyxDQUFBLEtBQUssQ0FBQyxFQUZuQjs7QUFJRixXQUFPLElBQUksSUFBQyxDQUFBLFVBQVUsQ0FBQyxLQUFoQixDQUFzQixNQUF0QjtFQU5LOzt1QkFXZCxZQUFBLEdBQWMsU0FBQyxLQUFEO0FBR1osUUFBQTtJQUFBLElBQWdCLEtBQUssQ0FBQyxhQUF0QjtNQUFBLEtBQUEsR0FBUSxLQUFSOztJQUdBLFNBQUEsR0FBWSxLQUFBLElBQVMsSUFBQyxDQUFBLFlBQUQsQ0FBQTtXQUdyQixJQUFDLENBQUEsa0JBQUQsQ0FBQSxDQUFxQixDQUFDLElBQXRCLENBQTJCLENBQUEsU0FBQSxLQUFBO2FBQUEsU0FBQyxhQUFEO0FBR3pCLFlBQUE7UUFBQSxRQUFBLEdBQVcsSUFBSSxRQUFKLENBQWE7VUFBRSxLQUFBLEVBQU8sU0FBVDtVQUFvQixVQUFBLEVBQVksU0FBUyxDQUFDLEdBQVYsQ0FBYyxhQUFkLENBQWhDO1VBQThELGFBQUEsRUFBZSxhQUE3RTtTQUFiO1FBR1gsUUFBUSxDQUFDLEVBQVQsQ0FBWSxRQUFaLEVBQXNCLFNBQUE7aUJBQUcsS0FBQyxDQUFBLFlBQUQsQ0FBQTtRQUFILENBQXRCO1FBR0EsUUFBUSxDQUFDLEVBQVQsQ0FBWSxNQUFaLEVBQW9CLFNBQUMsS0FBRDtVQUdsQixLQUFDLENBQUEsVUFBVSxDQUFDLEdBQVosQ0FBZ0IsS0FBaEI7aUJBR0EsS0FBQyxDQUFBLFlBQUQsQ0FBQTtRQU5rQixDQUFwQjtlQVNBLEtBQUMsQ0FBQSxhQUFhLENBQUMsSUFBZixDQUFvQixRQUFwQjtNQWxCeUI7SUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLENBQTNCO0VBVFk7O3VCQStCZCxVQUFBLEdBQVksU0FBQTtBQUNWLFFBQUE7SUFBQSxTQUFBLEdBQVksSUFBSSxjQUFKLENBQW1CO01BQUUsS0FBQSxFQUFPLElBQUMsQ0FBQSxLQUFWO01BQWlCLFVBQUEsRUFBWSxJQUFDLENBQUEsVUFBOUI7S0FBbkI7SUFDWixTQUFTLENBQUMsRUFBVixDQUFhLFFBQWIsRUFBdUIsQ0FBQSxTQUFBLEtBQUE7YUFBQSxTQUFBO2VBQUcsS0FBQyxDQUFBLFlBQUQsQ0FBQTtNQUFIO0lBQUEsQ0FBQSxDQUFBLENBQUEsSUFBQSxDQUF2QjtJQUNBLFNBQVMsQ0FBQyxFQUFWLENBQWEsU0FBYixFQUF3QixDQUFBLFNBQUEsS0FBQTthQUFBLFNBQUE7ZUFBRyxLQUFDLENBQUEsWUFBRCxDQUFBO01BQUg7SUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLENBQXhCO1dBQ0EsSUFBQyxDQUFBLGFBQWEsQ0FBQyxJQUFmLENBQW9CLFNBQXBCO0VBSlU7O3VCQVFaLFlBQUEsR0FBYyxTQUFBO0FBQ1osUUFBQTtJQUFBLFNBQUEsR0FBWSxJQUFJLGNBQUosQ0FBbUI7TUFBRSxLQUFBLEVBQU8sSUFBQyxDQUFBLEtBQVY7TUFBaUIsYUFBQSxFQUFlLElBQUMsQ0FBQSxVQUFVLENBQUMsYUFBNUM7S0FBbkI7SUFDWixTQUFTLENBQUMsRUFBVixDQUFhLFFBQWIsRUFBdUIsQ0FBQSxTQUFBLEtBQUE7YUFBQSxTQUFBO2VBQUcsS0FBQyxDQUFBLFlBQUQsQ0FBQTtNQUFIO0lBQUEsQ0FBQSxDQUFBLENBQUEsSUFBQSxDQUF2QjtJQUNBLFNBQVMsQ0FBQyxFQUFWLENBQWEsU0FBYixFQUF3QixDQUFBLFNBQUEsS0FBQTthQUFBLFNBQUE7ZUFBRyxLQUFDLENBQUEsWUFBRCxDQUFBO01BQUg7SUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLENBQXhCO1dBQ0EsSUFBQyxDQUFBLGFBQWEsQ0FBQyxJQUFmLENBQW9CLFNBQXBCO0VBSlk7Ozs7R0FyR1MsRUFBRSxDQUFDOztBQTZHNUIsTUFBTSxDQUFDLE9BQVAsR0FBaUIifQ==

},{"./applyRules":42,"./resetRules":48,"./ruleForm":49,"./ruleList":50,"./templates/layout":64}],48:[function(require,module,exports){
var ResetRulesView,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

ResetRulesView = (function(superClass) {
  extend(ResetRulesView, superClass);

  function ResetRulesView() {
    return ResetRulesView.__super__.constructor.apply(this, arguments);
  }

  ResetRulesView.prototype.template = require('./templates/reset_rules');

  ResetRulesView.prototype.className = 'card card-block';

  ResetRulesView.prototype.behaviors = {
    CancelButton: {},
    Confirmations: {
      message: 'Are you sure you want to reset this dataset?',
      confirmIcon: 'fa-refresh',
      confirmText: 'RESET',
      confirmCss: 'btn-danger'
    },
    Flashes: {
      success: {
        message: 'Successfully reset dataset.'
      }
    }
  };

  ResetRulesView.prototype.ui = {
    confirmationTrigger: '[data-click=submit]'
  };

  ResetRulesView.prototype.onCancel = function() {
    return this.trigger('cancel');
  };

  ResetRulesView.prototype.onConfirmed = function() {
    return this.model.fetchDatapoints().then((function(_this) {
      return function(datapoints) {
        return datapoints.resetTargetObject(_this.options.target_object).then(function() {
          return _this.model.regenerateFacets().then(function() {
            Backbone.Radio.channel('loading').trigger('hide');
            _this.flashSuccess();
            return _this.trigger('success');
          });
        });
      };
    })(this));
  };

  return ResetRulesView;

})(Mn.LayoutView);

module.exports = ResetRulesView;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL2Fla3Njby9naXRodWIvbWFnZWxsYW4vYXBwL2NvZmZlZS9tb2R1bGVzL2RhdGFzZXQvY29uZmlnL2tub3dsZWRnZV9ydWxlX3ZpZXdzL3Jlc2V0UnVsZXMuY29mZmVlIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiL1VzZXJzL2Fla3Njby9naXRodWIvbWFnZWxsYW4vYXBwL2NvZmZlZS9tb2R1bGVzL2RhdGFzZXQvY29uZmlnL2tub3dsZWRnZV9ydWxlX3ZpZXdzL3Jlc2V0UnVsZXMuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLElBQUEsY0FBQTtFQUFBOzs7QUFBTTs7Ozs7OzsyQkFDSixRQUFBLEdBQVUsT0FBQSxDQUFRLHlCQUFSOzsyQkFDVixTQUFBLEdBQVc7OzJCQUVYLFNBQUEsR0FDRTtJQUFBLFlBQUEsRUFBYyxFQUFkO0lBRUEsYUFBQSxFQUNFO01BQUEsT0FBQSxFQUFjLDhDQUFkO01BQ0EsV0FBQSxFQUFjLFlBRGQ7TUFFQSxXQUFBLEVBQWMsT0FGZDtNQUdBLFVBQUEsRUFBYyxZQUhkO0tBSEY7SUFRQSxPQUFBLEVBQ0U7TUFBQSxPQUFBLEVBQ0U7UUFBQSxPQUFBLEVBQVUsNkJBQVY7T0FERjtLQVRGOzs7MkJBWUYsRUFBQSxHQUNFO0lBQUEsbUJBQUEsRUFBc0IscUJBQXRCOzs7MkJBRUYsUUFBQSxHQUFVLFNBQUE7V0FDUixJQUFDLENBQUEsT0FBRCxDQUFTLFFBQVQ7RUFEUTs7MkJBR1YsV0FBQSxHQUFhLFNBQUE7V0FDWCxJQUFDLENBQUEsS0FBSyxDQUFDLGVBQVAsQ0FBQSxDQUF3QixDQUFDLElBQXpCLENBQThCLENBQUEsU0FBQSxLQUFBO2FBQUEsU0FBQyxVQUFEO2VBRTVCLFVBQVUsQ0FBQyxpQkFBWCxDQUE2QixLQUFDLENBQUEsT0FBTyxDQUFDLGFBQXRDLENBQW9ELENBQUMsSUFBckQsQ0FBMEQsU0FBQTtpQkFFeEQsS0FBQyxDQUFBLEtBQUssQ0FBQyxnQkFBUCxDQUFBLENBQXlCLENBQUMsSUFBMUIsQ0FBK0IsU0FBQTtZQUc3QixRQUFRLENBQUMsS0FBSyxDQUFDLE9BQWYsQ0FBdUIsU0FBdkIsQ0FBaUMsQ0FBQyxPQUFsQyxDQUEwQyxNQUExQztZQUdBLEtBQUMsQ0FBQSxZQUFELENBQUE7bUJBR0EsS0FBQyxDQUFBLE9BQUQsQ0FBUyxTQUFUO1VBVDZCLENBQS9CO1FBRndELENBQTFEO01BRjRCO0lBQUEsQ0FBQSxDQUFBLENBQUEsSUFBQSxDQUE5QjtFQURXOzs7O0dBdkJjLEVBQUUsQ0FBQzs7QUF5Q2hDLE1BQU0sQ0FBQyxPQUFQLEdBQWlCIn0=

},{"./templates/reset_rules":66}],49:[function(require,module,exports){
var DefinitionForm, DefinitionList, OntologySelector, RuleForm,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

DefinitionForm = require('./definitionForm');

DefinitionList = require('./definitionList');

OntologySelector = (function(superClass) {
  extend(OntologySelector, superClass);

  function OntologySelector() {
    this.initAttributeSelector = bind(this.initAttributeSelector, this);
    return OntologySelector.__super__.constructor.apply(this, arguments);
  }

  OntologySelector.prototype.className = 'row';

  OntologySelector.prototype.template = require('./templates/ontology_attribute_selector');

  OntologySelector.prototype.ui = {
    attributeSelector: '[name=target_property]'
  };

  OntologySelector.prototype.templateHelpers = function() {
    return {
      dropdown: this.options.dropdown
    };
  };

  OntologySelector.prototype.onRender = function() {
    Backbone.Syphon.deserialize(this, this.model.attributes);
    return setTimeout(this.initAttributeSelector, 200);
  };

  OntologySelector.prototype.initAttributeSelector = function() {
    return this.ui.attributeSelector.select2({
      placeholder: 'Target Attribute'
    });
  };

  return OntologySelector;

})(Mn.LayoutView);

RuleForm = (function(superClass) {
  extend(RuleForm, superClass);

  function RuleForm() {
    return RuleForm.__super__.constructor.apply(this, arguments);
  }

  RuleForm.prototype.className = 'row';

  RuleForm.prototype.template = require('./templates/rule_form');

  RuleForm.prototype.behaviors = {
    CancelButton: {},
    SubmitButton: {},
    ModelEvents: {}
  };

  RuleForm.prototype.ui = {
    addDefinition: '[data-click=add]'
  };

  RuleForm.prototype.events = {
    'click @ui.addDefinition': 'addDefinition'
  };

  RuleForm.prototype.regions = {
    ontologySelector: '[data-region=ontology-selector]',
    definitionsRegion: '[data-region=definitions]'
  };

  RuleForm.prototype.addToCollection = function(definitionModel) {
    this.collection.add(definitionModel);
    return this.showDefinitionList();
  };

  RuleForm.prototype.showOntologyAttributeSelector = function() {
    return Backbone.Radio.channel('ontology').request('attribute:dropdown').then((function(_this) {
      return function(dropdown) {
        return _this.ontologySelector.show(new OntologySelector({
          model: _this.model,
          dropdown: dropdown
        }));
      };
    })(this));
  };

  RuleForm.prototype.addDefinition = function() {
    var definitionForm, newDefinition;
    newDefinition = new this.collection.model({
      id: buildUniqueId('cn_'),
      order: this.collection.length + 1
    });
    definitionForm = new DefinitionForm({
      model: newDefinition,
      isNew: true,
      sourceOptions: this.options.sourceOptions
    });
    definitionForm.on('cancel', (function(_this) {
      return function() {
        return _this.showDefinitionList();
      };
    })(this));
    definitionForm.on('submit', (function(_this) {
      return function(view) {
        return _this.addToCollection(view.model);
      };
    })(this));
    return this.definitionsRegion.show(definitionForm);
  };

  RuleForm.prototype.editDefinition = function(definitionModel) {
    var definitionForm;
    definitionForm = new DefinitionForm({
      model: definitionModel,
      sourceOptions: this.options.sourceOptions
    });
    definitionForm.on('cancel', (function(_this) {
      return function() {
        return _this.showDefinitionList();
      };
    })(this));
    definitionForm.on('submit', (function(_this) {
      return function(view) {
        return _this.showDefinitionList();
      };
    })(this));
    return this.definitionsRegion.show(definitionForm);
  };

  RuleForm.prototype.showDefinitionList = function() {
    var definitionList;
    definitionList = new DefinitionList({
      collection: this.collection,
      header: true
    });
    definitionList.on('edit:definition', (function(_this) {
      return function(definitionModel) {
        return _this.editDefinition(definitionModel);
      };
    })(this));
    return this.definitionsRegion.show(definitionList);
  };

  RuleForm.prototype.onRender = function() {
    Backbone.Syphon.deserialize(this, this.model.attributes);
    this.showDefinitionList();
    return this.showOntologyAttributeSelector();
  };

  RuleForm.prototype.onCancel = function() {
    return this.trigger('cancel');
  };

  RuleForm.prototype.onSubmit = function() {
    var data;
    data = Backbone.Syphon.serialize(this);
    this.collection.sort();
    this.model.set(data);
    return this.model.save();
  };

  RuleForm.prototype.onRequest = function() {
    return console.log('onRequest');
  };

  RuleForm.prototype.onSync = function() {
    return this.trigger('sync', this.model);
  };

  RuleForm.prototype.onError = function() {
    return console.log('onError');
  };

  return RuleForm;

})(Mn.LayoutView);

module.exports = RuleForm;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL2Fla3Njby9naXRodWIvbWFnZWxsYW4vYXBwL2NvZmZlZS9tb2R1bGVzL2RhdGFzZXQvY29uZmlnL2tub3dsZWRnZV9ydWxlX3ZpZXdzL3J1bGVGb3JtLmNvZmZlZSIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9hZWtzY28vZ2l0aHViL21hZ2VsbGFuL2FwcC9jb2ZmZWUvbW9kdWxlcy9kYXRhc2V0L2NvbmZpZy9rbm93bGVkZ2VfcnVsZV92aWV3cy9ydWxlRm9ybS5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsSUFBQSwwREFBQTtFQUFBOzs7O0FBQUEsY0FBQSxHQUFpQixPQUFBLENBQVEsa0JBQVI7O0FBQ2pCLGNBQUEsR0FBaUIsT0FBQSxDQUFRLGtCQUFSOztBQU1YOzs7Ozs7Ozs2QkFDSixTQUFBLEdBQVc7OzZCQUNYLFFBQUEsR0FBVSxPQUFBLENBQVEseUNBQVI7OzZCQUVWLEVBQUEsR0FDRTtJQUFBLGlCQUFBLEVBQW1CLHdCQUFuQjs7OzZCQUVGLGVBQUEsR0FBaUIsU0FBQTtBQUNmLFdBQU87TUFBRSxRQUFBLEVBQVUsSUFBQyxDQUFBLE9BQU8sQ0FBQyxRQUFyQjs7RUFEUTs7NkJBR2pCLFFBQUEsR0FBVSxTQUFBO0lBQ1IsUUFBUSxDQUFDLE1BQU0sQ0FBQyxXQUFoQixDQUE0QixJQUE1QixFQUErQixJQUFDLENBQUEsS0FBSyxDQUFDLFVBQXRDO1dBQ0EsVUFBQSxDQUFXLElBQUMsQ0FBQSxxQkFBWixFQUFtQyxHQUFuQztFQUZROzs2QkFJVixxQkFBQSxHQUF1QixTQUFBO1dBQ3JCLElBQUMsQ0FBQSxFQUFFLENBQUMsaUJBQWlCLENBQUMsT0FBdEIsQ0FBOEI7TUFBRSxXQUFBLEVBQWEsa0JBQWY7S0FBOUI7RUFEcUI7Ozs7R0FkTSxFQUFFLENBQUM7O0FBcUI1Qjs7Ozs7OztxQkFDSixTQUFBLEdBQVc7O3FCQUNYLFFBQUEsR0FBVSxPQUFBLENBQVEsdUJBQVI7O3FCQUVWLFNBQUEsR0FDRTtJQUFBLFlBQUEsRUFBYyxFQUFkO0lBQ0EsWUFBQSxFQUFjLEVBRGQ7SUFFQSxXQUFBLEVBQWEsRUFGYjs7O3FCQUlGLEVBQUEsR0FDRTtJQUFBLGFBQUEsRUFBZSxrQkFBZjs7O3FCQUVGLE1BQUEsR0FDRTtJQUFBLHlCQUFBLEVBQTJCLGVBQTNCOzs7cUJBRUYsT0FBQSxHQUNFO0lBQUEsZ0JBQUEsRUFBb0IsaUNBQXBCO0lBQ0EsaUJBQUEsRUFBb0IsMkJBRHBCOzs7cUJBR0YsZUFBQSxHQUFpQixTQUFDLGVBQUQ7SUFDZixJQUFDLENBQUEsVUFBVSxDQUFDLEdBQVosQ0FBZ0IsZUFBaEI7V0FDQSxJQUFDLENBQUEsa0JBQUQsQ0FBQTtFQUZlOztxQkFJakIsNkJBQUEsR0FBK0IsU0FBQTtXQUM3QixRQUFRLENBQUMsS0FBSyxDQUFDLE9BQWYsQ0FBdUIsVUFBdkIsQ0FBa0MsQ0FBQyxPQUFuQyxDQUEyQyxvQkFBM0MsQ0FBZ0UsQ0FBQyxJQUFqRSxDQUFzRSxDQUFBLFNBQUEsS0FBQTthQUFBLFNBQUMsUUFBRDtlQUNwRSxLQUFDLENBQUEsZ0JBQWdCLENBQUMsSUFBbEIsQ0FBdUIsSUFBSSxnQkFBSixDQUFxQjtVQUFFLEtBQUEsRUFBTyxLQUFDLENBQUEsS0FBVjtVQUFpQixRQUFBLEVBQVUsUUFBM0I7U0FBckIsQ0FBdkI7TUFEb0U7SUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLENBQXRFO0VBRDZCOztxQkFJL0IsYUFBQSxHQUFlLFNBQUE7QUFHYixRQUFBO0lBQUEsYUFBQSxHQUFnQixJQUFJLElBQUMsQ0FBQSxVQUFVLENBQUMsS0FBaEIsQ0FBc0I7TUFBRSxFQUFBLEVBQUksYUFBQSxDQUFjLEtBQWQsQ0FBTjtNQUE0QixLQUFBLEVBQU8sSUFBQyxDQUFBLFVBQVUsQ0FBQyxNQUFaLEdBQXFCLENBQXhEO0tBQXRCO0lBR2hCLGNBQUEsR0FBaUIsSUFBSSxjQUFKLENBQW1CO01BQUUsS0FBQSxFQUFPLGFBQVQ7TUFBd0IsS0FBQSxFQUFPLElBQS9CO01BQXFDLGFBQUEsRUFBZSxJQUFDLENBQUEsT0FBTyxDQUFDLGFBQTdEO0tBQW5CO0lBR2pCLGNBQWMsQ0FBQyxFQUFmLENBQWtCLFFBQWxCLEVBQTRCLENBQUEsU0FBQSxLQUFBO2FBQUEsU0FBQTtlQUFHLEtBQUMsQ0FBQSxrQkFBRCxDQUFBO01BQUg7SUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLENBQTVCO0lBR0EsY0FBYyxDQUFDLEVBQWYsQ0FBa0IsUUFBbEIsRUFBNEIsQ0FBQSxTQUFBLEtBQUE7YUFBQSxTQUFDLElBQUQ7ZUFBVSxLQUFDLENBQUEsZUFBRCxDQUFpQixJQUFJLENBQUMsS0FBdEI7TUFBVjtJQUFBLENBQUEsQ0FBQSxDQUFBLElBQUEsQ0FBNUI7V0FHQSxJQUFDLENBQUEsaUJBQWlCLENBQUMsSUFBbkIsQ0FBd0IsY0FBeEI7RUFmYTs7cUJBaUJmLGNBQUEsR0FBZ0IsU0FBQyxlQUFEO0FBR2QsUUFBQTtJQUFBLGNBQUEsR0FBaUIsSUFBSSxjQUFKLENBQW1CO01BQUUsS0FBQSxFQUFPLGVBQVQ7TUFBMEIsYUFBQSxFQUFlLElBQUMsQ0FBQSxPQUFPLENBQUMsYUFBbEQ7S0FBbkI7SUFHakIsY0FBYyxDQUFDLEVBQWYsQ0FBa0IsUUFBbEIsRUFBNEIsQ0FBQSxTQUFBLEtBQUE7YUFBQSxTQUFBO2VBQUcsS0FBQyxDQUFBLGtCQUFELENBQUE7TUFBSDtJQUFBLENBQUEsQ0FBQSxDQUFBLElBQUEsQ0FBNUI7SUFHQSxjQUFjLENBQUMsRUFBZixDQUFrQixRQUFsQixFQUE0QixDQUFBLFNBQUEsS0FBQTthQUFBLFNBQUMsSUFBRDtlQUFVLEtBQUMsQ0FBQSxrQkFBRCxDQUFBO01BQVY7SUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLENBQTVCO1dBR0EsSUFBQyxDQUFBLGlCQUFpQixDQUFDLElBQW5CLENBQXdCLGNBQXhCO0VBWmM7O3FCQWNoQixrQkFBQSxHQUFvQixTQUFBO0FBQ2xCLFFBQUE7SUFBQSxjQUFBLEdBQWlCLElBQUksY0FBSixDQUFtQjtNQUFFLFVBQUEsRUFBWSxJQUFDLENBQUEsVUFBZjtNQUEyQixNQUFBLEVBQVEsSUFBbkM7S0FBbkI7SUFDakIsY0FBYyxDQUFDLEVBQWYsQ0FBa0IsaUJBQWxCLEVBQXFDLENBQUEsU0FBQSxLQUFBO2FBQUEsU0FBQyxlQUFEO0FBQXFCLGVBQU8sS0FBQyxDQUFBLGNBQUQsQ0FBZ0IsZUFBaEI7TUFBNUI7SUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLENBQXJDO1dBR0EsSUFBQyxDQUFBLGlCQUFpQixDQUFDLElBQW5CLENBQXdCLGNBQXhCO0VBTGtCOztxQkFPcEIsUUFBQSxHQUFVLFNBQUE7SUFDUixRQUFRLENBQUMsTUFBTSxDQUFDLFdBQWhCLENBQTZCLElBQTdCLEVBQWdDLElBQUMsQ0FBQSxLQUFLLENBQUMsVUFBdkM7SUFDQSxJQUFDLENBQUEsa0JBQUQsQ0FBQTtXQUNBLElBQUMsQ0FBQSw2QkFBRCxDQUFBO0VBSFE7O3FCQUtWLFFBQUEsR0FBVSxTQUFBO1dBQ1IsSUFBQyxDQUFBLE9BQUQsQ0FBUyxRQUFUO0VBRFE7O3FCQUdWLFFBQUEsR0FBVSxTQUFBO0FBQ1IsUUFBQTtJQUFBLElBQUEsR0FBTyxRQUFRLENBQUMsTUFBTSxDQUFDLFNBQWhCLENBQTBCLElBQTFCO0lBQ1AsSUFBQyxDQUFBLFVBQVUsQ0FBQyxJQUFaLENBQUE7SUFDQSxJQUFDLENBQUEsS0FBSyxDQUFDLEdBQVAsQ0FBVyxJQUFYO1dBQ0EsSUFBQyxDQUFBLEtBQUssQ0FBQyxJQUFQLENBQUE7RUFKUTs7cUJBTVYsU0FBQSxHQUFXLFNBQUE7V0FDVCxPQUFPLENBQUMsR0FBUixDQUFZLFdBQVo7RUFEUzs7cUJBR1gsTUFBQSxHQUFRLFNBQUE7V0FDTixJQUFDLENBQUEsT0FBRCxDQUFTLE1BQVQsRUFBaUIsSUFBQyxDQUFBLEtBQWxCO0VBRE07O3FCQUdSLE9BQUEsR0FBUyxTQUFBO1dBQ1AsT0FBTyxDQUFDLEdBQVIsQ0FBWSxTQUFaO0VBRE87Ozs7R0FyRlksRUFBRSxDQUFDOztBQTBGMUIsTUFBTSxDQUFDLE9BQVAsR0FBaUIifQ==

},{"./definitionForm":44,"./definitionList":45,"./templates/ontology_attribute_selector":65,"./templates/rule_form":69}],50:[function(require,module,exports){
var RuleChild, RuleEmpty, RuleLayout, RuleList, RuleViewer,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

RuleViewer = require('./ruleViewer');

RuleEmpty = (function(superClass) {
  extend(RuleEmpty, superClass);

  function RuleEmpty() {
    return RuleEmpty.__super__.constructor.apply(this, arguments);
  }

  RuleEmpty.prototype.template = require('./templates/rule_empty');

  RuleEmpty.prototype.className = 'list-group-item list-group-item-warning';

  return RuleEmpty;

})(Mn.LayoutView);

RuleChild = (function(superClass) {
  extend(RuleChild, superClass);

  function RuleChild() {
    return RuleChild.__super__.constructor.apply(this, arguments);
  }

  RuleChild.prototype.template = require('./templates/rule_child');

  RuleChild.prototype.className = 'list-group-item';

  RuleChild.prototype.behaviors = {
    SelectableChild: {},
    SortableChild: {},
    Tooltips: {}
  };

  RuleChild.prototype.modelEvents = {
    'change:order': 'onReordered',
    'sync': 'onSync'
  };

  RuleChild.prototype.onReordered = function() {
    return this.model.save();
  };

  RuleChild.prototype.onSync = function() {
    return this.render();
  };

  return RuleChild;

})(Mn.LayoutView);

RuleList = (function(superClass) {
  extend(RuleList, superClass);

  function RuleList() {
    return RuleList.__super__.constructor.apply(this, arguments);
  }

  RuleList.prototype.className = 'list-group';

  RuleList.prototype.childView = RuleChild;

  RuleList.prototype.emptyView = RuleEmpty;

  RuleList.prototype.behaviors = {
    SortableList: {}
  };

  RuleList.prototype.collectionEvents = {
    'remove': 'onCollectionRemove'
  };

  RuleList.prototype.onCollectionRemove = function() {
    var ref;
    setTimeout(this.reorderCollection, 250);
    return (ref = this.collection.at(0)) != null ? ref.trigger('selected') : void 0;
  };

  return RuleList;

})(Mn.CollectionView);

RuleLayout = (function(superClass) {
  extend(RuleLayout, superClass);

  function RuleLayout() {
    return RuleLayout.__super__.constructor.apply(this, arguments);
  }

  RuleLayout.prototype.className = 'row';

  RuleLayout.prototype.template = require('./templates/rule_list_layout');

  RuleLayout.prototype.regions = {
    listRegion: '[data-region=list]',
    detailRegion: '[data-region=detail]'
  };

  RuleLayout.prototype.onRender = function() {
    var listView, ref;
    listView = new RuleList({
      collection: this.collection
    });
    window.listView = listView;
    listView.on('childview:selected', (function(_this) {
      return function(view) {
        return _this.showDetail(view.model);
      };
    })(this));
    this.listRegion.show(listView);
    return (ref = this.collection.at(0)) != null ? ref.trigger('selected') : void 0;
  };

  RuleLayout.prototype.showDetail = function(model) {
    var ruleViewer;
    ruleViewer = new RuleViewer({
      model: model
    });
    ruleViewer.on('edit', (function(_this) {
      return function(view) {
        return _this.trigger('edit', view.model);
      };
    })(this));
    return this.detailRegion.show(ruleViewer);
  };

  return RuleLayout;

})(Mn.LayoutView);

module.exports = RuleLayout;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL2Fla3Njby9naXRodWIvbWFnZWxsYW4vYXBwL2NvZmZlZS9tb2R1bGVzL2RhdGFzZXQvY29uZmlnL2tub3dsZWRnZV9ydWxlX3ZpZXdzL3J1bGVMaXN0LmNvZmZlZSIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9hZWtzY28vZ2l0aHViL21hZ2VsbGFuL2FwcC9jb2ZmZWUvbW9kdWxlcy9kYXRhc2V0L2NvbmZpZy9rbm93bGVkZ2VfcnVsZV92aWV3cy9ydWxlTGlzdC5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsSUFBQSxzREFBQTtFQUFBOzs7QUFBQSxVQUFBLEdBQWEsT0FBQSxDQUFRLGNBQVI7O0FBSVA7Ozs7Ozs7c0JBQ0osUUFBQSxHQUFVLE9BQUEsQ0FBUSx3QkFBUjs7c0JBQ1YsU0FBQSxHQUFXOzs7O0dBRlcsRUFBRSxDQUFDOztBQU1yQjs7Ozs7OztzQkFDSixRQUFBLEdBQVUsT0FBQSxDQUFRLHdCQUFSOztzQkFDVixTQUFBLEdBQVc7O3NCQUVYLFNBQUEsR0FDRTtJQUFBLGVBQUEsRUFBaUIsRUFBakI7SUFDQSxhQUFBLEVBQWUsRUFEZjtJQUVBLFFBQUEsRUFBVSxFQUZWOzs7c0JBSUYsV0FBQSxHQUNFO0lBQUEsY0FBQSxFQUFnQixhQUFoQjtJQUNBLE1BQUEsRUFBZ0IsUUFEaEI7OztzQkFHRixXQUFBLEdBQWEsU0FBQTtXQUNYLElBQUMsQ0FBQSxLQUFLLENBQUMsSUFBUCxDQUFBO0VBRFc7O3NCQUdiLE1BQUEsR0FBUSxTQUFBO1dBQ04sSUFBQyxDQUFBLE1BQUQsQ0FBQTtFQURNOzs7O0dBaEJjLEVBQUUsQ0FBQzs7QUFxQnJCOzs7Ozs7O3FCQUNKLFNBQUEsR0FBVzs7cUJBQ1gsU0FBQSxHQUFXOztxQkFDWCxTQUFBLEdBQVc7O3FCQUVYLFNBQUEsR0FDRTtJQUFBLFlBQUEsRUFBYyxFQUFkOzs7cUJBRUYsZ0JBQUEsR0FDRTtJQUFBLFFBQUEsRUFBVSxvQkFBVjs7O3FCQUlGLGtCQUFBLEdBQW9CLFNBQUE7QUFDbEIsUUFBQTtJQUFBLFVBQUEsQ0FBWSxJQUFDLENBQUEsaUJBQWIsRUFBZ0MsR0FBaEM7c0RBQ2lCLENBQUUsT0FBbkIsQ0FBMkIsVUFBM0I7RUFGa0I7Ozs7R0FiQyxFQUFFLENBQUM7O0FBbUJwQjs7Ozs7Ozt1QkFDSixTQUFBLEdBQVc7O3VCQUNYLFFBQUEsR0FBVSxPQUFBLENBQVEsOEJBQVI7O3VCQUVWLE9BQUEsR0FDRTtJQUFBLFVBQUEsRUFBYyxvQkFBZDtJQUNBLFlBQUEsRUFBYyxzQkFEZDs7O3VCQUdGLFFBQUEsR0FBVSxTQUFBO0FBQ1IsUUFBQTtJQUFBLFFBQUEsR0FBVyxJQUFJLFFBQUosQ0FBYTtNQUFFLFVBQUEsRUFBWSxJQUFDLENBQUEsVUFBZjtLQUFiO0lBQ1gsTUFBTSxDQUFDLFFBQVAsR0FBa0I7SUFDbEIsUUFBUSxDQUFDLEVBQVQsQ0FBWSxvQkFBWixFQUFrQyxDQUFBLFNBQUEsS0FBQTthQUFBLFNBQUMsSUFBRDtlQUFVLEtBQUMsQ0FBQSxVQUFELENBQVksSUFBSSxDQUFDLEtBQWpCO01BQVY7SUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLENBQWxDO0lBQ0EsSUFBQyxDQUFBLFVBQVUsQ0FBQyxJQUFaLENBQWlCLFFBQWpCO3NEQUNpQixDQUFFLE9BQW5CLENBQTJCLFVBQTNCO0VBTFE7O3VCQU9WLFVBQUEsR0FBWSxTQUFDLEtBQUQ7QUFDVixRQUFBO0lBQUEsVUFBQSxHQUFhLElBQUksVUFBSixDQUFlO01BQUUsS0FBQSxFQUFPLEtBQVQ7S0FBZjtJQUNiLFVBQVUsQ0FBQyxFQUFYLENBQWMsTUFBZCxFQUFzQixDQUFBLFNBQUEsS0FBQTthQUFBLFNBQUMsSUFBRDtlQUFVLEtBQUMsQ0FBQSxPQUFELENBQVMsTUFBVCxFQUFpQixJQUFJLENBQUMsS0FBdEI7TUFBVjtJQUFBLENBQUEsQ0FBQSxDQUFBLElBQUEsQ0FBdEI7V0FDQSxJQUFDLENBQUEsWUFBWSxDQUFDLElBQWQsQ0FBbUIsVUFBbkI7RUFIVTs7OztHQWZXLEVBQUUsQ0FBQzs7QUFzQjVCLE1BQU0sQ0FBQyxPQUFQLEdBQWlCIn0=

},{"./ruleViewer":51,"./templates/rule_child":67,"./templates/rule_empty":68,"./templates/rule_list_layout":70}],51:[function(require,module,exports){
var RuleViewer,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

RuleViewer = (function(superClass) {
  extend(RuleViewer, superClass);

  function RuleViewer() {
    return RuleViewer.__super__.constructor.apply(this, arguments);
  }

  RuleViewer.prototype.className = 'card card-block';

  RuleViewer.prototype.template = require('./templates/rule_viewer');

  RuleViewer.prototype.behaviors = {
    Confirmations: {
      message: 'Are you sure you want to destroy this Knowledge Rule?',
      confirmIcon: 'fa-trash',
      confirmText: 'DESTROY',
      confirmCss: 'btn-danger'
    }
  };

  RuleViewer.prototype.ui = {
    edit: '[data-click=edit]',
    confirmationTrigger: '[data-click=destroy]'
  };

  RuleViewer.prototype.triggers = {
    'click @ui.edit': 'edit'
  };

  RuleViewer.prototype.modelEvents = {
    'destroy': 'onModelDestroy',
    'error': 'onError'
  };

  RuleViewer.prototype.onConfirmed = function() {
    return this.model.destroy();
  };

  RuleViewer.prototype.onModelDestroy = function() {
    return this.model.collection.remove(this.model);
  };

  RuleViewer.prototype.onError = function() {
    return console.log('onError');
  };

  return RuleViewer;

})(Mn.LayoutView);

module.exports = RuleViewer;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL2Fla3Njby9naXRodWIvbWFnZWxsYW4vYXBwL2NvZmZlZS9tb2R1bGVzL2RhdGFzZXQvY29uZmlnL2tub3dsZWRnZV9ydWxlX3ZpZXdzL3J1bGVWaWV3ZXIuY29mZmVlIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiL1VzZXJzL2Fla3Njby9naXRodWIvbWFnZWxsYW4vYXBwL2NvZmZlZS9tb2R1bGVzL2RhdGFzZXQvY29uZmlnL2tub3dsZWRnZV9ydWxlX3ZpZXdzL3J1bGVWaWV3ZXIuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLElBQUEsVUFBQTtFQUFBOzs7QUFBTTs7Ozs7Ozt1QkFDSixTQUFBLEdBQVc7O3VCQUNYLFFBQUEsR0FBVSxPQUFBLENBQVEseUJBQVI7O3VCQUVWLFNBQUEsR0FDRTtJQUFBLGFBQUEsRUFDRTtNQUFBLE9BQUEsRUFBYyx1REFBZDtNQUNBLFdBQUEsRUFBYyxVQURkO01BRUEsV0FBQSxFQUFjLFNBRmQ7TUFHQSxVQUFBLEVBQWMsWUFIZDtLQURGOzs7dUJBTUYsRUFBQSxHQUNFO0lBQUEsSUFBQSxFQUFzQixtQkFBdEI7SUFDQSxtQkFBQSxFQUFzQixzQkFEdEI7Ozt1QkFHRixRQUFBLEdBQ0U7SUFBQSxnQkFBQSxFQUFrQixNQUFsQjs7O3VCQUVGLFdBQUEsR0FDRTtJQUFBLFNBQUEsRUFBWSxnQkFBWjtJQUNBLE9BQUEsRUFBWSxTQURaOzs7dUJBR0YsV0FBQSxHQUFhLFNBQUE7V0FDWCxJQUFDLENBQUEsS0FBSyxDQUFDLE9BQVAsQ0FBQTtFQURXOzt1QkFHYixjQUFBLEdBQWdCLFNBQUE7V0FDZCxJQUFDLENBQUEsS0FBSyxDQUFDLFVBQVUsQ0FBQyxNQUFsQixDQUF5QixJQUFDLENBQUEsS0FBMUI7RUFEYzs7dUJBR2hCLE9BQUEsR0FBUyxTQUFBO1dBQ1AsT0FBTyxDQUFDLEdBQVIsQ0FBWSxTQUFaO0VBRE87Ozs7R0E1QmMsRUFBRSxDQUFDOztBQWlDNUIsTUFBTSxDQUFDLE9BQVAsR0FBaUIifQ==

},{"./templates/rule_viewer":71}],52:[function(require,module,exports){
var jade = require("jade/runtime");

module.exports = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (availableActions, isNew, undefined) {
jade_mixins["actionSelector"] = jade_interp = function(opts){
var block = (this && this.block), attributes = (this && this.attributes) || {};
buf.push("<button data-select=\"action\"" + (jade.attr("data-action", opts.action, true, false)) + " class=\"btn btn-secondary\"><i" + (jade.cls(['fa','fa-fw',opts.icon], [null,null,true])) + "></i>&nbsp;\n" + (jade.escape((jade_interp = opts.text) == null ? '' : jade_interp)) + "</button>");
};
buf.push("<div class=\"col-xs-12\"><p class=\"lead\">Action</p></div>");
if ( isNew)
{
buf.push("<div class=\"col-xs-12\"><div class=\"btn-group w-100\">");
// iterate availableActions
;(function(){
  var $$obj = availableActions;
  if ('number' == typeof $$obj.length) {

    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {
      var actionType = $$obj[$index];

jade_mixins["actionSelector"](actionType);
    }

  } else {
    var $$l = 0;
    for (var $index in $$obj) {
      $$l++;      var actionType = $$obj[$index];

jade_mixins["actionSelector"](actionType);
    }

  }
}).call(this);

buf.push("</div></div>");
}
buf.push("<div data-region=\"action-type\" class=\"col-xs-12 m-t-1\"></div>");}.call(this,"availableActions" in locals_for_with?locals_for_with.availableActions:typeof availableActions!=="undefined"?availableActions:undefined,"isNew" in locals_for_with?locals_for_with.isNew:typeof isNew!=="undefined"?isNew:undefined,"undefined" in locals_for_with?locals_for_with.undefined:typeof undefined!=="undefined"?undefined:undefined));;return buf.join("");
};
},{"jade/runtime":187}],53:[function(require,module,exports){
var jade = require("jade/runtime");

module.exports = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;

buf.push("<div class=\"col-xs-12\"><input type=\"hidden\" name=\"action\" value=\"block\"/><div class=\"alert alert-info\"><i class=\"fa fa-fw fa-hand-stop-o\"></i>&nbsp;<strong>Blocking</strong><br/>Short-circuits the definition chain if the supplied constraint is false.</div></div>");;return buf.join("");
};
},{"jade/runtime":187}],54:[function(require,module,exports){
var jade = require("jade/runtime");

module.exports = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (Array, sourceOptions) {
jade_mixins["formGroup"] = jade_interp = function(opts){
var block = (this && this.block), attributes = (this && this.attributes) || {};
buf.push("<fieldset" + (jade.cls(['form-group',opts.formGroupCss], [null,true])) + ">");
if ( opts.label)
{
buf.push("<label class=\"form-control-label\">" + (jade.escape(null == (jade_interp = opts.label) ? "" : jade_interp)) + "</label>");
}
block && block();
buf.push("</fieldset>");
};
buf.push("");








buf.push("");








buf.push("");
jade_mixins["formSelect"] = jade_interp = function(opts){
var block = (this && this.block), attributes = (this && this.attributes) || {};
jade_mixins["formGroup"].call({
block: function(){
buf.push("<select" + (jade.attr("name", opts.name, true, false)) + (jade.attr("multiple", opts.multiple, true, false)) + " class=\"form-control c-select\">");
if ( opts.options)
{
// iterate opts.options
;(function(){
  var $$obj = opts.options;
  if ('number' == typeof $$obj.length) {

    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {
      var opt = $$obj[$index];

if ( Array.isArray(opt))
{
buf.push("<option" + (jade.attr("value", opt[0], true, false)) + ">" + (jade.escape(null == (jade_interp = opt[1]) ? "" : jade_interp)) + "</option>");
}
else
{
buf.push("<option>" + (jade.escape(null == (jade_interp = opt) ? "" : jade_interp)) + "</option>");
}
    }

  } else {
    var $$l = 0;
    for (var $index in $$obj) {
      $$l++;      var opt = $$obj[$index];

if ( Array.isArray(opt))
{
buf.push("<option" + (jade.attr("value", opt[0], true, false)) + ">" + (jade.escape(null == (jade_interp = opt[1]) ? "" : jade_interp)) + "</option>");
}
else
{
buf.push("<option>" + (jade.escape(null == (jade_interp = opt) ? "" : jade_interp)) + "</option>");
}
    }

  }
}).call(this);

}
buf.push("</select>");
}
}, opts);
};
buf.push("");




buf.push("");
jade_mixins["button"] = jade_interp = function(opts){
var block = (this && this.block), attributes = (this && this.attributes) || {};
buf.push("<button" + (jade.attrs(jade.merge([{"type": "button","class": "btn"},attributes]), false)) + ">");
if ( opts.icon)
{
buf.push("<i" + (jade.cls(['fa','fa-fw',opts.icon], [null,null,true])) + "></i>&nbsp;");
}
buf.push((jade.escape(null == (jade_interp = opts.text) ? "" : jade_interp)) + "</button>");
};
buf.push("");














buf.push("");














buf.push("<div class=\"col-xs-12\"><input type=\"hidden\" name=\"action\" value=\"clone\"/><div class=\"alert alert-info\"><i class=\"fa fa-fw fa-copy\"></i>&nbsp;<strong>Clone</strong><br/>Clones the attribute defined in the Clone From field.</div></div><div class=\"col-xs-4\">");
jade_mixins["formSelect"]({ label: 'Clone From', name: 'clone_source', options: sourceOptions });
buf.push("</div>");}.call(this,"Array" in locals_for_with?locals_for_with.Array:typeof Array!=="undefined"?Array:undefined,"sourceOptions" in locals_for_with?locals_for_with.sourceOptions:typeof sourceOptions!=="undefined"?sourceOptions:undefined));;return buf.join("");
};
},{"jade/runtime":187}],55:[function(require,module,exports){
var jade = require("jade/runtime");

module.exports = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;

jade_mixins["formGroup"] = jade_interp = function(opts){
var block = (this && this.block), attributes = (this && this.attributes) || {};
buf.push("<fieldset" + (jade.cls(['form-group',opts.formGroupCss], [null,true])) + ">");
if ( opts.label)
{
buf.push("<label class=\"form-control-label\">" + (jade.escape(null == (jade_interp = opts.label) ? "" : jade_interp)) + "</label>");
}
block && block();
buf.push("</fieldset>");
};
buf.push("");
jade_mixins["formInput"] = jade_interp = function(opts){
var block = (this && this.block), attributes = (this && this.attributes) || {};
jade_mixins["formGroup"].call({
block: function(){
buf.push("<input" + (jade.attrs(jade.merge([{"placeholder": jade.escape(opts.placeholder),"name": jade.escape(opts.name),"type": jade.escape(opts.type),"value": jade.escape(opts.value),"class": "form-control"},attributes]), false)) + "/>");
}
}, opts);
};
buf.push("");








buf.push("");


































buf.push("");




buf.push("");
jade_mixins["button"] = jade_interp = function(opts){
var block = (this && this.block), attributes = (this && this.attributes) || {};
buf.push("<button" + (jade.attrs(jade.merge([{"type": "button","class": "btn"},attributes]), false)) + ">");
if ( opts.icon)
{
buf.push("<i" + (jade.cls(['fa','fa-fw',opts.icon], [null,null,true])) + "></i>&nbsp;");
}
buf.push((jade.escape(null == (jade_interp = opts.text) ? "" : jade_interp)) + "</button>");
};
buf.push("");














buf.push("");














buf.push("<div class=\"col-xs-12\"><input type=\"hidden\" name=\"action\" value=\"static\"/><div class=\"alert alert-info\"><i class=\"fa fa-fw fa-quote-right\"></i>&nbsp;<strong>Literal</strong><br/>Assigns the supplied literal text to the rule's target property.</div></div><div class=\"col-xs-12\">");
jade_mixins["formInput"]({ label: 'Literal Text', placeholder: 'Literal Text', name: 'literal_text', type: 'text' });
buf.push("</div>");;return buf.join("");
};
},{"jade/runtime":187}],56:[function(require,module,exports){
var jade = require("jade/runtime");

module.exports = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (Array, sourceOptions) {
jade_mixins["formGroup"] = jade_interp = function(opts){
var block = (this && this.block), attributes = (this && this.attributes) || {};
buf.push("<fieldset" + (jade.cls(['form-group',opts.formGroupCss], [null,true])) + ">");
if ( opts.label)
{
buf.push("<label class=\"form-control-label\">" + (jade.escape(null == (jade_interp = opts.label) ? "" : jade_interp)) + "</label>");
}
block && block();
buf.push("</fieldset>");
};
buf.push("");
jade_mixins["formInput"] = jade_interp = function(opts){
var block = (this && this.block), attributes = (this && this.attributes) || {};
jade_mixins["formGroup"].call({
block: function(){
buf.push("<input" + (jade.attrs(jade.merge([{"placeholder": jade.escape(opts.placeholder),"name": jade.escape(opts.name),"type": jade.escape(opts.type),"value": jade.escape(opts.value),"class": "form-control"},attributes]), false)) + "/>");
}
}, opts);
};
buf.push("");








buf.push("");
jade_mixins["formSelect"] = jade_interp = function(opts){
var block = (this && this.block), attributes = (this && this.attributes) || {};
jade_mixins["formGroup"].call({
block: function(){
buf.push("<select" + (jade.attr("name", opts.name, true, false)) + (jade.attr("multiple", opts.multiple, true, false)) + " class=\"form-control c-select\">");
if ( opts.options)
{
// iterate opts.options
;(function(){
  var $$obj = opts.options;
  if ('number' == typeof $$obj.length) {

    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {
      var opt = $$obj[$index];

if ( Array.isArray(opt))
{
buf.push("<option" + (jade.attr("value", opt[0], true, false)) + ">" + (jade.escape(null == (jade_interp = opt[1]) ? "" : jade_interp)) + "</option>");
}
else
{
buf.push("<option>" + (jade.escape(null == (jade_interp = opt) ? "" : jade_interp)) + "</option>");
}
    }

  } else {
    var $$l = 0;
    for (var $index in $$obj) {
      $$l++;      var opt = $$obj[$index];

if ( Array.isArray(opt))
{
buf.push("<option" + (jade.attr("value", opt[0], true, false)) + ">" + (jade.escape(null == (jade_interp = opt[1]) ? "" : jade_interp)) + "</option>");
}
else
{
buf.push("<option>" + (jade.escape(null == (jade_interp = opt) ? "" : jade_interp)) + "</option>");
}
    }

  }
}).call(this);

}
buf.push("</select>");
}
}, opts);
};
buf.push("");




buf.push("");
jade_mixins["button"] = jade_interp = function(opts){
var block = (this && this.block), attributes = (this && this.attributes) || {};
buf.push("<button" + (jade.attrs(jade.merge([{"type": "button","class": "btn"},attributes]), false)) + ">");
if ( opts.icon)
{
buf.push("<i" + (jade.cls(['fa','fa-fw',opts.icon], [null,null,true])) + "></i>&nbsp;");
}
buf.push((jade.escape(null == (jade_interp = opts.text) ? "" : jade_interp)) + "</button>");
};
buf.push("");














buf.push("");














buf.push("<div class=\"col-xs-12\"><input type=\"hidden\" name=\"action\" value=\"replace\"/><div class=\"alert alert-info\"><i class=\"fa fa-fw fa-strikethrough\"></i>&nbsp;<strong>Replace</strong><br/>Returns a copy of text source with text replacement.</div></div><div class=\"col-xs-12\">");
jade_mixins["formSelect"]({ label: 'Text Source', name: 'replace_source', options: sourceOptions });
buf.push("</div><div class=\"col-xs-12\">");
jade_mixins["formInput"]({ label: 'Text to Replace', placeholder: 'Text to Replace', name: 'replace_text', type: 'text' });
buf.push("</div><div class=\"col-xs-12\">");
jade_mixins["formInput"]({ label: 'Replace With', placeholder: 'Replace With', name: 'replace_with', type: 'text' });
buf.push("</div>");}.call(this,"Array" in locals_for_with?locals_for_with.Array:typeof Array!=="undefined"?Array:undefined,"sourceOptions" in locals_for_with?locals_for_with.sourceOptions:typeof sourceOptions!=="undefined"?sourceOptions:undefined));;return buf.join("");
};
},{"jade/runtime":187}],57:[function(require,module,exports){
var jade = require("jade/runtime");

module.exports = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;

jade_mixins["formGroup"] = jade_interp = function(opts){
var block = (this && this.block), attributes = (this && this.attributes) || {};
buf.push("<fieldset" + (jade.cls(['form-group',opts.formGroupCss], [null,true])) + ">");
if ( opts.label)
{
buf.push("<label class=\"form-control-label\">" + (jade.escape(null == (jade_interp = opts.label) ? "" : jade_interp)) + "</label>");
}
block && block();
buf.push("</fieldset>");
};
buf.push("");








buf.push("");








buf.push("");


































buf.push("");




buf.push("");
jade_mixins["button"] = jade_interp = function(opts){
var block = (this && this.block), attributes = (this && this.attributes) || {};
buf.push("<button" + (jade.attrs(jade.merge([{"type": "button","class": "btn"},attributes]), false)) + ">");
if ( opts.icon)
{
buf.push("<i" + (jade.cls(['fa','fa-fw',opts.icon], [null,null,true])) + "></i>&nbsp;");
}
buf.push((jade.escape(null == (jade_interp = opts.text) ? "" : jade_interp)) + "</button>");
};
buf.push("");
jade_mixins["submitButton"] = jade_interp = function(opts){
var block = (this && this.block), attributes = (this && this.attributes) || {};
if (!( opts.text))
{
opts.text = 'Submit'
}
if (!( opts.icon))
{
opts.icon = 'fa-check'
}
jade_mixins["button"].call({
attributes: jade.merge([{"data-click": "submit","class": "btn-success"},attributes])
}, opts);
};
buf.push("");
jade_mixins["cancelButton"] = jade_interp = function(opts){
var block = (this && this.block), attributes = (this && this.attributes) || {};
if (!( opts.text))
{
opts.text = 'Cancel'
}
if (!( opts.icon))
{
opts.icon = 'fa-times'
}
jade_mixins["button"].call({
attributes: jade.merge([{"data-click": "cancel","class": "btn-secondary"},attributes])
}, opts);
};
buf.push("<div class=\"row\"><div class=\"col-xs-12\"><p class=\"lead\">Apply Rules</p></div><div class=\"col-xs-12\"><div class=\"alert alert-info\"><i class=\"fa fa-fw fa-question-circle\"></i>&nbsp;<strong>HELP</strong><p>This action applies the defined rules to the dataset and updates its facets.</p></div></div><div class=\"col-xs-12\">");
jade_mixins["cancelButton"]({});
jade_mixins["submitButton"]({});
buf.push("</div></div>");;return buf.join("");
};
},{"jade/runtime":187}],58:[function(require,module,exports){
var jade = require("jade/runtime");

module.exports = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (Array, operationOptions, sourceOptions) {
jade_mixins["formGroup"] = jade_interp = function(opts){
var block = (this && this.block), attributes = (this && this.attributes) || {};
buf.push("<fieldset" + (jade.cls(['form-group',opts.formGroupCss], [null,true])) + ">");
if ( opts.label)
{
buf.push("<label class=\"form-control-label\">" + (jade.escape(null == (jade_interp = opts.label) ? "" : jade_interp)) + "</label>");
}
block && block();
buf.push("</fieldset>");
};
buf.push("");
jade_mixins["formInput"] = jade_interp = function(opts){
var block = (this && this.block), attributes = (this && this.attributes) || {};
jade_mixins["formGroup"].call({
block: function(){
buf.push("<input" + (jade.attrs(jade.merge([{"placeholder": jade.escape(opts.placeholder),"name": jade.escape(opts.name),"type": jade.escape(opts.type),"value": jade.escape(opts.value),"class": "form-control"},attributes]), false)) + "/>");
}
}, opts);
};
buf.push("");








buf.push("");
jade_mixins["formSelect"] = jade_interp = function(opts){
var block = (this && this.block), attributes = (this && this.attributes) || {};
jade_mixins["formGroup"].call({
block: function(){
buf.push("<select" + (jade.attr("name", opts.name, true, false)) + (jade.attr("multiple", opts.multiple, true, false)) + " class=\"form-control c-select\">");
if ( opts.options)
{
// iterate opts.options
;(function(){
  var $$obj = opts.options;
  if ('number' == typeof $$obj.length) {

    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {
      var opt = $$obj[$index];

if ( Array.isArray(opt))
{
buf.push("<option" + (jade.attr("value", opt[0], true, false)) + ">" + (jade.escape(null == (jade_interp = opt[1]) ? "" : jade_interp)) + "</option>");
}
else
{
buf.push("<option>" + (jade.escape(null == (jade_interp = opt) ? "" : jade_interp)) + "</option>");
}
    }

  } else {
    var $$l = 0;
    for (var $index in $$obj) {
      $$l++;      var opt = $$obj[$index];

if ( Array.isArray(opt))
{
buf.push("<option" + (jade.attr("value", opt[0], true, false)) + ">" + (jade.escape(null == (jade_interp = opt[1]) ? "" : jade_interp)) + "</option>");
}
else
{
buf.push("<option>" + (jade.escape(null == (jade_interp = opt) ? "" : jade_interp)) + "</option>");
}
    }

  }
}).call(this);

}
buf.push("</select>");
}
}, opts);
};
buf.push("");




buf.push("");
jade_mixins["button"] = jade_interp = function(opts){
var block = (this && this.block), attributes = (this && this.attributes) || {};
buf.push("<button" + (jade.attrs(jade.merge([{"type": "button","class": "btn"},attributes]), false)) + ">");
if ( opts.icon)
{
buf.push("<i" + (jade.cls(['fa','fa-fw',opts.icon], [null,null,true])) + "></i>&nbsp;");
}
buf.push((jade.escape(null == (jade_interp = opts.text) ? "" : jade_interp)) + "</button>");
};
buf.push("");














buf.push("");














buf.push("<div class=\"col-xs-12\"><p class=\"lead\">Constraint</p></div><div class=\"col-xs-4\">");
jade_mixins["formSelect"]({ label: 'Source', name: 'source', options: sourceOptions });
buf.push("</div><div class=\"col-xs-4\">");
jade_mixins["formSelect"]({ label: 'Operation', name: 'operation', options: operationOptions });
buf.push("</div><div class=\"col-xs-4\">");
jade_mixins["formInput"]({ label: 'Value', placeholder: 'Value', name: 'value', type: 'text' });
buf.push("</div>");}.call(this,"Array" in locals_for_with?locals_for_with.Array:typeof Array!=="undefined"?Array:undefined,"operationOptions" in locals_for_with?locals_for_with.operationOptions:typeof operationOptions!=="undefined"?operationOptions:undefined,"sourceOptions" in locals_for_with?locals_for_with.sourceOptions:typeof sourceOptions!=="undefined"?sourceOptions:undefined));;return buf.join("");
};
},{"jade/runtime":187}],59:[function(require,module,exports){
var jade = require("jade/runtime");

module.exports = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (action, tooltipAttrs) {
tooltipAttrs = { 'data-placement': 'left', 'data-toggle': 'tooltip' }
buf.push("<div class=\"row\"><div class=\"col-xs-2\"><i class=\"fa fa-fw fa-bars cursor-pointer sortable\"></i></div><div class=\"col-xs-10\">" + (jade.escape(null == (jade_interp = action) ? "" : jade_interp)) + "</div></div>");}.call(this,"action" in locals_for_with?locals_for_with.action:typeof action!=="undefined"?action:undefined,"tooltipAttrs" in locals_for_with?locals_for_with.tooltipAttrs:typeof tooltipAttrs!=="undefined"?tooltipAttrs:undefined));;return buf.join("");
};
},{"jade/runtime":187}],60:[function(require,module,exports){
var jade = require("jade/runtime");

module.exports = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;

buf.push("<div class=\"row\"><div class=\"col-xs-12\">No Definitions.</div></div>");;return buf.join("");
};
},{"jade/runtime":187}],61:[function(require,module,exports){
var jade = require("jade/runtime");

module.exports = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (isNew) {
jade_mixins["formGroup"] = jade_interp = function(opts){
var block = (this && this.block), attributes = (this && this.attributes) || {};
buf.push("<fieldset" + (jade.cls(['form-group',opts.formGroupCss], [null,true])) + ">");
if ( opts.label)
{
buf.push("<label class=\"form-control-label\">" + (jade.escape(null == (jade_interp = opts.label) ? "" : jade_interp)) + "</label>");
}
block && block();
buf.push("</fieldset>");
};
buf.push("");








buf.push("");








buf.push("");


































buf.push("");




buf.push("");
jade_mixins["button"] = jade_interp = function(opts){
var block = (this && this.block), attributes = (this && this.attributes) || {};
buf.push("<button" + (jade.attrs(jade.merge([{"type": "button","class": "btn"},attributes]), false)) + ">");
if ( opts.icon)
{
buf.push("<i" + (jade.cls(['fa','fa-fw',opts.icon], [null,null,true])) + "></i>&nbsp;");
}
buf.push((jade.escape(null == (jade_interp = opts.text) ? "" : jade_interp)) + "</button>");
};
buf.push("");
jade_mixins["submitButton"] = jade_interp = function(opts){
var block = (this && this.block), attributes = (this && this.attributes) || {};
if (!( opts.text))
{
opts.text = 'Submit'
}
if (!( opts.icon))
{
opts.icon = 'fa-check'
}
jade_mixins["button"].call({
attributes: jade.merge([{"data-click": "submit","class": "btn-success"},attributes])
}, opts);
};
buf.push("");
jade_mixins["cancelButton"] = jade_interp = function(opts){
var block = (this && this.block), attributes = (this && this.attributes) || {};
if (!( opts.text))
{
opts.text = 'Cancel'
}
if (!( opts.icon))
{
opts.icon = 'fa-times'
}
jade_mixins["button"].call({
attributes: jade.merge([{"data-click": "cancel","class": "btn-secondary"},attributes])
}, opts);
};
buf.push("<div class=\"col-xs-12\"><div class=\"card card-block\"><div class=\"row\"><div class=\"col-xs-12\"><p class=\"lead m-b-0\">");
if ( isNew)
{
buf.push("New Definition");
}
else
{
buf.push("Edit Definition");
}
buf.push("</p></div><div class=\"col-xs-12\"><hr/></div><div data-region=\"constraint\" class=\"col-xs-12\"></div><div class=\"col-xs-12\"><hr/></div><div data-region=\"action\" class=\"col-xs-12\"></div><div class=\"col-xs-12\"><hr/></div><div class=\"col-xs-12 text-xs-right\">");
jade_mixins["cancelButton"]({});
jade_mixins["submitButton"]({});
buf.push("</div></div></div></div>");}.call(this,"isNew" in locals_for_with?locals_for_with.isNew:typeof isNew!=="undefined"?isNew:undefined));;return buf.join("");
};
},{"jade/runtime":187}],62:[function(require,module,exports){
var jade = require("jade/runtime");

module.exports = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;

buf.push("<div data-region=\"list\" class=\"col-xs-4\"></div><div data-region=\"detail\" class=\"col-xs-8\"><div class=\"alert alert-warning\">No Definition selected.</div></div>");;return buf.join("");
};
},{"jade/runtime":187}],63:[function(require,module,exports){
var jade = require("jade/runtime");

module.exports = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (action, clone_source, literal_text, operation, replace_source, replace_text, replace_with, source, value) {
buf.push("<div class=\"col-xs-12\"><div class=\"card card-block\"><div class=\"row\"><div class=\"col-xs-6\"><p class=\"lead m-b-0\">Definition</p></div><div class=\"col-xs-6 text-xs-right\"><button data-click=\"edit\" class=\"btn btn-sm btn-secondary m-r-1\"><i class=\"fa fa-fw fa-pencil\"></i>&nbsp;\nEdit</button><button data-click=\"discard\" class=\"btn btn-sm btn-danger-outline\"><i class=\"fa fa-fw fa-trash\"></i>&nbsp;\nDiscard</button></div><div class=\"col-xs-12\"><hr/></div><div class=\"col-xs-12\"><div class=\"row\"><div class=\"col-xs-12\"><p class=\"lead\">Constraint</p></div><div class=\"col-xs-4\"><strong>Source</strong></div><div class=\"col-xs-4\"><strong>Operation</strong></div><div class=\"col-xs-4\"><strong>Value</strong></div><div class=\"col-xs-4\">" + (jade.escape(null == (jade_interp = source) ? "" : jade_interp)) + "</div><div class=\"col-xs-4\">" + (jade.escape(null == (jade_interp = operation) ? "" : jade_interp)) + "</div><div class=\"col-xs-4\">" + (jade.escape(null == (jade_interp = value) ? "" : jade_interp)) + "</div></div><div class=\"row\"><div class=\"col-xs-12\"><hr/></div></div><div class=\"row\"><div class=\"col-xs-12\"><p class=\"lead\">Action</p></div>");
if ( action == 'literal')
{
buf.push("<div class=\"col-xs-6\"><strong>Action Type</strong></div><div class=\"col-xs-6\"><strong>Literal Text</strong></div><div class=\"col-xs-6\">Literal</div><div class=\"col-xs-6\">" + (jade.escape(null == (jade_interp = literal_text) ? "" : jade_interp)) + "</div>");
}
if ( action == 'block')
{
buf.push("<div class=\"col-xs-12\"><strong>Action Type</strong></div><div class=\"col-xs-12\">Block</div>");
}
if ( action == 'clone')
{
buf.push("<div class=\"col-xs-6\"><strong>Action Type</strong></div><div class=\"col-xs-6\"><strong>Clone From</strong></div><div class=\"col-xs-6\">Clone</div><div class=\"col-xs-6\">" + (jade.escape(null == (jade_interp = clone_source) ? "" : jade_interp)) + "</div>");
}
if ( action == 'replace')
{
buf.push("<div class=\"col-xs-6\"><strong>Action Type</strong></div><div class=\"col-xs-6\"><strong>Text Source</strong></div><div class=\"col-xs-6\">Replace</div><div class=\"col-xs-6\">" + (jade.escape(null == (jade_interp = replace_source) ? "" : jade_interp)) + "</div><div class=\"col-xs-12\"><strong>Text to Replace</strong></div><div class=\"col-xs-12\">" + (jade.escape(null == (jade_interp = replace_text) ? "" : jade_interp)) + "</div><div class=\"col-xs-12\"><strong>Replace With</strong></div><div class=\"col-xs-12\">" + (jade.escape(null == (jade_interp = replace_with) ? "" : jade_interp)) + "</div>");
}
buf.push("</div></div></div></div></div>");}.call(this,"action" in locals_for_with?locals_for_with.action:typeof action!=="undefined"?action:undefined,"clone_source" in locals_for_with?locals_for_with.clone_source:typeof clone_source!=="undefined"?clone_source:undefined,"literal_text" in locals_for_with?locals_for_with.literal_text:typeof literal_text!=="undefined"?literal_text:undefined,"operation" in locals_for_with?locals_for_with.operation:typeof operation!=="undefined"?operation:undefined,"replace_source" in locals_for_with?locals_for_with.replace_source:typeof replace_source!=="undefined"?replace_source:undefined,"replace_text" in locals_for_with?locals_for_with.replace_text:typeof replace_text!=="undefined"?replace_text:undefined,"replace_with" in locals_for_with?locals_for_with.replace_with:typeof replace_with!=="undefined"?replace_with:undefined,"source" in locals_for_with?locals_for_with.source:typeof source!=="undefined"?source:undefined,"value" in locals_for_with?locals_for_with.value:typeof value!=="undefined"?value:undefined));;return buf.join("");
};
},{"jade/runtime":187}],64:[function(require,module,exports){
var jade = require("jade/runtime");

module.exports = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;

buf.push("<div class=\"col-xs-12\"><div class=\"row\"><div class=\"col-xs-6\"><p class=\"lead m-b-0\">Knowledge Rules</p></div><div class=\"col-xs-6 text-xs-right\"><button data-click=\"new\" class=\"btn btn-sm btn-primary-outline m-r-2\"><i class=\"fa fa-fw fa-plus\"></i>&nbsp;\nNew Rule</button><button data-click=\"apply\" class=\"btn btn-sm btn-success-outline m-r-2\"><i class=\"fa fa-fw fa-check-circle-o\"></i>&nbsp;\nApply Rules</button><button data-click=\"reset\" class=\"btn btn-sm btn-danger-outline\"><i class=\"fa fa-fw fa-refresh\"></i>&nbsp;\nReset</button></div></div><div class=\"row\"><div class=\"col-xs-12\"><hr/></div></div><div class=\"row\"><div data-region=\"content\" class=\"col-xs-12\"></div></div></div>");;return buf.join("");
};
},{"jade/runtime":187}],65:[function(require,module,exports){
var jade = require("jade/runtime");

module.exports = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (dropdown, undefined) {
buf.push("<div class=\"col-xs-12\"><div class=\"form-group\"><label>Target Property</label><select name=\"target_property\" placeholder=\"Target Property\" class=\"form-control\">");
// iterate dropdown
;(function(){
  var $$obj = dropdown;
  if ('number' == typeof $$obj.length) {

    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {
      var group = $$obj[$index];

buf.push("<optgroup" + (jade.attr("label", group.label, true, false)) + ">");
// iterate group.items
;(function(){
  var $$obj = group.items;
  if ('number' == typeof $$obj.length) {

    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {
      var item = $$obj[$index];

buf.push("<option" + (jade.attr("value", item, true, false)) + ">" + (jade.escape(null == (jade_interp = item) ? "" : jade_interp)) + "</option>");
    }

  } else {
    var $$l = 0;
    for (var $index in $$obj) {
      $$l++;      var item = $$obj[$index];

buf.push("<option" + (jade.attr("value", item, true, false)) + ">" + (jade.escape(null == (jade_interp = item) ? "" : jade_interp)) + "</option>");
    }

  }
}).call(this);

buf.push("</optgroup>");
    }

  } else {
    var $$l = 0;
    for (var $index in $$obj) {
      $$l++;      var group = $$obj[$index];

buf.push("<optgroup" + (jade.attr("label", group.label, true, false)) + ">");
// iterate group.items
;(function(){
  var $$obj = group.items;
  if ('number' == typeof $$obj.length) {

    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {
      var item = $$obj[$index];

buf.push("<option" + (jade.attr("value", item, true, false)) + ">" + (jade.escape(null == (jade_interp = item) ? "" : jade_interp)) + "</option>");
    }

  } else {
    var $$l = 0;
    for (var $index in $$obj) {
      $$l++;      var item = $$obj[$index];

buf.push("<option" + (jade.attr("value", item, true, false)) + ">" + (jade.escape(null == (jade_interp = item) ? "" : jade_interp)) + "</option>");
    }

  }
}).call(this);

buf.push("</optgroup>");
    }

  }
}).call(this);

buf.push("</select></div></div>");}.call(this,"dropdown" in locals_for_with?locals_for_with.dropdown:typeof dropdown!=="undefined"?dropdown:undefined,"undefined" in locals_for_with?locals_for_with.undefined:typeof undefined!=="undefined"?undefined:undefined));;return buf.join("");
};
},{"jade/runtime":187}],66:[function(require,module,exports){
var jade = require("jade/runtime");

module.exports = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;

jade_mixins["formGroup"] = jade_interp = function(opts){
var block = (this && this.block), attributes = (this && this.attributes) || {};
buf.push("<fieldset" + (jade.cls(['form-group',opts.formGroupCss], [null,true])) + ">");
if ( opts.label)
{
buf.push("<label class=\"form-control-label\">" + (jade.escape(null == (jade_interp = opts.label) ? "" : jade_interp)) + "</label>");
}
block && block();
buf.push("</fieldset>");
};
buf.push("");








buf.push("");








buf.push("");


































buf.push("");




buf.push("");
jade_mixins["button"] = jade_interp = function(opts){
var block = (this && this.block), attributes = (this && this.attributes) || {};
buf.push("<button" + (jade.attrs(jade.merge([{"type": "button","class": "btn"},attributes]), false)) + ">");
if ( opts.icon)
{
buf.push("<i" + (jade.cls(['fa','fa-fw',opts.icon], [null,null,true])) + "></i>&nbsp;");
}
buf.push((jade.escape(null == (jade_interp = opts.text) ? "" : jade_interp)) + "</button>");
};
buf.push("");
jade_mixins["submitButton"] = jade_interp = function(opts){
var block = (this && this.block), attributes = (this && this.attributes) || {};
if (!( opts.text))
{
opts.text = 'Submit'
}
if (!( opts.icon))
{
opts.icon = 'fa-check'
}
jade_mixins["button"].call({
attributes: jade.merge([{"data-click": "submit","class": "btn-success"},attributes])
}, opts);
};
buf.push("");
jade_mixins["cancelButton"] = jade_interp = function(opts){
var block = (this && this.block), attributes = (this && this.attributes) || {};
if (!( opts.text))
{
opts.text = 'Cancel'
}
if (!( opts.icon))
{
opts.icon = 'fa-times'
}
jade_mixins["button"].call({
attributes: jade.merge([{"data-click": "cancel","class": "btn-secondary"},attributes])
}, opts);
};
buf.push("<div class=\"row\"><div class=\"col-xs-12\"><p class=\"lead\">Reset Rules</p></div><div class=\"col-xs-12\"><div class=\"alert alert-danger\"><i class=\"fa fa-fw fa-warning\"></i>&nbsp;<strong>WARNING</strong><p>This action restores the dataset to its default values before any rules were applied. This action is destructive.</p></div></div><div class=\"col-xs-12\">");
jade_mixins["cancelButton"]({});
jade_mixins["submitButton"]({});
buf.push("</div></div>");;return buf.join("");
};
},{"jade/runtime":187}],67:[function(require,module,exports){
var jade = require("jade/runtime");

module.exports = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (target_property, tooltipAttrs) {
tooltipAttrs = { 'data-placement': 'left', 'data-toggle': 'tooltip' }
buf.push("<div class=\"row\"><div class=\"col-xs-2\"><i class=\"fa fa-fw fa-bars cursor-pointer sortable\"></i></div><div class=\"col-xs-10\">" + (jade.escape(null == (jade_interp = target_property) ? "" : jade_interp)) + "</div></div>");}.call(this,"target_property" in locals_for_with?locals_for_with.target_property:typeof target_property!=="undefined"?target_property:undefined,"tooltipAttrs" in locals_for_with?locals_for_with.tooltipAttrs:typeof tooltipAttrs!=="undefined"?tooltipAttrs:undefined));;return buf.join("");
};
},{"jade/runtime":187}],68:[function(require,module,exports){
var jade = require("jade/runtime");

module.exports = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;

buf.push("<div class=\"row\"><div class=\"col-xs-12\">No Rules Defined.</div></div>");;return buf.join("");
};
},{"jade/runtime":187}],69:[function(require,module,exports){
var jade = require("jade/runtime");

module.exports = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;

jade_mixins["formGroup"] = jade_interp = function(opts){
var block = (this && this.block), attributes = (this && this.attributes) || {};
buf.push("<fieldset" + (jade.cls(['form-group',opts.formGroupCss], [null,true])) + ">");
if ( opts.label)
{
buf.push("<label class=\"form-control-label\">" + (jade.escape(null == (jade_interp = opts.label) ? "" : jade_interp)) + "</label>");
}
block && block();
buf.push("</fieldset>");
};
buf.push("");








buf.push("");








buf.push("");


































buf.push("");




buf.push("");
jade_mixins["button"] = jade_interp = function(opts){
var block = (this && this.block), attributes = (this && this.attributes) || {};
buf.push("<button" + (jade.attrs(jade.merge([{"type": "button","class": "btn"},attributes]), false)) + ">");
if ( opts.icon)
{
buf.push("<i" + (jade.cls(['fa','fa-fw',opts.icon], [null,null,true])) + "></i>&nbsp;");
}
buf.push((jade.escape(null == (jade_interp = opts.text) ? "" : jade_interp)) + "</button>");
};
buf.push("");
jade_mixins["submitButton"] = jade_interp = function(opts){
var block = (this && this.block), attributes = (this && this.attributes) || {};
if (!( opts.text))
{
opts.text = 'Submit'
}
if (!( opts.icon))
{
opts.icon = 'fa-check'
}
jade_mixins["button"].call({
attributes: jade.merge([{"data-click": "submit","class": "btn-success"},attributes])
}, opts);
};
buf.push("");
jade_mixins["cancelButton"] = jade_interp = function(opts){
var block = (this && this.block), attributes = (this && this.attributes) || {};
if (!( opts.text))
{
opts.text = 'Cancel'
}
if (!( opts.icon))
{
opts.icon = 'fa-times'
}
jade_mixins["button"].call({
attributes: jade.merge([{"data-click": "cancel","class": "btn-secondary"},attributes])
}, opts);
};
buf.push("<div class=\"col-xs-3\"><div class=\"row\"><div data-region=\"ontology-selector\" class=\"col-xs-12\"></div></div><button data-click=\"add\" class=\"btn btn-primary-outline w-100 m-b-1\"><i class=\"fa fa-fw fa-plus-circle\"></i>&nbsp;\nAdd Definition</button></div><div data-region=\"definitions\" class=\"col-xs-9\"></div><div class=\"col-xs-12\">");
jade_mixins["cancelButton"]({});
jade_mixins["submitButton"]({});
buf.push("</div>");;return buf.join("");
};
},{"jade/runtime":187}],70:[function(require,module,exports){
var jade = require("jade/runtime");

module.exports = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;

buf.push("<div data-region=\"list\" class=\"col-xs-4\"></div><div data-region=\"detail\" class=\"col-xs-8\"></div>");;return buf.join("");
};
},{"jade/runtime":187}],71:[function(require,module,exports){
var jade = require("jade/runtime");

module.exports = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (definitions, enabled, target_property) {
buf.push("<div class=\"row\"><div class=\"col-xs-8\"><h4 class=\"card-title\">Rule Details</h4></div><div class=\"col-xs-4 text-xs-right\"><button data-click=\"edit\" class=\"btn btn-sm btn-secondary m-r-1\"><i class=\"fa fa-fw fa-pencil\"></i>&nbsp;\nEdit</button><button data-click=\"destroy\" class=\"btn btn-sm btn-danger-outline\"><i class=\"fa fa-fw fa-trash\"></i>&nbsp;\nDestroy</button></div><div class=\"col-xs-12\"><hr/></div></div><div class=\"row\"><div class=\"col-xs-12\"><p class=\"lead\">Enabled: " + (jade.escape((jade_interp = enabled) == null ? '' : jade_interp)) + "</p><p class=\"lead\">Target: " + (jade.escape((jade_interp = target_property) == null ? '' : jade_interp)) + "</p><hr/><p class=\"lead\">Definitions: " + (jade.escape((jade_interp = definitions.length) == null ? '' : jade_interp)) + "</p></div></div>");}.call(this,"definitions" in locals_for_with?locals_for_with.definitions:typeof definitions!=="undefined"?definitions:undefined,"enabled" in locals_for_with?locals_for_with.enabled:typeof enabled!=="undefined"?enabled:undefined,"target_property" in locals_for_with?locals_for_with.target_property:typeof target_property!=="undefined"?target_property:undefined));;return buf.join("");
};
},{"jade/runtime":187}],72:[function(require,module,exports){
var DatasetConfigRoute, LayoutView,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

LayoutView = require('./views/layout');

DatasetConfigRoute = (function(superClass) {
  extend(DatasetConfigRoute, superClass);

  function DatasetConfigRoute() {
    return DatasetConfigRoute.__super__.constructor.apply(this, arguments);
  }

  DatasetConfigRoute.prototype.title = function() {
    return "Datasets - " + (this.model.get('label')) + " - Configuration";
  };

  DatasetConfigRoute.prototype.breadcrumbs = function() {
    return [
      {
        href: "#datasets",
        text: 'Datasets'
      }, {
        href: "#datasets/" + this.model.id + "/search",
        text: this.model.get('label')
      }, {
        text: 'Configuration'
      }
    ];
  };

  DatasetConfigRoute.prototype.fetch = function(id) {
    return Backbone.Radio.channel('dataset').request('model', id).then((function(_this) {
      return function(model) {
        return _this.model = model;
      };
    })(this));
  };

  DatasetConfigRoute.prototype.render = function() {
    return this.container.show(new LayoutView({
      model: this.model
    }));
  };

  return DatasetConfigRoute;

})(require('hn_routing/lib/route'));

module.exports = DatasetConfigRoute;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL2Fla3Njby9naXRodWIvbWFnZWxsYW4vYXBwL2NvZmZlZS9tb2R1bGVzL2RhdGFzZXQvY29uZmlnL3JvdXRlLmNvZmZlZSIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9hZWtzY28vZ2l0aHViL21hZ2VsbGFuL2FwcC9jb2ZmZWUvbW9kdWxlcy9kYXRhc2V0L2NvbmZpZy9yb3V0ZS5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsSUFBQSw4QkFBQTtFQUFBOzs7QUFBQSxVQUFBLEdBQWMsT0FBQSxDQUFRLGdCQUFSOztBQUlSOzs7Ozs7OytCQUdKLEtBQUEsR0FBTyxTQUFBO0FBQ0wsV0FBTyxhQUFBLEdBQWEsQ0FBQyxJQUFDLENBQUEsS0FBSyxDQUFDLEdBQVAsQ0FBVyxPQUFYLENBQUQsQ0FBYixHQUFrQztFQURwQzs7K0JBR1AsV0FBQSxHQUFhLFNBQUE7QUFDWCxXQUFPO01BQ0w7UUFBRSxJQUFBLEVBQU0sV0FBUjtRQUFxQixJQUFBLEVBQU0sVUFBM0I7T0FESyxFQUVMO1FBQUUsSUFBQSxFQUFNLFlBQUEsR0FBYSxJQUFDLENBQUEsS0FBSyxDQUFDLEVBQXBCLEdBQXVCLFNBQS9CO1FBQXlDLElBQUEsRUFBTSxJQUFDLENBQUEsS0FBSyxDQUFDLEdBQVAsQ0FBVyxPQUFYLENBQS9DO09BRkssRUFHTDtRQUFFLElBQUEsRUFBTSxlQUFSO09BSEs7O0VBREk7OytCQU9iLEtBQUEsR0FBTyxTQUFDLEVBQUQ7V0FDTCxRQUFRLENBQUMsS0FBSyxDQUFDLE9BQWYsQ0FBdUIsU0FBdkIsQ0FBaUMsQ0FBQyxPQUFsQyxDQUEwQyxPQUExQyxFQUFtRCxFQUFuRCxDQUNBLENBQUMsSUFERCxDQUNNLENBQUEsU0FBQSxLQUFBO2FBQUEsU0FBQyxLQUFEO2VBQVcsS0FBQyxDQUFBLEtBQUQsR0FBUztNQUFwQjtJQUFBLENBQUEsQ0FBQSxDQUFBLElBQUEsQ0FETjtFQURLOzsrQkFJUCxNQUFBLEdBQVEsU0FBQTtXQUNOLElBQUMsQ0FBQSxTQUFTLENBQUMsSUFBWCxDQUFnQixJQUFJLFVBQUosQ0FBZTtNQUFFLEtBQUEsRUFBTyxJQUFDLENBQUEsS0FBVjtLQUFmLENBQWhCO0VBRE07Ozs7R0FqQnVCLE9BQUEsQ0FBUSxzQkFBUjs7QUFzQmpDLE1BQU0sQ0FBQyxPQUFQLEdBQWlCIn0=

},{"./views/layout":76,"hn_routing/lib/route":177}],73:[function(require,module,exports){
var KnowledgeRuleForm, KnowledgeRuleLayout, RuleForm, RuleLayout,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

KnowledgeRuleLayout = require('../knowledge_rule_views/layout');

KnowledgeRuleForm = require('../knowledge_rule_views/ruleForm');

RuleForm = (function(superClass) {
  extend(RuleForm, superClass);

  function RuleForm() {
    return RuleForm.__super__.constructor.apply(this, arguments);
  }

  RuleForm.prototype.template = require('./templates/rule_form');

  RuleForm.prototype.onRender = function() {
    Backbone.Syphon.deserialize(this, this.model.attributes);
    return this.showDefinitionList();
  };

  return RuleForm;

})(KnowledgeRuleForm);

RuleLayout = (function(superClass) {
  extend(RuleLayout, superClass);

  function RuleLayout() {
    return RuleLayout.__super__.constructor.apply(this, arguments);
  }

  RuleLayout.prototype.template = require('./templates/layout');

  RuleLayout.prototype.showRuleForm = function(model) {
    var formModel;
    if (model.currentTarget) {
      model = null;
    }
    formModel = model || this.buildNewRule();
    return this.fetchSourceOptions().then((function(_this) {
      return function(sourceOptions) {
        var formView;
        formView = new RuleForm({
          model: formModel,
          collection: formModel.get('definitions'),
          sourceOptions: sourceOptions
        });
        formView.on('cancel', function() {
          return _this.showRuleList();
        });
        formView.on('sync', function(model) {
          _this.collection.add(model);
          return _this.showRuleList();
        });
        return _this.contentRegion.show(formView);
      };
    })(this));
  };

  return RuleLayout;

})(KnowledgeRuleLayout);

module.exports = RuleLayout;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL2Fla3Njby9naXRodWIvbWFnZWxsYW4vYXBwL2NvZmZlZS9tb2R1bGVzL2RhdGFzZXQvY29uZmlnL3ZpZXdlcl9ydWxlX3ZpZXdzL2xheW91dC5jb2ZmZWUiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIvVXNlcnMvYWVrc2NvL2dpdGh1Yi9tYWdlbGxhbi9hcHAvY29mZmVlL21vZHVsZXMvZGF0YXNldC9jb25maWcvdmlld2VyX3J1bGVfdmlld3MvbGF5b3V0LmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxJQUFBLDREQUFBO0VBQUE7OztBQUFBLG1CQUFBLEdBQXNCLE9BQUEsQ0FBUSxnQ0FBUjs7QUFDdEIsaUJBQUEsR0FBb0IsT0FBQSxDQUFRLGtDQUFSOztBQUlkOzs7Ozs7O3FCQUNKLFFBQUEsR0FBVSxPQUFBLENBQVEsdUJBQVI7O3FCQUVWLFFBQUEsR0FBVSxTQUFBO0lBQ1IsUUFBUSxDQUFDLE1BQU0sQ0FBQyxXQUFoQixDQUE2QixJQUE3QixFQUFnQyxJQUFDLENBQUEsS0FBSyxDQUFDLFVBQXZDO1dBQ0EsSUFBQyxDQUFBLGtCQUFELENBQUE7RUFGUTs7OztHQUhXOztBQVNqQjs7Ozs7Ozt1QkFDSixRQUFBLEdBQVUsT0FBQSxDQUFRLG9CQUFSOzt1QkFLVixZQUFBLEdBQWMsU0FBQyxLQUFEO0FBR1osUUFBQTtJQUFBLElBQWdCLEtBQUssQ0FBQyxhQUF0QjtNQUFBLEtBQUEsR0FBUSxLQUFSOztJQUdBLFNBQUEsR0FBWSxLQUFBLElBQVMsSUFBQyxDQUFBLFlBQUQsQ0FBQTtXQUdyQixJQUFDLENBQUEsa0JBQUQsQ0FBQSxDQUFxQixDQUFDLElBQXRCLENBQTJCLENBQUEsU0FBQSxLQUFBO2FBQUEsU0FBQyxhQUFEO0FBR3pCLFlBQUE7UUFBQSxRQUFBLEdBQVcsSUFBSSxRQUFKLENBQWE7VUFBRSxLQUFBLEVBQU8sU0FBVDtVQUFvQixVQUFBLEVBQVksU0FBUyxDQUFDLEdBQVYsQ0FBYyxhQUFkLENBQWhDO1VBQThELGFBQUEsRUFBZSxhQUE3RTtTQUFiO1FBR1gsUUFBUSxDQUFDLEVBQVQsQ0FBWSxRQUFaLEVBQXNCLFNBQUE7aUJBQUcsS0FBQyxDQUFBLFlBQUQsQ0FBQTtRQUFILENBQXRCO1FBR0EsUUFBUSxDQUFDLEVBQVQsQ0FBWSxNQUFaLEVBQW9CLFNBQUMsS0FBRDtVQUdsQixLQUFDLENBQUEsVUFBVSxDQUFDLEdBQVosQ0FBZ0IsS0FBaEI7aUJBR0EsS0FBQyxDQUFBLFlBQUQsQ0FBQTtRQU5rQixDQUFwQjtlQVNBLEtBQUMsQ0FBQSxhQUFhLENBQUMsSUFBZixDQUFvQixRQUFwQjtNQWxCeUI7SUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLENBQTNCO0VBVFk7Ozs7R0FOUzs7QUFxQ3pCLE1BQU0sQ0FBQyxPQUFQLEdBQWlCIn0=

},{"../knowledge_rule_views/layout":47,"../knowledge_rule_views/ruleForm":49,"./templates/layout":74,"./templates/rule_form":75}],74:[function(require,module,exports){
var jade = require("jade/runtime");

module.exports = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;

buf.push("<div class=\"col-xs-12\"><div class=\"row\"><div class=\"col-xs-6\"><p class=\"lead m-b-0\">Viewer Rules</p></div><div class=\"col-xs-6 text-xs-right\"><button data-click=\"new\" class=\"btn btn-sm btn-primary-outline m-r-2\"><i class=\"fa fa-fw fa-plus\"></i>&nbsp;\nNew Rule</button><button data-click=\"apply\" class=\"btn btn-sm btn-success-outline m-r-2\"><i class=\"fa fa-fw fa-check-circle-o\"></i>&nbsp;\nApply Rules</button><button data-click=\"reset\" class=\"btn btn-sm btn-danger-outline\"><i class=\"fa fa-fw fa-refresh\"></i>&nbsp;\nReset</button></div></div><div class=\"row\"><div class=\"col-xs-12\"><hr/></div></div><div class=\"row\"><div data-region=\"content\" class=\"col-xs-12\"></div></div></div>");;return buf.join("");
};
},{"jade/runtime":187}],75:[function(require,module,exports){
var jade = require("jade/runtime");

module.exports = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (Array) {
jade_mixins["formGroup"] = jade_interp = function(opts){
var block = (this && this.block), attributes = (this && this.attributes) || {};
buf.push("<fieldset" + (jade.cls(['form-group',opts.formGroupCss], [null,true])) + ">");
if ( opts.label)
{
buf.push("<label class=\"form-control-label\">" + (jade.escape(null == (jade_interp = opts.label) ? "" : jade_interp)) + "</label>");
}
block && block();
buf.push("</fieldset>");
};
buf.push("");








buf.push("");








buf.push("");
jade_mixins["formSelect"] = jade_interp = function(opts){
var block = (this && this.block), attributes = (this && this.attributes) || {};
jade_mixins["formGroup"].call({
block: function(){
buf.push("<select" + (jade.attr("name", opts.name, true, false)) + (jade.attr("multiple", opts.multiple, true, false)) + " class=\"form-control c-select\">");
if ( opts.options)
{
// iterate opts.options
;(function(){
  var $$obj = opts.options;
  if ('number' == typeof $$obj.length) {

    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {
      var opt = $$obj[$index];

if ( Array.isArray(opt))
{
buf.push("<option" + (jade.attr("value", opt[0], true, false)) + ">" + (jade.escape(null == (jade_interp = opt[1]) ? "" : jade_interp)) + "</option>");
}
else
{
buf.push("<option>" + (jade.escape(null == (jade_interp = opt) ? "" : jade_interp)) + "</option>");
}
    }

  } else {
    var $$l = 0;
    for (var $index in $$obj) {
      $$l++;      var opt = $$obj[$index];

if ( Array.isArray(opt))
{
buf.push("<option" + (jade.attr("value", opt[0], true, false)) + ">" + (jade.escape(null == (jade_interp = opt[1]) ? "" : jade_interp)) + "</option>");
}
else
{
buf.push("<option>" + (jade.escape(null == (jade_interp = opt) ? "" : jade_interp)) + "</option>");
}
    }

  }
}).call(this);

}
buf.push("</select>");
}
}, opts);
};
buf.push("");




buf.push("");
jade_mixins["button"] = jade_interp = function(opts){
var block = (this && this.block), attributes = (this && this.attributes) || {};
buf.push("<button" + (jade.attrs(jade.merge([{"type": "button","class": "btn"},attributes]), false)) + ">");
if ( opts.icon)
{
buf.push("<i" + (jade.cls(['fa','fa-fw',opts.icon], [null,null,true])) + "></i>&nbsp;");
}
buf.push((jade.escape(null == (jade_interp = opts.text) ? "" : jade_interp)) + "</button>");
};
buf.push("");
jade_mixins["submitButton"] = jade_interp = function(opts){
var block = (this && this.block), attributes = (this && this.attributes) || {};
if (!( opts.text))
{
opts.text = 'Submit'
}
if (!( opts.icon))
{
opts.icon = 'fa-check'
}
jade_mixins["button"].call({
attributes: jade.merge([{"data-click": "submit","class": "btn-success"},attributes])
}, opts);
};
buf.push("");
jade_mixins["cancelButton"] = jade_interp = function(opts){
var block = (this && this.block), attributes = (this && this.attributes) || {};
if (!( opts.text))
{
opts.text = 'Cancel'
}
if (!( opts.icon))
{
opts.icon = 'fa-times'
}
jade_mixins["button"].call({
attributes: jade.merge([{"data-click": "cancel","class": "btn-secondary"},attributes])
}, opts);
};
buf.push("<div class=\"col-xs-3\"><div class=\"row\"><div class=\"col-xs-12\">");
jade_mixins["formSelect"]({ label: 'Viewer Type', name: 'target_property', options: ['img', 'csv'] });
buf.push("</div></div><button data-click=\"add\" class=\"btn btn-primary-outline w-100 m-b-1\"><i class=\"fa fa-fw fa-plus-circle\"></i>&nbsp;\nAdd Definition</button></div><div data-region=\"definitions\" class=\"col-xs-9\"></div><div class=\"col-xs-12\">");
jade_mixins["cancelButton"]({});
jade_mixins["submitButton"]({});
buf.push("</div>");}.call(this,"Array" in locals_for_with?locals_for_with.Array:typeof Array!=="undefined"?Array:undefined));;return buf.join("");
};
},{"jade/runtime":187}],76:[function(require,module,exports){
var ConfigLayoutView, FacetLayout, KnowledgeRuleLayout, ViewerRuleLayout,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

FacetLayout = require('../facet_views/layout');

KnowledgeRuleLayout = require('../knowledge_rule_views/layout');

ViewerRuleLayout = require('../viewer_rule_views/layout');

ConfigLayoutView = (function(superClass) {
  extend(ConfigLayoutView, superClass);

  function ConfigLayoutView() {
    return ConfigLayoutView.__super__.constructor.apply(this, arguments);
  }

  ConfigLayoutView.prototype.className = 'container-fluid';

  ConfigLayoutView.prototype.navItems = [
    {
      icon: 'fa-list',
      text: 'Facets',
      trigger: 'facets'
    }, {
      icon: 'fa-university',
      text: 'Knowledge Rules',
      trigger: 'knowledge',
      "default": true
    }, {
      icon: 'fa-window-maximize',
      text: 'Viewer Rules',
      trigger: 'viewer'
    }
  ];

  ConfigLayoutView.prototype.navEvents = {
    'facets': 'facetConfig',
    'knowledge': 'knowledgeConfig',
    'viewer': 'viewerConfig'
  };

  ConfigLayoutView.prototype.navOptions = {
    pills: true
  };

  ConfigLayoutView.prototype.facetConfig = function() {
    return this.model.fetchFacets().then((function(_this) {
      return function(facetCollection) {
        return _this.contentRegion.show(new FacetLayout({
          collection: facetCollection
        }));
      };
    })(this));
  };

  ConfigLayoutView.prototype.knowledgeConfig = function() {
    return this.model.fetchKnowledgeRules().then((function(_this) {
      return function(knowledgeRuleCollection) {
        return _this.contentRegion.show(new KnowledgeRuleLayout({
          model: _this.model,
          collection: knowledgeRuleCollection
        }));
      };
    })(this));
  };

  ConfigLayoutView.prototype.viewerConfig = function() {
    return this.model.fetchViewerRules().then((function(_this) {
      return function(viewerRuleCollection) {
        return _this.contentRegion.show(new ViewerRuleLayout({
          model: _this.model,
          collection: viewerRuleCollection
        }));
      };
    })(this));
  };

  return ConfigLayoutView;

})(require('hn_views/lib/nav'));

module.exports = ConfigLayoutView;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL2Fla3Njby9naXRodWIvbWFnZWxsYW4vYXBwL2NvZmZlZS9tb2R1bGVzL2RhdGFzZXQvY29uZmlnL3ZpZXdzL2xheW91dC5jb2ZmZWUiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIvVXNlcnMvYWVrc2NvL2dpdGh1Yi9tYWdlbGxhbi9hcHAvY29mZmVlL21vZHVsZXMvZGF0YXNldC9jb25maWcvdmlld3MvbGF5b3V0LmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxJQUFBLG9FQUFBO0VBQUE7OztBQUFBLFdBQUEsR0FBc0IsT0FBQSxDQUFRLHVCQUFSOztBQUN0QixtQkFBQSxHQUFzQixPQUFBLENBQVEsZ0NBQVI7O0FBQ3RCLGdCQUFBLEdBQXNCLE9BQUEsQ0FBUSw2QkFBUjs7QUFJaEI7Ozs7Ozs7NkJBQ0osU0FBQSxHQUFXOzs2QkFFWCxRQUFBLEdBQVU7SUFDUjtNQUFFLElBQUEsRUFBTSxTQUFSO01BQThCLElBQUEsRUFBTSxRQUFwQztNQUEwRCxPQUFBLEVBQVMsUUFBbkU7S0FEUSxFQUVSO01BQUUsSUFBQSxFQUFNLGVBQVI7TUFBOEIsSUFBQSxFQUFNLGlCQUFwQztNQUEwRCxPQUFBLEVBQVMsV0FBbkU7TUFBZ0YsQ0FBQSxPQUFBLENBQUEsRUFBUyxJQUF6RjtLQUZRLEVBR1I7TUFBRSxJQUFBLEVBQU0sb0JBQVI7TUFBOEIsSUFBQSxFQUFNLGNBQXBDO01BQTBELE9BQUEsRUFBUyxRQUFuRTtLQUhROzs7NkJBTVYsU0FBQSxHQUNFO0lBQUEsUUFBQSxFQUFjLGFBQWQ7SUFDQSxXQUFBLEVBQWMsaUJBRGQ7SUFFQSxRQUFBLEVBQWMsY0FGZDs7OzZCQUlGLFVBQUEsR0FDRTtJQUFBLEtBQUEsRUFBTyxJQUFQOzs7NkJBRUYsV0FBQSxHQUFhLFNBQUE7V0FDWCxJQUFDLENBQUEsS0FBSyxDQUFDLFdBQVAsQ0FBQSxDQUFvQixDQUFDLElBQXJCLENBQTBCLENBQUEsU0FBQSxLQUFBO2FBQUEsU0FBQyxlQUFEO2VBQ3hCLEtBQUMsQ0FBQSxhQUFhLENBQUMsSUFBZixDQUFvQixJQUFJLFdBQUosQ0FBZ0I7VUFBRSxVQUFBLEVBQVksZUFBZDtTQUFoQixDQUFwQjtNQUR3QjtJQUFBLENBQUEsQ0FBQSxDQUFBLElBQUEsQ0FBMUI7RUFEVzs7NkJBSWIsZUFBQSxHQUFpQixTQUFBO1dBQ2YsSUFBQyxDQUFBLEtBQUssQ0FBQyxtQkFBUCxDQUFBLENBQTRCLENBQUMsSUFBN0IsQ0FBa0MsQ0FBQSxTQUFBLEtBQUE7YUFBQSxTQUFDLHVCQUFEO2VBQ2hDLEtBQUMsQ0FBQSxhQUFhLENBQUMsSUFBZixDQUFvQixJQUFJLG1CQUFKLENBQXdCO1VBQUUsS0FBQSxFQUFPLEtBQUMsQ0FBQSxLQUFWO1VBQWlCLFVBQUEsRUFBWSx1QkFBN0I7U0FBeEIsQ0FBcEI7TUFEZ0M7SUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLENBQWxDO0VBRGU7OzZCQUlqQixZQUFBLEdBQWMsU0FBQTtXQUNaLElBQUMsQ0FBQSxLQUFLLENBQUMsZ0JBQVAsQ0FBQSxDQUF5QixDQUFDLElBQTFCLENBQStCLENBQUEsU0FBQSxLQUFBO2FBQUEsU0FBQyxvQkFBRDtlQUM3QixLQUFDLENBQUEsYUFBYSxDQUFDLElBQWYsQ0FBb0IsSUFBSSxnQkFBSixDQUFxQjtVQUFFLEtBQUEsRUFBTyxLQUFDLENBQUEsS0FBVjtVQUFpQixVQUFBLEVBQVksb0JBQTdCO1NBQXJCLENBQXBCO01BRDZCO0lBQUEsQ0FBQSxDQUFBLENBQUEsSUFBQSxDQUEvQjtFQURZOzs7O0dBekJlLE9BQUEsQ0FBUSxrQkFBUjs7QUErQi9CLE1BQU0sQ0FBQyxPQUFQLEdBQWlCIn0=

},{"../facet_views/layout":36,"../knowledge_rule_views/layout":47,"../viewer_rule_views/layout":73,"hn_views/lib/nav":184}],77:[function(require,module,exports){
var DatasetCreator, buildUniqueId,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

buildUniqueId = function(prefix) {
  if (prefix == null) {
    prefix = '';
  }
  return prefix + Math.random().toString(36).substr(2, 10);
};

window.buildUniqueId = buildUniqueId;

DatasetCreator = (function(superClass) {
  extend(DatasetCreator, superClass);

  function DatasetCreator() {
    return DatasetCreator.__super__.constructor.apply(this, arguments);
  }

  DatasetCreator.prototype.ensureFacets = function(dataset_id, datapoints) {
    var allKeys, el, i, index, len, saveFacet;
    allKeys = [];
    for (i = 0, len = datapoints.length; i < len; i++) {
      el = datapoints[i];
      allKeys = _.union(allKeys, _.keys(el));
    }
    index = 0;
    saveFacet = function(facet) {
      var attrs;
      attrs = {
        id: buildUniqueId('fc_'),
        dataset_id: dataset_id,
        attribute: facet,
        label: facet,
        order: index,
        enabled: true,
        tooltip: ''
      };
      index = index + 1;
      return Backbone.Radio.channel('db').request('add', 'facets', attrs);
    };
    return Promise.each(allKeys, saveFacet);
  };

  DatasetCreator.prototype.ensureDatapoints = function(dataset_id, datapoints) {
    var count, index, saveDatapoint;
    index = 0;
    count = _s.numberFormat(datapoints.length);
    saveDatapoint = function(datapoint) {
      var attrs;
      index = index + 1;
      Backbone.Radio.channel('loading').trigger('show', "Processing " + (_s.numberFormat(index)) + " of " + count);
      attrs = {
        id: buildUniqueId('dp_'),
        dataset_id: dataset_id,
        raw: datapoint,
        data: JSON.parse(JSON.stringify(datapoint)),
        views: {}
      };
      return Backbone.Radio.channel('db').request('add', 'datapoints', attrs);
    };
    return Promise.each(datapoints, saveDatapoint);
  };

  DatasetCreator.prototype.ensureDataset = function(dataset) {
    return Backbone.Radio.channel('db').request('add', 'datasets', dataset.toJSON());
  };

  DatasetCreator.prototype.deploy = function(dataset, datapoints) {
    dataset.set('count', datapoints.length);
    dataset.set('id', buildUniqueId('ds_'));
    dataset.trigger('request');
    Radio.channel('loading').trigger('show', 'Saving Dataset...');
    return this.ensureDataset(dataset).then((function(_this) {
      return function(dataset_id) {
        Radio.channel('loading').trigger('show', 'Saving Datapoints...');
        return _this.ensureDatapoints(dataset_id, datapoints).then(function() {
          Radio.channel('loading').trigger('show', 'Generating Facets...');
          return _this.ensureFacets(dataset_id, datapoints).then(function() {
            Radio.channel('loading').trigger('hide');
            return dataset.trigger('sync');
          })["catch"](function(err) {
            return dataset.trigger('error', err);
          });
        })["catch"](function(err) {
          return dataset.trigger('error', err);
        });
      };
    })(this))["catch"]((function(_this) {
      return function(err) {
        return dataset.trigger('error', err);
      };
    })(this));
  };

  return DatasetCreator;

})(Backbone.Model);

module.exports = new DatasetCreator();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL2Fla3Njby9naXRodWIvbWFnZWxsYW4vYXBwL2NvZmZlZS9tb2R1bGVzL2RhdGFzZXQvY3JlYXRvci5jb2ZmZWUiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIvVXNlcnMvYWVrc2NvL2dpdGh1Yi9tYWdlbGxhbi9hcHAvY29mZmVlL21vZHVsZXMvZGF0YXNldC9jcmVhdG9yLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFJQSxJQUFBLDZCQUFBO0VBQUE7OztBQUFBLGFBQUEsR0FBZ0IsU0FBQyxNQUFEOztJQUFDLFNBQU87O0FBQ3RCLFNBQU8sTUFBQSxHQUFTLElBQUksQ0FBQyxNQUFMLENBQUEsQ0FBYSxDQUFDLFFBQWQsQ0FBdUIsRUFBdkIsQ0FBMEIsQ0FBQyxNQUEzQixDQUFrQyxDQUFsQyxFQUFxQyxFQUFyQztBQURGOztBQUloQixNQUFNLENBQUMsYUFBUCxHQUF1Qjs7QUFJakI7Ozs7Ozs7MkJBTUosWUFBQSxHQUFjLFNBQUMsVUFBRCxFQUFhLFVBQWI7QUFJWixRQUFBO0lBQUEsT0FBQSxHQUFVO0FBQ1YsU0FBQSw0Q0FBQTs7TUFDRSxPQUFBLEdBQVUsQ0FBQyxDQUFDLEtBQUYsQ0FBUSxPQUFSLEVBQWlCLENBQUMsQ0FBQyxJQUFGLENBQU8sRUFBUCxDQUFqQjtBQURaO0lBSUEsS0FBQSxHQUFRO0lBSVIsU0FBQSxHQUFZLFNBQUMsS0FBRDtBQUdWLFVBQUE7TUFBQSxLQUFBLEdBQ0U7UUFBQSxFQUFBLEVBQVksYUFBQSxDQUFjLEtBQWQsQ0FBWjtRQUNBLFVBQUEsRUFBWSxVQURaO1FBRUEsU0FBQSxFQUFZLEtBRlo7UUFHQSxLQUFBLEVBQVksS0FIWjtRQUlBLEtBQUEsRUFBWSxLQUpaO1FBS0EsT0FBQSxFQUFZLElBTFo7UUFNQSxPQUFBLEVBQVksRUFOWjs7TUFTRixLQUFBLEdBQVEsS0FBQSxHQUFRO0FBR2hCLGFBQU8sUUFBUSxDQUFDLEtBQUssQ0FBQyxPQUFmLENBQXVCLElBQXZCLENBQTRCLENBQUMsT0FBN0IsQ0FBcUMsS0FBckMsRUFBNEMsUUFBNUMsRUFBc0QsS0FBdEQ7SUFoQkc7QUFtQlosV0FBTyxPQUFPLENBQUMsSUFBUixDQUFhLE9BQWIsRUFBc0IsU0FBdEI7RUFoQ0s7OzJCQXFDZCxnQkFBQSxHQUFrQixTQUFDLFVBQUQsRUFBYSxVQUFiO0FBR2hCLFFBQUE7SUFBQSxLQUFBLEdBQVE7SUFDUixLQUFBLEdBQVEsRUFBRSxDQUFDLFlBQUgsQ0FBZ0IsVUFBVSxDQUFDLE1BQTNCO0lBSVIsYUFBQSxHQUFnQixTQUFDLFNBQUQ7QUFHZCxVQUFBO01BQUEsS0FBQSxHQUFRLEtBQUEsR0FBUTtNQUNoQixRQUFRLENBQUMsS0FBSyxDQUFDLE9BQWYsQ0FBdUIsU0FBdkIsQ0FBaUMsQ0FBQyxPQUFsQyxDQUEwQyxNQUExQyxFQUFrRCxhQUFBLEdBQWEsQ0FBQyxFQUFFLENBQUMsWUFBSCxDQUFnQixLQUFoQixDQUFELENBQWIsR0FBcUMsTUFBckMsR0FBMkMsS0FBN0Y7TUFHQSxLQUFBLEdBQ0U7UUFBQSxFQUFBLEVBQVksYUFBQSxDQUFjLEtBQWQsQ0FBWjtRQUNBLFVBQUEsRUFBWSxVQURaO1FBRUEsR0FBQSxFQUFZLFNBRlo7UUFHQSxJQUFBLEVBQVksSUFBSSxDQUFDLEtBQUwsQ0FBVyxJQUFJLENBQUMsU0FBTCxDQUFlLFNBQWYsQ0FBWCxDQUhaO1FBSUEsS0FBQSxFQUFZLEVBSlo7O0FBT0YsYUFBTyxRQUFRLENBQUMsS0FBSyxDQUFDLE9BQWYsQ0FBdUIsSUFBdkIsQ0FBNEIsQ0FBQyxPQUE3QixDQUFxQyxLQUFyQyxFQUE0QyxZQUE1QyxFQUEwRCxLQUExRDtJQWZPO0FBa0JoQixXQUFPLE9BQU8sQ0FBQyxJQUFSLENBQWEsVUFBYixFQUF5QixhQUF6QjtFQTFCUzs7MkJBOEJsQixhQUFBLEdBQWUsU0FBQyxPQUFEO0FBQ2IsV0FBTyxRQUFRLENBQUMsS0FBSyxDQUFDLE9BQWYsQ0FBdUIsSUFBdkIsQ0FBNEIsQ0FBQyxPQUE3QixDQUFxQyxLQUFyQyxFQUE0QyxVQUE1QyxFQUF3RCxPQUFPLENBQUMsTUFBUixDQUFBLENBQXhEO0VBRE07OzJCQUtmLE1BQUEsR0FBUSxTQUFDLE9BQUQsRUFBVSxVQUFWO0lBSU4sT0FBTyxDQUFDLEdBQVIsQ0FBWSxPQUFaLEVBQXFCLFVBQVUsQ0FBQyxNQUFoQztJQUNBLE9BQU8sQ0FBQyxHQUFSLENBQVksSUFBWixFQUFrQixhQUFBLENBQWMsS0FBZCxDQUFsQjtJQUlBLE9BQU8sQ0FBQyxPQUFSLENBQWdCLFNBQWhCO0lBR0EsS0FBSyxDQUFDLE9BQU4sQ0FBYyxTQUFkLENBQXdCLENBQUMsT0FBekIsQ0FBaUMsTUFBakMsRUFBeUMsbUJBQXpDO1dBR0EsSUFBQyxDQUFBLGFBQUQsQ0FBZSxPQUFmLENBQXVCLENBQUMsSUFBeEIsQ0FBNkIsQ0FBQSxTQUFBLEtBQUE7YUFBQSxTQUFDLFVBQUQ7UUFHM0IsS0FBSyxDQUFDLE9BQU4sQ0FBYyxTQUFkLENBQXdCLENBQUMsT0FBekIsQ0FBaUMsTUFBakMsRUFBeUMsc0JBQXpDO2VBSUEsS0FBQyxDQUFBLGdCQUFELENBQWtCLFVBQWxCLEVBQThCLFVBQTlCLENBQXlDLENBQUMsSUFBMUMsQ0FBK0MsU0FBQTtVQUc3QyxLQUFLLENBQUMsT0FBTixDQUFjLFNBQWQsQ0FBd0IsQ0FBQyxPQUF6QixDQUFpQyxNQUFqQyxFQUF5QyxzQkFBekM7aUJBSUEsS0FBQyxDQUFBLFlBQUQsQ0FBYyxVQUFkLEVBQTBCLFVBQTFCLENBQXFDLENBQUMsSUFBdEMsQ0FBMkMsU0FBQTtZQUd6QyxLQUFLLENBQUMsT0FBTixDQUFjLFNBQWQsQ0FBd0IsQ0FBQyxPQUF6QixDQUFpQyxNQUFqQzttQkFJQSxPQUFPLENBQUMsT0FBUixDQUFnQixNQUFoQjtVQVB5QyxDQUEzQyxDQVVBLEVBQUMsS0FBRCxFQVZBLENBVU8sU0FBQyxHQUFEO21CQUFTLE9BQU8sQ0FBQyxPQUFSLENBQWdCLE9BQWhCLEVBQXlCLEdBQXpCO1VBQVQsQ0FWUDtRQVA2QyxDQUEvQyxDQWtCQSxFQUFDLEtBQUQsRUFsQkEsQ0FrQk8sU0FBQyxHQUFEO2lCQUFTLE9BQU8sQ0FBQyxPQUFSLENBQWdCLE9BQWhCLEVBQXlCLEdBQXpCO1FBQVQsQ0FsQlA7TUFQMkI7SUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLENBQTdCLENBMEJBLEVBQUMsS0FBRCxFQTFCQSxDQTBCTyxDQUFBLFNBQUEsS0FBQTthQUFBLFNBQUMsR0FBRDtlQUFTLE9BQU8sQ0FBQyxPQUFSLENBQWdCLE9BQWhCLEVBQXlCLEdBQXpCO01BQVQ7SUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLENBMUJQO0VBZk07Ozs7R0E5RW1CLFFBQVEsQ0FBQzs7QUEySHRDLE1BQU0sQ0FBQyxPQUFQLEdBQWlCLElBQUksY0FBSixDQUFBIn0=

},{}],78:[function(require,module,exports){
var DatasetCollection, DatasetModel,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

DatasetModel = (function(superClass) {
  extend(DatasetModel, superClass);

  function DatasetModel() {
    this.destroySuperfluousFacets = bind(this.destroySuperfluousFacets, this);
    return DatasetModel.__super__.constructor.apply(this, arguments);
  }

  DatasetModel.prototype.urlRoot = 'datasets';

  DatasetModel.prototype.defaults = {
    id: '',
    label: '',
    context: {}
  };

  DatasetModel.prototype.fetchFacets = function() {
    return Backbone.Radio.channel('facet').request('collection', this.id);
  };

  DatasetModel.prototype.fetchDatapoints = function() {
    return Backbone.Radio.channel('datapoint').request('collection', this.id);
  };

  DatasetModel.prototype.fetchKnowledgeRules = function() {
    return Backbone.Radio.channel('knowledge:rule').request('collection', this.id);
  };

  DatasetModel.prototype.fetchViewerRules = function() {
    return Backbone.Radio.channel('viewer:rule').request('collection', this.id);
  };

  DatasetModel.prototype.generateNewFacets = function(facetKeys, indexStart) {
    var index, saveFacet;
    index = indexStart;
    saveFacet = (function(_this) {
      return function(facet) {
        var attrs;
        attrs = {
          id: buildUniqueId('fc_'),
          dataset_id: _this.id,
          attribute: facet,
          label: facet,
          order: index,
          enabled: true,
          tooltip: ''
        };
        index = index + 1;
        return Backbone.Radio.channel('db').request('add', 'facets', attrs);
      };
    })(this);
    return Promise.each(facetKeys, saveFacet);
  };

  DatasetModel.prototype.destroySuperfluousFacets = function(toDestroy, facetCollection) {
    var destroyFacet;
    destroyFacet = (function(_this) {
      return function(facet) {
        facetCollection.remove(facet);
        return facet.destroy();
      };
    })(this);
    return Promise.each(toDestroy, destroyFacet);
  };

  DatasetModel.prototype.regenerateFacets = function() {
    return new Promise((function(_this) {
      return function(resolve, reject) {
        return _this.fetchDatapoints().then(function(datapointCollection) {
          return _this.fetchFacets().then(function(facetCollection) {
            var allKeys, attr, dp, facet, i, j, len, len1, pendingDestroy, ref, ref1;
            pendingDestroy = [];
            allKeys = [];
            ref = datapointCollection.models;
            for (i = 0, len = ref.length; i < len; i++) {
              dp = ref[i];
              allKeys = _.union(allKeys, _.keys(dp.get('data')));
            }
            ref1 = facetCollection.models;
            for (j = 0, len1 = ref1.length; j < len1; j++) {
              facet = ref1[j];
              attr = facet.get('attribute');
              if (indexOf.call(allKeys, attr) >= 0) {
                allKeys = _.without(allKeys, attr);
              } else {
                pendingDestroy.push(facet);
              }
            }
            return _this.destroySuperfluousFacets(pendingDestroy, facetCollection).then(function() {
              return _this.generateNewFacets(allKeys, facetCollection.length + 1).then(function() {
                return resolve();
              })["catch"](function() {
                return reject(err);
              });
            })["catch"](function(err) {
              return reject(err);
            });
          });
        });
      };
    })(this));
  };

  return DatasetModel;

})(Backbone.Model);

DatasetCollection = (function(superClass) {
  extend(DatasetCollection, superClass);

  function DatasetCollection() {
    return DatasetCollection.__super__.constructor.apply(this, arguments);
  }

  DatasetCollection.prototype.urlRoot = 'datasets';

  DatasetCollection.prototype.model = DatasetModel;

  return DatasetCollection;

})(Backbone.Collection);

module.exports = {
  Model: DatasetModel,
  Collection: DatasetCollection
};

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL2Fla3Njby9naXRodWIvbWFnZWxsYW4vYXBwL2NvZmZlZS9tb2R1bGVzL2RhdGFzZXQvZW50aXRpZXMuY29mZmVlIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiL1VzZXJzL2Fla3Njby9naXRodWIvbWFnZWxsYW4vYXBwL2NvZmZlZS9tb2R1bGVzL2RhdGFzZXQvZW50aXRpZXMuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLElBQUEsK0JBQUE7RUFBQTs7Ozs7QUFBTTs7Ozs7Ozs7eUJBQ0osT0FBQSxHQUFTOzt5QkFLVCxRQUFBLEdBQ0U7SUFBQSxFQUFBLEVBQVUsRUFBVjtJQUNBLEtBQUEsRUFBVSxFQURWO0lBRUEsT0FBQSxFQUFVLEVBRlY7Ozt5QkFPRixXQUFBLEdBQWEsU0FBQTtBQUNYLFdBQU8sUUFBUSxDQUFDLEtBQUssQ0FBQyxPQUFmLENBQXVCLE9BQXZCLENBQStCLENBQUMsT0FBaEMsQ0FBd0MsWUFBeEMsRUFBc0QsSUFBQyxDQUFBLEVBQXZEO0VBREk7O3lCQUdiLGVBQUEsR0FBaUIsU0FBQTtBQUNmLFdBQU8sUUFBUSxDQUFDLEtBQUssQ0FBQyxPQUFmLENBQXVCLFdBQXZCLENBQW1DLENBQUMsT0FBcEMsQ0FBNEMsWUFBNUMsRUFBMEQsSUFBQyxDQUFBLEVBQTNEO0VBRFE7O3lCQUdqQixtQkFBQSxHQUFxQixTQUFBO0FBQ25CLFdBQU8sUUFBUSxDQUFDLEtBQUssQ0FBQyxPQUFmLENBQXVCLGdCQUF2QixDQUF3QyxDQUFDLE9BQXpDLENBQWlELFlBQWpELEVBQStELElBQUMsQ0FBQSxFQUFoRTtFQURZOzt5QkFHckIsZ0JBQUEsR0FBa0IsU0FBQTtBQUNoQixXQUFPLFFBQVEsQ0FBQyxLQUFLLENBQUMsT0FBZixDQUF1QixhQUF2QixDQUFxQyxDQUFDLE9BQXRDLENBQThDLFlBQTlDLEVBQTRELElBQUMsQ0FBQSxFQUE3RDtFQURTOzt5QkFHbEIsaUJBQUEsR0FBbUIsU0FBQyxTQUFELEVBQVksVUFBWjtBQUdqQixRQUFBO0lBQUEsS0FBQSxHQUFRO0lBSVIsU0FBQSxHQUFZLENBQUEsU0FBQSxLQUFBO2FBQUEsU0FBQyxLQUFEO0FBR1YsWUFBQTtRQUFBLEtBQUEsR0FDRTtVQUFBLEVBQUEsRUFBWSxhQUFBLENBQWMsS0FBZCxDQUFaO1VBQ0EsVUFBQSxFQUFZLEtBQUMsQ0FBQSxFQURiO1VBRUEsU0FBQSxFQUFZLEtBRlo7VUFHQSxLQUFBLEVBQVksS0FIWjtVQUlBLEtBQUEsRUFBWSxLQUpaO1VBS0EsT0FBQSxFQUFZLElBTFo7VUFNQSxPQUFBLEVBQVksRUFOWjs7UUFTRixLQUFBLEdBQVEsS0FBQSxHQUFRO0FBR2hCLGVBQU8sUUFBUSxDQUFDLEtBQUssQ0FBQyxPQUFmLENBQXVCLElBQXZCLENBQTRCLENBQUMsT0FBN0IsQ0FBcUMsS0FBckMsRUFBNEMsUUFBNUMsRUFBc0QsS0FBdEQ7TUFoQkc7SUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBO0FBcUJaLFdBQU8sT0FBTyxDQUFDLElBQVIsQ0FBYSxTQUFiLEVBQXdCLFNBQXhCO0VBNUJVOzt5QkErQm5CLHdCQUFBLEdBQTBCLFNBQUMsU0FBRCxFQUFZLGVBQVo7QUFJeEIsUUFBQTtJQUFBLFlBQUEsR0FBZSxDQUFBLFNBQUEsS0FBQTthQUFBLFNBQUMsS0FBRDtRQUNiLGVBQWUsQ0FBQyxNQUFoQixDQUF1QixLQUF2QjtBQUNBLGVBQU8sS0FBSyxDQUFDLE9BQU4sQ0FBQTtNQUZNO0lBQUEsQ0FBQSxDQUFBLENBQUEsSUFBQTtBQUtmLFdBQU8sT0FBTyxDQUFDLElBQVIsQ0FBYSxTQUFiLEVBQXdCLFlBQXhCO0VBVGlCOzt5QkFZMUIsZ0JBQUEsR0FBa0IsU0FBQTtBQUdoQixXQUFPLElBQUksT0FBSixDQUFZLENBQUEsU0FBQSxLQUFBO2FBQUEsU0FBQyxPQUFELEVBQVUsTUFBVjtlQUdqQixLQUFDLENBQUEsZUFBRCxDQUFBLENBQWtCLENBQUMsSUFBbkIsQ0FBd0IsU0FBQyxtQkFBRDtpQkFHdEIsS0FBQyxDQUFBLFdBQUQsQ0FBQSxDQUFjLENBQUMsSUFBZixDQUFvQixTQUFDLGVBQUQ7QUFHbEIsZ0JBQUE7WUFBQSxjQUFBLEdBQWlCO1lBR2pCLE9BQUEsR0FBVTtBQUNWO0FBQUEsaUJBQUEscUNBQUE7O2NBQ0UsT0FBQSxHQUFVLENBQUMsQ0FBQyxLQUFGLENBQVEsT0FBUixFQUFpQixDQUFDLENBQUMsSUFBRixDQUFPLEVBQUUsQ0FBQyxHQUFILENBQU8sTUFBUCxDQUFQLENBQWpCO0FBRFo7QUFJQTtBQUFBLGlCQUFBLHdDQUFBOztjQUdFLElBQUEsR0FBTyxLQUFLLENBQUMsR0FBTixDQUFVLFdBQVY7Y0FHUCxJQUFHLGFBQVEsT0FBUixFQUFBLElBQUEsTUFBSDtnQkFDRSxPQUFBLEdBQVUsQ0FBQyxDQUFDLE9BQUYsQ0FBVSxPQUFWLEVBQW1CLElBQW5CLEVBRFo7ZUFBQSxNQUFBO2dCQU9FLGNBQWMsQ0FBQyxJQUFmLENBQW9CLEtBQXBCLEVBUEY7O0FBTkY7bUJBZ0JBLEtBQUMsQ0FBQSx3QkFBRCxDQUEwQixjQUExQixFQUEwQyxlQUExQyxDQUNBLENBQUMsSUFERCxDQUNNLFNBQUE7cUJBR0osS0FBQyxDQUFBLGlCQUFELENBQW1CLE9BQW5CLEVBQTRCLGVBQWUsQ0FBQyxNQUFoQixHQUF5QixDQUFyRCxDQUNBLENBQUMsSUFERCxDQUNNLFNBQUE7QUFBTSx1QkFBTyxPQUFBLENBQUE7Y0FBYixDQUROLENBRUEsRUFBQyxLQUFELEVBRkEsQ0FFTyxTQUFBO0FBQU0sdUJBQU8sTUFBQSxDQUFPLEdBQVA7Y0FBYixDQUZQO1lBSEksQ0FETixDQVFBLEVBQUMsS0FBRCxFQVJBLENBUU8sU0FBQyxHQUFEO0FBQVMscUJBQU8sTUFBQSxDQUFPLEdBQVA7WUFBaEIsQ0FSUDtVQTNCa0IsQ0FBcEI7UUFIc0IsQ0FBeEI7TUFIaUI7SUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLENBQVo7RUFIUzs7OztHQXJFTyxRQUFRLENBQUM7O0FBcUg5Qjs7Ozs7Ozs4QkFDSixPQUFBLEdBQVM7OzhCQUNULEtBQUEsR0FBTzs7OztHQUZ1QixRQUFRLENBQUM7O0FBTXpDLE1BQU0sQ0FBQyxPQUFQLEdBQ0U7RUFBQSxLQUFBLEVBQVksWUFBWjtFQUNBLFVBQUEsRUFBWSxpQkFEWiJ9

},{}],79:[function(require,module,exports){
var DatasetFactory, DexieFactory, Entities,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Entities = require('./entities');

DexieFactory = require('../base/dexieFactory');

DatasetFactory = (function(superClass) {
  extend(DatasetFactory, superClass);

  function DatasetFactory() {
    return DatasetFactory.__super__.constructor.apply(this, arguments);
  }

  DatasetFactory.prototype.tableName = 'datasets';

  DatasetFactory.prototype.radioRequests = {
    'dataset model': 'getModel',
    'dataset collection': 'getCollection'
  };

  DatasetFactory.prototype.initialize = function() {
    return this.cachedCollection = new Entities.Collection();
  };

  DatasetFactory.prototype.getCollection = function() {
    this.ensureDb();
    return new Promise((function(_this) {
      return function(resolve, reject) {
        return _this.db[_this.tableName].toArray().then(function(models) {
          _this.cachedCollection.reset(models);
          return resolve(_this.cachedCollection);
        })["catch"](function(err) {
          return reject(err);
        });
      };
    })(this));
  };

  return DatasetFactory;

})(DexieFactory);

module.exports = new DatasetFactory();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL2Fla3Njby9naXRodWIvbWFnZWxsYW4vYXBwL2NvZmZlZS9tb2R1bGVzL2RhdGFzZXQvZmFjdG9yeS5jb2ZmZWUiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIvVXNlcnMvYWVrc2NvL2dpdGh1Yi9tYWdlbGxhbi9hcHAvY29mZmVlL21vZHVsZXMvZGF0YXNldC9mYWN0b3J5LmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxJQUFBLHNDQUFBO0VBQUE7OztBQUFBLFFBQUEsR0FBVyxPQUFBLENBQVEsWUFBUjs7QUFDWCxZQUFBLEdBQWdCLE9BQUEsQ0FBUSxzQkFBUjs7QUFJVjs7Ozs7OzsyQkFFSixTQUFBLEdBQVc7OzJCQUVYLGFBQUEsR0FDRTtJQUFBLGVBQUEsRUFBc0IsVUFBdEI7SUFDQSxvQkFBQSxFQUFzQixlQUR0Qjs7OzJCQUdGLFVBQUEsR0FBWSxTQUFBO1dBQ1YsSUFBQyxDQUFBLGdCQUFELEdBQW9CLElBQUksUUFBUSxDQUFDLFVBQWIsQ0FBQTtFQURWOzsyQkFHWixhQUFBLEdBQWUsU0FBQTtJQUdiLElBQUMsQ0FBQSxRQUFELENBQUE7QUFHQSxXQUFPLElBQUksT0FBSixDQUFZLENBQUEsU0FBQSxLQUFBO2FBQUEsU0FBQyxPQUFELEVBQVUsTUFBVjtlQUdqQixLQUFDLENBQUEsRUFBRyxDQUFBLEtBQUMsQ0FBQSxTQUFELENBQVcsQ0FBQyxPQUFoQixDQUFBLENBR0EsQ0FBQyxJQUhELENBR00sU0FBQyxNQUFEO1VBQ0osS0FBQyxDQUFBLGdCQUFnQixDQUFDLEtBQWxCLENBQXdCLE1BQXhCO0FBQ0EsaUJBQU8sT0FBQSxDQUFRLEtBQUMsQ0FBQSxnQkFBVDtRQUZILENBSE4sQ0FRQSxFQUFDLEtBQUQsRUFSQSxDQVFPLFNBQUMsR0FBRDtBQUNMLGlCQUFPLE1BQUEsQ0FBTyxHQUFQO1FBREYsQ0FSUDtNQUhpQjtJQUFBLENBQUEsQ0FBQSxDQUFBLElBQUEsQ0FBWjtFQU5NOzs7O0dBWFk7O0FBaUM3QixNQUFNLENBQUMsT0FBUCxHQUFpQixJQUFJLGNBQUosQ0FBQSJ9

},{"../base/dexieFactory":30,"./entities":78}],80:[function(require,module,exports){
var DatasetListRoute, LayoutView,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

LayoutView = require('./views/layout');

DatasetListRoute = (function(superClass) {
  extend(DatasetListRoute, superClass);

  function DatasetListRoute() {
    return DatasetListRoute.__super__.constructor.apply(this, arguments);
  }

  DatasetListRoute.prototype.title = 'Magellan - Datasets';

  DatasetListRoute.prototype.breadcrumbs = [
    {
      text: 'Datasets'
    }
  ];

  DatasetListRoute.prototype.fetch = function() {
    return Backbone.Radio.channel('dataset').request('collection').then((function(_this) {
      return function(collection) {
        return _this.collection = collection;
      };
    })(this));
  };

  DatasetListRoute.prototype.render = function() {
    return this.container.show(new LayoutView({
      collection: this.collection
    }));
  };

  return DatasetListRoute;

})(require('hn_routing/lib/route'));

module.exports = DatasetListRoute;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL2Fla3Njby9naXRodWIvbWFnZWxsYW4vYXBwL2NvZmZlZS9tb2R1bGVzL2RhdGFzZXQvbGlzdC9yb3V0ZS5jb2ZmZWUiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIvVXNlcnMvYWVrc2NvL2dpdGh1Yi9tYWdlbGxhbi9hcHAvY29mZmVlL21vZHVsZXMvZGF0YXNldC9saXN0L3JvdXRlLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxJQUFBLDRCQUFBO0VBQUE7OztBQUFBLFVBQUEsR0FBYyxPQUFBLENBQVEsZ0JBQVI7O0FBSVI7Ozs7Ozs7NkJBRUosS0FBQSxHQUFPOzs2QkFFUCxXQUFBLEdBQWE7SUFDWDtNQUFFLElBQUEsRUFBTSxVQUFSO0tBRFc7Ozs2QkFJYixLQUFBLEdBQU8sU0FBQTtBQUNMLFdBQU8sUUFBUSxDQUFDLEtBQUssQ0FBQyxPQUFmLENBQXVCLFNBQXZCLENBQWlDLENBQUMsT0FBbEMsQ0FBMEMsWUFBMUMsQ0FDUCxDQUFDLElBRE0sQ0FDRCxDQUFBLFNBQUEsS0FBQTthQUFBLFNBQUMsVUFBRDtlQUFnQixLQUFDLENBQUEsVUFBRCxHQUFjO01BQTlCO0lBQUEsQ0FBQSxDQUFBLENBQUEsSUFBQSxDQURDO0VBREY7OzZCQUlQLE1BQUEsR0FBUSxTQUFBO1dBQ04sSUFBQyxDQUFBLFNBQVMsQ0FBQyxJQUFYLENBQWdCLElBQUksVUFBSixDQUFlO01BQUUsVUFBQSxFQUFZLElBQUMsQ0FBQSxVQUFmO0tBQWYsQ0FBaEI7RUFETTs7OztHQVpxQixPQUFBLENBQVEsc0JBQVI7O0FBaUIvQixNQUFNLENBQUMsT0FBUCxHQUFpQiJ9

},{"./views/layout":81,"hn_routing/lib/route":177}],81:[function(require,module,exports){
var DatasetChild, DatasetEmpty, DatasetList, DatasetListLayout, DatasetShow, LdViewer,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

LdViewer = require('../../../search/facetsearch/views/graph.coffee');

DatasetEmpty = (function(superClass) {
  extend(DatasetEmpty, superClass);

  function DatasetEmpty() {
    return DatasetEmpty.__super__.constructor.apply(this, arguments);
  }

  DatasetEmpty.prototype.template = require('./templates/dataset_empty');

  DatasetEmpty.prototype.className = 'list-group-item list-group-item-warning';

  DatasetEmpty.prototype.tagName = 'li';

  return DatasetEmpty;

})(Mn.LayoutView);

DatasetChild = (function(superClass) {
  extend(DatasetChild, superClass);

  function DatasetChild() {
    return DatasetChild.__super__.constructor.apply(this, arguments);
  }

  DatasetChild.prototype.template = require('./templates/dataset_child');

  DatasetChild.prototype.className = 'list-group-item';

  DatasetChild.prototype.tagName = 'li';

  DatasetChild.prototype.behaviors = {
    SelectableChild: {}
  };

  return DatasetChild;

})(Mn.LayoutView);

DatasetList = (function(superClass) {
  extend(DatasetList, superClass);

  function DatasetList() {
    return DatasetList.__super__.constructor.apply(this, arguments);
  }

  DatasetList.prototype.className = 'row';

  DatasetList.prototype.template = require('./templates/dataset_list');

  DatasetList.prototype.childView = DatasetChild;

  DatasetList.prototype.emptyView = DatasetEmpty;

  DatasetList.prototype.childViewContainer = 'ul';

  return DatasetList;

})(Mn.CompositeView);

DatasetShow = (function(superClass) {
  extend(DatasetShow, superClass);

  function DatasetShow() {
    return DatasetShow.__super__.constructor.apply(this, arguments);
  }

  DatasetShow.prototype.className = 'card card-block';

  DatasetShow.prototype.template = require('./templates/dataset_show');

  return DatasetShow;

})(Mn.LayoutView);

DatasetListLayout = (function(superClass) {
  extend(DatasetListLayout, superClass);

  function DatasetListLayout() {
    return DatasetListLayout.__super__.constructor.apply(this, arguments);
  }

  DatasetListLayout.prototype.template = require('./templates/layout');

  DatasetListLayout.prototype.className = 'container-fluid';

  DatasetListLayout.prototype.regions = {
    listRegion: '[data-region=list]',
    detailRegion: '[data-region=detail]'
  };

  DatasetListLayout.prototype.onShow = function() {
    var listView, ref;
    listView = new DatasetList({
      collection: this.collection
    });
    listView.on('childview:selected', (function(_this) {
      return function(view) {
        return _this.showDataset(view.model);
      };
    })(this));
    this.listRegion.show(listView);
    return (ref = this.collection.at(0)) != null ? ref.trigger('selected') : void 0;
  };

  DatasetListLayout.prototype.showDataset = function(dataset) {
    return this.detailRegion.show(new DatasetShow({
      model: dataset
    }));
  };

  return DatasetListLayout;

})(Mn.LayoutView);

module.exports = DatasetListLayout;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL2Fla3Njby9naXRodWIvbWFnZWxsYW4vYXBwL2NvZmZlZS9tb2R1bGVzL2RhdGFzZXQvbGlzdC92aWV3cy9sYXlvdXQuY29mZmVlIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiL1VzZXJzL2Fla3Njby9naXRodWIvbWFnZWxsYW4vYXBwL2NvZmZlZS9tb2R1bGVzL2RhdGFzZXQvbGlzdC92aWV3cy9sYXlvdXQuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLElBQUEsaUZBQUE7RUFBQTs7O0FBQUEsUUFBQSxHQUFXLE9BQUEsQ0FBUSxnREFBUjs7QUFJTDs7Ozs7Ozt5QkFDSixRQUFBLEdBQVUsT0FBQSxDQUFRLDJCQUFSOzt5QkFDVixTQUFBLEdBQVc7O3lCQUNYLE9BQUEsR0FBUzs7OztHQUhnQixFQUFFLENBQUM7O0FBT3hCOzs7Ozs7O3lCQUNKLFFBQUEsR0FBVSxPQUFBLENBQVEsMkJBQVI7O3lCQUNWLFNBQUEsR0FBVzs7eUJBQ1gsT0FBQSxHQUFTOzt5QkFFVCxTQUFBLEdBQ0U7SUFBQSxlQUFBLEVBQWlCLEVBQWpCOzs7OztHQU51QixFQUFFLENBQUM7O0FBVXhCOzs7Ozs7O3dCQUNKLFNBQUEsR0FBVzs7d0JBQ1gsUUFBQSxHQUFVLE9BQUEsQ0FBUSwwQkFBUjs7d0JBQ1YsU0FBQSxHQUFXOzt3QkFDWCxTQUFBLEdBQVc7O3dCQUNYLGtCQUFBLEdBQW9COzs7O0dBTEksRUFBRSxDQUFDOztBQVN2Qjs7Ozs7Ozt3QkFDSixTQUFBLEdBQVc7O3dCQUNYLFFBQUEsR0FBVSxPQUFBLENBQVEsMEJBQVI7Ozs7R0FGYyxFQUFFLENBQUM7O0FBTXZCOzs7Ozs7OzhCQUNKLFFBQUEsR0FBVSxPQUFBLENBQVEsb0JBQVI7OzhCQUNWLFNBQUEsR0FBVzs7OEJBRVgsT0FBQSxHQUNFO0lBQUEsVUFBQSxFQUFjLG9CQUFkO0lBQ0EsWUFBQSxFQUFjLHNCQURkOzs7OEJBR0YsTUFBQSxHQUFRLFNBQUE7QUFDTixRQUFBO0lBQUEsUUFBQSxHQUFXLElBQUksV0FBSixDQUFnQjtNQUFFLFVBQUEsRUFBWSxJQUFDLENBQUEsVUFBZjtLQUFoQjtJQUNYLFFBQVEsQ0FBQyxFQUFULENBQVksb0JBQVosRUFBa0MsQ0FBQSxTQUFBLEtBQUE7YUFBQSxTQUFDLElBQUQ7ZUFBVSxLQUFDLENBQUEsV0FBRCxDQUFhLElBQUksQ0FBQyxLQUFsQjtNQUFWO0lBQUEsQ0FBQSxDQUFBLENBQUEsSUFBQSxDQUFsQztJQUNBLElBQUMsQ0FBQSxVQUFVLENBQUMsSUFBWixDQUFpQixRQUFqQjtzREFDaUIsQ0FBRSxPQUFuQixDQUEyQixVQUEzQjtFQUpNOzs4QkFNUixXQUFBLEdBQWEsU0FBQyxPQUFEO1dBQ1gsSUFBQyxDQUFBLFlBQVksQ0FBQyxJQUFkLENBQW1CLElBQUksV0FBSixDQUFnQjtNQUFFLEtBQUEsRUFBTyxPQUFUO0tBQWhCLENBQW5CO0VBRFc7Ozs7R0FkaUIsRUFBRSxDQUFDOztBQW1CbkMsTUFBTSxDQUFDLE9BQVAsR0FBaUIifQ==

},{"../../../search/facetsearch/views/graph.coffee":132,"./templates/dataset_child":82,"./templates/dataset_empty":83,"./templates/dataset_list":84,"./templates/dataset_show":85,"./templates/layout":86}],82:[function(require,module,exports){
var jade = require("jade/runtime");

module.exports = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (label) {
buf.push(jade.escape(null == (jade_interp = label) ? "" : jade_interp));}.call(this,"label" in locals_for_with?locals_for_with.label:typeof label!=="undefined"?label:undefined));;return buf.join("");
};
},{"jade/runtime":187}],83:[function(require,module,exports){
var jade = require("jade/runtime");

module.exports = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;

buf.push("No Datasets");;return buf.join("");
};
},{"jade/runtime":187}],84:[function(require,module,exports){
var jade = require("jade/runtime");

module.exports = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;

buf.push("<div class=\"col-xs-12\"><a href=\"#datasets/new\" class=\"btn btn-lg btn-primary-outline w-100\"><i class=\"fa fa-fw fa-plus\"></i></a><ul class=\"list-group m-t-1\"></ul></div>");;return buf.join("");
};
},{"jade/runtime":187}],85:[function(require,module,exports){
var jade = require("jade/runtime");

module.exports = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (context, count, id, label, undefined) {
buf.push("<div class=\"row\"><div class=\"col-xs-6\"><h4 class=\"card-title\">" + (jade.escape(null == (jade_interp = label) ? "" : jade_interp)) + "</h4></div><div class=\"col-xs-6 text-xs-right\"><a" + (jade.attr("href", "#datasets/" + (id) + "/config", true, false)) + " class=\"btn btn-sm btn-primary-outline\"><i class=\"fa fa-fw fa-cog\"></i>&nbsp;\nConfiguation</a></div><div class=\"col-xs-12\"><hr/></div></div><div class=\"row\"><div class=\"col-xs-6\"><p class=\"lead\">" + (jade.escape((jade_interp = count) == null ? '' : jade_interp)) + " Items</p><a" + (jade.attr("href", "#datasets/" + (id) + "/search", true, false)) + " class=\"btn btn-primary-outline w-100\"><i class=\"fa fa-fw fa-search\"></i>&nbsp;\nSearch Dataset</a></div><div class=\"col-xs-6\"><p class=\"lead\">Context</p><ul class=\"list-group\">");
// iterate context
;(function(){
  var $$obj = context;
  if ('number' == typeof $$obj.length) {

    for (var prefix = 0, $$l = $$obj.length; prefix < $$l; prefix++) {
      var ctx = $$obj[prefix];

buf.push("<li class=\"list-group-item\"><strong>" + (jade.escape(null == (jade_interp = prefix) ? "" : jade_interp)) + "</strong><br/>" + (jade.escape(null == (jade_interp = ctx) ? "" : jade_interp)) + "</li>");
    }

  } else {
    var $$l = 0;
    for (var prefix in $$obj) {
      $$l++;      var ctx = $$obj[prefix];

buf.push("<li class=\"list-group-item\"><strong>" + (jade.escape(null == (jade_interp = prefix) ? "" : jade_interp)) + "</strong><br/>" + (jade.escape(null == (jade_interp = ctx) ? "" : jade_interp)) + "</li>");
    }

  }
}).call(this);

buf.push("</ul></div></div>");}.call(this,"context" in locals_for_with?locals_for_with.context:typeof context!=="undefined"?context:undefined,"count" in locals_for_with?locals_for_with.count:typeof count!=="undefined"?count:undefined,"id" in locals_for_with?locals_for_with.id:typeof id!=="undefined"?id:undefined,"label" in locals_for_with?locals_for_with.label:typeof label!=="undefined"?label:undefined,"undefined" in locals_for_with?locals_for_with.undefined:typeof undefined!=="undefined"?undefined:undefined));;return buf.join("");
};
},{"jade/runtime":187}],86:[function(require,module,exports){
var jade = require("jade/runtime");

module.exports = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;

buf.push("<div class=\"row\"><div data-region=\"list\" class=\"col-xs-2\"></div><div data-region=\"detail\" class=\"col-xs-10\"></div></div>");;return buf.join("");
};
},{"jade/runtime":187}],87:[function(require,module,exports){
var DatasetCreator, LayoutView, NewDatasetRoute,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

LayoutView = require('./views/layout');

DatasetCreator = require('../creator');

NewDatasetRoute = (function(superClass) {
  extend(NewDatasetRoute, superClass);

  function NewDatasetRoute() {
    return NewDatasetRoute.__super__.constructor.apply(this, arguments);
  }

  NewDatasetRoute.prototype.title = 'Magellan - New Dataset';

  NewDatasetRoute.prototype.breadcrumbs = [
    {
      text: 'Datasets',
      href: '#datasets'
    }, {
      text: 'New'
    }
  ];

  NewDatasetRoute.prototype.fetch = function() {
    return Backbone.Radio.channel('dataset').request('model').then((function(_this) {
      return function(model) {
        return _this.model = model;
      };
    })(this));
  };

  NewDatasetRoute.prototype.render = function() {
    return this.container.show(new LayoutView({
      model: this.model,
      creator: DatasetCreator
    }));
  };

  return NewDatasetRoute;

})(require('hn_routing/lib/route'));

module.exports = NewDatasetRoute;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL2Fla3Njby9naXRodWIvbWFnZWxsYW4vYXBwL2NvZmZlZS9tb2R1bGVzL2RhdGFzZXQvbmV3L3JvdXRlLmNvZmZlZSIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9hZWtzY28vZ2l0aHViL21hZ2VsbGFuL2FwcC9jb2ZmZWUvbW9kdWxlcy9kYXRhc2V0L25ldy9yb3V0ZS5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsSUFBQSwyQ0FBQTtFQUFBOzs7QUFBQSxVQUFBLEdBQWEsT0FBQSxDQUFRLGdCQUFSOztBQUNiLGNBQUEsR0FBaUIsT0FBQSxDQUFRLFlBQVI7O0FBSVg7Ozs7Ozs7NEJBRUosS0FBQSxHQUFPOzs0QkFFUCxXQUFBLEdBQWE7SUFDWDtNQUFFLElBQUEsRUFBTSxVQUFSO01BQW9CLElBQUEsRUFBTSxXQUExQjtLQURXLEVBRVg7TUFBRSxJQUFBLEVBQU0sS0FBUjtLQUZXOzs7NEJBS2IsS0FBQSxHQUFPLFNBQUE7V0FDTCxRQUFRLENBQUMsS0FBSyxDQUFDLE9BQWYsQ0FBdUIsU0FBdkIsQ0FBaUMsQ0FBQyxPQUFsQyxDQUEwQyxPQUExQyxDQUNBLENBQUMsSUFERCxDQUNNLENBQUEsU0FBQSxLQUFBO2FBQUEsU0FBQyxLQUFEO2VBQVcsS0FBQyxDQUFBLEtBQUQsR0FBUztNQUFwQjtJQUFBLENBQUEsQ0FBQSxDQUFBLElBQUEsQ0FETjtFQURLOzs0QkFJUCxNQUFBLEdBQVEsU0FBQTtXQUNOLElBQUMsQ0FBQSxTQUFTLENBQUMsSUFBWCxDQUFnQixJQUFJLFVBQUosQ0FBZTtNQUFFLEtBQUEsRUFBTyxJQUFDLENBQUEsS0FBVjtNQUFpQixPQUFBLEVBQVMsY0FBMUI7S0FBZixDQUFoQjtFQURNOzs7O0dBYm9CLE9BQUEsQ0FBUSxzQkFBUjs7QUFrQjlCLE1BQU0sQ0FBQyxPQUFQLEdBQWlCIn0=

},{"../creator":77,"./views/layout":88,"hn_routing/lib/route":177}],88:[function(require,module,exports){
var Marionette, NewDatasetLayout, UploadWidget,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

Marionette = require('backbone.marionette');

UploadWidget = (function(superClass) {
  extend(UploadWidget, superClass);

  function UploadWidget() {
    return UploadWidget.__super__.constructor.apply(this, arguments);
  }

  UploadWidget.prototype.template = require('./templates/upload');

  UploadWidget.prototype.className = 'form-group';

  UploadWidget.prototype.events = {
    'change input[type=file]': 'onInputChange'
  };

  UploadWidget.prototype.onInputChange = function(e) {
    var file, fileReader;
    file = e.target.files[0];
    if (!file) {
      return;
    }
    fileReader = new FileReader();
    fileReader.onload = (function(_this) {
      return function() {
        return _this.onFileLoaded(fileReader.result);
      };
    })(this);
    return fileReader.readAsText(file);
  };

  UploadWidget.prototype.onFileLoaded = function(text) {
    var parsed;
    parsed = JSON.parse(text);
    return this.trigger('parse', parsed);
  };

  return UploadWidget;

})(Mn.LayoutView);

NewDatasetLayout = (function(superClass) {
  extend(NewDatasetLayout, superClass);

  function NewDatasetLayout() {
    this.onJsonUpload = bind(this.onJsonUpload, this);
    return NewDatasetLayout.__super__.constructor.apply(this, arguments);
  }

  NewDatasetLayout.prototype.template = require('./templates/layout');

  NewDatasetLayout.prototype.className = 'container';

  NewDatasetLayout.prototype.behaviors = {
    ModelEvents: {},
    SubmitButton: {}
  };

  NewDatasetLayout.prototype.regions = {
    uploadRegion: '[data-region=upload]'
  };

  NewDatasetLayout.prototype.onRender = function() {
    var uploadWidget;
    uploadWidget = new UploadWidget();
    uploadWidget.on('parse', this.onJsonUpload);
    this.uploadRegion.show(uploadWidget);
    return this.disableSubmit();
  };

  NewDatasetLayout.prototype.onJsonUpload = function(parsedJson) {
    this.model.set('context', parsedJson['@context']);
    this.uploadedGraph = parsedJson['@graph'];
    return this.enableSubmit();
  };

  NewDatasetLayout.prototype.onSubmit = function() {
    var data;
    data = Backbone.Syphon.serialize(this);
    this.model.set(data);
    return this.options.creator.deploy(this.model, this.uploadedGraph);
  };

  NewDatasetLayout.prototype.onSync = function() {
    return Radio.channel('app').trigger('redirect', '#datasets');
  };

  NewDatasetLayout.prototype.onError = function(err) {
    console.log('ERROR');
    return console.log(err);
  };

  return NewDatasetLayout;

})(Mn.LayoutView);

module.exports = NewDatasetLayout;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL2Fla3Njby9naXRodWIvbWFnZWxsYW4vYXBwL2NvZmZlZS9tb2R1bGVzL2RhdGFzZXQvbmV3L3ZpZXdzL2xheW91dC5jb2ZmZWUiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIvVXNlcnMvYWVrc2NvL2dpdGh1Yi9tYWdlbGxhbi9hcHAvY29mZmVlL21vZHVsZXMvZGF0YXNldC9uZXcvdmlld3MvbGF5b3V0LmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxJQUFBLDBDQUFBO0VBQUE7Ozs7QUFBQSxVQUFBLEdBQWEsT0FBQSxDQUFRLHFCQUFSOztBQUtQOzs7Ozs7O3lCQUNKLFFBQUEsR0FBVSxPQUFBLENBQVEsb0JBQVI7O3lCQUNWLFNBQUEsR0FBVzs7eUJBRVgsTUFBQSxHQUNFO0lBQUEseUJBQUEsRUFBMkIsZUFBM0I7Ozt5QkFFRixhQUFBLEdBQWUsU0FBQyxDQUFEO0FBR2IsUUFBQTtJQUFBLElBQUEsR0FBTyxDQUFDLENBQUMsTUFBTSxDQUFDLEtBQU0sQ0FBQSxDQUFBO0lBR3RCLElBQUEsQ0FBYyxJQUFkO0FBQUEsYUFBQTs7SUFHQSxVQUFBLEdBQWEsSUFBSSxVQUFKLENBQUE7SUFDYixVQUFVLENBQUMsTUFBWCxHQUFvQixDQUFBLFNBQUEsS0FBQTthQUFBLFNBQUE7ZUFBRyxLQUFDLENBQUEsWUFBRCxDQUFjLFVBQVUsQ0FBQyxNQUF6QjtNQUFIO0lBQUEsQ0FBQSxDQUFBLENBQUEsSUFBQTtXQUNwQixVQUFVLENBQUMsVUFBWCxDQUFzQixJQUF0QjtFQVhhOzt5QkFlZixZQUFBLEdBQWMsU0FBQyxJQUFEO0FBQ1osUUFBQTtJQUFBLE1BQUEsR0FBUyxJQUFJLENBQUMsS0FBTCxDQUFXLElBQVg7V0FDVCxJQUFDLENBQUEsT0FBRCxDQUFTLE9BQVQsRUFBa0IsTUFBbEI7RUFGWTs7OztHQXRCVyxFQUFFLENBQUM7O0FBNEJ4Qjs7Ozs7Ozs7NkJBQ0osUUFBQSxHQUFVLE9BQUEsQ0FBUSxvQkFBUjs7NkJBQ1YsU0FBQSxHQUFXOzs2QkFFWCxTQUFBLEdBQ0U7SUFBQSxXQUFBLEVBQWEsRUFBYjtJQUNBLFlBQUEsRUFBYyxFQURkOzs7NkJBR0YsT0FBQSxHQUNFO0lBQUEsWUFBQSxFQUFjLHNCQUFkOzs7NkJBRUYsUUFBQSxHQUFVLFNBQUE7QUFDUixRQUFBO0lBQUEsWUFBQSxHQUFlLElBQUksWUFBSixDQUFBO0lBQ2YsWUFBWSxDQUFDLEVBQWIsQ0FBZ0IsT0FBaEIsRUFBeUIsSUFBQyxDQUFBLFlBQTFCO0lBQ0EsSUFBQyxDQUFBLFlBQVksQ0FBQyxJQUFkLENBQW1CLFlBQW5CO1dBQ0EsSUFBQyxDQUFBLGFBQUQsQ0FBQTtFQUpROzs2QkFRVixZQUFBLEdBQWMsU0FBQyxVQUFEO0lBRVosSUFBQyxDQUFBLEtBQUssQ0FBQyxHQUFQLENBQVcsU0FBWCxFQUFzQixVQUFXLENBQUEsVUFBQSxDQUFqQztJQUlBLElBQUMsQ0FBQSxhQUFELEdBQWlCLFVBQVcsQ0FBQSxRQUFBO1dBSTVCLElBQUMsQ0FBQSxZQUFELENBQUE7RUFWWTs7NkJBYWQsUUFBQSxHQUFVLFNBQUE7QUFHUixRQUFBO0lBQUEsSUFBQSxHQUFPLFFBQVEsQ0FBQyxNQUFNLENBQUMsU0FBaEIsQ0FBMEIsSUFBMUI7SUFHUCxJQUFDLENBQUEsS0FBSyxDQUFDLEdBQVAsQ0FBVyxJQUFYO1dBQ0EsSUFBQyxDQUFBLE9BQU8sQ0FBQyxPQUFPLENBQUMsTUFBakIsQ0FBd0IsSUFBQyxDQUFBLEtBQXpCLEVBQWdDLElBQUMsQ0FBQSxhQUFqQztFQVBROzs2QkFTVixNQUFBLEdBQVEsU0FBQTtXQUNOLEtBQUssQ0FBQyxPQUFOLENBQWMsS0FBZCxDQUFvQixDQUFDLE9BQXJCLENBQTZCLFVBQTdCLEVBQXlDLFdBQXpDO0VBRE07OzZCQUlSLE9BQUEsR0FBUyxTQUFDLEdBQUQ7SUFDUCxPQUFPLENBQUMsR0FBUixDQUFZLE9BQVo7V0FDQSxPQUFPLENBQUMsR0FBUixDQUFZLEdBQVo7RUFGTzs7OztHQTdDb0IsRUFBRSxDQUFDOztBQW1EbEMsTUFBTSxDQUFDLE9BQVAsR0FBaUIifQ==

},{"./templates/layout":89,"./templates/upload":90,"backbone.marionette":151}],89:[function(require,module,exports){
var jade = require("jade/runtime");

module.exports = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;

jade_mixins["formGroup"] = jade_interp = function(opts){
var block = (this && this.block), attributes = (this && this.attributes) || {};
buf.push("<fieldset" + (jade.cls(['form-group',opts.formGroupCss], [null,true])) + ">");
if ( opts.label)
{
buf.push("<label class=\"form-control-label\">" + (jade.escape(null == (jade_interp = opts.label) ? "" : jade_interp)) + "</label>");
}
block && block();
buf.push("</fieldset>");
};
buf.push("");
jade_mixins["formInput"] = jade_interp = function(opts){
var block = (this && this.block), attributes = (this && this.attributes) || {};
jade_mixins["formGroup"].call({
block: function(){
buf.push("<input" + (jade.attrs(jade.merge([{"placeholder": jade.escape(opts.placeholder),"name": jade.escape(opts.name),"type": jade.escape(opts.type),"value": jade.escape(opts.value),"class": "form-control"},attributes]), false)) + "/>");
}
}, opts);
};
buf.push("");








buf.push("");


































buf.push("");




buf.push("");
jade_mixins["button"] = jade_interp = function(opts){
var block = (this && this.block), attributes = (this && this.attributes) || {};
buf.push("<button" + (jade.attrs(jade.merge([{"type": "button","class": "btn"},attributes]), false)) + ">");
if ( opts.icon)
{
buf.push("<i" + (jade.cls(['fa','fa-fw',opts.icon], [null,null,true])) + "></i>&nbsp;");
}
buf.push((jade.escape(null == (jade_interp = opts.text) ? "" : jade_interp)) + "</button>");
};
buf.push("");
jade_mixins["submitButton"] = jade_interp = function(opts){
var block = (this && this.block), attributes = (this && this.attributes) || {};
if (!( opts.text))
{
opts.text = 'Submit'
}
if (!( opts.icon))
{
opts.icon = 'fa-check'
}
jade_mixins["button"].call({
attributes: jade.merge([{"data-click": "submit","class": "btn-success"},attributes])
}, opts);
};
buf.push("");














buf.push("<div class=\"row\"><div class=\"col-xs-12\"><div class=\"card card-block\"><div class=\"row\"><div class=\"col-xs-12\"><h4 class=\"card-title\">New Dataset</h4></div><div class=\"col-xs-12\"><hr/></div><div class=\"col-xs-12\">");
jade_mixins["formInput"]({ label: 'Label', placeholder: 'Label', name: 'label', type: 'text' });
buf.push("</div><div data-region=\"upload\" class=\"col-xs-12\"></div><div class=\"col-xs-12\"><hr/></div><div class=\"col-xs-12 text-xs-right\">");
jade_mixins["submitButton"]({});
buf.push("</div></div></div></div></div>");;return buf.join("");
};
},{"jade/runtime":187}],90:[function(require,module,exports){
var jade = require("jade/runtime");

module.exports = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;

buf.push("<input type=\"file\" id=\"file_upload\" data-title=\"Drag and drop a JSON-LD dataset\" class=\"form-control-file\"/>");;return buf.join("");
};
},{"jade/runtime":187}],91:[function(require,module,exports){
var ConfigRoute, DatasetRouter, ListRoute, NewRoute, SearchRoute,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

require('./factory');

require('./creator');

ListRoute = require('./list/route');

SearchRoute = require('./search/route');

ConfigRoute = require('./config/route');

NewRoute = require('./new/route');

DatasetRouter = (function(superClass) {
  extend(DatasetRouter, superClass);

  function DatasetRouter() {
    return DatasetRouter.__super__.constructor.apply(this, arguments);
  }

  DatasetRouter.prototype.routes = {
    '(/)': 'list',
    'datasets(/)': 'list',
    'datasets/:id/search(/)': 'search',
    'datasets/:id/config(/)': 'config',
    'datasets/new(/)': 'new'
  };

  DatasetRouter.prototype.list = function() {
    return new ListRoute({
      container: this.container
    });
  };

  DatasetRouter.prototype.search = function(id) {
    return new SearchRoute({
      container: this.container,
      id: id
    });
  };

  DatasetRouter.prototype.config = function(id) {
    return new ConfigRoute({
      container: this.container,
      id: id
    });
  };

  DatasetRouter.prototype["new"] = function() {
    return new NewRoute({
      container: this.container
    });
  };

  return DatasetRouter;

})(require('hn_routing/lib/router'));

module.exports = DatasetRouter;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL2Fla3Njby9naXRodWIvbWFnZWxsYW4vYXBwL2NvZmZlZS9tb2R1bGVzL2RhdGFzZXQvcm91dGVyLmNvZmZlZSIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9hZWtzY28vZ2l0aHViL21hZ2VsbGFuL2FwcC9jb2ZmZWUvbW9kdWxlcy9kYXRhc2V0L3JvdXRlci5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsSUFBQSw0REFBQTtFQUFBOzs7QUFBQSxPQUFBLENBQVEsV0FBUjs7QUFDQSxPQUFBLENBQVEsV0FBUjs7QUFFQSxTQUFBLEdBQWMsT0FBQSxDQUFRLGNBQVI7O0FBQ2QsV0FBQSxHQUFjLE9BQUEsQ0FBUSxnQkFBUjs7QUFDZCxXQUFBLEdBQWMsT0FBQSxDQUFRLGdCQUFSOztBQUNkLFFBQUEsR0FBYyxPQUFBLENBQVEsYUFBUjs7QUFNUjs7Ozs7OzswQkFFSixNQUFBLEdBQ0U7SUFBQSxLQUFBLEVBQTBCLE1BQTFCO0lBQ0EsYUFBQSxFQUEwQixNQUQxQjtJQUVBLHdCQUFBLEVBQTBCLFFBRjFCO0lBR0Esd0JBQUEsRUFBMEIsUUFIMUI7SUFJQSxpQkFBQSxFQUEwQixLQUoxQjs7OzBCQU1GLElBQUEsR0FBTSxTQUFBO1dBQ0osSUFBSSxTQUFKLENBQWM7TUFBRSxTQUFBLEVBQVcsSUFBQyxDQUFBLFNBQWQ7S0FBZDtFQURJOzswQkFHTixNQUFBLEdBQVEsU0FBQyxFQUFEO1dBQ04sSUFBSSxXQUFKLENBQWdCO01BQUUsU0FBQSxFQUFXLElBQUMsQ0FBQSxTQUFkO01BQXlCLEVBQUEsRUFBSSxFQUE3QjtLQUFoQjtFQURNOzswQkFHUixNQUFBLEdBQVEsU0FBQyxFQUFEO1dBQ04sSUFBSSxXQUFKLENBQWdCO01BQUUsU0FBQSxFQUFXLElBQUMsQ0FBQSxTQUFkO01BQXlCLEVBQUEsRUFBSSxFQUE3QjtLQUFoQjtFQURNOzsyQkFHUixLQUFBLEdBQUssU0FBQTtXQUNILElBQUksUUFBSixDQUFhO01BQUUsU0FBQSxFQUFXLElBQUMsQ0FBQSxTQUFkO0tBQWI7RUFERzs7OztHQWxCcUIsT0FBQSxDQUFRLHVCQUFSOztBQXVCNUIsTUFBTSxDQUFDLE9BQVAsR0FBaUIifQ==

},{"./config/route":72,"./creator":77,"./factory":79,"./list/route":80,"./new/route":87,"./search/route":92,"hn_routing/lib/router":178}],92:[function(require,module,exports){
var DatasetSearchRoute, SearchView,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

SearchView = require('../../search/facetsearch/views/layout');

DatasetSearchRoute = (function(superClass) {
  extend(DatasetSearchRoute, superClass);

  function DatasetSearchRoute() {
    return DatasetSearchRoute.__super__.constructor.apply(this, arguments);
  }

  DatasetSearchRoute.prototype.title = function() {
    return "Magellan - " + (this.model.get('label')) + " - Search";
  };

  DatasetSearchRoute.prototype.breadcrumbs = function() {
    return [
      {
        text: 'Datasets',
        href: '#datasets'
      }, {
        text: "" + (this.model.get('label'))
      }
    ];
  };

  DatasetSearchRoute.prototype.fetch = function(id) {
    return new Promise((function(_this) {
      return function(resolve, reject) {
        return Backbone.Radio.channel('dataset').request('model', id).then(function(model) {
          _this.model = model;
          return _this.model.fetchDatapoints().then(function(datapoints) {
            _this.datapoints = datapoints;
            return _this.model.fetchFacets().then(function(facetCollection) {
              _this.facetCollection = facetCollection;
              return Backbone.Radio.channel('search:result').request('collection').then(function(collection) {
                _this.collection = collection;
                return resolve();
              });
            });
          });
        });
      };
    })(this));
  };

  DatasetSearchRoute.prototype.render = function() {
    return this.container.show(new SearchView({
      model: this.model,
      collection: this.collection,
      items: this.datapoints,
      facetCollection: this.facetCollection
    }));
  };

  return DatasetSearchRoute;

})(require('hn_routing/lib/route'));

module.exports = DatasetSearchRoute;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL2Fla3Njby9naXRodWIvbWFnZWxsYW4vYXBwL2NvZmZlZS9tb2R1bGVzL2RhdGFzZXQvc2VhcmNoL3JvdXRlLmNvZmZlZSIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9hZWtzY28vZ2l0aHViL21hZ2VsbGFuL2FwcC9jb2ZmZWUvbW9kdWxlcy9kYXRhc2V0L3NlYXJjaC9yb3V0ZS5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsSUFBQSw4QkFBQTtFQUFBOzs7QUFBQSxVQUFBLEdBQWEsT0FBQSxDQUFRLHVDQUFSOztBQUlQOzs7Ozs7OytCQUVKLEtBQUEsR0FBTyxTQUFBO0FBQ0wsV0FBTyxhQUFBLEdBQWEsQ0FBQyxJQUFDLENBQUEsS0FBSyxDQUFDLEdBQVAsQ0FBVyxPQUFYLENBQUQsQ0FBYixHQUFrQztFQURwQzs7K0JBR1AsV0FBQSxHQUFhLFNBQUE7QUFDWCxXQUFPO01BQ0w7UUFBRSxJQUFBLEVBQU0sVUFBUjtRQUFvQixJQUFBLEVBQU0sV0FBMUI7T0FESyxFQUVMO1FBQUUsSUFBQSxFQUFNLEVBQUEsR0FBRSxDQUFDLElBQUMsQ0FBQSxLQUFLLENBQUMsR0FBUCxDQUFXLE9BQVgsQ0FBRCxDQUFWO09BRks7O0VBREk7OytCQVFiLEtBQUEsR0FBTyxTQUFDLEVBQUQ7QUFHTCxXQUFPLElBQUksT0FBSixDQUFZLENBQUEsU0FBQSxLQUFBO2FBQUEsU0FBQyxPQUFELEVBQVUsTUFBVjtlQUNqQixRQUFRLENBQUMsS0FBSyxDQUFDLE9BQWYsQ0FBdUIsU0FBdkIsQ0FBaUMsQ0FBQyxPQUFsQyxDQUEwQyxPQUExQyxFQUFtRCxFQUFuRCxDQUNBLENBQUMsSUFERCxDQUNNLFNBQUMsS0FBRDtVQUdKLEtBQUMsQ0FBQSxLQUFELEdBQVM7aUJBR1QsS0FBQyxDQUFBLEtBQUssQ0FBQyxlQUFQLENBQUEsQ0FBd0IsQ0FBQyxJQUF6QixDQUE4QixTQUFDLFVBQUQ7WUFHNUIsS0FBQyxDQUFBLFVBQUQsR0FBYzttQkFHZCxLQUFDLENBQUEsS0FBSyxDQUFDLFdBQVAsQ0FBQSxDQUFvQixDQUFDLElBQXJCLENBQTBCLFNBQUMsZUFBRDtjQUd4QixLQUFDLENBQUEsZUFBRCxHQUFtQjtxQkFHbkIsUUFBUSxDQUFDLEtBQUssQ0FBQyxPQUFmLENBQXVCLGVBQXZCLENBQXVDLENBQUMsT0FBeEMsQ0FBZ0QsWUFBaEQsQ0FBNkQsQ0FBQyxJQUE5RCxDQUFtRSxTQUFDLFVBQUQ7Z0JBR2pFLEtBQUMsQ0FBQSxVQUFELEdBQWM7QUFHZCx1QkFBTyxPQUFBLENBQUE7Y0FOMEQsQ0FBbkU7WUFOd0IsQ0FBMUI7VUFONEIsQ0FBOUI7UUFOSSxDQUROO01BRGlCO0lBQUEsQ0FBQSxDQUFBLENBQUEsSUFBQSxDQUFaO0VBSEY7OytCQStCUCxNQUFBLEdBQVEsU0FBQTtXQUNOLElBQUMsQ0FBQSxTQUFTLENBQUMsSUFBWCxDQUFnQixJQUFJLFVBQUosQ0FBZTtNQUFFLEtBQUEsRUFBTyxJQUFDLENBQUEsS0FBVjtNQUFpQixVQUFBLEVBQVksSUFBQyxDQUFBLFVBQTlCO01BQTBDLEtBQUEsRUFBTyxJQUFDLENBQUEsVUFBbEQ7TUFBOEQsZUFBQSxFQUFpQixJQUFDLENBQUEsZUFBaEY7S0FBZixDQUFoQjtFQURNOzs7O0dBNUN1QixPQUFBLENBQVEsc0JBQVI7O0FBaURqQyxNQUFNLENBQUMsT0FBUCxHQUFpQiJ9

},{"../../search/facetsearch/views/layout":135,"hn_routing/lib/route":177}],93:[function(require,module,exports){
var DexieService,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

DexieService = (function(superClass) {
  extend(DexieService, superClass);

  function DexieService() {
    this.onDexieReady = bind(this.onDexieReady, this);
    return DexieService.__super__.constructor.apply(this, arguments);
  }

  DexieService.prototype.radioRequests = {
    'db add': 'addDocument',
    'db delete': 'deleteDocument',
    'db db': 'getDb'
  };

  DexieService.prototype.initialize = function(options) {
    if (options == null) {
      options = {};
    }
    this.db = new Dexie(options.db);
    this.schema = options.schema;
    this.version = options.version || 1;
    window.db = this.db;
    this.ensureSchema();
    this.db.on('ready', this.onDexieReady);
    return this.db.open();
  };

  DexieService.prototype.onDexieReady = function() {
    return this.ensureDocuments().then((function(_this) {
      return function(results) {
        var isValid;
        isValid = _this.validateDocumentCount(results);
        if (isValid) {
          return _this.startApp();
        }
        return _this.populateTables();
      };
    })(this));
  };

  DexieService.prototype.validateDocumentCount = function(results) {
    if (_.isEmpty(results)) {
      return true;
    }
    results.push(-1);
    if (_.min(results) > 0) {
      return true;
    }
    return false;
  };

  DexieService.prototype.startApp = function() {
    return Backbone.Radio.channel('db').trigger('ready');
  };

  DexieService.prototype.ensureSchema = function() {
    var i, len, ref, table;
    ref = this.schema;
    for (i = 0, len = ref.length; i < len; i++) {
      table = ref[i];
      if (this.db[table.name]) {
        continue;
      }
      return this.addSchema();
    }
  };

  DexieService.prototype.addSchema = function() {
    var i, len, ref, schemaDefinition, table;
    schemaDefinition = {};
    ref = this.schema;
    for (i = 0, len = ref.length; i < len; i++) {
      table = ref[i];
      schemaDefinition[table.name] = table.attrs;
    }
    this.db.version(this.version).stores(schemaDefinition);
    return true;
  };

  DexieService.prototype.ensureDocuments = function() {
    var countPromises, i, len, ref, table;
    countPromises = [];
    ref = this.schema;
    for (i = 0, len = ref.length; i < len; i++) {
      table = ref[i];
      if (!table.ensureDocuments) {
        continue;
      }
      countPromises.push(this.db[table.name].count());
    }
    return Promise.all(countPromises);
  };

  DexieService.prototype.populateTables = function() {
    if (window.global && window.global.ServerRadio) {
      window.global.ServerRadio.trigger('populate');
    } else {

    }
    return this.startApp();
  };

  DexieService.prototype.addDocument = function(table, doc) {
    return this.db[table].add(doc);
  };

  DexieService.prototype.deleteDocument = function(table, document_id) {
    return this.db[table]["delete"](document_id);
  };

  DexieService.prototype.getDb = function() {
    return this.db;
  };

  return DexieService;

})(Marionette.Service);

module.exports = DexieService;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL2Fla3Njby9naXRodWIvbWFnZWxsYW4vYXBwL2NvZmZlZS9tb2R1bGVzL2RiL3NlcnZpY2UuY29mZmVlIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiL1VzZXJzL2Fla3Njby9naXRodWIvbWFnZWxsYW4vYXBwL2NvZmZlZS9tb2R1bGVzL2RiL3NlcnZpY2UuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQU1BLElBQUEsWUFBQTtFQUFBOzs7O0FBQU07Ozs7Ozs7O3lCQUVKLGFBQUEsR0FDRTtJQUFBLFFBQUEsRUFBYyxhQUFkO0lBQ0EsV0FBQSxFQUFjLGdCQURkO0lBRUEsT0FBQSxFQUFVLE9BRlY7Ozt5QkFJRixVQUFBLEdBQVksU0FBQyxPQUFEOztNQUFDLFVBQVE7O0lBSW5CLElBQUMsQ0FBQSxFQUFELEdBQVksSUFBSSxLQUFKLENBQVUsT0FBTyxDQUFDLEVBQWxCO0lBQ1osSUFBQyxDQUFBLE1BQUQsR0FBWSxPQUFPLENBQUM7SUFDcEIsSUFBQyxDQUFBLE9BQUQsR0FBWSxPQUFPLENBQUMsT0FBUixJQUFtQjtJQUcvQixNQUFNLENBQUMsRUFBUCxHQUFZLElBQUMsQ0FBQTtJQUdiLElBQUMsQ0FBQSxZQUFELENBQUE7SUFJQSxJQUFDLENBQUEsRUFBRSxDQUFDLEVBQUosQ0FBTyxPQUFQLEVBQWdCLElBQUMsQ0FBQSxZQUFqQjtXQUdBLElBQUMsQ0FBQSxFQUFFLENBQUMsSUFBSixDQUFBO0VBbkJVOzt5QkFzQlosWUFBQSxHQUFjLFNBQUE7V0FJWixJQUFDLENBQUEsZUFBRCxDQUFBLENBQ0EsQ0FBQyxJQURELENBQ00sQ0FBQSxTQUFBLEtBQUE7YUFBQSxTQUFDLE9BQUQ7QUFHSixZQUFBO1FBQUEsT0FBQSxHQUFVLEtBQUMsQ0FBQSxxQkFBRCxDQUF1QixPQUF2QjtRQUdWLElBQXNCLE9BQXRCO0FBQUEsaUJBQU8sS0FBQyxDQUFBLFFBQUQsQ0FBQSxFQUFQOztBQUdBLGVBQU8sS0FBQyxDQUFBLGNBQUQsQ0FBQTtNQVRIO0lBQUEsQ0FBQSxDQUFBLENBQUEsSUFBQSxDQUROO0VBSlk7O3lCQWlCZCxxQkFBQSxHQUF1QixTQUFDLE9BQUQ7SUFHckIsSUFBZSxDQUFDLENBQUMsT0FBRixDQUFVLE9BQVYsQ0FBZjtBQUFBLGFBQU8sS0FBUDs7SUFHQSxPQUFPLENBQUMsSUFBUixDQUFhLENBQUMsQ0FBZDtJQUdBLElBQWUsQ0FBQyxDQUFDLEdBQUYsQ0FBTSxPQUFOLENBQUEsR0FBaUIsQ0FBaEM7QUFBQSxhQUFPLEtBQVA7O0FBR0EsV0FBTztFQVpjOzt5QkFldkIsUUFBQSxHQUFVLFNBQUE7V0FDUixRQUFRLENBQUMsS0FBSyxDQUFDLE9BQWYsQ0FBdUIsSUFBdkIsQ0FBNEIsQ0FBQyxPQUE3QixDQUFxQyxPQUFyQztFQURROzt5QkFLVixZQUFBLEdBQWMsU0FBQTtBQUVaLFFBQUE7QUFBQTtBQUFBLFNBQUEscUNBQUE7O01BQ0UsSUFBWSxJQUFDLENBQUEsRUFBRyxDQUFBLEtBQUssQ0FBQyxJQUFOLENBQWhCO0FBQUEsaUJBQUE7O0FBQ0EsYUFBTyxJQUFDLENBQUEsU0FBRCxDQUFBO0FBRlQ7RUFGWTs7eUJBT2QsU0FBQSxHQUFXLFNBQUE7QUFJVCxRQUFBO0lBQUEsZ0JBQUEsR0FBbUI7QUFHbkI7QUFBQSxTQUFBLHFDQUFBOztNQUdFLGdCQUFpQixDQUFBLEtBQUssQ0FBQyxJQUFOLENBQWpCLEdBQStCLEtBQUssQ0FBQztBQUh2QztJQU1BLElBQUMsQ0FBQSxFQUFFLENBQUMsT0FBSixDQUFZLElBQUMsQ0FBQSxPQUFiLENBQXFCLENBQUMsTUFBdEIsQ0FBNkIsZ0JBQTdCO0FBQ0EsV0FBTztFQWRFOzt5QkFvQlgsZUFBQSxHQUFpQixTQUFBO0FBR2YsUUFBQTtJQUFBLGFBQUEsR0FBZ0I7QUFHaEI7QUFBQSxTQUFBLHFDQUFBOztNQUdFLElBQUEsQ0FBZ0IsS0FBSyxDQUFDLGVBQXRCO0FBQUEsaUJBQUE7O01BR0EsYUFBYSxDQUFDLElBQWQsQ0FBb0IsSUFBQyxDQUFBLEVBQUcsQ0FBQSxLQUFLLENBQUMsSUFBTixDQUFXLENBQUMsS0FBaEIsQ0FBQSxDQUFwQjtBQU5GO0FBU0EsV0FBTyxPQUFPLENBQUMsR0FBUixDQUFZLGFBQVo7RUFmUTs7eUJBb0JqQixjQUFBLEdBQWdCLFNBQUE7SUFJZCxJQUFHLE1BQU0sQ0FBQyxNQUFQLElBQWlCLE1BQU0sQ0FBQyxNQUFNLENBQUMsV0FBbEM7TUFDRSxNQUFNLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxPQUExQixDQUFrQyxVQUFsQyxFQURGO0tBQUEsTUFBQTtBQUFBOztXQU9BLElBQUMsQ0FBQSxRQUFELENBQUE7RUFYYzs7eUJBZWhCLFdBQUEsR0FBYSxTQUFDLEtBQUQsRUFBUSxHQUFSO1dBQ1gsSUFBQyxDQUFBLEVBQUcsQ0FBQSxLQUFBLENBQU0sQ0FBQyxHQUFYLENBQWUsR0FBZjtFQURXOzt5QkFLYixjQUFBLEdBQWdCLFNBQUMsS0FBRCxFQUFRLFdBQVI7V0FDZCxJQUFDLENBQUEsRUFBRyxDQUFBLEtBQUEsQ0FBTSxFQUFDLE1BQUQsRUFBVixDQUFrQixXQUFsQjtFQURjOzt5QkFHaEIsS0FBQSxHQUFPLFNBQUE7QUFDTCxXQUFPLElBQUMsQ0FBQTtFQURIOzs7O0dBeElrQixVQUFVLENBQUM7O0FBNkl0QyxNQUFNLENBQUMsT0FBUCxHQUFpQiJ9

},{}],94:[function(require,module,exports){
var FacetCollection, FacetModel,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

FacetModel = (function(superClass) {
  extend(FacetModel, superClass);

  function FacetModel() {
    return FacetModel.__super__.constructor.apply(this, arguments);
  }

  FacetModel.prototype.urlRoot = 'facet';

  FacetModel.prototype.save = function() {
    return Backbone.Radio.channel('facet').request('save', this);
  };

  FacetModel.prototype.destroy = function() {
    return Backbone.Radio.channel('facet').request('destroy', this);
  };

  FacetModel.prototype.linkToOntology = function() {
    return new Promise((function(_this) {
      return function(resolve, reject) {
        var attr, ont_attr, ont_prefix;
        attr = _this.get('attribute');
        if (attr === '@id' || attr === '@type') {
          return resolve(true);
        }
        if (attr.indexOf(':') < 0) {
          return resolve(true);
        }
        attr = attr.split(':');
        ont_prefix = attr[0];
        ont_attr = attr[1];
        return Backbone.Radio.channel('ontology').request('attribute', ont_prefix, ont_attr).then(function(ontologyAttribute) {
          var update;
          if (!ontologyAttribute) {
            return resolve(true);
          }
          update = {
            label: ontologyAttribute['rdfs:label'],
            tooltip: ontologyAttribute['rdfs:comment']
          };
          _this.set(update);
          return _this.save().then(function() {
            return resolve(true);
          })["catch"](function(err) {
            return reject(err);
          });
        });
      };
    })(this));
  };

  return FacetModel;

})(Backbone.Model);

FacetCollection = (function(superClass) {
  extend(FacetCollection, superClass);

  function FacetCollection() {
    return FacetCollection.__super__.constructor.apply(this, arguments);
  }

  FacetCollection.prototype.model = FacetModel;

  FacetCollection.prototype.comparator = 'order';

  FacetCollection.prototype.getEnabled = function() {
    var facet, facets, i, len, ref;
    this.sort();
    facets = [];
    ref = this.where({
      enabled: true
    });
    for (i = 0, len = ref.length; i < len; i++) {
      facet = ref[i];
      facets.push(facet.toJSON());
    }
    return facets;
  };

  FacetCollection.prototype.linkAllFacets = function() {
    var linkFacet;
    linkFacet = (function(_this) {
      return function(facet) {
        return facet.linkToOntology();
      };
    })(this);
    return Promise.each(this.models, linkFacet);
  };

  return FacetCollection;

})(Backbone.Collection);

module.exports = {
  Model: FacetModel,
  Collection: FacetCollection
};

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL2Fla3Njby9naXRodWIvbWFnZWxsYW4vYXBwL2NvZmZlZS9tb2R1bGVzL2ZhY2V0L2VudGl0aWVzLmNvZmZlZSIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9hZWtzY28vZ2l0aHViL21hZ2VsbGFuL2FwcC9jb2ZmZWUvbW9kdWxlcy9mYWNldC9lbnRpdGllcy5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsSUFBQSwyQkFBQTtFQUFBOzs7QUFBTTs7Ozs7Ozt1QkFDSixPQUFBLEdBQVM7O3VCQUdULElBQUEsR0FBTSxTQUFBO0FBQ0osV0FBTyxRQUFRLENBQUMsS0FBSyxDQUFDLE9BQWYsQ0FBdUIsT0FBdkIsQ0FBK0IsQ0FBQyxPQUFoQyxDQUF3QyxNQUF4QyxFQUFnRCxJQUFoRDtFQURIOzt1QkFJTixPQUFBLEdBQVMsU0FBQTtBQUNQLFdBQU8sUUFBUSxDQUFDLEtBQUssQ0FBQyxPQUFmLENBQXVCLE9BQXZCLENBQStCLENBQUMsT0FBaEMsQ0FBd0MsU0FBeEMsRUFBbUQsSUFBbkQ7RUFEQTs7dUJBS1QsY0FBQSxHQUFnQixTQUFBO0FBR2QsV0FBTyxJQUFJLE9BQUosQ0FBWSxDQUFBLFNBQUEsS0FBQTthQUFBLFNBQUMsT0FBRCxFQUFVLE1BQVY7QUFHakIsWUFBQTtRQUFBLElBQUEsR0FBTyxLQUFDLENBQUEsR0FBRCxDQUFLLFdBQUw7UUFHUCxJQUF3QixJQUFBLEtBQVMsS0FBVCxJQUFBLElBQUEsS0FBZ0IsT0FBeEM7QUFBQSxpQkFBTyxPQUFBLENBQVEsSUFBUixFQUFQOztRQUNBLElBQXdCLElBQUksQ0FBQyxPQUFMLENBQWEsR0FBYixDQUFBLEdBQW9CLENBQTVDO0FBQUEsaUJBQU8sT0FBQSxDQUFRLElBQVIsRUFBUDs7UUFHQSxJQUFBLEdBQWMsSUFBSSxDQUFDLEtBQUwsQ0FBVyxHQUFYO1FBQ2QsVUFBQSxHQUFjLElBQUssQ0FBQSxDQUFBO1FBQ25CLFFBQUEsR0FBYyxJQUFLLENBQUEsQ0FBQTtlQUduQixRQUFRLENBQUMsS0FBSyxDQUFDLE9BQWYsQ0FBdUIsVUFBdkIsQ0FBa0MsQ0FBQyxPQUFuQyxDQUEyQyxXQUEzQyxFQUF3RCxVQUF4RCxFQUFvRSxRQUFwRSxDQUNBLENBQUMsSUFERCxDQUNNLFNBQUMsaUJBQUQ7QUFHSixjQUFBO1VBQUEsSUFBQSxDQUE0QixpQkFBNUI7QUFBQSxtQkFBTyxPQUFBLENBQVEsSUFBUixFQUFQOztVQUdBLE1BQUEsR0FDRTtZQUFBLEtBQUEsRUFBVSxpQkFBa0IsQ0FBQSxZQUFBLENBQTVCO1lBQ0EsT0FBQSxFQUFVLGlCQUFrQixDQUFBLGNBQUEsQ0FENUI7O1VBSUYsS0FBQyxDQUFBLEdBQUQsQ0FBSyxNQUFMO2lCQUdBLEtBQUMsQ0FBQSxJQUFELENBQUEsQ0FDQSxDQUFDLElBREQsQ0FDTSxTQUFBO0FBQU0sbUJBQU8sT0FBQSxDQUFRLElBQVI7VUFBYixDQUROLENBRUEsRUFBQyxLQUFELEVBRkEsQ0FFTyxTQUFDLEdBQUQ7QUFBUyxtQkFBTyxNQUFBLENBQU8sR0FBUDtVQUFoQixDQUZQO1FBZEksQ0FETjtNQWZpQjtJQUFBLENBQUEsQ0FBQSxDQUFBLElBQUEsQ0FBWjtFQUhPOzs7O0dBYk8sUUFBUSxDQUFDOztBQW9ENUI7Ozs7Ozs7NEJBQ0osS0FBQSxHQUFPOzs0QkFDUCxVQUFBLEdBQVk7OzRCQUVaLFVBQUEsR0FBWSxTQUFBO0FBQ1YsUUFBQTtJQUFBLElBQUMsQ0FBQSxJQUFELENBQUE7SUFDQSxNQUFBLEdBQVM7QUFDVDs7O0FBQUEsU0FBQSxxQ0FBQTs7TUFBQSxNQUFNLENBQUMsSUFBUCxDQUFZLEtBQUssQ0FBQyxNQUFOLENBQUEsQ0FBWjtBQUFBO0FBQ0EsV0FBTztFQUpHOzs0QkFRWixhQUFBLEdBQWUsU0FBQTtBQUdiLFFBQUE7SUFBQSxTQUFBLEdBQVksQ0FBQSxTQUFBLEtBQUE7YUFBQSxTQUFDLEtBQUQ7QUFBVyxlQUFPLEtBQUssQ0FBQyxjQUFOLENBQUE7TUFBbEI7SUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBO0FBR1osV0FBTyxPQUFPLENBQUMsSUFBUixDQUFhLElBQUMsQ0FBQSxNQUFkLEVBQXNCLFNBQXRCO0VBTk07Ozs7R0FaYSxRQUFRLENBQUM7O0FBc0J2QyxNQUFNLENBQUMsT0FBUCxHQUNFO0VBQUEsS0FBQSxFQUFZLFVBQVo7RUFDQSxVQUFBLEVBQVksZUFEWiJ9

},{}],95:[function(require,module,exports){
var DexieFactory, Entities, FacetFactory,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Entities = require('./entities');

DexieFactory = require('../base/dexieFactory');

FacetFactory = (function(superClass) {
  extend(FacetFactory, superClass);

  function FacetFactory() {
    return FacetFactory.__super__.constructor.apply(this, arguments);
  }

  FacetFactory.prototype.tableName = 'facets';

  FacetFactory.prototype.radioRequests = {
    'facet collection': 'getCollection',
    'facet save': 'saveModel',
    'facet destroy': 'destroyModel'
  };

  FacetFactory.prototype.initialize = function() {
    return this.cachedCollection = new Entities.Collection();
  };

  return FacetFactory;

})(DexieFactory);

module.exports = new FacetFactory();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL2Fla3Njby9naXRodWIvbWFnZWxsYW4vYXBwL2NvZmZlZS9tb2R1bGVzL2ZhY2V0L2ZhY3RvcnkuY29mZmVlIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiL1VzZXJzL2Fla3Njby9naXRodWIvbWFnZWxsYW4vYXBwL2NvZmZlZS9tb2R1bGVzL2ZhY2V0L2ZhY3RvcnkuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLElBQUEsb0NBQUE7RUFBQTs7O0FBQUEsUUFBQSxHQUFXLE9BQUEsQ0FBUSxZQUFSOztBQUNYLFlBQUEsR0FBZ0IsT0FBQSxDQUFRLHNCQUFSOztBQUlWOzs7Ozs7O3lCQUdKLFNBQUEsR0FBVzs7eUJBR1gsYUFBQSxHQUNFO0lBQUEsa0JBQUEsRUFBb0IsZUFBcEI7SUFDQSxZQUFBLEVBQW9CLFdBRHBCO0lBRUEsZUFBQSxFQUFvQixjQUZwQjs7O3lCQUlGLFVBQUEsR0FBWSxTQUFBO1dBQ1YsSUFBQyxDQUFBLGdCQUFELEdBQW9CLElBQUksUUFBUSxDQUFDLFVBQWIsQ0FBQTtFQURWOzs7O0dBWGE7O0FBZ0IzQixNQUFNLENBQUMsT0FBUCxHQUFpQixJQUFJLFlBQUosQ0FBQSJ9

},{"../base/dexieFactory":30,"./entities":94}],96:[function(require,module,exports){
var AboutRoute, LayoutView,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

LayoutView = require('./views/layout');

AboutRoute = (function(superClass) {
  extend(AboutRoute, superClass);

  function AboutRoute() {
    return AboutRoute.__super__.constructor.apply(this, arguments);
  }

  AboutRoute.prototype.title = 'Magellan - About';

  AboutRoute.prototype.breadcrumbs = [
    {
      text: 'About'
    }
  ];

  AboutRoute.prototype.render = function() {
    return this.container.show(new LayoutView());
  };

  return AboutRoute;

})(require('hn_routing/lib/route'));

module.exports = AboutRoute;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL2Fla3Njby9naXRodWIvbWFnZWxsYW4vYXBwL2NvZmZlZS9tb2R1bGVzL2hvbWUvYWJvdXQvcm91dGUuY29mZmVlIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiL1VzZXJzL2Fla3Njby9naXRodWIvbWFnZWxsYW4vYXBwL2NvZmZlZS9tb2R1bGVzL2hvbWUvYWJvdXQvcm91dGUuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLElBQUEsc0JBQUE7RUFBQTs7O0FBQUEsVUFBQSxHQUFjLE9BQUEsQ0FBUSxnQkFBUjs7QUFJUjs7Ozs7Ozt1QkFFSixLQUFBLEdBQU87O3VCQUVQLFdBQUEsR0FBYTtJQUFDO01BQUUsSUFBQSxFQUFNLE9BQVI7S0FBRDs7O3VCQUViLE1BQUEsR0FBUSxTQUFBO1dBQ04sSUFBQyxDQUFBLFNBQVMsQ0FBQyxJQUFYLENBQWdCLElBQUksVUFBSixDQUFBLENBQWhCO0VBRE07Ozs7R0FOZSxPQUFBLENBQVEsc0JBQVI7O0FBV3pCLE1BQU0sQ0FBQyxPQUFQLEdBQWlCIn0=

},{"./views/layout":97,"hn_routing/lib/route":177}],97:[function(require,module,exports){
var AboutView,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

AboutView = (function(superClass) {
  extend(AboutView, superClass);

  function AboutView() {
    return AboutView.__super__.constructor.apply(this, arguments);
  }

  AboutView.prototype.template = require('./templates/layout');

  AboutView.prototype.className = 'container';

  return AboutView;

})(Mn.LayoutView);

module.exports = AboutView;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL2Fla3Njby9naXRodWIvbWFnZWxsYW4vYXBwL2NvZmZlZS9tb2R1bGVzL2hvbWUvYWJvdXQvdmlld3MvbGF5b3V0LmNvZmZlZSIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9hZWtzY28vZ2l0aHViL21hZ2VsbGFuL2FwcC9jb2ZmZWUvbW9kdWxlcy9ob21lL2Fib3V0L3ZpZXdzL2xheW91dC5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsSUFBQSxTQUFBO0VBQUE7OztBQUFNOzs7Ozs7O3NCQUNKLFFBQUEsR0FBVSxPQUFBLENBQVEsb0JBQVI7O3NCQUNWLFNBQUEsR0FBVzs7OztHQUZXLEVBQUUsQ0FBQzs7QUFNM0IsTUFBTSxDQUFDLE9BQVAsR0FBaUIifQ==

},{"./templates/layout":98}],98:[function(require,module,exports){
var jade = require("jade/runtime");

module.exports = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;

buf.push("<div class=\"row\"><div class=\"col-xs-12\"><div class=\"card card-block\"><div class=\"row\"><div class=\"col-xs-12\"><div class=\"text-center\"><h4 class=\"card-title\">ABOUT</h4></div></div></div><div class=\"row m-t-1\"><div class=\"col-xs-12 text-center\"><a href=\"https://github.com/tetherless-world/magellan\" target=\"_blank\" class=\"btn btn-lg btn-secondary\"><i class=\"fa fa-fw fa-github\"></i>&nbsp;\nGithub Repository</a></div></div></div></div></div>");;return buf.join("");
};
},{"jade/runtime":187}],99:[function(require,module,exports){
var SettingsFactory, SettingsModel,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

SettingsModel = (function(superClass) {
  extend(SettingsModel, superClass);

  function SettingsModel() {
    return SettingsModel.__super__.constructor.apply(this, arguments);
  }

  SettingsModel.prototype.url = 'settings';

  SettingsModel.prototype.defaults = {};

  return SettingsModel;

})(Backbone.Model);

SettingsFactory = (function(superClass) {
  extend(SettingsFactory, superClass);

  function SettingsFactory() {
    return SettingsFactory.__super__.constructor.apply(this, arguments);
  }

  SettingsFactory.prototype.radioRequests = {
    'settings model': 'getModel'
  };

  SettingsFactory.prototype.initialize = function() {
    return this.settingsModel = new SettingsModel();
  };

  SettingsFactory.prototype.getModel = function() {
    return this.settingsModel;
  };

  return SettingsFactory;

})(Marionette.Service);

module.exports = new SettingsFactory();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL2Fla3Njby9naXRodWIvbWFnZWxsYW4vYXBwL2NvZmZlZS9tb2R1bGVzL2hvbWUvZmFjdG9yeS5jb2ZmZWUiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIvVXNlcnMvYWVrc2NvL2dpdGh1Yi9tYWdlbGxhbi9hcHAvY29mZmVlL21vZHVsZXMvaG9tZS9mYWN0b3J5LmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxJQUFBLDhCQUFBO0VBQUE7OztBQUFNOzs7Ozs7OzBCQUNKLEdBQUEsR0FBSzs7MEJBQ0wsUUFBQSxHQUFVOzs7O0dBRmdCLFFBQVEsQ0FBQzs7QUFNL0I7Ozs7Ozs7NEJBRUosYUFBQSxHQUNFO0lBQUEsZ0JBQUEsRUFBbUIsVUFBbkI7Ozs0QkFFRixVQUFBLEdBQVksU0FBQTtXQUNWLElBQUMsQ0FBQSxhQUFELEdBQWlCLElBQUksYUFBSixDQUFBO0VBRFA7OzRCQUdaLFFBQUEsR0FBVSxTQUFBO0FBQ1IsV0FBTyxJQUFDLENBQUE7RUFEQTs7OztHQVJrQixVQUFVLENBQUM7O0FBYXpDLE1BQU0sQ0FBQyxPQUFQLEdBQWlCLElBQUksZUFBSixDQUFBIn0=

},{}],100:[function(require,module,exports){
var AboutRoute, HomeRouter, SandboxRoute, SettingsRoute,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

require('./factory');

SettingsRoute = require('./settings/route');

SandboxRoute = require('./sandbox/route');

AboutRoute = require('./about/route');

HomeRouter = (function(superClass) {
  extend(HomeRouter, superClass);

  function HomeRouter() {
    return HomeRouter.__super__.constructor.apply(this, arguments);
  }

  HomeRouter.prototype.routes = {
    'rdf(/)': 'rdfViewer',
    'settings(/)': 'settings',
    'sandbox(/)': 'sandbox',
    'about(/)': 'about'
  };

  HomeRouter.prototype.rdfViewer = function() {
    return new RDFRoute({
      container: this.container
    });
  };

  HomeRouter.prototype.settings = function() {
    return new SettingsRoute({
      container: this.container
    });
  };

  HomeRouter.prototype.sandbox = function() {
    return new SandboxRoute({
      container: this.container
    });
  };

  HomeRouter.prototype.about = function() {
    return new AboutRoute({
      container: this.container
    });
  };

  return HomeRouter;

})(require('hn_routing/lib/router'));

module.exports = HomeRouter;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL2Fla3Njby9naXRodWIvbWFnZWxsYW4vYXBwL2NvZmZlZS9tb2R1bGVzL2hvbWUvcm91dGVyLmNvZmZlZSIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9hZWtzY28vZ2l0aHViL21hZ2VsbGFuL2FwcC9jb2ZmZWUvbW9kdWxlcy9ob21lL3JvdXRlci5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsSUFBQSxtREFBQTtFQUFBOzs7QUFBQSxPQUFBLENBQVEsV0FBUjs7QUFFQSxhQUFBLEdBQWdCLE9BQUEsQ0FBUSxrQkFBUjs7QUFDaEIsWUFBQSxHQUFlLE9BQUEsQ0FBUSxpQkFBUjs7QUFDZixVQUFBLEdBQWEsT0FBQSxDQUFRLGVBQVI7O0FBS1A7Ozs7Ozs7dUJBRUosTUFBQSxHQUNFO0lBQUEsUUFBQSxFQUFnQixXQUFoQjtJQUNBLGFBQUEsRUFBZ0IsVUFEaEI7SUFFQSxZQUFBLEVBQWdCLFNBRmhCO0lBR0EsVUFBQSxFQUFnQixPQUhoQjs7O3VCQUtGLFNBQUEsR0FBVyxTQUFBO1dBQ1QsSUFBSSxRQUFKLENBQWE7TUFBRSxTQUFBLEVBQVcsSUFBQyxDQUFBLFNBQWQ7S0FBYjtFQURTOzt1QkFHWCxRQUFBLEdBQVUsU0FBQTtXQUNSLElBQUksYUFBSixDQUFrQjtNQUFFLFNBQUEsRUFBVyxJQUFDLENBQUEsU0FBZDtLQUFsQjtFQURROzt1QkFHVixPQUFBLEdBQVMsU0FBQTtXQUNQLElBQUksWUFBSixDQUFpQjtNQUFFLFNBQUEsRUFBVyxJQUFDLENBQUEsU0FBZDtLQUFqQjtFQURPOzt1QkFHVCxLQUFBLEdBQU8sU0FBQTtXQUNMLElBQUksVUFBSixDQUFlO01BQUUsU0FBQSxFQUFXLElBQUMsQ0FBQSxTQUFkO0tBQWY7RUFESzs7OztHQWpCZ0IsT0FBQSxDQUFRLHVCQUFSOztBQXNCekIsTUFBTSxDQUFDLE9BQVAsR0FBaUIifQ==

},{"./about/route":96,"./factory":99,"./sandbox/route":101,"./settings/route":105,"hn_routing/lib/router":178}],101:[function(require,module,exports){
var LayoutView, SearchSettingsRoute, TargetCollection, TargetModel, targetCollection, targetData,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

LayoutView = require('./views/layout');

TargetModel = (function(superClass) {
  extend(TargetModel, superClass);

  function TargetModel() {
    return TargetModel.__super__.constructor.apply(this, arguments);
  }

  return TargetModel;

})(Backbone.Model);

TargetCollection = (function(superClass) {
  extend(TargetCollection, superClass);

  function TargetCollection() {
    return TargetCollection.__super__.constructor.apply(this, arguments);
  }

  TargetCollection.prototype.model = TargetModel;

  return TargetCollection;

})(Backbone.Collection);

targetData = [
  {
    id: 1,
    dataset_id: 'ds_01',
    raw: {
      '@id': 1,
      '@type': 'Person',
      firstName: 'John',
      employer: 'RPI'
    },
    data: {
      '@id': 1,
      '@type': 'Person',
      firstName: 'John',
      employer: 'RPI'
    }
  }, {
    id: 2,
    dataset_id: 'ds_01',
    raw: {
      '@id': 2,
      '@type': 'Person',
      firstName: 'Alex',
      employer: 'RPI'
    },
    data: {
      '@id': 2,
      '@type': 'Person',
      firstName: 'Alex',
      employer: 'RPI'
    }
  }, {
    id: 3,
    dataset_id: 'ds_01',
    raw: {
      '@id': 3,
      '@type': 'Person',
      firstName: 'Johnson',
      employer: 'RPI'
    },
    data: {
      '@id': 3,
      '@type': 'Person',
      firstName: 'Johnson',
      employer: 'RPI'
    }
  }, {
    id: 4,
    dataset_id: 'ds_01',
    raw: {
      '@id': 4,
      '@type': 'Person',
      firstName: 'Anne',
      employer: 'RPI'
    },
    data: {
      '@id': 4,
      '@type': 'Person',
      firstName: 'Anne',
      employer: 'RPI'
    }
  }
];

targetCollection = new TargetCollection(targetData);

SearchSettingsRoute = (function(superClass) {
  extend(SearchSettingsRoute, superClass);

  function SearchSettingsRoute() {
    return SearchSettingsRoute.__super__.constructor.apply(this, arguments);
  }

  SearchSettingsRoute.prototype.title = 'Sandbox';

  SearchSettingsRoute.prototype.breadcrumbs = [
    {
      href: '#',
      text: 'Home'
    }, {
      text: 'Sandbox'
    }
  ];

  SearchSettingsRoute.prototype.fetch = function() {
    return Backbone.Radio.channel('knowledge:rule').request('collection').then((function(_this) {
      return function(ruleCollection) {
        return _this.ruleCollection = ruleCollection;
      };
    })(this));
  };

  SearchSettingsRoute.prototype.render = function() {
    this.ruleCollection.applyRules(targetCollection);
    return this.container.show(new LayoutView({
      collection: targetCollection,
      ruleCollection: this.ruleCollection
    }));
  };

  return SearchSettingsRoute;

})(require('hn_routing/lib/route'));

module.exports = SearchSettingsRoute;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL2Fla3Njby9naXRodWIvbWFnZWxsYW4vYXBwL2NvZmZlZS9tb2R1bGVzL2hvbWUvc2FuZGJveC9yb3V0ZS5jb2ZmZWUiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIvVXNlcnMvYWVrc2NvL2dpdGh1Yi9tYWdlbGxhbi9hcHAvY29mZmVlL21vZHVsZXMvaG9tZS9zYW5kYm94L3JvdXRlLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxJQUFBLDRGQUFBO0VBQUE7OztBQUFBLFVBQUEsR0FBYyxPQUFBLENBQVEsZ0JBQVI7O0FBT1I7Ozs7Ozs7OztHQUFvQixRQUFRLENBQUM7O0FBRTdCOzs7Ozs7OzZCQUNKLEtBQUEsR0FBTzs7OztHQURzQixRQUFRLENBQUM7O0FBR3hDLFVBQUEsR0FBYTtFQUNYO0lBQ0UsRUFBQSxFQUFJLENBRE47SUFFRSxVQUFBLEVBQVksT0FGZDtJQUdFLEdBQUEsRUFBSztNQUFFLEtBQUEsRUFBTyxDQUFUO01BQVksT0FBQSxFQUFTLFFBQXJCO01BQStCLFNBQUEsRUFBVyxNQUExQztNQUFrRCxRQUFBLEVBQVUsS0FBNUQ7S0FIUDtJQUlFLElBQUEsRUFBTTtNQUFFLEtBQUEsRUFBTyxDQUFUO01BQVksT0FBQSxFQUFTLFFBQXJCO01BQStCLFNBQUEsRUFBVyxNQUExQztNQUFrRCxRQUFBLEVBQVUsS0FBNUQ7S0FKUjtHQURXLEVBT1g7SUFDRSxFQUFBLEVBQUksQ0FETjtJQUVFLFVBQUEsRUFBWSxPQUZkO0lBR0UsR0FBQSxFQUFLO01BQUUsS0FBQSxFQUFPLENBQVQ7TUFBWSxPQUFBLEVBQVMsUUFBckI7TUFBK0IsU0FBQSxFQUFXLE1BQTFDO01BQWtELFFBQUEsRUFBVSxLQUE1RDtLQUhQO0lBSUUsSUFBQSxFQUFNO01BQUUsS0FBQSxFQUFPLENBQVQ7TUFBWSxPQUFBLEVBQVMsUUFBckI7TUFBK0IsU0FBQSxFQUFXLE1BQTFDO01BQWtELFFBQUEsRUFBVSxLQUE1RDtLQUpSO0dBUFcsRUFhWDtJQUNFLEVBQUEsRUFBSSxDQUROO0lBRUUsVUFBQSxFQUFZLE9BRmQ7SUFHRSxHQUFBLEVBQUs7TUFBRSxLQUFBLEVBQU8sQ0FBVDtNQUFZLE9BQUEsRUFBUyxRQUFyQjtNQUErQixTQUFBLEVBQVcsU0FBMUM7TUFBcUQsUUFBQSxFQUFVLEtBQS9EO0tBSFA7SUFJRSxJQUFBLEVBQU07TUFBRSxLQUFBLEVBQU8sQ0FBVDtNQUFZLE9BQUEsRUFBUyxRQUFyQjtNQUErQixTQUFBLEVBQVcsU0FBMUM7TUFBcUQsUUFBQSxFQUFVLEtBQS9EO0tBSlI7R0FiVyxFQW1CWDtJQUNFLEVBQUEsRUFBSSxDQUROO0lBRUUsVUFBQSxFQUFZLE9BRmQ7SUFHRSxHQUFBLEVBQUs7TUFBRSxLQUFBLEVBQU8sQ0FBVDtNQUFZLE9BQUEsRUFBUyxRQUFyQjtNQUErQixTQUFBLEVBQVcsTUFBMUM7TUFBa0QsUUFBQSxFQUFVLEtBQTVEO0tBSFA7SUFJRSxJQUFBLEVBQU07TUFBRSxLQUFBLEVBQU8sQ0FBVDtNQUFZLE9BQUEsRUFBUyxRQUFyQjtNQUErQixTQUFBLEVBQVcsTUFBMUM7TUFBa0QsUUFBQSxFQUFVLEtBQTVEO0tBSlI7R0FuQlc7OztBQTJCYixnQkFBQSxHQUFtQixJQUFJLGdCQUFKLENBQXFCLFVBQXJCOztBQUtiOzs7Ozs7O2dDQUVKLEtBQUEsR0FBTzs7Z0NBRVAsV0FBQSxHQUFhO0lBQ1g7TUFBRSxJQUFBLEVBQU0sR0FBUjtNQUFhLElBQUEsRUFBTSxNQUFuQjtLQURXLEVBRVg7TUFBRSxJQUFBLEVBQU0sU0FBUjtLQUZXOzs7Z0NBS2IsS0FBQSxHQUFPLFNBQUE7V0FDTCxRQUFRLENBQUMsS0FBSyxDQUFDLE9BQWYsQ0FBdUIsZ0JBQXZCLENBQXdDLENBQUMsT0FBekMsQ0FBaUQsWUFBakQsQ0FDQSxDQUFDLElBREQsQ0FDTSxDQUFBLFNBQUEsS0FBQTthQUFBLFNBQUMsY0FBRDtlQUFvQixLQUFDLENBQUEsY0FBRCxHQUFrQjtNQUF0QztJQUFBLENBQUEsQ0FBQSxDQUFBLElBQUEsQ0FETjtFQURLOztnQ0FJUCxNQUFBLEdBQVEsU0FBQTtJQUNOLElBQUMsQ0FBQSxjQUFjLENBQUMsVUFBaEIsQ0FBMkIsZ0JBQTNCO1dBQ0EsSUFBQyxDQUFBLFNBQVMsQ0FBQyxJQUFYLENBQWdCLElBQUksVUFBSixDQUFlO01BQUUsVUFBQSxFQUFZLGdCQUFkO01BQWdDLGNBQUEsRUFBZ0IsSUFBQyxDQUFBLGNBQWpEO0tBQWYsQ0FBaEI7RUFGTTs7OztHQWJ3QixPQUFBLENBQVEsc0JBQVI7O0FBb0JsQyxNQUFNLENBQUMsT0FBUCxHQUFpQiJ9

},{"./views/layout":102,"hn_routing/lib/route":177}],102:[function(require,module,exports){
var JsonViewer, RuleDemoLayout, RuleLayout, TargetChild, TargetCollectionView,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

JsonViewer = require('hn_views/lib/json_viewer');

TargetChild = (function(superClass) {
  extend(TargetChild, superClass);

  function TargetChild() {
    return TargetChild.__super__.constructor.apply(this, arguments);
  }

  TargetChild.prototype.className = 'list-group-item';

  TargetChild.prototype.template = require('./templates/target_child');

  TargetChild.prototype.regions = {
    jsonRegion: '[data-region=json]'
  };

  TargetChild.prototype.onRender = function() {
    var model;
    if (this.model.get('data')) {
      if (this.options.processed) {
        model = new Backbone.Model(this.model.toJSON().data);
      } else {
        model = new Backbone.Model(this.model.toJSON().raw);
      }
    } else {
      model = this.model;
    }
    return this.jsonRegion.show(new JsonViewer({
      model: model
    }));
  };

  return TargetChild;

})(Mn.LayoutView);

TargetCollectionView = (function(superClass) {
  extend(TargetCollectionView, superClass);

  function TargetCollectionView() {
    return TargetCollectionView.__super__.constructor.apply(this, arguments);
  }

  TargetCollectionView.prototype.className = 'list-group';

  TargetCollectionView.prototype.childView = TargetChild;

  TargetCollectionView.prototype.childViewOptions = function() {
    return {
      processed: this.options.processed
    };
  };

  return TargetCollectionView;

})(Mn.CollectionView);

RuleLayout = (function(superClass) {
  extend(RuleLayout, superClass);

  function RuleLayout() {
    return RuleLayout.__super__.constructor.apply(this, arguments);
  }

  RuleLayout.prototype.template = require('./templates/layout');

  RuleLayout.prototype.className = 'row';

  RuleLayout.prototype.regions = {
    listRegion: '[data-region=list]'
  };

  RuleLayout.prototype.templateHelpers = function() {
    return {
      title: this.options.title
    };
  };

  RuleLayout.prototype.onRender = function() {
    return this.listRegion.show(new TargetCollectionView({
      collection: this.collection,
      processed: this.options.processed
    }));
  };

  return RuleLayout;

})(Marionette.LayoutView);

RuleDemoLayout = (function(superClass) {
  extend(RuleDemoLayout, superClass);

  function RuleDemoLayout() {
    return RuleDemoLayout.__super__.constructor.apply(this, arguments);
  }

  RuleDemoLayout.prototype.className = 'container-fluid';

  RuleDemoLayout.prototype.navItems = [
    {
      icon: 'fa-database',
      text: 'Raw Archive',
      trigger: 'dataset',
      "default": true
    }, {
      icon: 'fa-university',
      text: 'Knowledge Rules',
      trigger: 'rules'
    }, {
      icon: 'fa-table',
      text: 'Processed Archive',
      trigger: 'processed'
    }
  ];

  RuleDemoLayout.prototype.navEvents = {
    'dataset': 'showDataset',
    'rules': 'showRules',
    'processed': 'showProcessed'
  };

  RuleDemoLayout.prototype.showDataset = function() {
    return this.contentRegion.show(new RuleLayout({
      collection: this.collection,
      title: 'Raw Archive'
    }));
  };

  RuleDemoLayout.prototype.showRules = function() {
    return this.contentRegion.show(new RuleLayout({
      collection: this.options.ruleCollection,
      title: 'Knowledge Rules'
    }));
  };

  RuleDemoLayout.prototype.showProcessed = function() {
    return this.contentRegion.show(new RuleLayout({
      collection: this.collection,
      title: 'Processed Archive',
      processed: true
    }));
  };

  return RuleDemoLayout;

})(require('hn_views/lib/nav'));

module.exports = RuleDemoLayout;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL2Fla3Njby9naXRodWIvbWFnZWxsYW4vYXBwL2NvZmZlZS9tb2R1bGVzL2hvbWUvc2FuZGJveC92aWV3cy9sYXlvdXQuY29mZmVlIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiL1VzZXJzL2Fla3Njby9naXRodWIvbWFnZWxsYW4vYXBwL2NvZmZlZS9tb2R1bGVzL2hvbWUvc2FuZGJveC92aWV3cy9sYXlvdXQuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLElBQUEseUVBQUE7RUFBQTs7O0FBQUEsVUFBQSxHQUFhLE9BQUEsQ0FBUSwwQkFBUjs7QUFJUDs7Ozs7Ozt3QkFDSixTQUFBLEdBQVc7O3dCQUNYLFFBQUEsR0FBVSxPQUFBLENBQVEsMEJBQVI7O3dCQUVWLE9BQUEsR0FDRTtJQUFBLFVBQUEsRUFBWSxvQkFBWjs7O3dCQUVGLFFBQUEsR0FBVSxTQUFBO0FBQ1IsUUFBQTtJQUFBLElBQUcsSUFBQyxDQUFBLEtBQUssQ0FBQyxHQUFQLENBQVcsTUFBWCxDQUFIO01BRUUsSUFBRyxJQUFDLENBQUEsT0FBTyxDQUFDLFNBQVo7UUFDRSxLQUFBLEdBQVEsSUFBSSxRQUFRLENBQUMsS0FBYixDQUFtQixJQUFDLENBQUEsS0FBSyxDQUFDLE1BQVAsQ0FBQSxDQUFlLENBQUMsSUFBbkMsRUFEVjtPQUFBLE1BQUE7UUFJRSxLQUFBLEdBQVEsSUFBSSxRQUFRLENBQUMsS0FBYixDQUFtQixJQUFDLENBQUEsS0FBSyxDQUFDLE1BQVAsQ0FBQSxDQUFlLENBQUMsR0FBbkMsRUFKVjtPQUZGO0tBQUEsTUFBQTtNQVNFLEtBQUEsR0FBUSxJQUFDLENBQUEsTUFUWDs7V0FXQSxJQUFDLENBQUEsVUFBVSxDQUFDLElBQVosQ0FBaUIsSUFBSSxVQUFKLENBQWU7TUFBRSxLQUFBLEVBQU8sS0FBVDtLQUFmLENBQWpCO0VBWlE7Ozs7R0FQYyxFQUFFLENBQUM7O0FBcUJ2Qjs7Ozs7OztpQ0FDSixTQUFBLEdBQVc7O2lDQUNYLFNBQUEsR0FBVzs7aUNBRVgsZ0JBQUEsR0FBa0IsU0FBQTtBQUNoQixXQUFPO01BQUUsU0FBQSxFQUFXLElBQUMsQ0FBQSxPQUFPLENBQUMsU0FBdEI7O0VBRFM7Ozs7R0FKZSxFQUFFLENBQUM7O0FBU2hDOzs7Ozs7O3VCQUNKLFFBQUEsR0FBVSxPQUFBLENBQVEsb0JBQVI7O3VCQUNWLFNBQUEsR0FBVzs7dUJBRVgsT0FBQSxHQUNFO0lBQUEsVUFBQSxFQUFZLG9CQUFaOzs7dUJBRUYsZUFBQSxHQUFpQixTQUFBO0FBQ2YsV0FBTztNQUFFLEtBQUEsRUFBTyxJQUFDLENBQUEsT0FBTyxDQUFDLEtBQWxCOztFQURROzt1QkFHakIsUUFBQSxHQUFVLFNBQUE7V0FDUixJQUFDLENBQUEsVUFBVSxDQUFDLElBQVosQ0FBaUIsSUFBSSxvQkFBSixDQUF5QjtNQUFFLFVBQUEsRUFBWSxJQUFDLENBQUEsVUFBZjtNQUEyQixTQUFBLEVBQVcsSUFBQyxDQUFBLE9BQU8sQ0FBQyxTQUEvQztLQUF6QixDQUFqQjtFQURROzs7O0dBVmEsVUFBVSxDQUFDOztBQWU5Qjs7Ozs7OzsyQkFDSixTQUFBLEdBQVc7OzJCQUVYLFFBQUEsR0FBVTtJQUNSO01BQUUsSUFBQSxFQUFNLGFBQVI7TUFBMEIsSUFBQSxFQUFNLGFBQWhDO01BQWdELE9BQUEsRUFBUyxTQUF6RDtNQUFvRSxDQUFBLE9BQUEsQ0FBQSxFQUFTLElBQTdFO0tBRFEsRUFFUjtNQUFFLElBQUEsRUFBTSxlQUFSO01BQTBCLElBQUEsRUFBTSxpQkFBaEM7TUFBcUQsT0FBQSxFQUFTLE9BQTlEO0tBRlEsRUFHUjtNQUFFLElBQUEsRUFBTSxVQUFSO01BQTBCLElBQUEsRUFBTSxtQkFBaEM7TUFBc0QsT0FBQSxFQUFTLFdBQS9EO0tBSFE7OzsyQkFNVixTQUFBLEdBQ0U7SUFBQSxTQUFBLEVBQWMsYUFBZDtJQUNBLE9BQUEsRUFBYyxXQURkO0lBRUEsV0FBQSxFQUFjLGVBRmQ7OzsyQkFPRixXQUFBLEdBQWEsU0FBQTtXQUNYLElBQUMsQ0FBQSxhQUFhLENBQUMsSUFBZixDQUFvQixJQUFJLFVBQUosQ0FBZTtNQUFFLFVBQUEsRUFBWSxJQUFDLENBQUEsVUFBZjtNQUEyQixLQUFBLEVBQU8sYUFBbEM7S0FBZixDQUFwQjtFQURXOzsyQkFHYixTQUFBLEdBQVcsU0FBQTtXQUNULElBQUMsQ0FBQSxhQUFhLENBQUMsSUFBZixDQUFvQixJQUFJLFVBQUosQ0FBZTtNQUFFLFVBQUEsRUFBWSxJQUFDLENBQUEsT0FBTyxDQUFDLGNBQXZCO01BQXVDLEtBQUEsRUFBTyxpQkFBOUM7S0FBZixDQUFwQjtFQURTOzsyQkFHWCxhQUFBLEdBQWUsU0FBQTtXQUNiLElBQUMsQ0FBQSxhQUFhLENBQUMsSUFBZixDQUFvQixJQUFJLFVBQUosQ0FBZTtNQUFFLFVBQUEsRUFBWSxJQUFDLENBQUEsVUFBZjtNQUEyQixLQUFBLEVBQU8sbUJBQWxDO01BQXVELFNBQUEsRUFBVyxJQUFsRTtLQUFmLENBQXBCO0VBRGE7Ozs7R0F2QlksT0FBQSxDQUFRLGtCQUFSOztBQThCN0IsTUFBTSxDQUFDLE9BQVAsR0FBaUIifQ==

},{"./templates/layout":103,"./templates/target_child":104,"hn_views/lib/json_viewer":182,"hn_views/lib/nav":184}],103:[function(require,module,exports){
var jade = require("jade/runtime");

module.exports = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (title) {
buf.push("<div class=\"col-xs-12\"><div class=\"card card-block\"><h4 class=\"card-title\">" + (jade.escape(null == (jade_interp = title) ? "" : jade_interp)) + "</h4><div class=\"row\"><div data-region=\"list\" class=\"col-xs-12\"></div></div></div></div>");}.call(this,"title" in locals_for_with?locals_for_with.title:typeof title!=="undefined"?title:undefined));;return buf.join("");
};
},{"jade/runtime":187}],104:[function(require,module,exports){
var jade = require("jade/runtime");

module.exports = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;

buf.push("<div class=\"row\"><div data-region=\"json\" class=\"col-xs-12\"></div></div>");;return buf.join("");
};
},{"jade/runtime":187}],105:[function(require,module,exports){
var LayoutView, SearchSettingsRoute,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

LayoutView = require('./views/layout');

SearchSettingsRoute = (function(superClass) {
  extend(SearchSettingsRoute, superClass);

  function SearchSettingsRoute() {
    return SearchSettingsRoute.__super__.constructor.apply(this, arguments);
  }

  SearchSettingsRoute.prototype.title = 'Settings';

  SearchSettingsRoute.prototype.breadcrumbs = [
    {
      href: '#',
      text: 'Home'
    }, {
      text: 'Settings'
    }
  ];

  SearchSettingsRoute.prototype.fetch = function() {
    return this.model = Backbone.Radio.channel('settings').request('model');
  };

  SearchSettingsRoute.prototype.render = function() {
    return this.container.show(new LayoutView({
      model: this.model
    }));
  };

  return SearchSettingsRoute;

})(require('hn_routing/lib/route'));

module.exports = SearchSettingsRoute;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL2Fla3Njby9naXRodWIvbWFnZWxsYW4vYXBwL2NvZmZlZS9tb2R1bGVzL2hvbWUvc2V0dGluZ3Mvcm91dGUuY29mZmVlIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiL1VzZXJzL2Fla3Njby9naXRodWIvbWFnZWxsYW4vYXBwL2NvZmZlZS9tb2R1bGVzL2hvbWUvc2V0dGluZ3Mvcm91dGUuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLElBQUEsK0JBQUE7RUFBQTs7O0FBQUEsVUFBQSxHQUFjLE9BQUEsQ0FBUSxnQkFBUjs7QUFJUjs7Ozs7OztnQ0FFSixLQUFBLEdBQU87O2dDQUVQLFdBQUEsR0FBYTtJQUNYO01BQUUsSUFBQSxFQUFNLEdBQVI7TUFBYSxJQUFBLEVBQU0sTUFBbkI7S0FEVyxFQUVYO01BQUUsSUFBQSxFQUFNLFVBQVI7S0FGVzs7O2dDQUtiLEtBQUEsR0FBTyxTQUFBO1dBQ0wsSUFBQyxDQUFBLEtBQUQsR0FBUyxRQUFRLENBQUMsS0FBSyxDQUFDLE9BQWYsQ0FBdUIsVUFBdkIsQ0FBa0MsQ0FBQyxPQUFuQyxDQUEyQyxPQUEzQztFQURKOztnQ0FHUCxNQUFBLEdBQVEsU0FBQTtXQUNOLElBQUMsQ0FBQSxTQUFTLENBQUMsSUFBWCxDQUFnQixJQUFJLFVBQUosQ0FBZTtNQUFFLEtBQUEsRUFBTyxJQUFDLENBQUEsS0FBVjtLQUFmLENBQWhCO0VBRE07Ozs7R0Fad0IsT0FBQSxDQUFRLHNCQUFSOztBQWlCbEMsTUFBTSxDQUFDLE9BQVAsR0FBaUIifQ==

},{"./views/layout":106,"hn_routing/lib/route":177}],106:[function(require,module,exports){
var SettingsLayoutView,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

SettingsLayoutView = (function(superClass) {
  extend(SettingsLayoutView, superClass);

  function SettingsLayoutView() {
    return SettingsLayoutView.__super__.constructor.apply(this, arguments);
  }

  SettingsLayoutView.prototype.template = require('./templates/layout');

  SettingsLayoutView.prototype.className = 'container-fluid';

  SettingsLayoutView.prototype.behaviors = {
    Confirmations: {
      message: 'Are you sure you want to flush the database?',
      confirmIcon: 'fa-trash',
      confirmText: 'FLUSH DATABASE',
      confirmCss: 'btn-danger'
    }
  };

  SettingsLayoutView.prototype.ui = {
    confirmationTrigger: '[data-click=confirm]'
  };

  SettingsLayoutView.prototype.onConfirmed = function() {
    return Backbone.Radio.channel('flash').trigger('success', {
      message: 'Database flushed.'
    });
  };

  return SettingsLayoutView;

})(Marionette.LayoutView);

module.exports = SettingsLayoutView;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL2Fla3Njby9naXRodWIvbWFnZWxsYW4vYXBwL2NvZmZlZS9tb2R1bGVzL2hvbWUvc2V0dGluZ3Mvdmlld3MvbGF5b3V0LmNvZmZlZSIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9hZWtzY28vZ2l0aHViL21hZ2VsbGFuL2FwcC9jb2ZmZWUvbW9kdWxlcy9ob21lL3NldHRpbmdzL3ZpZXdzL2xheW91dC5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsSUFBQSxrQkFBQTtFQUFBOzs7QUFBTTs7Ozs7OzsrQkFDSixRQUFBLEdBQVUsT0FBQSxDQUFRLG9CQUFSOzsrQkFDVixTQUFBLEdBQVc7OytCQUVYLFNBQUEsR0FDRTtJQUFBLGFBQUEsRUFDRTtNQUFBLE9BQUEsRUFBYyw4Q0FBZDtNQUNBLFdBQUEsRUFBYyxVQURkO01BRUEsV0FBQSxFQUFjLGdCQUZkO01BR0EsVUFBQSxFQUFjLFlBSGQ7S0FERjs7OytCQU1GLEVBQUEsR0FDRTtJQUFBLG1CQUFBLEVBQXFCLHNCQUFyQjs7OytCQUlGLFdBQUEsR0FBYSxTQUFBO1dBQ1gsUUFBUSxDQUFDLEtBQUssQ0FBQyxPQUFmLENBQXVCLE9BQXZCLENBQStCLENBQUMsT0FBaEMsQ0FBd0MsU0FBeEMsRUFBbUQ7TUFBRSxPQUFBLEVBQVMsbUJBQVg7S0FBbkQ7RUFEVzs7OztHQWhCa0IsVUFBVSxDQUFDOztBQTBCNUMsTUFBTSxDQUFDLE9BQVAsR0FBaUIifQ==

},{"./templates/layout":107}],107:[function(require,module,exports){
var jade = require("jade/runtime");

module.exports = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;

buf.push("<div class=\"row\"><div class=\"col-xs-12\"><div class=\"card card-block\"><h4 class=\"card-title\">Application Settings</h4><button data-click=\"confirm\" class=\"btn btn-danger\"><i class=\"fa fa-fw fa-times\"></i>Flush Database</button></div></div></div>");;return buf.join("");
};
},{"jade/runtime":187}],108:[function(require,module,exports){
var IFrameRoute, LayoutView,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

LayoutView = require('./views/layout');

IFrameRoute = (function(superClass) {
  extend(IFrameRoute, superClass);

  function IFrameRoute() {
    return IFrameRoute.__super__.constructor.apply(this, arguments);
  }

  IFrameRoute.prototype.title = function() {
    return 'Magellan - ' + this.options.title;
  };

  IFrameRoute.prototype.breadcrumbs = function() {
    return [
      {
        text: this.options.breadcrumb
      }
    ];
  };

  IFrameRoute.prototype.render = function() {
    return this.container.show(new LayoutView({
      iframeURL: this.options.iFrameURL
    }));
  };

  return IFrameRoute;

})(require('hn_routing/lib/route'));

module.exports = IFrameRoute;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL2Fla3Njby9naXRodWIvbWFnZWxsYW4vYXBwL2NvZmZlZS9tb2R1bGVzL2lmcmFtZS9pZnJhbWUvcm91dGUuY29mZmVlIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiL1VzZXJzL2Fla3Njby9naXRodWIvbWFnZWxsYW4vYXBwL2NvZmZlZS9tb2R1bGVzL2lmcmFtZS9pZnJhbWUvcm91dGUuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLElBQUEsdUJBQUE7RUFBQTs7O0FBQUEsVUFBQSxHQUFjLE9BQUEsQ0FBUSxnQkFBUjs7QUFJUjs7Ozs7Ozt3QkFFSixLQUFBLEdBQU8sU0FBQTtBQUNMLFdBQU8sYUFBQSxHQUFnQixJQUFDLENBQUEsT0FBTyxDQUFDO0VBRDNCOzt3QkFHUCxXQUFBLEdBQWEsU0FBQTtBQUNYLFdBQU87TUFBQztRQUFFLElBQUEsRUFBTSxJQUFDLENBQUEsT0FBTyxDQUFDLFVBQWpCO09BQUQ7O0VBREk7O3dCQUdiLE1BQUEsR0FBUSxTQUFBO1dBQ04sSUFBQyxDQUFBLFNBQVMsQ0FBQyxJQUFYLENBQWdCLElBQUksVUFBSixDQUFlO01BQUUsU0FBQSxFQUFXLElBQUMsQ0FBQSxPQUFPLENBQUMsU0FBdEI7S0FBZixDQUFoQjtFQURNOzs7O0dBUmdCLE9BQUEsQ0FBUSxzQkFBUjs7QUFhMUIsTUFBTSxDQUFDLE9BQVAsR0FBaUIifQ==

},{"./views/layout":109,"hn_routing/lib/route":177}],109:[function(require,module,exports){
var IFrameView,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

IFrameView = (function(superClass) {
  extend(IFrameView, superClass);

  function IFrameView() {
    return IFrameView.__super__.constructor.apply(this, arguments);
  }

  IFrameView.prototype.template = require('./templates/iframe');

  IFrameView.prototype.className = 'container-fluid';

  IFrameView.prototype.templateHelpers = function() {
    return {
      iframeURL: this.options.iframeURL
    };
  };

  return IFrameView;

})(Mn.LayoutView);

module.exports = IFrameView;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL2Fla3Njby9naXRodWIvbWFnZWxsYW4vYXBwL2NvZmZlZS9tb2R1bGVzL2lmcmFtZS9pZnJhbWUvdmlld3MvbGF5b3V0LmNvZmZlZSIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9hZWtzY28vZ2l0aHViL21hZ2VsbGFuL2FwcC9jb2ZmZWUvbW9kdWxlcy9pZnJhbWUvaWZyYW1lL3ZpZXdzL2xheW91dC5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsSUFBQSxVQUFBO0VBQUE7OztBQUFNOzs7Ozs7O3VCQUNKLFFBQUEsR0FBVSxPQUFBLENBQVEsb0JBQVI7O3VCQUNWLFNBQUEsR0FBVzs7dUJBRVgsZUFBQSxHQUFpQixTQUFBO0FBQ2YsV0FBTztNQUFFLFNBQUEsRUFBVyxJQUFDLENBQUEsT0FBTyxDQUFDLFNBQXRCOztFQURROzs7O0dBSk0sRUFBRSxDQUFDOztBQVM1QixNQUFNLENBQUMsT0FBUCxHQUFpQiJ9

},{"./templates/iframe":110}],110:[function(require,module,exports){
var jade = require("jade/runtime");

module.exports = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (iframeURL) {
buf.push("<div class=\"row\"><div class=\"col-xs-12\"><iframe" + (jade.attr("src", iframeURL, true, false)) + " class=\"iframe-embed\"></iframe></div></div>");}.call(this,"iframeURL" in locals_for_with?locals_for_with.iframeURL:typeof iframeURL!=="undefined"?iframeURL:undefined));;return buf.join("");
};
},{"jade/runtime":187}],111:[function(require,module,exports){
var IFrameRoute, IFrameRouter,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

IFrameRoute = require('./iframe/route');

IFrameRouter = (function(superClass) {
  extend(IFrameRouter, superClass);

  function IFrameRouter() {
    return IFrameRouter.__super__.constructor.apply(this, arguments);
  }

  IFrameRouter.prototype.routes = {
    'home(/)': 'home',
    'data(/)': 'data'
  };

  IFrameRouter.prototype.home = function() {
    return this._showIframe({
      url: 'https://manufacturing.xdataproxy.com',
      title: 'Home',
      breadcrumb: 'Home'
    });
  };

  IFrameRouter.prototype.data = function() {
    return this._showIframe({
      url: 'https://manufacturing.xdataproxy.com/data',
      title: 'Data',
      breadcrumb: 'Data'
    });
  };

  IFrameRouter.prototype._showIframe = function(opts) {
    if (opts == null) {
      opts = {};
    }
    return new IFrameRoute({
      container: this.container,
      iFrameURL: opts.url,
      title: opts.title,
      breadcrumb: opts.breadcrumb
    });
  };

  return IFrameRouter;

})(require('hn_routing/lib/router'));

module.exports = IFrameRouter;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL2Fla3Njby9naXRodWIvbWFnZWxsYW4vYXBwL2NvZmZlZS9tb2R1bGVzL2lmcmFtZS9yb3V0ZXIuY29mZmVlIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiL1VzZXJzL2Fla3Njby9naXRodWIvbWFnZWxsYW4vYXBwL2NvZmZlZS9tb2R1bGVzL2lmcmFtZS9yb3V0ZXIuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLElBQUEseUJBQUE7RUFBQTs7O0FBQUEsV0FBQSxHQUFjLE9BQUEsQ0FBUSxnQkFBUjs7QUFJUjs7Ozs7Ozt5QkFFSixNQUFBLEdBQ0U7SUFBQSxTQUFBLEVBQVksTUFBWjtJQUNBLFNBQUEsRUFBWSxNQURaOzs7eUJBR0YsSUFBQSxHQUFNLFNBQUE7V0FDSixJQUFDLENBQUEsV0FBRCxDQUFhO01BQUUsR0FBQSxFQUFLLHNDQUFQO01BQStDLEtBQUEsRUFBTyxNQUF0RDtNQUE4RCxVQUFBLEVBQVksTUFBMUU7S0FBYjtFQURJOzt5QkFHTixJQUFBLEdBQU0sU0FBQTtXQUNKLElBQUMsQ0FBQSxXQUFELENBQWE7TUFBRSxHQUFBLEVBQUssMkNBQVA7TUFBb0QsS0FBQSxFQUFPLE1BQTNEO01BQW1FLFVBQUEsRUFBWSxNQUEvRTtLQUFiO0VBREk7O3lCQUdOLFdBQUEsR0FBYSxTQUFDLElBQUQ7O01BQUMsT0FBSzs7V0FDakIsSUFBSSxXQUFKLENBQWdCO01BQUUsU0FBQSxFQUFXLElBQUMsQ0FBQSxTQUFkO01BQXlCLFNBQUEsRUFBVyxJQUFJLENBQUMsR0FBekM7TUFBOEMsS0FBQSxFQUFPLElBQUksQ0FBQyxLQUExRDtNQUFpRSxVQUFBLEVBQVksSUFBSSxDQUFDLFVBQWxGO0tBQWhCO0VBRFc7Ozs7R0FaWSxPQUFBLENBQVEsdUJBQVI7O0FBaUIzQixNQUFNLENBQUMsT0FBUCxHQUFpQiJ9

},{"./iframe/route":108,"hn_routing/lib/router":178}],112:[function(require,module,exports){
var AbstractRuleEntities, KnowledgeRuleCollection, KnowledgeRuleModel,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

AbstractRuleEntities = require('../abstract_rule/entities');

KnowledgeRuleModel = (function(superClass) {
  extend(KnowledgeRuleModel, superClass);

  function KnowledgeRuleModel() {
    return KnowledgeRuleModel.__super__.constructor.apply(this, arguments);
  }

  KnowledgeRuleModel.prototype.radioChannel = 'knowledge:rule';

  return KnowledgeRuleModel;

})(AbstractRuleEntities.Model);

KnowledgeRuleModel.setup();

KnowledgeRuleCollection = (function(superClass) {
  extend(KnowledgeRuleCollection, superClass);

  function KnowledgeRuleCollection() {
    return KnowledgeRuleCollection.__super__.constructor.apply(this, arguments);
  }

  KnowledgeRuleCollection.prototype.model = KnowledgeRuleModel;

  KnowledgeRuleCollection.prototype.target_object = 'data';

  return KnowledgeRuleCollection;

})(AbstractRuleEntities.Collection);

module.exports = {
  Model: KnowledgeRuleModel,
  Collection: KnowledgeRuleCollection
};

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL2Fla3Njby9naXRodWIvbWFnZWxsYW4vYXBwL2NvZmZlZS9tb2R1bGVzL2tub3dsZWRnZV9ydWxlL2VudGl0aWVzLmNvZmZlZSIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9hZWtzY28vZ2l0aHViL21hZ2VsbGFuL2FwcC9jb2ZmZWUvbW9kdWxlcy9rbm93bGVkZ2VfcnVsZS9lbnRpdGllcy5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsSUFBQSxpRUFBQTtFQUFBOzs7QUFBQSxvQkFBQSxHQUF1QixPQUFBLENBQVEsMkJBQVI7O0FBS2pCOzs7Ozs7OytCQUdKLFlBQUEsR0FBYzs7OztHQUhpQixvQkFBb0IsQ0FBQzs7QUFRdEQsa0JBQWtCLENBQUMsS0FBbkIsQ0FBQTs7QUFLTTs7Ozs7OztvQ0FDSixLQUFBLEdBQU87O29DQUdQLGFBQUEsR0FBZTs7OztHQUpxQixvQkFBb0IsQ0FBQzs7QUFRM0QsTUFBTSxDQUFDLE9BQVAsR0FDRTtFQUFBLEtBQUEsRUFBWSxrQkFBWjtFQUNBLFVBQUEsRUFBWSx1QkFEWiJ9

},{"../abstract_rule/entities":29}],113:[function(require,module,exports){
var DexieFactory, Entities, KnowledgeRuleFactory,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Entities = require('./entities');

DexieFactory = require('../base/dexieFactory');

KnowledgeRuleFactory = (function(superClass) {
  extend(KnowledgeRuleFactory, superClass);

  function KnowledgeRuleFactory() {
    return KnowledgeRuleFactory.__super__.constructor.apply(this, arguments);
  }

  KnowledgeRuleFactory.prototype.tableName = 'knowledge_rules';

  KnowledgeRuleFactory.prototype.radioRequests = {
    'knowledge:rule collection': 'getCollection',
    'knowledge:rule save': 'saveModel',
    'knowledge:rule destroy': 'destroyModel'
  };

  KnowledgeRuleFactory.prototype.initialize = function() {
    return this.cachedCollection = new Entities.Collection();
  };

  return KnowledgeRuleFactory;

})(DexieFactory);

module.exports = new KnowledgeRuleFactory();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL2Fla3Njby9naXRodWIvbWFnZWxsYW4vYXBwL2NvZmZlZS9tb2R1bGVzL2tub3dsZWRnZV9ydWxlL2ZhY3RvcnkuY29mZmVlIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiL1VzZXJzL2Fla3Njby9naXRodWIvbWFnZWxsYW4vYXBwL2NvZmZlZS9tb2R1bGVzL2tub3dsZWRnZV9ydWxlL2ZhY3RvcnkuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLElBQUEsNENBQUE7RUFBQTs7O0FBQUEsUUFBQSxHQUFXLE9BQUEsQ0FBUSxZQUFSOztBQUNYLFlBQUEsR0FBZ0IsT0FBQSxDQUFRLHNCQUFSOztBQUlWOzs7Ozs7O2lDQUdKLFNBQUEsR0FBVzs7aUNBR1gsYUFBQSxHQUNFO0lBQUEsMkJBQUEsRUFBOEIsZUFBOUI7SUFDQSxxQkFBQSxFQUE4QixXQUQ5QjtJQUVBLHdCQUFBLEVBQThCLGNBRjlCOzs7aUNBSUYsVUFBQSxHQUFZLFNBQUE7V0FDVixJQUFDLENBQUEsZ0JBQUQsR0FBb0IsSUFBSSxRQUFRLENBQUMsVUFBYixDQUFBO0VBRFY7Ozs7R0FYcUI7O0FBZ0JuQyxNQUFNLENBQUMsT0FBUCxHQUFpQixJQUFJLG9CQUFKLENBQUEifQ==

},{"../base/dexieFactory":30,"./entities":112}],114:[function(require,module,exports){
var OntologyCollection, OntologyModel,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

OntologyModel = (function(superClass) {
  extend(OntologyModel, superClass);

  function OntologyModel() {
    return OntologyModel.__super__.constructor.apply(this, arguments);
  }

  OntologyModel.prototype.url = 'ontologies';

  return OntologyModel;

})(Backbone.Model);

OntologyCollection = (function(superClass) {
  extend(OntologyCollection, superClass);

  function OntologyCollection() {
    return OntologyCollection.__super__.constructor.apply(this, arguments);
  }

  OntologyCollection.prototype.urlRool = 'ontologies';

  OntologyCollection.prototype.model = OntologyModel;

  return OntologyCollection;

})(Backbone.Collection);

module.exports = {
  Model: OntologyModel,
  Collection: OntologyCollection
};

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL2Fla3Njby9naXRodWIvbWFnZWxsYW4vYXBwL2NvZmZlZS9tb2R1bGVzL29udG9sb2d5L2VudGl0aWVzLmNvZmZlZSIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9hZWtzY28vZ2l0aHViL21hZ2VsbGFuL2FwcC9jb2ZmZWUvbW9kdWxlcy9vbnRvbG9neS9lbnRpdGllcy5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsSUFBQSxpQ0FBQTtFQUFBOzs7QUFBTTs7Ozs7OzswQkFDSixHQUFBLEdBQUs7Ozs7R0FEcUIsUUFBUSxDQUFDOztBQUsvQjs7Ozs7OzsrQkFDSixPQUFBLEdBQVM7OytCQUNULEtBQUEsR0FBTzs7OztHQUZ3QixRQUFRLENBQUM7O0FBTTFDLE1BQU0sQ0FBQyxPQUFQLEdBQ0U7RUFBQSxLQUFBLEVBQVksYUFBWjtFQUNBLFVBQUEsRUFBWSxrQkFEWiJ9

},{}],115:[function(require,module,exports){
var Entities, OntologyFactory,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Entities = require('./entities');

OntologyFactory = (function(superClass) {
  extend(OntologyFactory, superClass);

  function OntologyFactory() {
    return OntologyFactory.__super__.constructor.apply(this, arguments);
  }

  OntologyFactory.prototype.radioRequests = {
    'ontology model': 'getModel',
    'ontology collection': 'getCollection',
    'ontology attribute': 'attribute',
    'ontology attribute:dropdown': 'getAttributeDropdown'
  };

  OntologyFactory.prototype.initialize = function() {
    return this.cached = new Entities.Collection();
  };

  OntologyFactory.prototype.getCollection = function() {
    return new Promise((function(_this) {
      return function(resolve, reject) {
        var table;
        table = 'ontologies';
        return window.db[table].toArray().then(function(models) {
          _this.cached.reset(models);
          return resolve(_this.cached);
        });
      };
    })(this));
  };

  OntologyFactory.prototype.getModel = function(id) {
    return new Promise((function(_this) {
      return function(resolve, reject) {
        if (!id) {
          return resolve(new Entities.Model());
        }
        if (_this.cached._synced) {
          return resolve(_this.cached.get(id));
        }
        return _this.getCollection().then(function() {
          return resolve(_this.cached.get(id));
        });
      };
    })(this));
  };

  OntologyFactory.prototype.attribute = function(prefix, attribute) {
    return new Promise((function(_this) {
      return function(resolve, reject) {
        return _this.getCollection().then(function(ontologyCollection) {
          var graph, ontology;
          ontology = ontologyCollection.findWhere({
            prefix: prefix
          });
          if (!ontology) {
            return resolve(false);
          }
          graph = ontology.get('graph');
          attribute = prefix + ':' + attribute;
          return resolve(_.find(graph, function(attr) {
            return attr['@id'] === attribute;
          }));
        });
      };
    })(this));
  };

  OntologyFactory.prototype.getAttributeDropdown = function() {
    return new Promise((function(_this) {
      return function(resolve, reject) {
        var dropdown;
        dropdown = [];
        return _this.getCollection().then(function(ontologyCollection) {
          var i, item, len, ontology, ref;
          ref = ontologyCollection.models;
          for (i = 0, len = ref.length; i < len; i++) {
            ontology = ref[i];
            item = {};
            item.label = ontology.get('label');
            item.items = _.pluck(ontology.get('graph'), '@id');
            dropdown.push(item);
          }
          return resolve(dropdown);
        });
      };
    })(this));
  };

  return OntologyFactory;

})(Marionette.Service);

module.exports = new OntologyFactory();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL2Fla3Njby9naXRodWIvbWFnZWxsYW4vYXBwL2NvZmZlZS9tb2R1bGVzL29udG9sb2d5L2ZhY3RvcnkuY29mZmVlIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiL1VzZXJzL2Fla3Njby9naXRodWIvbWFnZWxsYW4vYXBwL2NvZmZlZS9tb2R1bGVzL29udG9sb2d5L2ZhY3RvcnkuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLElBQUEseUJBQUE7RUFBQTs7O0FBQUEsUUFBQSxHQUFXLE9BQUEsQ0FBUSxZQUFSOztBQUtMOzs7Ozs7OzRCQUdKLGFBQUEsR0FDRTtJQUFBLGdCQUFBLEVBQWdDLFVBQWhDO0lBQ0EscUJBQUEsRUFBZ0MsZUFEaEM7SUFFQSxvQkFBQSxFQUFnQyxXQUZoQztJQUdBLDZCQUFBLEVBQWdDLHNCQUhoQzs7OzRCQUtGLFVBQUEsR0FBWSxTQUFBO1dBQ1YsSUFBQyxDQUFBLE1BQUQsR0FBVSxJQUFJLFFBQVEsQ0FBQyxVQUFiLENBQUE7RUFEQTs7NEJBVVosYUFBQSxHQUFlLFNBQUE7QUFDYixXQUFPLElBQUksT0FBSixDQUFZLENBQUEsU0FBQSxLQUFBO2FBQUEsU0FBQyxPQUFELEVBQVUsTUFBVjtBQUdqQixZQUFBO1FBQUEsS0FBQSxHQUFRO2VBQ1IsTUFBTSxDQUFDLEVBQUcsQ0FBQSxLQUFBLENBQU0sQ0FBQyxPQUFqQixDQUFBLENBQTBCLENBQUMsSUFBM0IsQ0FBZ0MsU0FBQyxNQUFEO1VBQzlCLEtBQUMsQ0FBQSxNQUFNLENBQUMsS0FBUixDQUFjLE1BQWQ7QUFDQSxpQkFBTyxPQUFBLENBQVEsS0FBQyxDQUFBLE1BQVQ7UUFGdUIsQ0FBaEM7TUFKaUI7SUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLENBQVo7RUFETTs7NEJBU2YsUUFBQSxHQUFVLFNBQUMsRUFBRDtBQUNSLFdBQU8sSUFBSSxPQUFKLENBQVksQ0FBQSxTQUFBLEtBQUE7YUFBQSxTQUFDLE9BQUQsRUFBVSxNQUFWO1FBR2pCLElBQUEsQ0FBNEMsRUFBNUM7QUFBQSxpQkFBTyxPQUFBLENBQVEsSUFBSSxRQUFRLENBQUMsS0FBYixDQUFBLENBQVIsRUFBUDs7UUFHQSxJQUFtQyxLQUFDLENBQUEsTUFBTSxDQUFDLE9BQTNDO0FBQUEsaUJBQU8sT0FBQSxDQUFRLEtBQUMsQ0FBQSxNQUFNLENBQUMsR0FBUixDQUFZLEVBQVosQ0FBUixFQUFQOztBQUdBLGVBQU8sS0FBQyxDQUFBLGFBQUQsQ0FBQSxDQUFnQixDQUFDLElBQWpCLENBQXNCLFNBQUE7aUJBQU0sT0FBQSxDQUFRLEtBQUMsQ0FBQSxNQUFNLENBQUMsR0FBUixDQUFZLEVBQVosQ0FBUjtRQUFOLENBQXRCO01BVFU7SUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLENBQVo7RUFEQzs7NEJBWVYsU0FBQSxHQUFXLFNBQUMsTUFBRCxFQUFTLFNBQVQ7QUFDVCxXQUFPLElBQUksT0FBSixDQUFZLENBQUEsU0FBQSxLQUFBO2FBQUEsU0FBQyxPQUFELEVBQVUsTUFBVjtlQUdqQixLQUFDLENBQUEsYUFBRCxDQUFBLENBQWdCLENBQUMsSUFBakIsQ0FBc0IsU0FBQyxrQkFBRDtBQUdwQixjQUFBO1VBQUEsUUFBQSxHQUFXLGtCQUFrQixDQUFDLFNBQW5CLENBQTZCO1lBQUUsTUFBQSxFQUFRLE1BQVY7V0FBN0I7VUFHWCxJQUFBLENBQTZCLFFBQTdCO0FBQUEsbUJBQU8sT0FBQSxDQUFRLEtBQVIsRUFBUDs7VUFHQSxLQUFBLEdBQVEsUUFBUSxDQUFDLEdBQVQsQ0FBYSxPQUFiO1VBR1IsU0FBQSxHQUFZLE1BQUEsR0FBUyxHQUFULEdBQWU7QUFHM0IsaUJBQU8sT0FBQSxDQUFRLENBQUMsQ0FBQyxJQUFGLENBQU8sS0FBUCxFQUFjLFNBQUMsSUFBRDttQkFBVSxJQUFLLENBQUEsS0FBQSxDQUFMLEtBQWU7VUFBekIsQ0FBZCxDQUFSO1FBZmEsQ0FBdEI7TUFIaUI7SUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLENBQVo7RUFERTs7NEJBdUJYLG9CQUFBLEdBQXNCLFNBQUE7QUFHcEIsV0FBTyxJQUFJLE9BQUosQ0FBWSxDQUFBLFNBQUEsS0FBQTthQUFBLFNBQUMsT0FBRCxFQUFVLE1BQVY7QUFHakIsWUFBQTtRQUFBLFFBQUEsR0FBVztlQUdYLEtBQUMsQ0FBQSxhQUFELENBQUEsQ0FBZ0IsQ0FBQyxJQUFqQixDQUFzQixTQUFDLGtCQUFEO0FBR3BCLGNBQUE7QUFBQTtBQUFBLGVBQUEscUNBQUE7O1lBSUUsSUFBQSxHQUFPO1lBQ1AsSUFBSSxDQUFDLEtBQUwsR0FBYSxRQUFRLENBQUMsR0FBVCxDQUFhLE9BQWI7WUFDYixJQUFJLENBQUMsS0FBTCxHQUFhLENBQUMsQ0FBQyxLQUFGLENBQVEsUUFBUSxDQUFDLEdBQVQsQ0FBYSxPQUFiLENBQVIsRUFBK0IsS0FBL0I7WUFHYixRQUFRLENBQUMsSUFBVCxDQUFjLElBQWQ7QUFURjtBQVlBLGlCQUFPLE9BQUEsQ0FBUSxRQUFSO1FBZmEsQ0FBdEI7TUFOaUI7SUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLENBQVo7RUFIYTs7OztHQS9ETSxVQUFVLENBQUM7O0FBMkZ6QyxNQUFNLENBQUMsT0FBUCxHQUFpQixJQUFJLGVBQUosQ0FBQSJ9

},{"./entities":114}],116:[function(require,module,exports){
var LayoutView, OntologyListRoute,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

LayoutView = require('./views/layout');

OntologyListRoute = (function(superClass) {
  extend(OntologyListRoute, superClass);

  function OntologyListRoute() {
    return OntologyListRoute.__super__.constructor.apply(this, arguments);
  }

  OntologyListRoute.prototype.title = 'Magellan - Ontologies';

  OntologyListRoute.prototype.breadcrumbs = [
    {
      text: 'Ontologies'
    }
  ];

  OntologyListRoute.prototype.fetch = function() {
    return Backbone.Radio.channel('ontology').request('collection').then((function(_this) {
      return function(collection) {
        return _this.collection = collection;
      };
    })(this));
  };

  OntologyListRoute.prototype.render = function() {
    return this.container.show(new LayoutView({
      collection: this.collection
    }));
  };

  return OntologyListRoute;

})(require('hn_routing/lib/route'));

module.exports = OntologyListRoute;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL2Fla3Njby9naXRodWIvbWFnZWxsYW4vYXBwL2NvZmZlZS9tb2R1bGVzL29udG9sb2d5L2xpc3Qvcm91dGUuY29mZmVlIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiL1VzZXJzL2Fla3Njby9naXRodWIvbWFnZWxsYW4vYXBwL2NvZmZlZS9tb2R1bGVzL29udG9sb2d5L2xpc3Qvcm91dGUuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLElBQUEsNkJBQUE7RUFBQTs7O0FBQUEsVUFBQSxHQUFjLE9BQUEsQ0FBUSxnQkFBUjs7QUFJUjs7Ozs7Ozs4QkFFSixLQUFBLEdBQU87OzhCQUVQLFdBQUEsR0FBYTtJQUNYO01BQUUsSUFBQSxFQUFNLFlBQVI7S0FEVzs7OzhCQUliLEtBQUEsR0FBTyxTQUFBO1dBQ0wsUUFBUSxDQUFDLEtBQUssQ0FBQyxPQUFmLENBQXVCLFVBQXZCLENBQWtDLENBQUMsT0FBbkMsQ0FBMkMsWUFBM0MsQ0FDQSxDQUFDLElBREQsQ0FDTSxDQUFBLFNBQUEsS0FBQTthQUFBLFNBQUMsVUFBRDtlQUFnQixLQUFDLENBQUEsVUFBRCxHQUFjO01BQTlCO0lBQUEsQ0FBQSxDQUFBLENBQUEsSUFBQSxDQUROO0VBREs7OzhCQUlQLE1BQUEsR0FBUSxTQUFBO1dBQ04sSUFBQyxDQUFBLFNBQVMsQ0FBQyxJQUFYLENBQWdCLElBQUksVUFBSixDQUFlO01BQUUsVUFBQSxFQUFZLElBQUMsQ0FBQSxVQUFmO0tBQWYsQ0FBaEI7RUFETTs7OztHQVpzQixPQUFBLENBQVEsc0JBQVI7O0FBaUJoQyxNQUFNLENBQUMsT0FBUCxHQUFpQiJ9

},{"./views/layout":117,"hn_routing/lib/route":177}],117:[function(require,module,exports){
var AttributeChild, AttributeDetail, AttributeList, AttributeListLayout, JsonViewer, LdViewer, OntologyChild, OntologyEmpty, OntologyList, OntologyListLayout,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

OntologyEmpty = (function(superClass) {
  extend(OntologyEmpty, superClass);

  function OntologyEmpty() {
    return OntologyEmpty.__super__.constructor.apply(this, arguments);
  }

  OntologyEmpty.prototype.template = require('./templates/ontology_empty');

  OntologyEmpty.prototype.className = 'list-group-item list-group-item-warning';

  OntologyEmpty.prototype.tagName = 'li';

  return OntologyEmpty;

})(Mn.LayoutView);

OntologyChild = (function(superClass) {
  extend(OntologyChild, superClass);

  function OntologyChild() {
    return OntologyChild.__super__.constructor.apply(this, arguments);
  }

  OntologyChild.prototype.template = require('./templates/ontology_child');

  OntologyChild.prototype.className = 'list-group-item';

  OntologyChild.prototype.tagName = 'li';

  OntologyChild.prototype.behaviors = {
    SelectableChild: {}
  };

  return OntologyChild;

})(Mn.LayoutView);

OntologyList = (function(superClass) {
  extend(OntologyList, superClass);

  function OntologyList() {
    return OntologyList.__super__.constructor.apply(this, arguments);
  }

  OntologyList.prototype.className = 'row';

  OntologyList.prototype.template = require('./templates/ontology_list');

  OntologyList.prototype.childView = OntologyChild;

  OntologyList.prototype.emptyView = OntologyEmpty;

  OntologyList.prototype.childViewContainer = 'ul';

  return OntologyList;

})(Mn.CompositeView);

LdViewer = require('../../../search/facetsearch/views/graph.coffee');

JsonViewer = require('hn_views/lib/json_viewer');

AttributeDetail = (function(superClass) {
  extend(AttributeDetail, superClass);

  function AttributeDetail() {
    return AttributeDetail.__super__.constructor.apply(this, arguments);
  }

  AttributeDetail.prototype.navItems = [
    {
      icon: 'fa-code',
      text: 'JSON',
      trigger: 'json',
      "default": true
    }, {
      icon: 'fa-sitemap',
      text: 'Graph',
      trigger: 'graph'
    }
  ];

  AttributeDetail.prototype.navEvents = {
    'json': 'showJson',
    'graph': 'showGraph'
  };

  AttributeDetail.prototype.showJson = function() {
    return this.contentRegion.show(new JsonViewer({
      model: this.model
    }));
  };

  AttributeDetail.prototype.showGraph = function() {
    return this.contentRegion.show(new LdViewer({
      json: this.model.toJSON()
    }));
  };

  return AttributeDetail;

})(require('hn_views/lib/nav'));

AttributeChild = (function(superClass) {
  extend(AttributeChild, superClass);

  function AttributeChild() {
    return AttributeChild.__super__.constructor.apply(this, arguments);
  }

  AttributeChild.prototype.className = 'list-group-item';

  AttributeChild.prototype.template = require('./templates/attribute_child');

  AttributeChild.prototype.tagName = 'li';

  AttributeChild.prototype.behaviors = {
    SelectableChild: {}
  };

  AttributeChild.prototype.serializeData = function() {
    return {
      data: AttributeChild.__super__.serializeData.apply(this, arguments)
    };
  };

  return AttributeChild;

})(Mn.LayoutView);

AttributeList = (function(superClass) {
  extend(AttributeList, superClass);

  function AttributeList() {
    return AttributeList.__super__.constructor.apply(this, arguments);
  }

  AttributeList.prototype.className = 'list-group';

  AttributeList.prototype.childView = AttributeChild;

  return AttributeList;

})(Mn.CollectionView);

AttributeListLayout = (function(superClass) {
  extend(AttributeListLayout, superClass);

  function AttributeListLayout() {
    return AttributeListLayout.__super__.constructor.apply(this, arguments);
  }

  AttributeListLayout.prototype.className = 'row';

  AttributeListLayout.prototype.template = require('./templates/attribute_layout');

  AttributeListLayout.prototype.regions = {
    listRegion: '[data-region=list]',
    detailRegion: '[data-region=detail]'
  };

  AttributeListLayout.prototype.onRender = function() {
    var attributeCollection, listView, ref;
    attributeCollection = new Backbone.Collection(this.model.get('graph'));
    listView = new AttributeList({
      collection: attributeCollection
    });
    listView.on('childview:selected', (function(_this) {
      return function(view) {
        return _this.showAttribute(view.model);
      };
    })(this));
    this.listRegion.show(listView);
    return (ref = attributeCollection.at(0)) != null ? ref.trigger('selected') : void 0;
  };

  AttributeListLayout.prototype.showAttribute = function(attributeModel) {
    return this.detailRegion.show(new AttributeDetail({
      model: attributeModel
    }));
  };

  return AttributeListLayout;

})(Mn.LayoutView);

OntologyListLayout = (function(superClass) {
  extend(OntologyListLayout, superClass);

  function OntologyListLayout() {
    return OntologyListLayout.__super__.constructor.apply(this, arguments);
  }

  OntologyListLayout.prototype.template = require('./templates/layout');

  OntologyListLayout.prototype.className = 'container-fluid';

  OntologyListLayout.prototype.regions = {
    listRegion: '[data-region=list]',
    detailRegion: {
      selector: '[data-region=detail]',
      regionClass: require('Marionette.AnimatedRegion/lib/animatedRegion'),
      inAnimation: 'fadeInUp',
      outAnimation: 'fadeOutDown'
    }
  };

  OntologyListLayout.prototype.onShow = function() {
    var listView, ref;
    listView = new OntologyList({
      collection: this.collection
    });
    listView.on('childview:selected', (function(_this) {
      return function(view) {
        return _this.showGraph(view.model);
      };
    })(this));
    this.listRegion.show(listView);
    return (ref = this.collection.at(0)) != null ? ref.trigger('selected') : void 0;
  };

  OntologyListLayout.prototype.showGraph = function(ontology) {
    return this.detailRegion.show(new AttributeListLayout({
      model: ontology
    }));
  };

  return OntologyListLayout;

})(Mn.LayoutView);

module.exports = OntologyListLayout;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL2Fla3Njby9naXRodWIvbWFnZWxsYW4vYXBwL2NvZmZlZS9tb2R1bGVzL29udG9sb2d5L2xpc3Qvdmlld3MvbGF5b3V0LmNvZmZlZSIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9hZWtzY28vZ2l0aHViL21hZ2VsbGFuL2FwcC9jb2ZmZWUvbW9kdWxlcy9vbnRvbG9neS9saXN0L3ZpZXdzL2xheW91dC5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsSUFBQSx5SkFBQTtFQUFBOzs7QUFBTTs7Ozs7OzswQkFDSixRQUFBLEdBQVUsT0FBQSxDQUFRLDRCQUFSOzswQkFDVixTQUFBLEdBQVc7OzBCQUNYLE9BQUEsR0FBUzs7OztHQUhpQixFQUFFLENBQUM7O0FBT3pCOzs7Ozs7OzBCQUNKLFFBQUEsR0FBVSxPQUFBLENBQVEsNEJBQVI7OzBCQUNWLFNBQUEsR0FBVzs7MEJBQ1gsT0FBQSxHQUFTOzswQkFFVCxTQUFBLEdBQ0U7SUFBQSxlQUFBLEVBQWlCLEVBQWpCOzs7OztHQU53QixFQUFFLENBQUM7O0FBVXpCOzs7Ozs7O3lCQUNKLFNBQUEsR0FBVzs7eUJBQ1gsUUFBQSxHQUFVLE9BQUEsQ0FBUSwyQkFBUjs7eUJBQ1YsU0FBQSxHQUFXOzt5QkFDWCxTQUFBLEdBQVc7O3lCQUNYLGtCQUFBLEdBQW9COzs7O0dBTEssRUFBRSxDQUFDOztBQVU5QixRQUFBLEdBQVcsT0FBQSxDQUFRLGdEQUFSOztBQUNYLFVBQUEsR0FBYSxPQUFBLENBQVEsMEJBQVI7O0FBQ1A7Ozs7Ozs7NEJBRUosUUFBQSxHQUFVO0lBQ1I7TUFBRSxJQUFBLEVBQU0sU0FBUjtNQUFzQixJQUFBLEVBQU0sTUFBNUI7TUFBc0MsT0FBQSxFQUFTLE1BQS9DO01BQXVELENBQUEsT0FBQSxDQUFBLEVBQVMsSUFBaEU7S0FEUSxFQUVSO01BQUUsSUFBQSxFQUFNLFlBQVI7TUFBc0IsSUFBQSxFQUFNLE9BQTVCO01BQXNDLE9BQUEsRUFBUyxPQUEvQztLQUZROzs7NEJBS1YsU0FBQSxHQUNFO0lBQUEsTUFBQSxFQUFZLFVBQVo7SUFDQSxPQUFBLEVBQVksV0FEWjs7OzRCQUdGLFFBQUEsR0FBVSxTQUFBO1dBQ1IsSUFBQyxDQUFBLGFBQWEsQ0FBQyxJQUFmLENBQW9CLElBQUksVUFBSixDQUFlO01BQUUsS0FBQSxFQUFPLElBQUMsQ0FBQSxLQUFWO0tBQWYsQ0FBcEI7RUFEUTs7NEJBR1YsU0FBQSxHQUFXLFNBQUE7V0FDVCxJQUFDLENBQUEsYUFBYSxDQUFDLElBQWYsQ0FBb0IsSUFBSSxRQUFKLENBQWE7TUFBRSxJQUFBLEVBQU0sSUFBQyxDQUFBLEtBQUssQ0FBQyxNQUFQLENBQUEsQ0FBUjtLQUFiLENBQXBCO0VBRFM7Ozs7R0FkaUIsT0FBQSxDQUFRLGtCQUFSOztBQW9CeEI7Ozs7Ozs7MkJBQ0osU0FBQSxHQUFXOzsyQkFDWCxRQUFBLEdBQVUsT0FBQSxDQUFRLDZCQUFSOzsyQkFDVixPQUFBLEdBQVM7OzJCQUVULFNBQUEsR0FDRTtJQUFBLGVBQUEsRUFBaUIsRUFBakI7OzsyQkFFRixhQUFBLEdBQWUsU0FBQTtBQUNiLFdBQU87TUFBRSxJQUFBLEVBQU0sbURBQUEsU0FBQSxDQUFSOztFQURNOzs7O0dBUlksRUFBRSxDQUFDOztBQVcxQjs7Ozs7OzswQkFDSixTQUFBLEdBQVc7OzBCQUNYLFNBQUEsR0FBVzs7OztHQUZlLEVBQUUsQ0FBQzs7QUFJekI7Ozs7Ozs7Z0NBQ0osU0FBQSxHQUFXOztnQ0FDWCxRQUFBLEdBQVUsT0FBQSxDQUFRLDhCQUFSOztnQ0FFVixPQUFBLEdBQ0U7SUFBQSxVQUFBLEVBQWMsb0JBQWQ7SUFDQSxZQUFBLEVBQWMsc0JBRGQ7OztnQ0FHRixRQUFBLEdBQVUsU0FBQTtBQUNSLFFBQUE7SUFBQSxtQkFBQSxHQUFzQixJQUFJLFFBQVEsQ0FBQyxVQUFiLENBQXdCLElBQUMsQ0FBQSxLQUFLLENBQUMsR0FBUCxDQUFXLE9BQVgsQ0FBeEI7SUFFdEIsUUFBQSxHQUFXLElBQUksYUFBSixDQUFrQjtNQUFFLFVBQUEsRUFBWSxtQkFBZDtLQUFsQjtJQUNYLFFBQVEsQ0FBQyxFQUFULENBQVksb0JBQVosRUFBa0MsQ0FBQSxTQUFBLEtBQUE7YUFBQSxTQUFDLElBQUQ7ZUFBVSxLQUFDLENBQUEsYUFBRCxDQUFlLElBQUksQ0FBQyxLQUFwQjtNQUFWO0lBQUEsQ0FBQSxDQUFBLENBQUEsSUFBQSxDQUFsQztJQUNBLElBQUMsQ0FBQSxVQUFVLENBQUMsSUFBWixDQUFpQixRQUFqQjswREFDeUIsQ0FBRSxPQUEzQixDQUFtQyxVQUFuQztFQU5ROztnQ0FRVixhQUFBLEdBQWUsU0FBQyxjQUFEO1dBQ2IsSUFBQyxDQUFBLFlBQVksQ0FBQyxJQUFkLENBQW1CLElBQUksZUFBSixDQUFvQjtNQUFFLEtBQUEsRUFBTyxjQUFUO0tBQXBCLENBQW5CO0VBRGE7Ozs7R0FoQmlCLEVBQUUsQ0FBQzs7QUFxQi9COzs7Ozs7OytCQUNKLFFBQUEsR0FBVSxPQUFBLENBQVEsb0JBQVI7OytCQUNWLFNBQUEsR0FBVzs7K0JBRVgsT0FBQSxHQUNFO0lBQUEsVUFBQSxFQUFZLG9CQUFaO0lBRUEsWUFBQSxFQUNFO01BQUEsUUFBQSxFQUFjLHNCQUFkO01BQ0EsV0FBQSxFQUFjLE9BQUEsQ0FBUSw4Q0FBUixDQURkO01BRUEsV0FBQSxFQUFjLFVBRmQ7TUFHQSxZQUFBLEVBQWMsYUFIZDtLQUhGOzs7K0JBUUYsTUFBQSxHQUFRLFNBQUE7QUFDTixRQUFBO0lBQUEsUUFBQSxHQUFXLElBQUksWUFBSixDQUFpQjtNQUFFLFVBQUEsRUFBWSxJQUFDLENBQUEsVUFBZjtLQUFqQjtJQUNYLFFBQVEsQ0FBQyxFQUFULENBQVksb0JBQVosRUFBa0MsQ0FBQSxTQUFBLEtBQUE7YUFBQSxTQUFDLElBQUQ7ZUFBVSxLQUFDLENBQUEsU0FBRCxDQUFXLElBQUksQ0FBQyxLQUFoQjtNQUFWO0lBQUEsQ0FBQSxDQUFBLENBQUEsSUFBQSxDQUFsQztJQUNBLElBQUMsQ0FBQSxVQUFVLENBQUMsSUFBWixDQUFpQixRQUFqQjtzREFDaUIsQ0FBRSxPQUFuQixDQUEyQixVQUEzQjtFQUpNOzsrQkFNUixTQUFBLEdBQVcsU0FBQyxRQUFEO1dBQ1QsSUFBQyxDQUFBLFlBQVksQ0FBQyxJQUFkLENBQW1CLElBQUksbUJBQUosQ0FBd0I7TUFBRSxLQUFBLEVBQU8sUUFBVDtLQUF4QixDQUFuQjtFQURTOzs7O0dBbkJvQixFQUFFLENBQUM7O0FBd0JwQyxNQUFNLENBQUMsT0FBUCxHQUFpQiJ9

},{"../../../search/facetsearch/views/graph.coffee":132,"./templates/attribute_child":118,"./templates/attribute_layout":119,"./templates/layout":120,"./templates/ontology_child":121,"./templates/ontology_empty":122,"./templates/ontology_list":123,"Marionette.AnimatedRegion/lib/animatedRegion":148,"hn_views/lib/json_viewer":182,"hn_views/lib/nav":184}],118:[function(require,module,exports){
var jade = require("jade/runtime");

module.exports = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (data) {
buf.push(jade.escape(null == (jade_interp = data['@id']) ? "" : jade_interp));}.call(this,"data" in locals_for_with?locals_for_with.data:typeof data!=="undefined"?data:undefined));;return buf.join("");
};
},{"jade/runtime":187}],119:[function(require,module,exports){
var jade = require("jade/runtime");

module.exports = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (label) {
buf.push("<div class=\"col-xs-12\"><div class=\"card card-block\"><h4 class=\"card-title\">" + (jade.escape(null == (jade_interp = label) ? "" : jade_interp)) + "</h4><hr/><div class=\"row\"><div data-region=\"list\" class=\"col-xs-4\"></div><div data-region=\"detail\" class=\"col-xs-8\"></div></div></div></div>");}.call(this,"label" in locals_for_with?locals_for_with.label:typeof label!=="undefined"?label:undefined));;return buf.join("");
};
},{"jade/runtime":187}],120:[function(require,module,exports){
module.exports=require(86)
},{"jade/runtime":187}],121:[function(require,module,exports){
module.exports=require(82)
},{"jade/runtime":187}],122:[function(require,module,exports){
var jade = require("jade/runtime");

module.exports = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;

buf.push("No Ontologies");;return buf.join("");
};
},{"jade/runtime":187}],123:[function(require,module,exports){
var jade = require("jade/runtime");

module.exports = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;

buf.push("<div class=\"col-xs-12\"><a href=\"#ontologies/new\" class=\"btn btn-lg btn-primary-outline w-100\"><i class=\"fa fa-fw fa-plus\"></i></a><ul class=\"list-group m-t-1\"></ul></div>");;return buf.join("");
};
},{"jade/runtime":187}],124:[function(require,module,exports){
var LayoutView, NewDatasetRoute,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

LayoutView = require('./views/layout');

NewDatasetRoute = (function(superClass) {
  extend(NewDatasetRoute, superClass);

  function NewDatasetRoute() {
    return NewDatasetRoute.__super__.constructor.apply(this, arguments);
  }

  NewDatasetRoute.prototype.title = 'Magellan - New Ontology';

  NewDatasetRoute.prototype.breadcrumbs = [
    {
      text: 'Ontologies',
      href: '#ontologies'
    }, {
      text: 'New'
    }
  ];

  NewDatasetRoute.prototype.fetch = function() {
    return Backbone.Radio.channel('ontology').request('model').then((function(_this) {
      return function(model) {
        return _this.model = model;
      };
    })(this));
  };

  NewDatasetRoute.prototype.render = function() {
    return this.container.show(new LayoutView({
      model: this.model
    }));
  };

  return NewDatasetRoute;

})(require('hn_routing/lib/route'));

module.exports = NewDatasetRoute;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL2Fla3Njby9naXRodWIvbWFnZWxsYW4vYXBwL2NvZmZlZS9tb2R1bGVzL29udG9sb2d5L25ldy9yb3V0ZS5jb2ZmZWUiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIvVXNlcnMvYWVrc2NvL2dpdGh1Yi9tYWdlbGxhbi9hcHAvY29mZmVlL21vZHVsZXMvb250b2xvZ3kvbmV3L3JvdXRlLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxJQUFBLDJCQUFBO0VBQUE7OztBQUFBLFVBQUEsR0FBYSxPQUFBLENBQVEsZ0JBQVI7O0FBSVA7Ozs7Ozs7NEJBRUosS0FBQSxHQUFPOzs0QkFFUCxXQUFBLEdBQWE7SUFDWDtNQUFFLElBQUEsRUFBTSxZQUFSO01BQXNCLElBQUEsRUFBTSxhQUE1QjtLQURXLEVBRVg7TUFBRSxJQUFBLEVBQU0sS0FBUjtLQUZXOzs7NEJBS2IsS0FBQSxHQUFPLFNBQUE7V0FDTCxRQUFRLENBQUMsS0FBSyxDQUFDLE9BQWYsQ0FBdUIsVUFBdkIsQ0FBa0MsQ0FBQyxPQUFuQyxDQUEyQyxPQUEzQyxDQUNBLENBQUMsSUFERCxDQUNNLENBQUEsU0FBQSxLQUFBO2FBQUEsU0FBQyxLQUFEO2VBQVcsS0FBQyxDQUFBLEtBQUQsR0FBUztNQUFwQjtJQUFBLENBQUEsQ0FBQSxDQUFBLElBQUEsQ0FETjtFQURLOzs0QkFJUCxNQUFBLEdBQVEsU0FBQTtXQUNOLElBQUMsQ0FBQSxTQUFTLENBQUMsSUFBWCxDQUFnQixJQUFJLFVBQUosQ0FBZTtNQUFFLEtBQUEsRUFBTyxJQUFDLENBQUEsS0FBVjtLQUFmLENBQWhCO0VBRE07Ozs7R0Fib0IsT0FBQSxDQUFRLHNCQUFSOztBQWtCOUIsTUFBTSxDQUFDLE9BQVAsR0FBaUIifQ==

},{"./views/layout":125,"hn_routing/lib/route":177}],125:[function(require,module,exports){
var Marionette, NewOntologyLayout, UploadWidget,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

Marionette = require('backbone.marionette');

UploadWidget = (function(superClass) {
  extend(UploadWidget, superClass);

  function UploadWidget() {
    return UploadWidget.__super__.constructor.apply(this, arguments);
  }

  UploadWidget.prototype.template = require('./templates/upload');

  UploadWidget.prototype.className = 'form-group';

  UploadWidget.prototype.events = {
    'change input[type=file]': 'onInputChange'
  };

  UploadWidget.prototype.onInputChange = function(e) {
    var file, fileReader;
    file = e.target.files[0];
    if (!file) {
      return;
    }
    fileReader = new FileReader();
    fileReader.onload = (function(_this) {
      return function() {
        return _this.onFileLoaded(fileReader.result);
      };
    })(this);
    return fileReader.readAsText(file);
  };

  UploadWidget.prototype.onFileLoaded = function(text) {
    var parsed;
    parsed = JSON.parse(text);
    return this.trigger('parse', parsed);
  };

  return UploadWidget;

})(Mn.LayoutView);

NewOntologyLayout = (function(superClass) {
  extend(NewOntologyLayout, superClass);

  function NewOntologyLayout() {
    this.onJsonUpload = bind(this.onJsonUpload, this);
    return NewOntologyLayout.__super__.constructor.apply(this, arguments);
  }

  NewOntologyLayout.prototype.template = require('./templates/layout');

  NewOntologyLayout.prototype.className = 'container';

  NewOntologyLayout.prototype.behaviors = {
    SubmitButton: {}
  };

  NewOntologyLayout.prototype.regions = {
    uploadRegion: '[data-region=upload]'
  };

  NewOntologyLayout.prototype.onRender = function() {
    var uploadWidget;
    uploadWidget = new UploadWidget();
    uploadWidget.on('parse', this.onJsonUpload);
    this.uploadRegion.show(uploadWidget);
    return this.disableSubmit();
  };

  NewOntologyLayout.prototype.onJsonUpload = function(parsedJson) {
    this.model.set('context', parsedJson['@context']);
    this.model.set('graph', parsedJson['@graph']);
    return this.enableSubmit();
  };

  NewOntologyLayout.prototype.onSubmit = function() {
    var data;
    data = Backbone.Syphon.serialize(this);
    data.id = buildUniqueId('on_');
    this.model.set(data);
    return this.saveToDexie();
  };

  NewOntologyLayout.prototype.saveToDexie = function() {
    var table;
    table = 'ontologies';
    return window.db[table].add(this.model.toJSON()).then((function(_this) {
      return function(model_id) {
        return Backbone.Radio.channel('app').trigger('redirect', '#ontologies');
      };
    })(this))["catch"]((function(_this) {
      return function(err) {
        return console.log('ERROR CAUGHT');
      };
    })(this));
  };

  return NewOntologyLayout;

})(Mn.LayoutView);

module.exports = NewOntologyLayout;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL2Fla3Njby9naXRodWIvbWFnZWxsYW4vYXBwL2NvZmZlZS9tb2R1bGVzL29udG9sb2d5L25ldy92aWV3cy9sYXlvdXQuY29mZmVlIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiL1VzZXJzL2Fla3Njby9naXRodWIvbWFnZWxsYW4vYXBwL2NvZmZlZS9tb2R1bGVzL29udG9sb2d5L25ldy92aWV3cy9sYXlvdXQuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLElBQUEsMkNBQUE7RUFBQTs7OztBQUFBLFVBQUEsR0FBYSxPQUFBLENBQVEscUJBQVI7O0FBTVA7Ozs7Ozs7eUJBQ0osUUFBQSxHQUFVLE9BQUEsQ0FBUSxvQkFBUjs7eUJBQ1YsU0FBQSxHQUFXOzt5QkFFWCxNQUFBLEdBQ0U7SUFBQSx5QkFBQSxFQUEyQixlQUEzQjs7O3lCQUVGLGFBQUEsR0FBZSxTQUFDLENBQUQ7QUFHYixRQUFBO0lBQUEsSUFBQSxHQUFPLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBTSxDQUFBLENBQUE7SUFHdEIsSUFBQSxDQUFjLElBQWQ7QUFBQSxhQUFBOztJQUdBLFVBQUEsR0FBYSxJQUFJLFVBQUosQ0FBQTtJQUNiLFVBQVUsQ0FBQyxNQUFYLEdBQW9CLENBQUEsU0FBQSxLQUFBO2FBQUEsU0FBQTtlQUFHLEtBQUMsQ0FBQSxZQUFELENBQWMsVUFBVSxDQUFDLE1BQXpCO01BQUg7SUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBO1dBQ3BCLFVBQVUsQ0FBQyxVQUFYLENBQXNCLElBQXRCO0VBWGE7O3lCQWVmLFlBQUEsR0FBYyxTQUFDLElBQUQ7QUFDWixRQUFBO0lBQUEsTUFBQSxHQUFTLElBQUksQ0FBQyxLQUFMLENBQVcsSUFBWDtXQUNULElBQUMsQ0FBQSxPQUFELENBQVMsT0FBVCxFQUFrQixNQUFsQjtFQUZZOzs7O0dBdEJXLEVBQUUsQ0FBQzs7QUE2QnhCOzs7Ozs7Ozs4QkFDSixRQUFBLEdBQVUsT0FBQSxDQUFRLG9CQUFSOzs4QkFDVixTQUFBLEdBQVc7OzhCQUVYLFNBQUEsR0FDRTtJQUFBLFlBQUEsRUFBYyxFQUFkOzs7OEJBRUYsT0FBQSxHQUNFO0lBQUEsWUFBQSxFQUFjLHNCQUFkOzs7OEJBRUYsUUFBQSxHQUFVLFNBQUE7QUFDUixRQUFBO0lBQUEsWUFBQSxHQUFlLElBQUksWUFBSixDQUFBO0lBQ2YsWUFBWSxDQUFDLEVBQWIsQ0FBZ0IsT0FBaEIsRUFBeUIsSUFBQyxDQUFBLFlBQTFCO0lBQ0EsSUFBQyxDQUFBLFlBQVksQ0FBQyxJQUFkLENBQW1CLFlBQW5CO1dBQ0EsSUFBQyxDQUFBLGFBQUQsQ0FBQTtFQUpROzs4QkFNVixZQUFBLEdBQWMsU0FBQyxVQUFEO0lBRVosSUFBQyxDQUFBLEtBQUssQ0FBQyxHQUFQLENBQVcsU0FBWCxFQUFzQixVQUFXLENBQUEsVUFBQSxDQUFqQztJQUNBLElBQUMsQ0FBQSxLQUFLLENBQUMsR0FBUCxDQUFXLE9BQVgsRUFBb0IsVUFBVyxDQUFBLFFBQUEsQ0FBL0I7V0FDQSxJQUFDLENBQUEsWUFBRCxDQUFBO0VBSlk7OzhCQU1kLFFBQUEsR0FBVSxTQUFBO0FBQ1IsUUFBQTtJQUFBLElBQUEsR0FBVSxRQUFRLENBQUMsTUFBTSxDQUFDLFNBQWhCLENBQTBCLElBQTFCO0lBQ1YsSUFBSSxDQUFDLEVBQUwsR0FBVSxhQUFBLENBQWMsS0FBZDtJQUNWLElBQUMsQ0FBQSxLQUFLLENBQUMsR0FBUCxDQUFXLElBQVg7V0FDQSxJQUFDLENBQUEsV0FBRCxDQUFBO0VBSlE7OzhCQVVWLFdBQUEsR0FBYSxTQUFBO0FBQ1gsUUFBQTtJQUFBLEtBQUEsR0FBUTtXQUVSLE1BQU0sQ0FBQyxFQUFHLENBQUEsS0FBQSxDQUFNLENBQUMsR0FBakIsQ0FBcUIsSUFBQyxDQUFBLEtBQUssQ0FBQyxNQUFQLENBQUEsQ0FBckIsQ0FDQSxDQUFDLElBREQsQ0FDTSxDQUFBLFNBQUEsS0FBQTthQUFBLFNBQUMsUUFBRDtlQUFjLFFBQVEsQ0FBQyxLQUFLLENBQUMsT0FBZixDQUF1QixLQUF2QixDQUE2QixDQUFDLE9BQTlCLENBQXNDLFVBQXRDLEVBQWtELGFBQWxEO01BQWQ7SUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLENBRE4sQ0FHQSxFQUFDLEtBQUQsRUFIQSxDQUdPLENBQUEsU0FBQSxLQUFBO2FBQUEsU0FBQyxHQUFEO2VBQVMsT0FBTyxDQUFDLEdBQVIsQ0FBWSxjQUFaO01BQVQ7SUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLENBSFA7RUFIVzs7OztHQWhDaUIsRUFBRSxDQUFDOztBQTBDbkMsTUFBTSxDQUFDLE9BQVAsR0FBaUIifQ==

},{"./templates/layout":126,"./templates/upload":127,"backbone.marionette":151}],126:[function(require,module,exports){
var jade = require("jade/runtime");

module.exports = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;

jade_mixins["formGroup"] = jade_interp = function(opts){
var block = (this && this.block), attributes = (this && this.attributes) || {};
buf.push("<fieldset" + (jade.cls(['form-group',opts.formGroupCss], [null,true])) + ">");
if ( opts.label)
{
buf.push("<label class=\"form-control-label\">" + (jade.escape(null == (jade_interp = opts.label) ? "" : jade_interp)) + "</label>");
}
block && block();
buf.push("</fieldset>");
};
buf.push("");
jade_mixins["formInput"] = jade_interp = function(opts){
var block = (this && this.block), attributes = (this && this.attributes) || {};
jade_mixins["formGroup"].call({
block: function(){
buf.push("<input" + (jade.attrs(jade.merge([{"placeholder": jade.escape(opts.placeholder),"name": jade.escape(opts.name),"type": jade.escape(opts.type),"value": jade.escape(opts.value),"class": "form-control"},attributes]), false)) + "/>");
}
}, opts);
};
buf.push("");








buf.push("");


































buf.push("");




buf.push("");
jade_mixins["button"] = jade_interp = function(opts){
var block = (this && this.block), attributes = (this && this.attributes) || {};
buf.push("<button" + (jade.attrs(jade.merge([{"type": "button","class": "btn"},attributes]), false)) + ">");
if ( opts.icon)
{
buf.push("<i" + (jade.cls(['fa','fa-fw',opts.icon], [null,null,true])) + "></i>&nbsp;");
}
buf.push((jade.escape(null == (jade_interp = opts.text) ? "" : jade_interp)) + "</button>");
};
buf.push("");
jade_mixins["submitButton"] = jade_interp = function(opts){
var block = (this && this.block), attributes = (this && this.attributes) || {};
if (!( opts.text))
{
opts.text = 'Submit'
}
if (!( opts.icon))
{
opts.icon = 'fa-check'
}
jade_mixins["button"].call({
attributes: jade.merge([{"data-click": "submit","class": "btn-success"},attributes])
}, opts);
};
buf.push("");














buf.push("<div class=\"row\"><div class=\"col-xs-12\"><div class=\"card card-block\"><div class=\"row\"><div class=\"col-xs-12\"><h4 class=\"card-title\">New Ontology</h4></div><div class=\"col-xs-12\"><hr/></div><div class=\"col-xs-12\">");
jade_mixins["formInput"]({ label: 'Label', placeholder: 'Label', name: 'label', type: 'text' });
jade_mixins["formInput"]({ label: 'Prefix', placeholder: 'Prefix', name: 'prefix', type: 'text' });
buf.push("</div><div data-region=\"upload\" class=\"col-xs-12\"></div><div class=\"col-xs-12\"><hr/></div><div class=\"col-xs-12 text-xs-right\">");
jade_mixins["submitButton"]({});
buf.push("</div></div></div></div></div>");;return buf.join("");
};
},{"jade/runtime":187}],127:[function(require,module,exports){
module.exports=require(90)
},{"jade/runtime":187}],128:[function(require,module,exports){
var ListRoute, NewRoute, OntologyRouter,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

require('./factory');

ListRoute = require('./list/route');

NewRoute = require('./new/route');

OntologyRouter = (function(superClass) {
  extend(OntologyRouter, superClass);

  function OntologyRouter() {
    return OntologyRouter.__super__.constructor.apply(this, arguments);
  }

  OntologyRouter.prototype.routes = {
    'ontologies(/)': 'list',
    'ontologies/:id/search(/)': 'search',
    'ontologies/new(/)': 'new'
  };

  OntologyRouter.prototype.list = function() {
    return new ListRoute({
      container: this.container
    });
  };

  OntologyRouter.prototype.search = function(id) {
    return console.log('SEARCH');
  };

  OntologyRouter.prototype["new"] = function() {
    return new NewRoute({
      container: this.container
    });
  };

  return OntologyRouter;

})(require('hn_routing/lib/router'));

module.exports = OntologyRouter;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL2Fla3Njby9naXRodWIvbWFnZWxsYW4vYXBwL2NvZmZlZS9tb2R1bGVzL29udG9sb2d5L3JvdXRlci5jb2ZmZWUiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIvVXNlcnMvYWVrc2NvL2dpdGh1Yi9tYWdlbGxhbi9hcHAvY29mZmVlL21vZHVsZXMvb250b2xvZ3kvcm91dGVyLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxJQUFBLG1DQUFBO0VBQUE7OztBQUFBLE9BQUEsQ0FBUSxXQUFSOztBQUNBLFNBQUEsR0FBWSxPQUFBLENBQVEsY0FBUjs7QUFDWixRQUFBLEdBQVcsT0FBQSxDQUFRLGFBQVI7O0FBR0w7Ozs7Ozs7MkJBRUosTUFBQSxHQUNFO0lBQUEsZUFBQSxFQUE0QixNQUE1QjtJQUNBLDBCQUFBLEVBQTRCLFFBRDVCO0lBRUEsbUJBQUEsRUFBNEIsS0FGNUI7OzsyQkFJRixJQUFBLEdBQU0sU0FBQTtXQUNKLElBQUksU0FBSixDQUFjO01BQUUsU0FBQSxFQUFXLElBQUMsQ0FBQSxTQUFkO0tBQWQ7RUFESTs7MkJBSU4sTUFBQSxHQUFRLFNBQUMsRUFBRDtXQUNOLE9BQU8sQ0FBQyxHQUFSLENBQVksUUFBWjtFQURNOzs0QkFHUixLQUFBLEdBQUssU0FBQTtXQUNILElBQUksUUFBSixDQUFhO01BQUUsU0FBQSxFQUFXLElBQUMsQ0FBQSxTQUFkO0tBQWI7RUFERzs7OztHQWRzQixPQUFBLENBQVEsdUJBQVI7O0FBbUI3QixNQUFNLENBQUMsT0FBUCxHQUFpQiJ9

},{"./factory":115,"./list/route":116,"./new/route":124,"hn_routing/lib/router":178}],129:[function(require,module,exports){
var SearchResultCollection, SearchResultModel,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

SearchResultModel = (function(superClass) {
  extend(SearchResultModel, superClass);

  function SearchResultModel() {
    return SearchResultModel.__super__.constructor.apply(this, arguments);
  }

  SearchResultModel.prototype.stringifyJson = function() {
    return JSON.stringify(this.toJSON(), null, 2);
  };

  return SearchResultModel;

})(Backbone.Model);

SearchResultCollection = (function(superClass) {
  extend(SearchResultCollection, superClass);

  function SearchResultCollection() {
    return SearchResultCollection.__super__.constructor.apply(this, arguments);
  }

  SearchResultCollection.prototype.model = SearchResultModel;

  return SearchResultCollection;

})(Backbone.Collection);

module.exports = {
  Model: SearchResultModel,
  Collection: SearchResultCollection
};

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL2Fla3Njby9naXRodWIvbWFnZWxsYW4vYXBwL2NvZmZlZS9tb2R1bGVzL3NlYXJjaC9lbnRpdGllcy5jb2ZmZWUiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIvVXNlcnMvYWVrc2NvL2dpdGh1Yi9tYWdlbGxhbi9hcHAvY29mZmVlL21vZHVsZXMvc2VhcmNoL2VudGl0aWVzLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxJQUFBLHlDQUFBO0VBQUE7OztBQUFNOzs7Ozs7OzhCQUlKLGFBQUEsR0FBZSxTQUFBO0FBQUcsV0FBTyxJQUFJLENBQUMsU0FBTCxDQUFlLElBQUMsQ0FBQSxNQUFELENBQUEsQ0FBZixFQUEwQixJQUExQixFQUFnQyxDQUFoQztFQUFWOzs7O0dBSmUsUUFBUSxDQUFDOztBQVFuQzs7Ozs7OzttQ0FDSixLQUFBLEdBQU87Ozs7R0FENEIsUUFBUSxDQUFDOztBQUs5QyxNQUFNLENBQUMsT0FBUCxHQUNFO0VBQUEsS0FBQSxFQUFZLGlCQUFaO0VBQ0EsVUFBQSxFQUFZLHNCQURaIn0=

},{}],130:[function(require,module,exports){
var CsvViewer,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

CsvViewer = (function(superClass) {
  extend(CsvViewer, superClass);

  function CsvViewer() {
    return CsvViewer.__super__.constructor.apply(this, arguments);
  }

  CsvViewer.prototype.template = require('./templates/csv');

  CsvViewer.prototype.className = 'card card-block';

  CsvViewer.prototype.onRender = function() {
    var url;
    url = this.model.get('views').csv;
    return this.loadCsv(url);
  };

  CsvViewer.prototype.loadCsv = function(url) {
    var xhr;
    xhr = new XMLHttpRequest;
    xhr.open('GET', url, true);
    xhr.responseType = 'text';
    xhr.onload = (function(_this) {
      return function(e) {
        var status;
        status = xhr.status === 200 ? 'success' : 'error';
        if (status === 'success') {
          return _this.renderCsv(xhr.response);
        }
      };
    })(this);
    return xhr.send();
  };

  CsvViewer.prototype.renderCsv = function(text) {
    var container, parsedCSV;
    parsedCSV = d3.csvParseRows(text);
    return container = d3.select('.csv-viewer').append('table').selectAll('tr').data(parsedCSV).enter().append('tr').selectAll('td').data(function(d) {
      return d;
    }).enter().append('td').text(function(d) {
      return d;
    });
  };

  return CsvViewer;

})(Mn.LayoutView);

module.exports = CsvViewer;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL2Fla3Njby9naXRodWIvbWFnZWxsYW4vYXBwL2NvZmZlZS9tb2R1bGVzL3NlYXJjaC9mYWNldHNlYXJjaC92aWV3cy9jc3ZWaWV3ZXIuY29mZmVlIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiL1VzZXJzL2Fla3Njby9naXRodWIvbWFnZWxsYW4vYXBwL2NvZmZlZS9tb2R1bGVzL3NlYXJjaC9mYWNldHNlYXJjaC92aWV3cy9jc3ZWaWV3ZXIuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLElBQUEsU0FBQTtFQUFBOzs7QUFBTTs7Ozs7OztzQkFDSixRQUFBLEdBQVUsT0FBQSxDQUFRLGlCQUFSOztzQkFDVixTQUFBLEdBQVc7O3NCQUVYLFFBQUEsR0FBVSxTQUFBO0FBQ1IsUUFBQTtJQUFBLEdBQUEsR0FBTSxJQUFDLENBQUEsS0FBSyxDQUFDLEdBQVAsQ0FBVyxPQUFYLENBQW1CLENBQUM7V0FDMUIsSUFBQyxDQUFBLE9BQUQsQ0FBUyxHQUFUO0VBRlE7O3NCQUlWLE9BQUEsR0FBUyxTQUFDLEdBQUQ7QUFJUCxRQUFBO0lBQUEsR0FBQSxHQUFNLElBQUk7SUFDVixHQUFHLENBQUMsSUFBSixDQUFTLEtBQVQsRUFBZ0IsR0FBaEIsRUFBcUIsSUFBckI7SUFDQSxHQUFHLENBQUMsWUFBSixHQUFtQjtJQUduQixHQUFHLENBQUMsTUFBSixHQUFhLENBQUEsU0FBQSxLQUFBO2FBQUEsU0FBQyxDQUFEO0FBQ1gsWUFBQTtRQUFBLE1BQUEsR0FBWSxHQUFHLENBQUMsTUFBSixLQUFjLEdBQWpCLEdBQTBCLFNBQTFCLEdBQXlDO1FBR2xELElBQW1DLE1BQUEsS0FBVSxTQUE3QztBQUFBLGlCQUFPLEtBQUMsQ0FBQSxTQUFELENBQVcsR0FBRyxDQUFDLFFBQWYsRUFBUDs7TUFKVztJQUFBLENBQUEsQ0FBQSxDQUFBLElBQUE7V0FPYixHQUFHLENBQUMsSUFBSixDQUFBO0VBaEJPOztzQkFrQlQsU0FBQSxHQUFXLFNBQUMsSUFBRDtBQUlULFFBQUE7SUFBQSxTQUFBLEdBQVksRUFBRSxDQUFDLFlBQUgsQ0FBZ0IsSUFBaEI7V0FDWixTQUFBLEdBQVksRUFBRSxDQUFDLE1BQUgsQ0FBVSxhQUFWLENBQ1osQ0FBQyxNQURXLENBQ0osT0FESSxDQUVaLENBQUMsU0FGVyxDQUVELElBRkMsQ0FHWixDQUFDLElBSFcsQ0FHTixTQUhNLENBSVosQ0FBQyxLQUpXLENBQUEsQ0FLWixDQUFDLE1BTFcsQ0FLSixJQUxJLENBTVosQ0FBQyxTQU5XLENBTUQsSUFOQyxDQU9aLENBQUMsSUFQVyxDQU9OLFNBQUMsQ0FBRDthQUFPO0lBQVAsQ0FQTSxDQVFaLENBQUMsS0FSVyxDQUFBLENBUUosQ0FBQyxNQVJHLENBUUksSUFSSixDQVFTLENBQUMsSUFSVixDQVFlLFNBQUMsQ0FBRDthQUFPO0lBQVAsQ0FSZjtFQUxIOzs7O0dBMUJXLEVBQUUsQ0FBQzs7QUEyQzNCLE1BQU0sQ0FBQyxPQUFQLEdBQWlCIn0=

},{"./templates/csv":138}],131:[function(require,module,exports){

/**
 * Please note that when passing in custom templates for
 * listItemTemplate and orderByTemplate to keep the classes as
 * they are used in the code at other locations as well.
 */
var applyFilters, createEmptyFacetCollection, createFacetUI, defaults, filter, filterSingleItem, getFilterById, initFacetCount, order, resetFacetCount, setZeroCounts, settings, showMoreResults, sortFacetCollection, toggleFilter, updateFacetCollection, updateFacetUI, updateResults;

defaults = {
  items: [
    {
      a: 2,
      b: 1,
      c: 2
    }, {
      a: 2,
      b: 2,
      c: 1
    }, {
      a: 1,
      b: 1,
      c: 1
    }, {
      a: 3,
      b: 3,
      c: 1
    }
  ],
  facets: {
    'a': 'Title A',
    'b': 'Title B',
    'c': 'Title C'
  },
  resultElement: '#results',
  facetElement: '#facets',
  facetContainer: '<div class=facetsearch id=<%= id %> ></div>',
  facetTitleTemplate: '<h3 class=facettitle><i class="icon"></i><%= title %><i class="fa fa-fw help" data-toggle="tooltip" data-placement="right" title="<%= tooltip %>"></i><br><span class="prefix <%= prefix %>"><%= prefix %> : <%= _id %></span></h3>',
  facetListContainer: '<div class=facetlist></div>',
  listItemTemplate: '<div class="facetitem" id="<%= id %>"><%= name %> <span class="facetitemcount">(<%= count %>)</span></div>',
  bottomContainer: '<div class=bottomline></div>',
  orderByTemplate: '<div class=orderby><span class="orderby-title">Sort by: </span><ul><% _.each(options, function(value, key) { %>' + '<li class=orderbyitem id=orderby_<%= key %>>' + '<%= value %> </li> <% }); %></ul></div>',
  countTemplate: '<div class=facettotalcount>Results</div>',
  deselectTemplate: '<div class=deselectstartover>Deselect all filters</div>',
  resultTemplate: '<div class=facetresultbox><%= name %></div>',
  resultTemplateBypass: null,
  noResults: '<div class=results>Sorry, but no items match these criteria</div>',
  orderByOptions: {
    'a': 'by A',
    'b': 'by B',
    'RANDOM': 'by random'
  },
  state: {
    orderBy: false,
    filters: {}
  },
  showMoreTemplate: '<a id=showmorebutton>Show more</a>',
  enablePagination: true,
  paginationCount: 20
};


/**
 * This is the first function / variable that gets exported into the
 * jQuery namespace. Pass in your own settings (see above) to initialize
 * the faceted search
 */

settings = {};


/**
 * The following section contains the logic of the faceted search
 */


/**
 * initializes all facets and their individual filters
 */

createEmptyFacetCollection = function() {
  var facet, j, len, ref, results;
  ref = settings.facets;
  results = [];
  for (j = 0, len = ref.length; j < len; j++) {
    facet = ref[j];
    results.push(settings.facetCollection[facet.attribute] = {});
  }
  return results;
};

setZeroCounts = function() {
  var facet, facetitem, item, j, len, ref, results;
  ref = settings.items;
  results = [];
  for (j = 0, len = ref.length; j < len; j++) {
    item = ref[j];
    item = item.data;
    results.push((function() {
      var k, len1, ref1, results1;
      ref1 = settings.facets;
      results1 = [];
      for (k = 0, len1 = ref1.length; k < len1; k++) {
        facet = ref1[k];
        if ($.isArray(item[facet.attribute])) {
          results1.push((function() {
            var l, len2, ref2, results2;
            ref2 = item[facet.attribute];
            results2 = [];
            for (l = 0, len2 = ref2.length; l < len2; l++) {
              facetitem = ref2[l];
              if (typeof facetitem === 'object') {
                results2.push(settings.facetCollection[facet.attribute][facetitem['@id']] = settings.facetCollection[facet.attribute][facetitem['@id']] || {
                  count: 0,
                  id: _.uniqueId('facet_')
                });
              } else {
                results2.push(settings.facetCollection[facet.attribute][facetitem] = settings.facetCollection[facet.attribute][facetitem] || {
                  count: 0,
                  id: _.uniqueId('facet_')
                });
              }
            }
            return results2;
          })());
        } else if (typeof item[facet.attribute] === 'object' && item[facet.attribute]['@id']) {
          results1.push(settings.facetCollection[facet.attribute][item[facet.attribute]['@id']] = settings.facetCollection[facet.attribute][item[facet.attribute]['@id']] || {
            count: 0,
            id: _.uniqueId('facet_')
          });
        } else {
          if (item[facet.attribute] !== void 0) {
            results1.push(settings.facetCollection[facet.attribute][item[facet.attribute]] = settings.facetCollection[facet.attribute][item[facet.attribute]] || {
              count: 0,
              id: _.uniqueId('facet_')
            });
          } else {
            results1.push(void 0);
          }
        }
      }
      return results1;
    })());
  }
  return results;
};

sortFacetCollection = function() {
  var el, facet, facettitle, j, len, ref, results, sorted, sortedstore;
  ref = settings.facetCollection;
  results = [];
  for (facettitle in ref) {
    facet = ref[facettitle];
    sorted = _.keys(settings.facetCollection[facettitle]).sort();
    if (settings.facet_SortOption && settings.facet_SortOption[facettitle]) {
      sorted = _.union(settings.facet_SortOption[facettitle], sorted);
    }
    sortedstore = {};
    for (j = 0, len = sorted.length; j < len; j++) {
      el = sorted[j];
      sortedstore[el] = settings.facetCollection[facettitle][el];
    }
    results.push(settings.facetCollection[facettitle] = sortedstore);
  }
  return results;
};

initFacetCount = function() {
  createEmptyFacetCollection();
  setZeroCounts();
  return sortFacetCollection();
};


/**
 * resets the facet count
 */

resetFacetCount = function() {
  var facetname, itemname, items, ref, results, value;
  ref = settings.facetCollection;
  results = [];
  for (facetname in ref) {
    items = ref[facetname];
    results.push((function() {
      var results1;
      results1 = [];
      for (itemname in items) {
        value = items[itemname];
        results1.push(settings.facetCollection[facetname][itemname].count = 0);
      }
      return results1;
    })());
  }
  return results;
};


/**
 * Filters all items from the settings according to the currently
 * set filters and stores the results in the settings.currentResults.
 * The number of items in each filter from each facet is also updated
 */

filterSingleItem = function(item) {
  var f, facet, filter, filtersApply, inters, j, len, ref, ref1;
  filtersApply = true;
  item = item.data;
  ref = settings.state.filters;
  for (facet in ref) {
    filter = ref[facet];
    if ($.isArray(item[facet])) {
      if (item[facet][0] && typeof item[facet][0] === 'object') {
        ref1 = item[facet];
        for (j = 0, len = ref1.length; j < len; j++) {
          f = ref1[j];
          if (filter.length && _.indexOf(filter, f['@id']) === -1) {
            filtersApply = false;
          }
        }
      } else {
        inters = _.intersection(item[facet], filter);
        if (inters.length === 0) {
          filtersApply = false;
        }
      }
    } else if (typeof item[facet] === 'object' && item[facet]['@id']) {
      if (filter.length && _.indexOf(filter, item[facet]['@id']) === -1) {
        filtersApply = false;
      }
    } else {
      if (filter.length && _.indexOf(filter, item[facet]) === -1) {
        filtersApply = false;
      }
    }
  }
  return filtersApply;
};

applyFilters = function() {
  return settings.currentResults = _.select(settings.items, filterSingleItem);
};

updateFacetCollection = function() {
  var facet, item, j, len, ref, results;
  ref = settings.facets;
  results = [];
  for (j = 0, len = ref.length; j < len; j++) {
    facet = ref[j];
    results.push((function() {
      var k, len1, ref1, results1;
      ref1 = settings.currentResults;
      results1 = [];
      for (k = 0, len1 = ref1.length; k < len1; k++) {
        item = ref1[k];
        item = item.data;
        if ($.isArray(item[facet.attribute])) {
          results1.push(_.each(item[facet.attribute], function(facetitem) {
            if (typeof facetitem === 'object') {
              return settings.facetCollection[facet.attribute][facetitem['@id']].count += 1;
            } else {
              settings.facetCollection[facet.attribute][facetitem].count += 1;
            }
          }));
        } else if (typeof item[facet.attribute] === 'object' && item[facet.attribute]['@id']) {
          if (item[facet.attribute]['@id'] !== void 0) {
            results1.push(settings.facetCollection[facet.attribute][item[facet.attribute]['@id']].count += 1);
          } else {
            results1.push(void 0);
          }
        } else {
          if (item[facet.attribute] !== void 0) {
            results1.push(settings.facetCollection[facet.attribute][item[facet.attribute]].count += 1);
          } else {
            results1.push(void 0);
          }
        }
      }
      return results1;
    })());
  }
  return results;
};

filter = function() {
  applyFilters();
  resetFacetCount();
  updateFacetCollection();
  settings.state.shownResults = 0;
};


/**
 * Orders the currentResults according to the settings.state.orderBy variable
 */

order = function() {
  if (settings.state.orderBy) {
    $('.activeorderby').removeClass('activeorderby');
    $('#orderby_' + settings.state.orderBy).addClass('activeorderby');
    return settings.currentResults = _.sortBy(settings.currentResults, function(item) {
      if (settings.state.orderBy === 'RANDOM') {
        return Math.random() * 10000;
      } else {
        return item[settings.state.orderBy];
      }
    });
  }
};


/**
 * The given facetname and filtername are activated or deactivated
 * depending on what they were beforehand. This causes the items to
 * be filtered again and the UI is updated accordingly.
 */

toggleFilter = function(key, value) {
  settings.state.filters[key] = settings.state.filters[key] || [];
  if (_.indexOf(settings.state.filters[key], value) === -1) {
    settings.state.filters[key].push(value);
  } else {
    settings.state.filters[key] = _.without(settings.state.filters[key], value);
    if (settings.state.filters[key].length === 0) {
      delete settings.state.filters[key];
    }
  }
  filter();
};


/**
 * The following section contains the presentation of the faceted search
 */


/**
 * This function is only called once, it creates the facets ui.
 */

createFacetUI = function() {
  var bottom, containertemplate, countHtml, deselect, facet, facetHtml, facetItem, facetItemHtml, facetlist, itemHtml, itemtemplate, j, len, ordertemplate, ref, titletemplate;
  itemtemplate = _.template(settings.listItemTemplate);
  titletemplate = _.template(settings.facetTitleTemplate);
  containertemplate = _.template(settings.facetContainer);
  $(settings.facetElement).html('');
  ref = settings.facets;
  for (j = 0, len = ref.length; j < len; j++) {
    facet = ref[j];
    facetHtml = $(containertemplate({
      id: facet.attribute
    }));
    facetItem = {
      title: facet.label,
      tooltip: facet.tooltip,
      prefix: facet.prefix,
      _id: facet._id
    };
    facetItemHtml = $(titletemplate(facetItem));
    facetHtml.append(facetItemHtml);
    facetlist = $(settings.facetListContainer);
    _.each(settings.facetCollection[facet.attribute], function(filter, filtername) {
      var filteritem, item, splitName;
      splitName = filtername.trim().split('/');
      filtername = splitName.pop();
      filtername || (filtername = splitName.pop());
      item = {
        id: filter.id,
        name: filtername,
        count: filter.count
      };
      filteritem = $(itemtemplate(item));
      if (_.indexOf(settings.state.filters[facet.attribute], filtername) >= 0) {
        filteritem.addClass('activefacet');
      }
      if (item.count === 0) {
        filteritem.addClass('no-match');
      }
      facetlist.append(filteritem);
    });
    facetHtml.append(facetlist);
    $(settings.facetElement).append(facetHtml);
    $('[data-toggle=tooltip]').tooltip();
  }
  $('.facetitem').click(function(event) {
    var filter;
    filter = getFilterById(this.id);
    toggleFilter(filter.facetname, filter.filtername);
    order();
    updateFacetUI();
    updateResults();
  });
  bottom = $(settings.bottomContainer);
  countHtml = _.template(settings.countTemplate, {
    count: settings.currentResults.length || 0
  });
  $(bottom).append(countHtml);
  ordertemplate = _.template(settings.orderByTemplate);
  itemHtml = $(ordertemplate({
    'options': settings.orderByOptions
  }));
  $(bottom).append(itemHtml);
  $(settings.facetElement).append(bottom);
  $('.orderbyitem').each(function() {
    var id;
    id = this.id.substr(8);
    if (settings.state.orderBy === id) {
      $(this).addClass('activeorderby');
    }
  });
  $('.orderbyitem').click(function(event) {
    var id;
    id = this.id.substr(8);
    settings.state.orderBy = id;
    settings.state.shownResults = 0;
    order();
    updateResults();
  });
  deselect = $(settings.deselectTemplate).click(function(event) {
    settings.state.filters = {};
    jQuery.facetUpdate();
  });
  $(bottom).append(deselect);
};


/**
 * get a facetname and filtername by the unique id that is created in the beginning
 */

getFilterById = function(id) {
  var result;
  result = false;
  _.each(settings.facetCollection, function(facet, facetname) {
    _.each(facet, function(filter, filtername) {
      if (filter.id === id) {
        result = {
          'facetname': facetname,
          'filtername': filtername
        };
      }
    });
  });
  return result;
};


/**
 * This function is only called whenever a filter has been added or removed
 * It adds a class to the active filters and shows the correct number for each
 */

updateFacetUI = function() {
  var countHtml, itemtemplate;
  itemtemplate = _.template(settings.listItemTemplate);
  _.each(settings.facetCollection, function(facet, facetname) {
    _.each(facet, function(filter, filtername) {
      var filteritem, item, splitName;
      splitName = filtername.trim().split('/');
      filtername = splitName.pop();
      filtername || (filtername = splitName.pop());
      item = {
        id: filter.id,
        name: filtername,
        count: filter.count
      };
      filteritem = $(itemtemplate(item)).html();
      $('#' + filter.id).html(filteritem);
      if (settings.state.filters[facetname] && _.indexOf(settings.state.filters[facetname], filtername) >= 0) {
        $('#' + filter.id).addClass('activefacet');
      } else {
        $('#' + filter.id).removeClass('activefacet');
      }
      if (filter.count === 0) {
        $('#' + filter.id).addClass('no-match');
      } else {
        $('#' + filter.id).removeClass('no-match');
      }
    });
  });
  countHtml = _.template(settings.countTemplate, {
    count: settings.currentResults.length
  });
  $(settings.facetElement + ' .facettotalcount').replaceWith(countHtml);
};


/**
 * Updates the the list of results according to the filters that have been set
 */

updateResults = function() {
  $(settings.resultElement).html(settings.currentResults.length === 0 ? settings.noResults : '');
  showMoreResults();
};

showMoreResults = function() {
  var itemHtml;
  var i, item, itemHtml, showNowCount, template;
  showNowCount = settings.enablePagination ? Math.min(settings.currentResults.length - settings.state.shownResults, settings.paginationCount) : settings.currentResults.length;
  itemHtml = '';
  if (settings.beforeResultRender) {
    settings.beforeResultRender();
  }
  template = _.template(settings.resultTemplate);
  i = settings.state.shownResults;
  while (i < settings.state.shownResults + showNowCount) {
    item = settings.currentResults[i];
    if (settings.resultTemplateBypass) {
      settings.resultTemplateBypass(item);
    } else {
      itemHtml = itemHtml + template(item);
    }
    i++;
  }
  return $(settings.resultElement).append(itemHtml);
};

jQuery.facetelize = $.facetelize = function(usersettings) {
  $.extend(settings, defaults, usersettings);
  settings.currentResults = [];
  settings.facetCollection = {};
  $(settings.facetElement).data('settings', settings);
  window.state = settings.state;
  initFacetCount();
  filter();
  order();
  updateResults();
  createFacetUI();
  return settings.state;
};


/**
 * This is the second function / variable that gets exported into the
 * jQuery namespace. Use it to update everything if you messed with
 * the settings object
 */

jQuery.facetUpdate = function() {
  filter();
  order();
  updateFacetUI();
  updateResults();
};

jQuery.clearFacets = function() {
  settings.state.filters = {};
  jQuery.facetUpdate();
};

return;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL2Fla3Njby9naXRodWIvbWFnZWxsYW4vYXBwL2NvZmZlZS9tb2R1bGVzL3NlYXJjaC9mYWNldHNlYXJjaC92aWV3cy9lbmdpbmUuY29mZmVlIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiL1VzZXJzL2Fla3Njby9naXRodWIvbWFnZWxsYW4vYXBwL2NvZmZlZS9tb2R1bGVzL3NlYXJjaC9mYWNldHNlYXJjaC92aWV3cy9lbmdpbmUuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFDQTs7Ozs7QUFBQSxJQUFBOztBQU9BLFFBQUEsR0FDRTtFQUFBLEtBQUEsRUFBTztJQUFDO01BQUMsQ0FBQSxFQUFFLENBQUg7TUFBSyxDQUFBLEVBQUUsQ0FBUDtNQUFTLENBQUEsRUFBRSxDQUFYO0tBQUQsRUFBZTtNQUFDLENBQUEsRUFBRSxDQUFIO01BQUssQ0FBQSxFQUFFLENBQVA7TUFBUyxDQUFBLEVBQUUsQ0FBWDtLQUFmLEVBQTZCO01BQUMsQ0FBQSxFQUFFLENBQUg7TUFBSyxDQUFBLEVBQUUsQ0FBUDtNQUFTLENBQUEsRUFBRSxDQUFYO0tBQTdCLEVBQTJDO01BQUMsQ0FBQSxFQUFFLENBQUg7TUFBSyxDQUFBLEVBQUUsQ0FBUDtNQUFTLENBQUEsRUFBRSxDQUFYO0tBQTNDO0dBQVA7RUFDQSxNQUFBLEVBQVE7SUFBQyxHQUFBLEVBQUssU0FBTjtJQUFpQixHQUFBLEVBQUssU0FBdEI7SUFBaUMsR0FBQSxFQUFLLFNBQXRDO0dBRFI7RUFFQSxhQUFBLEVBQWUsVUFGZjtFQUdBLFlBQUEsRUFBYyxTQUhkO0VBSUEsY0FBQSxFQUFnQiw2Q0FKaEI7RUFLQSxrQkFBQSxFQUFvQixxT0FMcEI7RUFNQSxrQkFBQSxFQUFvQiw2QkFOcEI7RUFPQSxnQkFBQSxFQUFrQiw0R0FQbEI7RUFRQSxlQUFBLEVBQWlCLDhCQVJqQjtFQVNBLGVBQUEsRUFBaUIsaUhBQUEsR0FBb0gsOENBQXBILEdBQXFLLHlDQVR0TDtFQVVBLGFBQUEsRUFBZSwwQ0FWZjtFQVdBLGdCQUFBLEVBQWtCLHlEQVhsQjtFQVlBLGNBQUEsRUFBZ0IsNkNBWmhCO0VBYUEsb0JBQUEsRUFBc0IsSUFidEI7RUFjQSxTQUFBLEVBQVcsbUVBZFg7RUFlQSxjQUFBLEVBQ0U7SUFBQSxHQUFBLEVBQUssTUFBTDtJQUNBLEdBQUEsRUFBSyxNQURMO0lBRUEsUUFBQSxFQUFVLFdBRlY7R0FoQkY7RUFtQkEsS0FBQSxFQUNFO0lBQUEsT0FBQSxFQUFTLEtBQVQ7SUFDQSxPQUFBLEVBQVMsRUFEVDtHQXBCRjtFQXNCQSxnQkFBQSxFQUFrQixvQ0F0QmxCO0VBdUJBLGdCQUFBLEVBQWtCLElBdkJsQjtFQXdCQSxlQUFBLEVBQWlCLEVBeEJqQjs7OztBQTBCRjs7Ozs7O0FBTUEsUUFBQSxHQUFXOzs7QUFFWDs7Ozs7QUFJQTs7OztBQU9BLDBCQUFBLEdBQTZCLFNBQUE7QUFDM0IsTUFBQTtBQUFBO0FBQUE7T0FBQSxxQ0FBQTs7aUJBQ0UsUUFBUSxDQUFDLGVBQWdCLENBQUEsS0FBSyxDQUFDLFNBQU4sQ0FBekIsR0FBNEM7QUFEOUM7O0FBRDJCOztBQU03QixhQUFBLEdBQWdCLFNBQUE7QUFHZCxNQUFBO0FBQUE7QUFBQTtPQUFBLHFDQUFBOztJQUdFLElBQUEsR0FBTyxJQUFJLENBQUM7OztBQUdaO0FBQUE7V0FBQSx3Q0FBQTs7UUFHRSxJQUFHLENBQUMsQ0FBQyxPQUFGLENBQVUsSUFBSyxDQUFBLEtBQUssQ0FBQyxTQUFOLENBQWYsQ0FBSDs7O0FBRUU7QUFBQTtpQkFBQSx3Q0FBQTs7Y0FFRSxJQUFHLE9BQU8sU0FBUCxLQUFvQixRQUF2Qjs4QkFDRSxRQUFRLENBQUMsZUFBZ0IsQ0FBQSxLQUFLLENBQUMsU0FBTixDQUFpQixDQUFBLFNBQVUsQ0FBQSxLQUFBLENBQVYsQ0FBMUMsR0FBOEQsUUFBUSxDQUFDLGVBQWdCLENBQUEsS0FBSyxDQUFDLFNBQU4sQ0FBaUIsQ0FBQSxTQUFVLENBQUEsS0FBQSxDQUFWLENBQTFDLElBQzVEO2tCQUFBLEtBQUEsRUFBTyxDQUFQO2tCQUNBLEVBQUEsRUFBSSxDQUFDLENBQUMsUUFBRixDQUFXLFFBQVgsQ0FESjttQkFGSjtlQUFBLE1BQUE7OEJBTUUsUUFBUSxDQUFDLGVBQWdCLENBQUEsS0FBSyxDQUFDLFNBQU4sQ0FBaUIsQ0FBQSxTQUFBLENBQTFDLEdBQXVELFFBQVEsQ0FBQyxlQUFnQixDQUFBLEtBQUssQ0FBQyxTQUFOLENBQWlCLENBQUEsU0FBQSxDQUExQyxJQUNyRDtrQkFBQSxLQUFBLEVBQU8sQ0FBUDtrQkFDQSxFQUFBLEVBQUksQ0FBQyxDQUFDLFFBQUYsQ0FBVyxRQUFYLENBREo7bUJBUEo7O0FBRkY7O2dCQUZGO1NBQUEsTUFlSyxJQUFHLE9BQU8sSUFBSyxDQUFBLEtBQUssQ0FBQyxTQUFOLENBQVosS0FBaUMsUUFBakMsSUFBNkMsSUFBSyxDQUFBLEtBQUssQ0FBQyxTQUFOLENBQWlCLENBQUEsS0FBQSxDQUF0RTt3QkFDSCxRQUFRLENBQUMsZUFBZ0IsQ0FBQSxLQUFLLENBQUMsU0FBTixDQUFpQixDQUFBLElBQUssQ0FBQSxLQUFLLENBQUMsU0FBTixDQUFpQixDQUFBLEtBQUEsQ0FBdEIsQ0FBMUMsR0FBMEUsUUFBUSxDQUFDLGVBQWdCLENBQUEsS0FBSyxDQUFDLFNBQU4sQ0FBaUIsQ0FBQSxJQUFLLENBQUEsS0FBSyxDQUFDLFNBQU4sQ0FBaUIsQ0FBQSxLQUFBLENBQXRCLENBQTFDLElBQ3hFO1lBQUEsS0FBQSxFQUFPLENBQVA7WUFDQSxFQUFBLEVBQUksQ0FBQyxDQUFDLFFBQUYsQ0FBVyxRQUFYLENBREo7YUFGQztTQUFBLE1BQUE7VUFPSCxJQUFHLElBQUssQ0FBQSxLQUFLLENBQUMsU0FBTixDQUFMLEtBQXlCLE1BQTVCOzBCQUNFLFFBQVEsQ0FBQyxlQUFnQixDQUFBLEtBQUssQ0FBQyxTQUFOLENBQWlCLENBQUEsSUFBSyxDQUFBLEtBQUssQ0FBQyxTQUFOLENBQUwsQ0FBMUMsR0FBbUUsUUFBUSxDQUFDLGVBQWdCLENBQUEsS0FBSyxDQUFDLFNBQU4sQ0FBaUIsQ0FBQSxJQUFLLENBQUEsS0FBSyxDQUFDLFNBQU4sQ0FBTCxDQUExQyxJQUNqRTtjQUFBLEtBQUEsRUFBTyxDQUFQO2NBQ0EsRUFBQSxFQUFJLENBQUMsQ0FBQyxRQUFGLENBQVcsUUFBWCxDQURKO2VBRko7V0FBQSxNQUFBO2tDQUFBO1dBUEc7O0FBbEJQOzs7QUFORjs7QUFIYzs7QUF5Q2hCLG1CQUFBLEdBQXNCLFNBQUE7QUFFcEIsTUFBQTtBQUFBO0FBQUE7T0FBQSxpQkFBQTs7SUFFRSxNQUFBLEdBQVMsQ0FBQyxDQUFDLElBQUYsQ0FBTyxRQUFRLENBQUMsZUFBZ0IsQ0FBQSxVQUFBLENBQWhDLENBQTRDLENBQUMsSUFBN0MsQ0FBQTtJQUVULElBQUcsUUFBUSxDQUFDLGdCQUFULElBQThCLFFBQVEsQ0FBQyxnQkFBaUIsQ0FBQSxVQUFBLENBQTNEO01BQ0UsTUFBQSxHQUFTLENBQUMsQ0FBQyxLQUFGLENBQVEsUUFBUSxDQUFDLGdCQUFpQixDQUFBLFVBQUEsQ0FBbEMsRUFBK0MsTUFBL0MsRUFEWDs7SUFHQSxXQUFBLEdBQWM7QUFFZCxTQUFBLHdDQUFBOztNQUNFLFdBQVksQ0FBQSxFQUFBLENBQVosR0FBa0IsUUFBUSxDQUFDLGVBQWdCLENBQUEsVUFBQSxDQUFZLENBQUEsRUFBQTtBQUR6RDtpQkFHQSxRQUFRLENBQUMsZUFBZ0IsQ0FBQSxVQUFBLENBQXpCLEdBQXVDO0FBWnpDOztBQUZvQjs7QUFpQnRCLGNBQUEsR0FBaUIsU0FBQTtFQUdmLDBCQUFBLENBQUE7RUFHQSxhQUFBLENBQUE7U0FHQSxtQkFBQSxDQUFBO0FBVGU7OztBQVdqQjs7OztBQUlBLGVBQUEsR0FBa0IsU0FBQTtBQUNoQixNQUFBO0FBQUE7QUFBQTtPQUFBLGdCQUFBOzs7O0FBQ0U7V0FBQSxpQkFBQTs7c0JBQ0UsUUFBUSxDQUFDLGVBQWdCLENBQUEsU0FBQSxDQUFXLENBQUEsUUFBQSxDQUFTLENBQUMsS0FBOUMsR0FBc0Q7QUFEeEQ7OztBQURGOztBQURnQjs7O0FBS2xCOzs7Ozs7QUFNQSxnQkFBQSxHQUFtQixTQUFDLElBQUQ7QUFFakIsTUFBQTtFQUFBLFlBQUEsR0FBZTtFQUdmLElBQUEsR0FBTyxJQUFJLENBQUM7QUFHWjtBQUFBLE9BQUEsWUFBQTs7SUFJRSxJQUFHLENBQUMsQ0FBQyxPQUFGLENBQVUsSUFBSyxDQUFBLEtBQUEsQ0FBZixDQUFIO01BRUUsSUFBRyxJQUFLLENBQUEsS0FBQSxDQUFPLENBQUEsQ0FBQSxDQUFaLElBQWtCLE9BQU8sSUFBSyxDQUFBLEtBQUEsQ0FBTyxDQUFBLENBQUEsQ0FBbkIsS0FBMEIsUUFBL0M7QUFDRTtBQUFBLGFBQUEsc0NBQUE7O1VBRUUsSUFBRyxNQUFNLENBQUMsTUFBUCxJQUFrQixDQUFDLENBQUMsT0FBRixDQUFVLE1BQVYsRUFBa0IsQ0FBRSxDQUFBLEtBQUEsQ0FBcEIsQ0FBQSxLQUErQixDQUFDLENBQXJEO1lBQ0UsWUFBQSxHQUFlLE1BRGpCOztBQUZGLFNBREY7T0FBQSxNQUFBO1FBT0UsTUFBQSxHQUFTLENBQUMsQ0FBQyxZQUFGLENBQWUsSUFBSyxDQUFBLEtBQUEsQ0FBcEIsRUFBNEIsTUFBNUI7UUFDVCxJQUFHLE1BQU0sQ0FBQyxNQUFQLEtBQWlCLENBQXBCO1VBQ0UsWUFBQSxHQUFlLE1BRGpCO1NBUkY7T0FGRjtLQUFBLE1BYUssSUFBRyxPQUFPLElBQUssQ0FBQSxLQUFBLENBQVosS0FBdUIsUUFBdkIsSUFBbUMsSUFBSyxDQUFBLEtBQUEsQ0FBTyxDQUFBLEtBQUEsQ0FBbEQ7TUFDSCxJQUFHLE1BQU0sQ0FBQyxNQUFQLElBQWtCLENBQUMsQ0FBQyxPQUFGLENBQVUsTUFBVixFQUFrQixJQUFLLENBQUEsS0FBQSxDQUFPLENBQUEsS0FBQSxDQUE5QixDQUFBLEtBQXlDLENBQUMsQ0FBL0Q7UUFDRSxZQUFBLEdBQWUsTUFEakI7T0FERztLQUFBLE1BQUE7TUFLSCxJQUFHLE1BQU0sQ0FBQyxNQUFQLElBQWtCLENBQUMsQ0FBQyxPQUFGLENBQVUsTUFBVixFQUFrQixJQUFLLENBQUEsS0FBQSxDQUF2QixDQUFBLEtBQWtDLENBQUMsQ0FBeEQ7UUFDRSxZQUFBLEdBQWUsTUFEakI7T0FMRzs7QUFqQlA7QUEwQkEsU0FBTztBQWxDVTs7QUF1Q25CLFlBQUEsR0FBZSxTQUFBO1NBQ2IsUUFBUSxDQUFDLGNBQVQsR0FBMEIsQ0FBQyxDQUFDLE1BQUYsQ0FBUyxRQUFRLENBQUMsS0FBbEIsRUFBeUIsZ0JBQXpCO0FBRGI7O0FBS2YscUJBQUEsR0FBd0IsU0FBQTtBQUd0QixNQUFBO0FBQUE7QUFBQTtPQUFBLHFDQUFBOzs7O0FBSUU7QUFBQTtXQUFBLHdDQUFBOztRQUVFLElBQUEsR0FBTyxJQUFJLENBQUM7UUFJWixJQUFHLENBQUMsQ0FBQyxPQUFGLENBQVUsSUFBSyxDQUFBLEtBQUssQ0FBQyxTQUFOLENBQWYsQ0FBSDt3QkFDRSxDQUFDLENBQUMsSUFBRixDQUFPLElBQUssQ0FBQSxLQUFLLENBQUMsU0FBTixDQUFaLEVBQThCLFNBQUMsU0FBRDtZQUU1QixJQUFHLE9BQU8sU0FBUCxLQUFxQixRQUF4QjtxQkFDRSxRQUFRLENBQUMsZUFBZ0IsQ0FBQSxLQUFLLENBQUMsU0FBTixDQUFpQixDQUFBLFNBQVUsQ0FBQSxLQUFBLENBQVYsQ0FBaUIsQ0FBQyxLQUE1RCxJQUFxRSxFQUR2RTthQUFBLE1BQUE7Y0FJRSxRQUFRLENBQUMsZUFBZ0IsQ0FBQSxLQUFLLENBQUMsU0FBTixDQUFpQixDQUFBLFNBQUEsQ0FBVSxDQUFDLEtBQXJELElBQThELEVBSmhFOztVQUY0QixDQUE5QixHQURGO1NBQUEsTUFVSyxJQUFHLE9BQU8sSUFBSyxDQUFBLEtBQUssQ0FBQyxTQUFOLENBQVosS0FBaUMsUUFBakMsSUFBNkMsSUFBSyxDQUFBLEtBQUssQ0FBQyxTQUFOLENBQWlCLENBQUEsS0FBQSxDQUF0RTtVQUNILElBQUcsSUFBSyxDQUFBLEtBQUssQ0FBQyxTQUFOLENBQWlCLENBQUEsS0FBQSxDQUF0QixLQUFnQyxNQUFuQzswQkFDRSxRQUFRLENBQUMsZUFBZ0IsQ0FBQSxLQUFLLENBQUMsU0FBTixDQUFpQixDQUFBLElBQUssQ0FBQSxLQUFLLENBQUMsU0FBTixDQUFpQixDQUFBLEtBQUEsQ0FBdEIsQ0FBNkIsQ0FBQyxLQUF4RSxJQUFpRixHQURuRjtXQUFBLE1BQUE7a0NBQUE7V0FERztTQUFBLE1BQUE7VUFLSCxJQUFHLElBQUssQ0FBQSxLQUFLLENBQUMsU0FBTixDQUFMLEtBQXlCLE1BQTVCOzBCQUNFLFFBQVEsQ0FBQyxlQUFnQixDQUFBLEtBQUssQ0FBQyxTQUFOLENBQWlCLENBQUEsSUFBSyxDQUFBLEtBQUssQ0FBQyxTQUFOLENBQUwsQ0FBc0IsQ0FBQyxLQUFqRSxJQUEwRSxHQUQ1RTtXQUFBLE1BQUE7a0NBQUE7V0FMRzs7QUFoQlA7OztBQUpGOztBQUhzQjs7QUFpQ3hCLE1BQUEsR0FBUyxTQUFBO0VBR1AsWUFBQSxDQUFBO0VBU0EsZUFBQSxDQUFBO0VBR0EscUJBQUEsQ0FBQTtFQUdBLFFBQVEsQ0FBQyxLQUFLLENBQUMsWUFBZixHQUE4QjtBQWxCdkI7OztBQXFCVDs7OztBQUlBLEtBQUEsR0FBUSxTQUFBO0VBQ04sSUFBRyxRQUFRLENBQUMsS0FBSyxDQUFDLE9BQWxCO0lBR0UsQ0FBQSxDQUFFLGdCQUFGLENBQW1CLENBQUMsV0FBcEIsQ0FBZ0MsZUFBaEM7SUFDQSxDQUFBLENBQUUsV0FBQSxHQUFjLFFBQVEsQ0FBQyxLQUFLLENBQUMsT0FBL0IsQ0FBdUMsQ0FBQyxRQUF4QyxDQUFpRCxlQUFqRDtXQUdBLFFBQVEsQ0FBQyxjQUFULEdBQTBCLENBQUMsQ0FBQyxNQUFGLENBQVMsUUFBUSxDQUFDLGNBQWxCLEVBQWtDLFNBQUMsSUFBRDtNQUMxRCxJQUFHLFFBQVEsQ0FBQyxLQUFLLENBQUMsT0FBZixLQUEwQixRQUE3QjtlQUNFLElBQUksQ0FBQyxNQUFMLENBQUEsQ0FBQSxHQUFnQixNQURsQjtPQUFBLE1BQUE7ZUFHRSxJQUFLLENBQUEsUUFBUSxDQUFDLEtBQUssQ0FBQyxPQUFmLEVBSFA7O0lBRDBELENBQWxDLEVBUDVCOztBQURNOzs7QUFjUjs7Ozs7O0FBTUEsWUFBQSxHQUFlLFNBQUMsR0FBRCxFQUFNLEtBQU47RUFDYixRQUFRLENBQUMsS0FBSyxDQUFDLE9BQVEsQ0FBQSxHQUFBLENBQXZCLEdBQThCLFFBQVEsQ0FBQyxLQUFLLENBQUMsT0FBUSxDQUFBLEdBQUEsQ0FBdkIsSUFBK0I7RUFFN0QsSUFBRyxDQUFDLENBQUMsT0FBRixDQUFVLFFBQVEsQ0FBQyxLQUFLLENBQUMsT0FBUSxDQUFBLEdBQUEsQ0FBakMsRUFBdUMsS0FBdkMsQ0FBQSxLQUFpRCxDQUFDLENBQXJEO0lBQ0UsUUFBUSxDQUFDLEtBQUssQ0FBQyxPQUFRLENBQUEsR0FBQSxDQUFJLENBQUMsSUFBNUIsQ0FBaUMsS0FBakMsRUFERjtHQUFBLE1BQUE7SUFJRSxRQUFRLENBQUMsS0FBSyxDQUFDLE9BQVEsQ0FBQSxHQUFBLENBQXZCLEdBQThCLENBQUMsQ0FBQyxPQUFGLENBQVUsUUFBUSxDQUFDLEtBQUssQ0FBQyxPQUFRLENBQUEsR0FBQSxDQUFqQyxFQUF1QyxLQUF2QztJQUM5QixJQUFHLFFBQVEsQ0FBQyxLQUFLLENBQUMsT0FBUSxDQUFBLEdBQUEsQ0FBSSxDQUFDLE1BQTVCLEtBQXNDLENBQXpDO01BQ0UsT0FBTyxRQUFRLENBQUMsS0FBSyxDQUFDLE9BQVEsQ0FBQSxHQUFBLEVBRGhDO0tBTEY7O0VBUUEsTUFBQSxDQUFBO0FBWGE7OztBQWNmOzs7OztBQUlBOzs7O0FBSUEsYUFBQSxHQUFnQixTQUFBO0FBR2QsTUFBQTtFQUFBLFlBQUEsR0FBZSxDQUFDLENBQUMsUUFBRixDQUFXLFFBQVEsQ0FBQyxnQkFBcEI7RUFDZixhQUFBLEdBQWdCLENBQUMsQ0FBQyxRQUFGLENBQVcsUUFBUSxDQUFDLGtCQUFwQjtFQUNoQixpQkFBQSxHQUFvQixDQUFDLENBQUMsUUFBRixDQUFXLFFBQVEsQ0FBQyxjQUFwQjtFQUNwQixDQUFBLENBQUUsUUFBUSxDQUFDLFlBQVgsQ0FBd0IsQ0FBQyxJQUF6QixDQUE4QixFQUE5QjtBQUdBO0FBQUEsT0FBQSxxQ0FBQTs7SUFDRSxTQUFBLEdBQVksQ0FBQSxDQUFFLGlCQUFBLENBQWtCO01BQUEsRUFBQSxFQUFJLEtBQUssQ0FBQyxTQUFWO0tBQWxCLENBQUY7SUFHWixTQUFBLEdBQ0U7TUFBQSxLQUFBLEVBQVUsS0FBSyxDQUFDLEtBQWhCO01BQ0EsT0FBQSxFQUFVLEtBQUssQ0FBQyxPQURoQjtNQUVBLE1BQUEsRUFBVSxLQUFLLENBQUMsTUFGaEI7TUFHQSxHQUFBLEVBQVUsS0FBSyxDQUFDLEdBSGhCOztJQUtGLGFBQUEsR0FBZ0IsQ0FBQSxDQUFFLGFBQUEsQ0FBYyxTQUFkLENBQUY7SUFDaEIsU0FBUyxDQUFDLE1BQVYsQ0FBaUIsYUFBakI7SUFDQSxTQUFBLEdBQVksQ0FBQSxDQUFFLFFBQVEsQ0FBQyxrQkFBWDtJQUdaLENBQUMsQ0FBQyxJQUFGLENBQU8sUUFBUSxDQUFDLGVBQWdCLENBQUEsS0FBSyxDQUFDLFNBQU4sQ0FBaEMsRUFBa0QsU0FBQyxNQUFELEVBQVMsVUFBVDtBQUloRCxVQUFBO01BQUEsU0FBQSxHQUFjLFVBQVUsQ0FBQyxJQUFYLENBQUEsQ0FBaUIsQ0FBQyxLQUFsQixDQUF3QixHQUF4QjtNQUNkLFVBQUEsR0FBYyxTQUFTLENBQUMsR0FBVixDQUFBO01BQ2QsZUFBQSxhQUFlLFNBQVMsQ0FBQyxHQUFWLENBQUE7TUFFZixJQUFBLEdBQ0U7UUFBQSxFQUFBLEVBQUksTUFBTSxDQUFDLEVBQVg7UUFDQSxJQUFBLEVBQU0sVUFETjtRQUVBLEtBQUEsRUFBTyxNQUFNLENBQUMsS0FGZDs7TUFNRixVQUFBLEdBQWEsQ0FBQSxDQUFFLFlBQUEsQ0FBYSxJQUFiLENBQUY7TUFDYixJQUFHLENBQUMsQ0FBQyxPQUFGLENBQVUsUUFBUSxDQUFDLEtBQUssQ0FBQyxPQUFRLENBQUEsS0FBSyxDQUFDLFNBQU4sQ0FBakMsRUFBbUQsVUFBbkQsQ0FBQSxJQUFrRSxDQUFyRTtRQUNFLFVBQVUsQ0FBQyxRQUFYLENBQW9CLGFBQXBCLEVBREY7O01BR0EsSUFBRyxJQUFJLENBQUMsS0FBTCxLQUFjLENBQWpCO1FBQ0UsVUFBVSxDQUFDLFFBQVgsQ0FBb0IsVUFBcEIsRUFERjs7TUFJQSxTQUFTLENBQUMsTUFBVixDQUFpQixVQUFqQjtJQXZCZ0QsQ0FBbEQ7SUEyQkEsU0FBUyxDQUFDLE1BQVYsQ0FBaUIsU0FBakI7SUFDQSxDQUFBLENBQUUsUUFBUSxDQUFDLFlBQVgsQ0FBd0IsQ0FBQyxNQUF6QixDQUFnQyxTQUFoQztJQUdBLENBQUEsQ0FBRSx1QkFBRixDQUEwQixDQUFDLE9BQTNCLENBQUE7QUE5Q0Y7RUFvREEsQ0FBQSxDQUFFLFlBQUYsQ0FBZSxDQUFDLEtBQWhCLENBQXNCLFNBQUMsS0FBRDtJQUNwQjtJQUNBLE1BQUEsR0FBUyxhQUFBLENBQWMsSUFBQyxDQUFBLEVBQWY7SUFDVCxZQUFBLENBQWEsTUFBTSxDQUFDLFNBQXBCLEVBQStCLE1BQU0sQ0FBQyxVQUF0QztJQUVBLEtBQUEsQ0FBQTtJQUNBLGFBQUEsQ0FBQTtJQUNBLGFBQUEsQ0FBQTtFQVBvQixDQUF0QjtFQVdBLE1BQUEsR0FBUyxDQUFBLENBQUUsUUFBUSxDQUFDLGVBQVg7RUFDVCxTQUFBLEdBQVksQ0FBQyxDQUFDLFFBQUYsQ0FBVyxRQUFRLENBQUMsYUFBcEIsRUFBbUM7SUFBQSxLQUFBLEVBQU8sUUFBUSxDQUFDLGNBQWMsQ0FBQyxNQUF4QixJQUFrQyxDQUF6QztHQUFuQztFQUNaLENBQUEsQ0FBRSxNQUFGLENBQVMsQ0FBQyxNQUFWLENBQWlCLFNBQWpCO0VBSUEsYUFBQSxHQUFnQixDQUFDLENBQUMsUUFBRixDQUFXLFFBQVEsQ0FBQyxlQUFwQjtFQUNoQixRQUFBLEdBQVcsQ0FBQSxDQUFFLGFBQUEsQ0FBYztJQUFBLFNBQUEsRUFBVyxRQUFRLENBQUMsY0FBcEI7R0FBZCxDQUFGO0VBQ1gsQ0FBQSxDQUFFLE1BQUYsQ0FBUyxDQUFDLE1BQVYsQ0FBaUIsUUFBakI7RUFDQSxDQUFBLENBQUUsUUFBUSxDQUFDLFlBQVgsQ0FBd0IsQ0FBQyxNQUF6QixDQUFnQyxNQUFoQztFQUNBLENBQUEsQ0FBRSxjQUFGLENBQWlCLENBQUMsSUFBbEIsQ0FBdUIsU0FBQTtBQUNyQixRQUFBO0lBQUEsRUFBQSxHQUFLLElBQUMsQ0FBQSxFQUFFLENBQUMsTUFBSixDQUFXLENBQVg7SUFDTCxJQUFHLFFBQVEsQ0FBQyxLQUFLLENBQUMsT0FBZixLQUEwQixFQUE3QjtNQUNFLENBQUEsQ0FBRSxJQUFGLENBQU8sQ0FBQyxRQUFSLENBQWlCLGVBQWpCLEVBREY7O0VBRnFCLENBQXZCO0VBU0EsQ0FBQSxDQUFFLGNBQUYsQ0FBaUIsQ0FBQyxLQUFsQixDQUF3QixTQUFDLEtBQUQ7QUFDdEIsUUFBQTtJQUFBLEVBQUEsR0FBSyxJQUFDLENBQUEsRUFBRSxDQUFDLE1BQUosQ0FBVyxDQUFYO0lBQ0wsUUFBUSxDQUFDLEtBQUssQ0FBQyxPQUFmLEdBQXlCO0lBRXpCLFFBQVEsQ0FBQyxLQUFLLENBQUMsWUFBZixHQUE4QjtJQUM5QixLQUFBLENBQUE7SUFDQSxhQUFBLENBQUE7RUFOc0IsQ0FBeEI7RUFZQSxRQUFBLEdBQVcsQ0FBQSxDQUFFLFFBQVEsQ0FBQyxnQkFBWCxDQUE0QixDQUFDLEtBQTdCLENBQW1DLFNBQUMsS0FBRDtJQUM1QyxRQUFRLENBQUMsS0FBSyxDQUFDLE9BQWYsR0FBeUI7SUFDekIsTUFBTSxDQUFDLFdBQVAsQ0FBQTtFQUY0QyxDQUFuQztFQVFYLENBQUEsQ0FBRSxNQUFGLENBQVMsQ0FBQyxNQUFWLENBQWlCLFFBQWpCO0FBL0djOzs7QUFtSGhCOzs7O0FBSUEsYUFBQSxHQUFnQixTQUFDLEVBQUQ7QUFDZCxNQUFBO0VBQUEsTUFBQSxHQUFTO0VBQ1QsQ0FBQyxDQUFDLElBQUYsQ0FBTyxRQUFRLENBQUMsZUFBaEIsRUFBaUMsU0FBQyxLQUFELEVBQVEsU0FBUjtJQUMvQixDQUFDLENBQUMsSUFBRixDQUFPLEtBQVAsRUFBYyxTQUFDLE1BQUQsRUFBUyxVQUFUO01BQ1osSUFBRyxNQUFNLENBQUMsRUFBUCxLQUFhLEVBQWhCO1FBQ0UsTUFBQSxHQUNFO1VBQUEsV0FBQSxFQUFjLFNBQWQ7VUFDQSxZQUFBLEVBQWMsVUFEZDtVQUZKOztJQURZLENBQWQ7RUFEK0IsQ0FBakM7U0FRQTtBQVZjOzs7QUFZaEI7Ozs7O0FBTUEsYUFBQSxHQUFnQixTQUFBO0FBR2QsTUFBQTtFQUFBLFlBQUEsR0FBZSxDQUFDLENBQUMsUUFBRixDQUFXLFFBQVEsQ0FBQyxnQkFBcEI7RUFJZixDQUFDLENBQUMsSUFBRixDQUFPLFFBQVEsQ0FBQyxlQUFoQixFQUFpQyxTQUFDLEtBQUQsRUFBUSxTQUFSO0lBQy9CLENBQUMsQ0FBQyxJQUFGLENBQU8sS0FBUCxFQUFjLFNBQUMsTUFBRCxFQUFTLFVBQVQ7QUFLWixVQUFBO01BQUEsU0FBQSxHQUFjLFVBQVUsQ0FBQyxJQUFYLENBQUEsQ0FBaUIsQ0FBQyxLQUFsQixDQUF3QixHQUF4QjtNQUNkLFVBQUEsR0FBYyxTQUFTLENBQUMsR0FBVixDQUFBO01BQ2QsZUFBQSxhQUFlLFNBQVMsQ0FBQyxHQUFWLENBQUE7TUFJZixJQUFBLEdBQ0U7UUFBQSxFQUFBLEVBQUksTUFBTSxDQUFDLEVBQVg7UUFDQSxJQUFBLEVBQU0sVUFETjtRQUVBLEtBQUEsRUFBTyxNQUFNLENBQUMsS0FGZDs7TUFNRixVQUFBLEdBQWEsQ0FBQSxDQUFFLFlBQUEsQ0FBYSxJQUFiLENBQUYsQ0FBcUIsQ0FBQyxJQUF0QixDQUFBO01BQ2IsQ0FBQSxDQUFFLEdBQUEsR0FBTSxNQUFNLENBQUMsRUFBZixDQUFrQixDQUFDLElBQW5CLENBQXdCLFVBQXhCO01BSUEsSUFBRyxRQUFRLENBQUMsS0FBSyxDQUFDLE9BQVEsQ0FBQSxTQUFBLENBQXZCLElBQXNDLENBQUMsQ0FBQyxPQUFGLENBQVUsUUFBUSxDQUFDLEtBQUssQ0FBQyxPQUFRLENBQUEsU0FBQSxDQUFqQyxFQUE2QyxVQUE3QyxDQUFBLElBQTRELENBQXJHO1FBQ0UsQ0FBQSxDQUFFLEdBQUEsR0FBTSxNQUFNLENBQUMsRUFBZixDQUFrQixDQUFDLFFBQW5CLENBQTRCLGFBQTVCLEVBREY7T0FBQSxNQUFBO1FBR0UsQ0FBQSxDQUFFLEdBQUEsR0FBTSxNQUFNLENBQUMsRUFBZixDQUFrQixDQUFDLFdBQW5CLENBQStCLGFBQS9CLEVBSEY7O01BT0EsSUFBRyxNQUFNLENBQUMsS0FBUCxLQUFnQixDQUFuQjtRQUNFLENBQUEsQ0FBRSxHQUFBLEdBQU0sTUFBTSxDQUFDLEVBQWYsQ0FBa0IsQ0FBQyxRQUFuQixDQUE0QixVQUE1QixFQURGO09BQUEsTUFBQTtRQUdFLENBQUEsQ0FBRSxHQUFBLEdBQU0sTUFBTSxDQUFDLEVBQWYsQ0FBa0IsQ0FBQyxXQUFuQixDQUErQixVQUEvQixFQUhGOztJQTlCWSxDQUFkO0VBRCtCLENBQWpDO0VBeUNBLFNBQUEsR0FBWSxDQUFDLENBQUMsUUFBRixDQUFXLFFBQVEsQ0FBQyxhQUFwQixFQUFtQztJQUFBLEtBQUEsRUFBTyxRQUFRLENBQUMsY0FBYyxDQUFDLE1BQS9CO0dBQW5DO0VBQ1osQ0FBQSxDQUFFLFFBQVEsQ0FBQyxZQUFULEdBQXdCLG1CQUExQixDQUE4QyxDQUFDLFdBQS9DLENBQTJELFNBQTNEO0FBakRjOzs7QUFvRGhCOzs7O0FBS0EsYUFBQSxHQUFnQixTQUFBO0VBQ2QsQ0FBQSxDQUFFLFFBQVEsQ0FBQyxhQUFYLENBQXlCLENBQUMsSUFBMUIsQ0FBa0MsUUFBUSxDQUFDLGNBQWMsQ0FBQyxNQUF4QixLQUFrQyxDQUFyQyxHQUE0QyxRQUFRLENBQUMsU0FBckQsR0FBb0UsRUFBbkc7RUFDQSxlQUFBLENBQUE7QUFGYzs7QUFLaEIsZUFBQSxHQUFrQixTQUFBO0VBQ2hCO0FBQUEsTUFBQTtFQUVBLFlBQUEsR0FBa0IsUUFBUSxDQUFDLGdCQUFaLEdBQWtDLElBQUksQ0FBQyxHQUFMLENBQVMsUUFBUSxDQUFDLGNBQWMsQ0FBQyxNQUF4QixHQUFrQyxRQUFRLENBQUMsS0FBSyxDQUFDLFlBQTFELEVBQXlFLFFBQVEsQ0FBQyxlQUFsRixDQUFsQyxHQUEwSSxRQUFRLENBQUMsY0FBYyxDQUFDO0VBQ2pMLFFBQUEsR0FBVztFQUVYLElBQUcsUUFBUSxDQUFDLGtCQUFaO0lBQ0UsUUFBUSxDQUFDLGtCQUFULENBQUEsRUFERjs7RUFHQSxRQUFBLEdBQVcsQ0FBQyxDQUFDLFFBQUYsQ0FBVyxRQUFRLENBQUMsY0FBcEI7RUFDWCxDQUFBLEdBQUksUUFBUSxDQUFDLEtBQUssQ0FBQztBQUNuQixTQUFNLENBQUEsR0FBSSxRQUFRLENBQUMsS0FBSyxDQUFDLFlBQWYsR0FBOEIsWUFBeEM7SUFFRSxJQUFBLEdBQU8sUUFBUSxDQUFDLGNBQWUsQ0FBQSxDQUFBO0lBTS9CLElBQUcsUUFBUSxDQUFDLG9CQUFaO01BQ0UsUUFBUSxDQUFDLG9CQUFULENBQThCLElBQTlCLEVBREY7S0FBQSxNQUFBO01BSUUsUUFBQSxHQUFXLFFBQUEsR0FBVyxRQUFBLENBQVMsSUFBVCxFQUp4Qjs7SUFLQSxDQUFBO0VBYkY7U0FnQkEsQ0FBQSxDQUFFLFFBQVEsQ0FBQyxhQUFYLENBQXlCLENBQUMsTUFBMUIsQ0FBaUMsUUFBakM7QUEzQmdCOztBQTZDbEIsTUFBTSxDQUFDLFVBQVAsR0FDQSxDQUFDLENBQUMsVUFBRixHQUFlLFNBQUMsWUFBRDtFQUdiLENBQUMsQ0FBQyxNQUFGLENBQVMsUUFBVCxFQUFtQixRQUFuQixFQUE2QixZQUE3QjtFQUdBLFFBQVEsQ0FBQyxjQUFULEdBQTBCO0VBRzFCLFFBQVEsQ0FBQyxlQUFULEdBQTJCO0VBRzNCLENBQUEsQ0FBRSxRQUFRLENBQUMsWUFBWCxDQUF3QixDQUFDLElBQXpCLENBQThCLFVBQTlCLEVBQTBDLFFBQTFDO0VBR0EsTUFBTSxDQUFDLEtBQVAsR0FBZSxRQUFRLENBQUM7RUFHeEIsY0FBQSxDQUFBO0VBQ0EsTUFBQSxDQUFBO0VBQ0EsS0FBQSxDQUFBO0VBQ0EsYUFBQSxDQUFBO0VBQ0EsYUFBQSxDQUFBO1NBQ0EsUUFBUSxDQUFDO0FBdkJJOzs7QUF5QmY7Ozs7OztBQU1BLE1BQU0sQ0FBQyxXQUFQLEdBQXFCLFNBQUE7RUFDbkIsTUFBQSxDQUFBO0VBQ0EsS0FBQSxDQUFBO0VBQ0EsYUFBQSxDQUFBO0VBQ0EsYUFBQSxDQUFBO0FBSm1COztBQVNyQixNQUFNLENBQUMsV0FBUCxHQUFxQixTQUFBO0VBQ25CLFFBQVEsQ0FBQyxLQUFLLENBQUMsT0FBZixHQUF5QjtFQUN6QixNQUFNLENBQUMsV0FBUCxDQUFBO0FBRm1COztBQU9yQiJ9

},{}],132:[function(require,module,exports){
var JsonLDGraphView, jsonVis,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

jsonVis = require('jsonld-vis');

jsonVis["default"](d3);

JsonLDGraphView = (function(superClass) {
  extend(JsonLDGraphView, superClass);

  function JsonLDGraphView() {
    this.initJsonChart = bind(this.initJsonChart, this);
    return JsonLDGraphView.__super__.constructor.apply(this, arguments);
  }

  JsonLDGraphView.prototype.template = require('./templates/graph');

  JsonLDGraphView.prototype.className = 'card card-block';

  JsonLDGraphView.prototype.graphOptions = {
    w: 800,
    h: 300,
    maxLabelWidth: 250,
    transitionDuration: 250,
    transitionEase: 'cubic-in-out',
    minRadius: 5,
    scalingFactor: 1
  };

  JsonLDGraphView.prototype.onRender = function() {
    return setTimeout(this.initJsonChart, 100);
  };

  JsonLDGraphView.prototype.initJsonChart = function() {
    var each, i, json, len, results;
    json = this.options.json;
    if (Array.isArray(json)) {
      results = [];
      for (i = 0, len = json.length; i < len; i++) {
        each = json[i];
        results.push(d3.jsonldVis(each, '[data-display=graph]', this.graphOptions));
      }
      return results;
    } else {
      return d3.jsonldVis(this.options.json, '[data-display=graph]', this.graphOptions);
    }
  };

  return JsonLDGraphView;

})(Mn.LayoutView);

module.exports = JsonLDGraphView;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL2Fla3Njby9naXRodWIvbWFnZWxsYW4vYXBwL2NvZmZlZS9tb2R1bGVzL3NlYXJjaC9mYWNldHNlYXJjaC92aWV3cy9ncmFwaC5jb2ZmZWUiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIvVXNlcnMvYWVrc2NvL2dpdGh1Yi9tYWdlbGxhbi9hcHAvY29mZmVlL21vZHVsZXMvc2VhcmNoL2ZhY2V0c2VhcmNoL3ZpZXdzL2dyYXBoLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFLQSxJQUFBLHdCQUFBO0VBQUE7Ozs7QUFBQSxPQUFBLEdBQVUsT0FBQSxDQUFRLFlBQVI7O0FBQ1YsT0FBTyxFQUFDLE9BQUQsRUFBUCxDQUFnQixFQUFoQjs7QUFJTTs7Ozs7Ozs7NEJBQ0osUUFBQSxHQUFVLE9BQUEsQ0FBUSxtQkFBUjs7NEJBQ1YsU0FBQSxHQUFXOzs0QkFFWCxZQUFBLEdBQ0U7SUFBQSxDQUFBLEVBQW9CLEdBQXBCO0lBQ0EsQ0FBQSxFQUFvQixHQURwQjtJQUVBLGFBQUEsRUFBb0IsR0FGcEI7SUFHQSxrQkFBQSxFQUFvQixHQUhwQjtJQUlBLGNBQUEsRUFBb0IsY0FKcEI7SUFLQSxTQUFBLEVBQW9CLENBTHBCO0lBTUEsYUFBQSxFQUFvQixDQU5wQjs7OzRCQVFGLFFBQUEsR0FBVSxTQUFBO1dBQ1IsVUFBQSxDQUFXLElBQUMsQ0FBQSxhQUFaLEVBQTJCLEdBQTNCO0VBRFE7OzRCQUlWLGFBQUEsR0FBZSxTQUFBO0FBSWIsUUFBQTtJQUFBLElBQUEsR0FBTyxJQUFDLENBQUEsT0FBTyxDQUFDO0lBRWhCLElBQUcsS0FBSyxDQUFDLE9BQU4sQ0FBYyxJQUFkLENBQUg7QUFDRTtXQUFBLHNDQUFBOztxQkFDRSxFQUFFLENBQUMsU0FBSCxDQUFhLElBQWIsRUFBbUIsc0JBQW5CLEVBQTJDLElBQUMsQ0FBQSxZQUE1QztBQURGO3FCQURGO0tBQUEsTUFBQTthQUtFLEVBQUUsQ0FBQyxTQUFILENBQWEsSUFBQyxDQUFBLE9BQU8sQ0FBQyxJQUF0QixFQUE0QixzQkFBNUIsRUFBb0QsSUFBQyxDQUFBLFlBQXJELEVBTEY7O0VBTmE7Ozs7R0FqQmEsRUFBRSxDQUFDOztBQWdDakMsTUFBTSxDQUFDLE9BQVAsR0FBaUIifQ==

},{"./templates/graph":140,"jsonld-vis":189}],133:[function(require,module,exports){
var FacetSearchHeader,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

FacetSearchHeader = (function(superClass) {
  extend(FacetSearchHeader, superClass);

  function FacetSearchHeader() {
    return FacetSearchHeader.__super__.constructor.apply(this, arguments);
  }

  FacetSearchHeader.prototype.template = require('./templates/header');

  FacetSearchHeader.prototype.className = 'card card-block';

  FacetSearchHeader.prototype.ui = {
    clear: '[data-click=clear]',
    list: '[data-click=list]',
    viewer: '[data-click=viewer]'
  };

  FacetSearchHeader.prototype.triggers = {
    'click @ui.clear': 'clear',
    'click @ui.list': 'list',
    'click @ui.viewer': 'viewer'
  };

  return FacetSearchHeader;

})(Mn.LayoutView);

module.exports = FacetSearchHeader;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL2Fla3Njby9naXRodWIvbWFnZWxsYW4vYXBwL2NvZmZlZS9tb2R1bGVzL3NlYXJjaC9mYWNldHNlYXJjaC92aWV3cy9oZWFkZXIuY29mZmVlIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiL1VzZXJzL2Fla3Njby9naXRodWIvbWFnZWxsYW4vYXBwL2NvZmZlZS9tb2R1bGVzL3NlYXJjaC9mYWNldHNlYXJjaC92aWV3cy9oZWFkZXIuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLElBQUEsaUJBQUE7RUFBQTs7O0FBQU07Ozs7Ozs7OEJBQ0osUUFBQSxHQUFVLE9BQUEsQ0FBUSxvQkFBUjs7OEJBQ1YsU0FBQSxHQUFXOzs4QkFFWCxFQUFBLEdBQ0U7SUFBQSxLQUFBLEVBQVEsb0JBQVI7SUFDQSxJQUFBLEVBQVEsbUJBRFI7SUFFQSxNQUFBLEVBQVEscUJBRlI7Ozs4QkFJRixRQUFBLEdBQ0U7SUFBQSxpQkFBQSxFQUFvQixPQUFwQjtJQUNBLGdCQUFBLEVBQW9CLE1BRHBCO0lBRUEsa0JBQUEsRUFBb0IsUUFGcEI7Ozs7O0dBVjRCLEVBQUUsQ0FBQzs7QUFnQm5DLE1BQU0sQ0FBQyxPQUFQLEdBQWlCIn0=

},{"./templates/header":141}],134:[function(require,module,exports){
var RdfDetailView,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

RdfDetailView = (function(superClass) {
  extend(RdfDetailView, superClass);

  function RdfDetailView() {
    this.onImageOut = bind(this.onImageOut, this);
    this.onImageIn = bind(this.onImageIn, this);
    return RdfDetailView.__super__.constructor.apply(this, arguments);
  }

  RdfDetailView.prototype.template = require('./templates/detail');

  RdfDetailView.prototype.className = 'card card-block rdf-viewer-detail';

  RdfDetailView.prototype.events = {
    'click [data-click=close]': 'closeView',
    'mouseover img': 'onImageIn',
    'mouseout img': 'onImageOut'
  };

  RdfDetailView.prototype.onImageIn = function(e) {
    this.trigger('show:underlay');
    if (this.drift) {
      return this.drift.enable();
    }
    return this.drift = new Drift(document.querySelector('img'), {
      containInline: true,
      inlinePane: 200,
      paneContainer: $('.drift-content')[0],
      zoomFactor: 5,
      hoverBoundingBox: true
    });
  };

  RdfDetailView.prototype.onImageOut = function(e) {
    this.trigger('hide:underlay');
    return this.drift.disable();
  };

  RdfDetailView.prototype.closeView = function() {
    $('.drift-content').html('');
    this.trigger('hide:underlay');
    return this.trigger('hide');
  };

  RdfDetailView.prototype.onRender = function() {};

  RdfDetailView.prototype.loadCsv = function(url) {
    var xhr;
    xhr = new XMLHttpRequest;
    xhr.open('GET', url, true);
    xhr.responseType = 'text';
    xhr.onload = (function(_this) {
      return function(e) {
        var status;
        status = xhr.status === 200 ? 'success' : 'error';
        if (status === 'success') {
          return _this.renderCsv(xhr.response);
        }
      };
    })(this);
    return xhr.send();
  };

  RdfDetailView.prototype.renderCsv = function(text) {
    var container, parsedCSV;
    console.log('RENDER CSV');
    console.log(text);
    parsedCSV = d3.csvParseRows(text);
    return container = d3.select('.drift-content').append('table').selectAll('tr').data(parsedCSV).enter().append('tr').selectAll('td').data(function(d) {
      return d;
    }).enter().append('td').text(function(d) {
      return d;
    });
  };

  return RdfDetailView;

})(Mn.LayoutView);

module.exports = RdfDetailView;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL2Fla3Njby9naXRodWIvbWFnZWxsYW4vYXBwL2NvZmZlZS9tb2R1bGVzL3NlYXJjaC9mYWNldHNlYXJjaC92aWV3cy9pdGVtRGV0YWlsLmNvZmZlZSIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9hZWtzY28vZ2l0aHViL21hZ2VsbGFuL2FwcC9jb2ZmZWUvbW9kdWxlcy9zZWFyY2gvZmFjZXRzZWFyY2gvdmlld3MvaXRlbURldGFpbC5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsSUFBQSxhQUFBO0VBQUE7Ozs7QUFBTTs7Ozs7Ozs7OzBCQUNKLFFBQUEsR0FBVSxPQUFBLENBQVEsb0JBQVI7OzBCQUNWLFNBQUEsR0FBVzs7MEJBRVgsTUFBQSxHQUNFO0lBQUEsMEJBQUEsRUFBNEIsV0FBNUI7SUFDQSxlQUFBLEVBQWlCLFdBRGpCO0lBRUEsY0FBQSxFQUFnQixZQUZoQjs7OzBCQUlGLFNBQUEsR0FBVyxTQUFDLENBQUQ7SUFDVCxJQUFDLENBQUEsT0FBRCxDQUFTLGVBQVQ7SUFDQSxJQUEwQixJQUFDLENBQUEsS0FBM0I7QUFBQSxhQUFPLElBQUMsQ0FBQSxLQUFLLENBQUMsTUFBUCxDQUFBLEVBQVA7O1dBQ0EsSUFBQyxDQUFBLEtBQUQsR0FBUyxJQUFJLEtBQUosQ0FBVSxRQUFRLENBQUMsYUFBVCxDQUF1QixLQUF2QixDQUFWLEVBQXlDO01BQ2hELGFBQUEsRUFBZSxJQURpQztNQUVoRCxVQUFBLEVBQVksR0FGb0M7TUFHaEQsYUFBQSxFQUFlLENBQUEsQ0FBRSxnQkFBRixDQUFvQixDQUFBLENBQUEsQ0FIYTtNQUloRCxVQUFBLEVBQVksQ0FKb0M7TUFLaEQsZ0JBQUEsRUFBa0IsSUFMOEI7S0FBekM7RUFIQTs7MEJBV1gsVUFBQSxHQUFZLFNBQUMsQ0FBRDtJQUNWLElBQUMsQ0FBQSxPQUFELENBQVMsZUFBVDtXQUNBLElBQUMsQ0FBQSxLQUFLLENBQUMsT0FBUCxDQUFBO0VBRlU7OzBCQUlaLFNBQUEsR0FBVyxTQUFBO0lBQ1QsQ0FBQSxDQUFFLGdCQUFGLENBQW1CLENBQUMsSUFBcEIsQ0FBeUIsRUFBekI7SUFDQSxJQUFDLENBQUEsT0FBRCxDQUFTLGVBQVQ7V0FDQSxJQUFDLENBQUEsT0FBRCxDQUFTLE1BQVQ7RUFIUzs7MEJBS1gsUUFBQSxHQUFVLFNBQUEsR0FBQTs7MEJBV1YsT0FBQSxHQUFTLFNBQUMsR0FBRDtBQUlQLFFBQUE7SUFBQSxHQUFBLEdBQU0sSUFBSTtJQUNWLEdBQUcsQ0FBQyxJQUFKLENBQVMsS0FBVCxFQUFnQixHQUFoQixFQUFxQixJQUFyQjtJQUNBLEdBQUcsQ0FBQyxZQUFKLEdBQW1CO0lBR25CLEdBQUcsQ0FBQyxNQUFKLEdBQWEsQ0FBQSxTQUFBLEtBQUE7YUFBQSxTQUFDLENBQUQ7QUFDWCxZQUFBO1FBQUEsTUFBQSxHQUFZLEdBQUcsQ0FBQyxNQUFKLEtBQWMsR0FBakIsR0FBMEIsU0FBMUIsR0FBeUM7UUFHbEQsSUFBbUMsTUFBQSxLQUFVLFNBQTdDO0FBQUEsaUJBQU8sS0FBQyxDQUFBLFNBQUQsQ0FBVyxHQUFHLENBQUMsUUFBZixFQUFQOztNQUpXO0lBQUEsQ0FBQSxDQUFBLENBQUEsSUFBQTtXQU9iLEdBQUcsQ0FBQyxJQUFKLENBQUE7RUFoQk87OzBCQWtCVCxTQUFBLEdBQVcsU0FBQyxJQUFEO0FBQ1QsUUFBQTtJQUFBLE9BQU8sQ0FBQyxHQUFSLENBQVksWUFBWjtJQUNBLE9BQU8sQ0FBQyxHQUFSLENBQVksSUFBWjtJQUVBLFNBQUEsR0FBWSxFQUFFLENBQUMsWUFBSCxDQUFnQixJQUFoQjtXQUNaLFNBQUEsR0FBWSxFQUFFLENBQUMsTUFBSCxDQUFVLGdCQUFWLENBQ1osQ0FBQyxNQURXLENBQ0osT0FESSxDQUVaLENBQUMsU0FGVyxDQUVELElBRkMsQ0FHWixDQUFDLElBSFcsQ0FHTixTQUhNLENBSVosQ0FBQyxLQUpXLENBQUEsQ0FLWixDQUFDLE1BTFcsQ0FLSixJQUxJLENBTVosQ0FBQyxTQU5XLENBTUQsSUFOQyxDQU9aLENBQUMsSUFQVyxDQU9OLFNBQUMsQ0FBRDthQUFPO0lBQVAsQ0FQTSxDQVFaLENBQUMsS0FSVyxDQUFBLENBUUosQ0FBQyxNQVJHLENBUUksSUFSSixDQVFTLENBQUMsSUFSVixDQVFlLFNBQUMsQ0FBRDthQUFPO0lBQVAsQ0FSZjtFQUxIOzs7O0dBMURlLEVBQUUsQ0FBQzs7QUEyRS9CLE1BQU0sQ0FBQyxPQUFQLEdBQWlCIn0=

},{"./templates/detail":139}],135:[function(require,module,exports){
var DetailView, FacetedViewLayout, HeaderView, RecordListView,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

require('./engine');

RecordListView = require('./recordList');

DetailView = require('./itemDetail');

HeaderView = require('./header');

FacetedViewLayout = (function(superClass) {
  extend(FacetedViewLayout, superClass);

  function FacetedViewLayout() {
    this.initFacetView = bind(this.initFacetView, this);
    this.showItem = bind(this.showItem, this);
    return FacetedViewLayout.__super__.constructor.apply(this, arguments);
  }

  FacetedViewLayout.prototype.template = require('./templates/layout');

  FacetedViewLayout.prototype.className = 'container-fluid';

  FacetedViewLayout.prototype.events = {
    'click h3.facettitle': 'toggleCollapseFacet'
  };

  FacetedViewLayout.prototype.toggleCollapseFacet = function(e) {
    return $(e.currentTarget).parents('.facetsearch').toggleClass('active');
  };

  FacetedViewLayout.prototype.regions = {
    listRegion: '[data-region=record-list]',
    headerRegion: '[data-region=header]',
    detailRegion: '[data-region=detail]'
  };

  FacetedViewLayout.prototype.onRender = function() {
    var headerView, listView;
    headerView = new HeaderView({
      model: this.model
    });
    headerView.on('clear', (function(_this) {
      return function() {
        return jQuery.clearFacets();
      };
    })(this));
    this.headerRegion.show(headerView);
    setTimeout(this.initFacetView, 100);
    listView = new RecordListView({
      collection: this.collection
    });
    listView.on('childview:show:relation', (function(_this) {
      return function(view, id) {
        return _this.showItem(id);
      };
    })(this));
    return this.listRegion.show(listView);
  };

  FacetedViewLayout.prototype.showItem = function(id) {
    var el, i, item, len, ref;
    item = null;
    ref = this.options.items.models;
    for (i = 0, len = ref.length; i < len; i++) {
      el = ref[i];
      if (el.get('data')['@id'] === id) {
        item = el;
        break;
      }
    }
    if (!item) {
      return;
    }
    if (this.detailView && this.detailView.model.id === item.id) {
      return this.detailView.trigger('hide');
    }
    this.detailView = new DetailView({
      model: item
    });
    this.detailView.on('show:underlay', (function(_this) {
      return function() {
        return _this.$('.drift-underlay').addClass('active');
      };
    })(this));
    this.detailView.on('hide:underlay', (function(_this) {
      return function() {
        return _this.$('.drift-underlay').removeClass('active');
      };
    })(this));
    this.detailView.on('hide', (function(_this) {
      return function() {
        _this.detailRegion.$el.removeClass('active');
        return setTimeout(function() {
          _this.detailRegion.empty();
          return delete _this.detailView;
        }, 100);
      };
    })(this));
    this.detailRegion.show(this.detailView);
    return this.detailRegion.$el.addClass('active');
  };

  FacetedViewLayout.prototype.initFacetView = function() {
    var settings, state;
    settings = {
      items: this.options.items.toJSON(),
      facets: this.options.facetCollection.getEnabled(),
      resultElement: '#results',
      facetElement: '#facets',
      resultTemplate: 'placeholder',
      resultTemplateBypass: (function(_this) {
        return function(item) {
          return _this.collection.add(item);
        };
      })(this),
      beforeResultRender: (function(_this) {
        return function() {
          return _this.collection.reset([]);
        };
      })(this),
      orderByOptions: {
        'dmo:type': 'DMO Type',
        'label': 'Label'
      }
    };
    state = $.facetelize(settings);
  };

  return FacetedViewLayout;

})(Mn.LayoutView);

module.exports = FacetedViewLayout;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL2Fla3Njby9naXRodWIvbWFnZWxsYW4vYXBwL2NvZmZlZS9tb2R1bGVzL3NlYXJjaC9mYWNldHNlYXJjaC92aWV3cy9sYXlvdXQuY29mZmVlIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiL1VzZXJzL2Fla3Njby9naXRodWIvbWFnZWxsYW4vYXBwL2NvZmZlZS9tb2R1bGVzL3NlYXJjaC9mYWNldHNlYXJjaC92aWV3cy9sYXlvdXQuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLElBQUEseURBQUE7RUFBQTs7OztBQUFBLE9BQUEsQ0FBUSxVQUFSOztBQUNBLGNBQUEsR0FBaUIsT0FBQSxDQUFRLGNBQVI7O0FBQ2pCLFVBQUEsR0FBYSxPQUFBLENBQVEsY0FBUjs7QUFDYixVQUFBLEdBQWEsT0FBQSxDQUFRLFVBQVI7O0FBSVA7Ozs7Ozs7Ozs4QkFDSixRQUFBLEdBQVUsT0FBQSxDQUFRLG9CQUFSOzs4QkFDVixTQUFBLEdBQVc7OzhCQUVYLE1BQUEsR0FDRTtJQUFBLHFCQUFBLEVBQXVCLHFCQUF2Qjs7OzhCQUVGLG1CQUFBLEdBQXFCLFNBQUMsQ0FBRDtXQUNuQixDQUFBLENBQUUsQ0FBQyxDQUFDLGFBQUosQ0FBa0IsQ0FBQyxPQUFuQixDQUEyQixjQUEzQixDQUEwQyxDQUFDLFdBQTNDLENBQXVELFFBQXZEO0VBRG1COzs4QkFHckIsT0FBQSxHQUNFO0lBQUEsVUFBQSxFQUFjLDJCQUFkO0lBQ0EsWUFBQSxFQUFjLHNCQURkO0lBRUEsWUFBQSxFQUFjLHNCQUZkOzs7OEJBSUYsUUFBQSxHQUFVLFNBQUE7QUFJUixRQUFBO0lBQUEsVUFBQSxHQUFhLElBQUksVUFBSixDQUFlO01BQUUsS0FBQSxFQUFPLElBQUMsQ0FBQSxLQUFWO0tBQWY7SUFHYixVQUFVLENBQUMsRUFBWCxDQUFjLE9BQWQsRUFBdUIsQ0FBQSxTQUFBLEtBQUE7YUFBQSxTQUFBO2VBQUcsTUFBTSxDQUFDLFdBQVAsQ0FBQTtNQUFIO0lBQUEsQ0FBQSxDQUFBLENBQUEsSUFBQSxDQUF2QjtJQVdBLElBQUMsQ0FBQSxZQUFZLENBQUMsSUFBZCxDQUFtQixVQUFuQjtJQUdBLFVBQUEsQ0FBVyxJQUFDLENBQUEsYUFBWixFQUEyQixHQUEzQjtJQUdBLFFBQUEsR0FBVyxJQUFJLGNBQUosQ0FBbUI7TUFBRSxVQUFBLEVBQVksSUFBQyxDQUFBLFVBQWY7S0FBbkI7SUFDWCxRQUFRLENBQUMsRUFBVCxDQUFZLHlCQUFaLEVBQXVDLENBQUEsU0FBQSxLQUFBO2FBQUEsU0FBQyxJQUFELEVBQU8sRUFBUDtlQUFjLEtBQUMsQ0FBQSxRQUFELENBQVUsRUFBVjtNQUFkO0lBQUEsQ0FBQSxDQUFBLENBQUEsSUFBQSxDQUF2QztXQUNBLElBQUMsQ0FBQSxVQUFVLENBQUMsSUFBWixDQUFpQixRQUFqQjtFQTFCUTs7OEJBNEJWLFFBQUEsR0FBVSxTQUFDLEVBQUQ7QUFHUixRQUFBO0lBQUEsSUFBQSxHQUFPO0FBR1A7QUFBQSxTQUFBLHFDQUFBOztNQUNFLElBQUcsRUFBRSxDQUFDLEdBQUgsQ0FBTyxNQUFQLENBQWUsQ0FBQSxLQUFBLENBQWYsS0FBeUIsRUFBNUI7UUFDRSxJQUFBLEdBQU87QUFDUCxjQUZGOztBQURGO0lBTUEsSUFBQSxDQUFjLElBQWQ7QUFBQSxhQUFBOztJQUdBLElBQXNDLElBQUMsQ0FBQSxVQUFELElBQWUsSUFBQyxDQUFBLFVBQVUsQ0FBQyxLQUFLLENBQUMsRUFBbEIsS0FBd0IsSUFBSSxDQUFDLEVBQWxGO0FBQUEsYUFBTyxJQUFDLENBQUEsVUFBVSxDQUFDLE9BQVosQ0FBb0IsTUFBcEIsRUFBUDs7SUFHQSxJQUFDLENBQUEsVUFBRCxHQUFjLElBQUksVUFBSixDQUFlO01BQUUsS0FBQSxFQUFPLElBQVQ7S0FBZjtJQUdkLElBQUMsQ0FBQSxVQUFVLENBQUMsRUFBWixDQUFlLGVBQWYsRUFBZ0MsQ0FBQSxTQUFBLEtBQUE7YUFBQSxTQUFBO2VBQUcsS0FBQyxDQUFBLENBQUQsQ0FBRyxpQkFBSCxDQUFxQixDQUFDLFFBQXRCLENBQStCLFFBQS9CO01BQUg7SUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLENBQWhDO0lBQ0EsSUFBQyxDQUFBLFVBQVUsQ0FBQyxFQUFaLENBQWUsZUFBZixFQUFnQyxDQUFBLFNBQUEsS0FBQTthQUFBLFNBQUE7ZUFBRyxLQUFDLENBQUEsQ0FBRCxDQUFHLGlCQUFILENBQXFCLENBQUMsV0FBdEIsQ0FBa0MsUUFBbEM7TUFBSDtJQUFBLENBQUEsQ0FBQSxDQUFBLElBQUEsQ0FBaEM7SUFTQSxJQUFDLENBQUEsVUFBVSxDQUFDLEVBQVosQ0FBZSxNQUFmLEVBQXVCLENBQUEsU0FBQSxLQUFBO2FBQUEsU0FBQTtRQUNyQixLQUFDLENBQUEsWUFBWSxDQUFDLEdBQUcsQ0FBQyxXQUFsQixDQUE4QixRQUE5QjtlQUNBLFVBQUEsQ0FBWSxTQUFBO1VBQ1YsS0FBQyxDQUFBLFlBQVksQ0FBQyxLQUFkLENBQUE7aUJBQ0EsT0FBTyxLQUFDLENBQUE7UUFGRSxDQUFaLEVBR0EsR0FIQTtNQUZxQjtJQUFBLENBQUEsQ0FBQSxDQUFBLElBQUEsQ0FBdkI7SUFRQSxJQUFDLENBQUEsWUFBWSxDQUFDLElBQWQsQ0FBbUIsSUFBQyxDQUFBLFVBQXBCO1dBQ0EsSUFBQyxDQUFBLFlBQVksQ0FBQyxHQUFHLENBQUMsUUFBbEIsQ0FBMkIsUUFBM0I7RUF4Q1E7OzhCQTBDVixhQUFBLEdBQWUsU0FBQTtBQUViLFFBQUE7SUFBQSxRQUFBLEdBQ0U7TUFBQSxLQUFBLEVBQU8sSUFBQyxDQUFBLE9BQU8sQ0FBQyxLQUFLLENBQUMsTUFBZixDQUFBLENBQVA7TUFDQSxNQUFBLEVBQVEsSUFBQyxDQUFBLE9BQU8sQ0FBQyxlQUFlLENBQUMsVUFBekIsQ0FBQSxDQURSO01BRUEsYUFBQSxFQUFlLFVBRmY7TUFHQSxZQUFBLEVBQWUsU0FIZjtNQUlBLGNBQUEsRUFBZ0IsYUFKaEI7TUFLQSxvQkFBQSxFQUFzQixDQUFBLFNBQUEsS0FBQTtlQUFBLFNBQUMsSUFBRDtpQkFBVSxLQUFDLENBQUEsVUFBVSxDQUFDLEdBQVosQ0FBZ0IsSUFBaEI7UUFBVjtNQUFBLENBQUEsQ0FBQSxDQUFBLElBQUEsQ0FMdEI7TUFNQSxrQkFBQSxFQUFvQixDQUFBLFNBQUEsS0FBQTtlQUFBLFNBQUE7aUJBQUcsS0FBQyxDQUFBLFVBQVUsQ0FBQyxLQUFaLENBQWtCLEVBQWxCO1FBQUg7TUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLENBTnBCO01BYUEsY0FBQSxFQUNFO1FBQUEsVUFBQSxFQUFjLFVBQWQ7UUFDQSxPQUFBLEVBQWMsT0FEZDtPQWRGOztJQTJCRixLQUFBLEdBQVEsQ0FBQyxDQUFDLFVBQUYsQ0FBYSxRQUFiO0VBOUJLOzs7O0dBckZlLEVBQUUsQ0FBQzs7QUF5SG5DLE1BQU0sQ0FBQyxPQUFQLEdBQWlCIn0=

},{"./engine":131,"./header":133,"./itemDetail":134,"./recordList":136,"./templates/layout":142}],136:[function(require,module,exports){
var CsvViewer, JsonGraph, JsonViewer, RecordChild, RecordListView, ResultViewer, TableView,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

JsonViewer = require('hn_views/lib/json_viewer');

JsonGraph = require('./graph');

TableView = require('./table');

CsvViewer = require('./csvViewer');

ResultViewer = (function(superClass) {
  extend(ResultViewer, superClass);

  function ResultViewer() {
    return ResultViewer.__super__.constructor.apply(this, arguments);
  }

  ResultViewer.prototype.navItems = function() {
    var csvViewer, items;
    items = [
      {
        icon: 'fa-table',
        text: 'Table',
        trigger: 'table',
        "default": true
      }, {
        icon: 'fa-sitemap',
        text: 'Graph',
        trigger: 'graph'
      }
    ];
    csvViewer = {
      icon: 'fa-file-excel-o',
      text: 'CSV',
      trigger: 'csv'
    };
    if (this.model.get('views').csv) {
      items.push(csvViewer);
    }
    return items;
  };

  ResultViewer.prototype.navEvents = {
    'table': 'showTable',
    'json': 'showJson',
    'graph': 'showGraph',
    'csv': 'showCsv'
  };

  ResultViewer.prototype.showTable = function() {
    return this.contentRegion.show(new TableView({
      model: this.model
    }));
  };

  ResultViewer.prototype.showJson = function() {
    return this.contentRegion.show(new JsonViewer({
      model: this.model
    }));
  };

  ResultViewer.prototype.showGraph = function() {
    return this.contentRegion.show(new JsonGraph({
      json: this.model.toJSON()['data']
    }));
  };

  ResultViewer.prototype.showCsv = function() {
    return this.contentRegion.show(new CsvViewer({
      model: this.model
    }));
  };

  return ResultViewer;

})(require('hn_views/lib/nav'));

RecordChild = (function(superClass) {
  extend(RecordChild, superClass);

  function RecordChild() {
    return RecordChild.__super__.constructor.apply(this, arguments);
  }

  RecordChild.prototype.template = require('./templates/record_child');

  RecordChild.prototype.tagName = 'li';

  RecordChild.prototype.className = 'list-group-item';

  RecordChild.prototype.regions = {
    viewerRegion: '[data-region=viewer]'
  };

  RecordChild.prototype.behaviors = function() {
    var obj;
    return obj = {
      Tooltips: {},
      ClickableRelations: {},
      Flashes: {
        success: {
          message: 'Copied JSON to clipboard.',
          timeout: 1000
        },
        error: {
          message: 'Error copying JSON to clipboard.',
          timeout: 1000
        }
      }
    };
  };

  RecordChild.prototype.onClipboardSuccess = function() {
    return this.flashSuccess();
  };

  RecordChild.prototype.onClipboardError = function() {
    return this.flashError();
  };

  RecordChild.prototype.onRender = function() {
    return this.viewerRegion.show(new ResultViewer({
      model: this.model
    }));
  };

  return RecordChild;

})(Mn.LayoutView);

RecordListView = (function(superClass) {
  extend(RecordListView, superClass);

  function RecordListView() {
    return RecordListView.__super__.constructor.apply(this, arguments);
  }

  RecordListView.prototype.tagName = 'ul';

  RecordListView.prototype.className = 'list-group record-list-group';

  RecordListView.prototype.childView = RecordChild;

  return RecordListView;

})(Mn.CollectionView);

module.exports = RecordListView;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL2Fla3Njby9naXRodWIvbWFnZWxsYW4vYXBwL2NvZmZlZS9tb2R1bGVzL3NlYXJjaC9mYWNldHNlYXJjaC92aWV3cy9yZWNvcmRMaXN0LmNvZmZlZSIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9hZWtzY28vZ2l0aHViL21hZ2VsbGFuL2FwcC9jb2ZmZWUvbW9kdWxlcy9zZWFyY2gvZmFjZXRzZWFyY2gvdmlld3MvcmVjb3JkTGlzdC5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsSUFBQSxzRkFBQTtFQUFBOzs7QUFBQSxVQUFBLEdBQWMsT0FBQSxDQUFRLDBCQUFSOztBQUNkLFNBQUEsR0FBYyxPQUFBLENBQVEsU0FBUjs7QUFDZCxTQUFBLEdBQWMsT0FBQSxDQUFRLFNBQVI7O0FBQ2QsU0FBQSxHQUFjLE9BQUEsQ0FBUSxhQUFSOztBQUlSOzs7Ozs7O3lCQUVKLFFBQUEsR0FBVSxTQUFBO0FBQ1IsUUFBQTtJQUFBLEtBQUEsR0FBUTtNQUNOO1FBQUUsSUFBQSxFQUFNLFVBQVI7UUFBc0IsSUFBQSxFQUFNLE9BQTVCO1FBQXNDLE9BQUEsRUFBUyxPQUEvQztRQUF3RCxDQUFBLE9BQUEsQ0FBQSxFQUFTLElBQWpFO09BRE0sRUFHTjtRQUFFLElBQUEsRUFBTSxZQUFSO1FBQXNCLElBQUEsRUFBTSxPQUE1QjtRQUFzQyxPQUFBLEVBQVMsT0FBL0M7T0FITTs7SUFPUixTQUFBLEdBQVk7TUFBRSxJQUFBLEVBQU0saUJBQVI7TUFBMkIsSUFBQSxFQUFNLEtBQWpDO01BQXlDLE9BQUEsRUFBUyxLQUFsRDs7SUFDWixJQUF5QixJQUFDLENBQUEsS0FBSyxDQUFDLEdBQVAsQ0FBVyxPQUFYLENBQW1CLENBQUMsR0FBN0M7TUFBQSxLQUFLLENBQUMsSUFBTixDQUFXLFNBQVgsRUFBQTs7QUFFQSxXQUFPO0VBWEM7O3lCQWFWLFNBQUEsR0FDRTtJQUFBLE9BQUEsRUFBWSxXQUFaO0lBQ0EsTUFBQSxFQUFZLFVBRFo7SUFFQSxPQUFBLEVBQVksV0FGWjtJQUdBLEtBQUEsRUFBWSxTQUhaOzs7eUJBS0YsU0FBQSxHQUFXLFNBQUE7V0FDVCxJQUFDLENBQUEsYUFBYSxDQUFDLElBQWYsQ0FBb0IsSUFBSSxTQUFKLENBQWM7TUFBRSxLQUFBLEVBQU8sSUFBQyxDQUFBLEtBQVY7S0FBZCxDQUFwQjtFQURTOzt5QkFHWCxRQUFBLEdBQVUsU0FBQTtXQUNSLElBQUMsQ0FBQSxhQUFhLENBQUMsSUFBZixDQUFvQixJQUFJLFVBQUosQ0FBZTtNQUFFLEtBQUEsRUFBTyxJQUFDLENBQUEsS0FBVjtLQUFmLENBQXBCO0VBRFE7O3lCQUdWLFNBQUEsR0FBVyxTQUFBO1dBQ1QsSUFBQyxDQUFBLGFBQWEsQ0FBQyxJQUFmLENBQW9CLElBQUksU0FBSixDQUFjO01BQUUsSUFBQSxFQUFNLElBQUMsQ0FBQSxLQUFLLENBQUMsTUFBUCxDQUFBLENBQWdCLENBQUEsTUFBQSxDQUF4QjtLQUFkLENBQXBCO0VBRFM7O3lCQUdYLE9BQUEsR0FBUyxTQUFBO1dBQ1AsSUFBQyxDQUFBLGFBQWEsQ0FBQyxJQUFmLENBQW9CLElBQUksU0FBSixDQUFjO01BQUUsS0FBQSxFQUFPLElBQUMsQ0FBQSxLQUFWO0tBQWQsQ0FBcEI7RUFETzs7OztHQTlCZ0IsT0FBQSxDQUFRLGtCQUFSOztBQW1DckI7Ozs7Ozs7d0JBQ0osUUFBQSxHQUFVLE9BQUEsQ0FBUSwwQkFBUjs7d0JBQ1YsT0FBQSxHQUFZOzt3QkFDWixTQUFBLEdBQVk7O3dCQUVaLE9BQUEsR0FDRTtJQUFBLFlBQUEsRUFBYyxzQkFBZDs7O3dCQUVGLFNBQUEsR0FBVyxTQUFBO0FBQ1QsUUFBQTtBQUFBLFdBQU8sR0FBQSxHQUNMO01BQUEsUUFBQSxFQUFVLEVBQVY7TUFDQSxrQkFBQSxFQUFvQixFQURwQjtNQUdBLE9BQUEsRUFDRTtRQUFBLE9BQUEsRUFDRTtVQUFBLE9BQUEsRUFBVSwyQkFBVjtVQUNBLE9BQUEsRUFBVSxJQURWO1NBREY7UUFHQSxLQUFBLEVBQ0U7VUFBQSxPQUFBLEVBQVUsa0NBQVY7VUFDQSxPQUFBLEVBQVUsSUFEVjtTQUpGO09BSkY7O0VBRk87O3dCQWNYLGtCQUFBLEdBQW9CLFNBQUE7V0FBRyxJQUFDLENBQUEsWUFBRCxDQUFBO0VBQUg7O3dCQUNwQixnQkFBQSxHQUFrQixTQUFBO1dBQUcsSUFBQyxDQUFBLFVBQUQsQ0FBQTtFQUFIOzt3QkFFbEIsUUFBQSxHQUFVLFNBQUE7V0FDUixJQUFDLENBQUEsWUFBWSxDQUFDLElBQWQsQ0FBbUIsSUFBSSxZQUFKLENBQWlCO01BQUUsS0FBQSxFQUFPLElBQUMsQ0FBQSxLQUFWO0tBQWpCLENBQW5CO0VBRFE7Ozs7R0F6QmMsRUFBRSxDQUFDOztBQThCdkI7Ozs7Ozs7MkJBQ0osT0FBQSxHQUFZOzsyQkFDWixTQUFBLEdBQVk7OzJCQUNaLFNBQUEsR0FBWTs7OztHQUhlLEVBQUUsQ0FBQzs7QUFPaEMsTUFBTSxDQUFDLE9BQVAsR0FBaUIifQ==

},{"./csvViewer":130,"./graph":132,"./table":137,"./templates/record_child":143,"hn_views/lib/json_viewer":182,"hn_views/lib/nav":184}],137:[function(require,module,exports){
var RecordTable,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

RecordTable = (function(superClass) {
  extend(RecordTable, superClass);

  function RecordTable() {
    return RecordTable.__super__.constructor.apply(this, arguments);
  }

  RecordTable.prototype.template = require('./templates/table');

  RecordTable.prototype.tagName = 'table';

  RecordTable.prototype.className = 'table table-responsive attr-table';

  RecordTable.prototype.ui = {
    toggleAggregates: '[data-click=toggle-aggegates]'
  };

  RecordTable.prototype.events = {
    'click @ui.toggleAggregates': 'toggleAggregates'
  };

  RecordTable.prototype.aggregatesShown = false;

  RecordTable.prototype.toggleAggregates = function() {
    if (this.aggregatesShown) {
      this.ui.toggleAggregates.text('Show Elements');
      this.$('[data-toggle=aggregates]').hide();
      return this.aggregatesShown = false;
    } else {
      this.ui.toggleAggregates.text('Hide Elements');
      this.$('[data-toggle=aggregates]').show();
      return this.aggregatesShown = true;
    }
  };

  return RecordTable;

})(Mn.LayoutView);

module.exports = RecordTable;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL2Fla3Njby9naXRodWIvbWFnZWxsYW4vYXBwL2NvZmZlZS9tb2R1bGVzL3NlYXJjaC9mYWNldHNlYXJjaC92aWV3cy90YWJsZS5jb2ZmZWUiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIvVXNlcnMvYWVrc2NvL2dpdGh1Yi9tYWdlbGxhbi9hcHAvY29mZmVlL21vZHVsZXMvc2VhcmNoL2ZhY2V0c2VhcmNoL3ZpZXdzL3RhYmxlLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxJQUFBLFdBQUE7RUFBQTs7O0FBQU07Ozs7Ozs7d0JBQ0osUUFBQSxHQUFVLE9BQUEsQ0FBUSxtQkFBUjs7d0JBQ1YsT0FBQSxHQUFZOzt3QkFDWixTQUFBLEdBQVk7O3dCQUVaLEVBQUEsR0FDRTtJQUFBLGdCQUFBLEVBQWtCLCtCQUFsQjs7O3dCQUVGLE1BQUEsR0FDRTtJQUFBLDRCQUFBLEVBQThCLGtCQUE5Qjs7O3dCQUdGLGVBQUEsR0FBaUI7O3dCQUNqQixnQkFBQSxHQUFrQixTQUFBO0lBQ2hCLElBQUcsSUFBQyxDQUFBLGVBQUo7TUFDRSxJQUFDLENBQUEsRUFBRSxDQUFDLGdCQUFnQixDQUFDLElBQXJCLENBQTBCLGVBQTFCO01BQ0EsSUFBQyxDQUFBLENBQUQsQ0FBRywwQkFBSCxDQUE4QixDQUFDLElBQS9CLENBQUE7YUFDQSxJQUFDLENBQUEsZUFBRCxHQUFtQixNQUhyQjtLQUFBLE1BQUE7TUFNRSxJQUFDLENBQUEsRUFBRSxDQUFDLGdCQUFnQixDQUFDLElBQXJCLENBQTBCLGVBQTFCO01BQ0EsSUFBQyxDQUFBLENBQUQsQ0FBRywwQkFBSCxDQUE4QixDQUFDLElBQS9CLENBQUE7YUFDQSxJQUFDLENBQUEsZUFBRCxHQUFtQixLQVJyQjs7RUFEZ0I7Ozs7R0FiTSxFQUFFLENBQUM7O0FBMEI3QixNQUFNLENBQUMsT0FBUCxHQUFpQiJ9

},{"./templates/table":144}],138:[function(require,module,exports){
var jade = require("jade/runtime");

module.exports = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;

buf.push("<div class=\"row\"><div class=\"col-xs-12 csv-viewer\"></div></div>");;return buf.join("");
};
},{"jade/runtime":187}],139:[function(require,module,exports){
var jade = require("jade/runtime");

module.exports = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (Array, data, undefined, views) {
buf.push("<div class=\"row header\"><div class=\"col-xs-12\"><i data-click=\"close\" class=\"fa fa-2x fa-times detail-close\"></i></div><div class=\"col-xs-12 m-t-1\"><h4 class=\"card-title\">" + (jade.escape(null == (jade_interp = data['@id'].split('/').pop()) ? "" : jade_interp)) + "</h4></div></div>");
if ( views.img)
{
buf.push("<div class=\"row\"><div class=\"col-xs-12 text-center\"><img" + (jade.attr("data-zoom", views.img, true, false)) + (jade.attr("src", views.img, true, false)) + " style=\"max-height:30rem;\" class=\"img-thumbnail\"/></div></div>");
}
buf.push("<div class=\"row m-t-1\"><div class=\"col-xs-12\"><table class=\"table table-responsive attr-table\">");
jade_mixins["arrayRow"] = jade_interp = function(attr){
var block = (this && this.block), attributes = (this && this.attributes) || {};
if ( data[attr])
{
if ( typeof(data[attr][0]) == 'object')
{
buf.push("<tr><td>" + (jade.escape((jade_interp = attr) == null ? '' : jade_interp)) + ":</td><td><a data-click=\"toggle-aggegates\">Show Elements</a>&nbsp; (" + (jade.escape((jade_interp = data[attr].length) == null ? '' : jade_interp)) + " items)</td></tr><tr data-toggle=\"aggregates\" style=\"display:none;\" class=\"aggregate-list\"><td></td><td>");
// iterate data[attr]
;(function(){
  var $$obj = data[attr];
  if ('number' == typeof $$obj.length) {

    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {
      var obj = $$obj[$index];

buf.push("<a" + (jade.attr("data-relation", obj['@id'], true, false)) + ">" + (jade.escape(null == (jade_interp = obj['@id']) ? "" : jade_interp)) + "</a>, &nbsp;");
    }

  } else {
    var $$l = 0;
    for (var $index in $$obj) {
      $$l++;      var obj = $$obj[$index];

buf.push("<a" + (jade.attr("data-relation", obj['@id'], true, false)) + ">" + (jade.escape(null == (jade_interp = obj['@id']) ? "" : jade_interp)) + "</a>, &nbsp;");
    }

  }
}).call(this);

buf.push("</td></tr>");
}
else
{
buf.push("<tr><td>" + (jade.escape((jade_interp = attr) == null ? '' : jade_interp)) + ":</td><td>" + (jade.escape((jade_interp = data[attr].join(', ')) == null ? '' : jade_interp)) + "</td></tr>");
}
}
};
jade_mixins["attrRow"] = jade_interp = function(attr){
var block = (this && this.block), attributes = (this && this.attributes) || {};
if ( data[attr])
{
buf.push("<tr><td>" + (jade.escape((jade_interp = attr) == null ? '' : jade_interp)) + ":</td><td>" + (jade.escape((jade_interp = data[attr]) == null ? '' : jade_interp)) + "</td></tr>");
}
};
jade_mixins["idRow"] = jade_interp = function(attr){
var block = (this && this.block), attributes = (this && this.attributes) || {};
if ( data[attr])
{
buf.push("<tr><td>" + (jade.escape((jade_interp = attr) == null ? '' : jade_interp)) + ":</td><td><a" + (jade.attr("data-relation", data[attr]['@id'], true, false)) + ">" + (jade.escape((jade_interp = data[attr]['@id']) == null ? '' : jade_interp)) + "</a></td></tr>");
}
};
buf.push("");
// iterate data
;(function(){
  var $$obj = data;
  if ('number' == typeof $$obj.length) {

    for (var key = 0, $$l = $$obj.length; key < $$l; key++) {
      var val = $$obj[key];

if ( Array.isArray(val))
{
jade_mixins["arrayRow"](key);
}
else if ( typeof val == 'object')
{
jade_mixins["idRow"](key);
}
else
{
jade_mixins["attrRow"](key);
}
    }

  } else {
    var $$l = 0;
    for (var key in $$obj) {
      $$l++;      var val = $$obj[key];

if ( Array.isArray(val))
{
jade_mixins["arrayRow"](key);
}
else if ( typeof val == 'object')
{
jade_mixins["idRow"](key);
}
else
{
jade_mixins["attrRow"](key);
}
    }

  }
}).call(this);

buf.push("</table></div></div>");}.call(this,"Array" in locals_for_with?locals_for_with.Array:typeof Array!=="undefined"?Array:undefined,"data" in locals_for_with?locals_for_with.data:typeof data!=="undefined"?data:undefined,"undefined" in locals_for_with?locals_for_with.undefined:typeof undefined!=="undefined"?undefined:undefined,"views" in locals_for_with?locals_for_with.views:typeof views!=="undefined"?views:undefined));;return buf.join("");
};
},{"jade/runtime":187}],140:[function(require,module,exports){
var jade = require("jade/runtime");

module.exports = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;

buf.push("<div class=\"row\"><div class=\"col-xs-12\"><div data-display=\"graph\"></div></div></div>");;return buf.join("");
};
},{"jade/runtime":187}],141:[function(require,module,exports){
var jade = require("jade/runtime");

module.exports = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (id) {
buf.push("<div class=\"row\"><div class=\"col-xs-6 text-xs-left\"><a data-click=\"clear\" class=\"btn btn-secondary\"><i class=\"fa fa-fw fa-times-circle-o\"></i>&nbsp;\nClear Filters</a></div><div class=\"col-xs-6 text-xs-right\"><div class=\"btn-group\"><a" + (jade.attr("href", "#datasets/" + (id) + "/config", true, false)) + " class=\"btn btn-primary-outline\"><i class=\"fa fa-fw fa-cog\"></i>&nbsp;\nConfiguration</a></div></div></div>");}.call(this,"id" in locals_for_with?locals_for_with.id:typeof id!=="undefined"?id:undefined));;return buf.join("");
};
},{"jade/runtime":187}],142:[function(require,module,exports){
var jade = require("jade/runtime");

module.exports = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;

buf.push("<div class=\"row\"><div class=\"col-xs-3\"><div id=\"facets\"></div></div><div class=\"col-xs-9 p-l-0\"><div class=\"row\"><div data-region=\"header\" class=\"col-xs-12\"></div><div data-region=\"record-list\" class=\"col-xs-12\"></div><div id=\"results\" class=\"col-xs-12\"></div></div></div><div data-region=\"detail\" class=\"rdf-detail\"><div class=\"card card-block\"><h4 class=\"card-title\">RDF Viewer</h4><p class=\"lead\">Click a node to details.</p></div></div><div class=\"drift-underlay\"><div class=\"drift-background\"></div><div class=\"drift-content\"></div></div></div>");;return buf.join("");
};
},{"jade/runtime":187}],143:[function(require,module,exports){
var jade = require("jade/runtime");

module.exports = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (data) {
buf.push("<div class=\"row\"><div class=\"col-xs-12\"><h4 class=\"card-title\"><a" + (jade.attr("data-relation", data['@id'], true, false)) + ">" + (jade.escape(null == (jade_interp = data['@id'].split('/').pop()) ? "" : jade_interp)) + "</a><!-- a(data-click='show-detail' data-uri=data['@id'])= data['rdfs:Label']--></h4></div></div><div class=\"row\"><div data-region=\"viewer\" class=\"col-xs-12\"></div></div>");}.call(this,"data" in locals_for_with?locals_for_with.data:typeof data!=="undefined"?data:undefined));;return buf.join("");
};
},{"jade/runtime":187}],144:[function(require,module,exports){
var jade = require("jade/runtime");

module.exports = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (Array, data, undefined) {
buf.push("");
jade_mixins["arrayRow"] = jade_interp = function(attr){
var block = (this && this.block), attributes = (this && this.attributes) || {};
if ( data[attr])
{
if ( typeof(data[attr][0]) == 'object')
{
buf.push("<tr><td>" + (jade.escape((jade_interp = attr) == null ? '' : jade_interp)) + ":</td><td><a data-click=\"toggle-aggegates\">Show Elements</a>&nbsp; (" + (jade.escape((jade_interp = data[attr].length) == null ? '' : jade_interp)) + " items)</td></tr><tr data-toggle=\"aggregates\" style=\"display:none;\" class=\"aggregate-list\"><td></td><td>");
// iterate data[attr]
;(function(){
  var $$obj = data[attr];
  if ('number' == typeof $$obj.length) {

    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {
      var obj = $$obj[$index];

buf.push("<a" + (jade.attr("data-relation", obj['@id'], true, false)) + ">" + (jade.escape(null == (jade_interp = obj['@id']) ? "" : jade_interp)) + "</a>, &nbsp;");
    }

  } else {
    var $$l = 0;
    for (var $index in $$obj) {
      $$l++;      var obj = $$obj[$index];

buf.push("<a" + (jade.attr("data-relation", obj['@id'], true, false)) + ">" + (jade.escape(null == (jade_interp = obj['@id']) ? "" : jade_interp)) + "</a>, &nbsp;");
    }

  }
}).call(this);

buf.push("</td></tr>");
}
else
{
buf.push("<tr><td>" + (jade.escape((jade_interp = attr) == null ? '' : jade_interp)) + ":</td><td>" + (jade.escape((jade_interp = data[attr].join(', ')) == null ? '' : jade_interp)) + "</td></tr>");
}
}
};
jade_mixins["attrRow"] = jade_interp = function(attr){
var block = (this && this.block), attributes = (this && this.attributes) || {};
if ( data[attr])
{
buf.push("<tr><td>" + (jade.escape((jade_interp = attr) == null ? '' : jade_interp)) + ":</td><td>" + (jade.escape((jade_interp = data[attr]) == null ? '' : jade_interp)) + "</td></tr>");
}
};
jade_mixins["idRow"] = jade_interp = function(attr){
var block = (this && this.block), attributes = (this && this.attributes) || {};
if ( data[attr])
{
buf.push("<tr><td>" + (jade.escape((jade_interp = attr) == null ? '' : jade_interp)) + ":</td><td><a" + (jade.attr("data-relation", data[attr]['@id'], true, false)) + ">" + (jade.escape((jade_interp = data[attr]['@id']) == null ? '' : jade_interp)) + "</a></td></tr>");
}
};
buf.push("");
// iterate data
;(function(){
  var $$obj = data;
  if ('number' == typeof $$obj.length) {

    for (var key = 0, $$l = $$obj.length; key < $$l; key++) {
      var val = $$obj[key];

if ( Array.isArray(val))
{
jade_mixins["arrayRow"](key);
}
else if ( typeof val == 'object')
{
jade_mixins["idRow"](key);
}
else
{
jade_mixins["attrRow"](key);
}
    }

  } else {
    var $$l = 0;
    for (var key in $$obj) {
      $$l++;      var val = $$obj[key];

if ( Array.isArray(val))
{
jade_mixins["arrayRow"](key);
}
else if ( typeof val == 'object')
{
jade_mixins["idRow"](key);
}
else
{
jade_mixins["attrRow"](key);
}
    }

  }
}).call(this);
}.call(this,"Array" in locals_for_with?locals_for_with.Array:typeof Array!=="undefined"?Array:undefined,"data" in locals_for_with?locals_for_with.data:typeof data!=="undefined"?data:undefined,"undefined" in locals_for_with?locals_for_with.undefined:typeof undefined!=="undefined"?undefined:undefined));;return buf.join("");
};
},{"jade/runtime":187}],145:[function(require,module,exports){
var Entities, SearchResultFactory,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Entities = require('./entities');

SearchResultFactory = (function(superClass) {
  extend(SearchResultFactory, superClass);

  function SearchResultFactory() {
    return SearchResultFactory.__super__.constructor.apply(this, arguments);
  }

  SearchResultFactory.prototype.radioRequests = {
    'search:result collection': 'getCollection'
  };

  SearchResultFactory.prototype.initialize = function() {
    return this.cachedCollection = new Entities.Collection();
  };

  SearchResultFactory.prototype.getCollection = function() {
    return new Promise((function(_this) {
      return function(resolve, reject) {
        return resolve(_this.cachedCollection);
      };
    })(this));
  };

  return SearchResultFactory;

})(Marionette.Service);

module.exports = new SearchResultFactory();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL2Fla3Njby9naXRodWIvbWFnZWxsYW4vYXBwL2NvZmZlZS9tb2R1bGVzL3NlYXJjaC9mYWN0b3J5LmNvZmZlZSIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9hZWtzY28vZ2l0aHViL21hZ2VsbGFuL2FwcC9jb2ZmZWUvbW9kdWxlcy9zZWFyY2gvZmFjdG9yeS5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsSUFBQSw2QkFBQTtFQUFBOzs7QUFBQSxRQUFBLEdBQVcsT0FBQSxDQUFRLFlBQVI7O0FBSUw7Ozs7Ozs7Z0NBRUosYUFBQSxHQUNFO0lBQUEsMEJBQUEsRUFBNEIsZUFBNUI7OztnQ0FFRixVQUFBLEdBQVksU0FBQTtXQUNWLElBQUMsQ0FBQSxnQkFBRCxHQUFvQixJQUFJLFFBQVEsQ0FBQyxVQUFiLENBQUE7RUFEVjs7Z0NBR1osYUFBQSxHQUFlLFNBQUE7QUFDYixXQUFPLElBQUksT0FBSixDQUFZLENBQUEsU0FBQSxLQUFBO2FBQUEsU0FBQyxPQUFELEVBQVUsTUFBVjtBQUNqQixlQUFPLE9BQUEsQ0FBUSxLQUFDLENBQUEsZ0JBQVQ7TUFEVTtJQUFBLENBQUEsQ0FBQSxDQUFBLElBQUEsQ0FBWjtFQURNOzs7O0dBUmlCLFVBQVUsQ0FBQzs7QUFjN0MsTUFBTSxDQUFDLE9BQVAsR0FBaUIsSUFBSSxtQkFBSixDQUFBIn0=

},{"./entities":129}],146:[function(require,module,exports){
var AbstractRuleEntities, ViewerRuleCollection, ViewerRuleDecorator, ViewerRuleModel,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

AbstractRuleEntities = require('../abstract_rule/entities');

ViewerRuleDecorator = (function(superClass) {
  extend(ViewerRuleDecorator, superClass);

  function ViewerRuleDecorator() {
    return ViewerRuleDecorator.__super__.constructor.apply(this, arguments);
  }

  ViewerRuleDecorator.prototype.icon = function() {
    return 'fa-globe';
  };

  return ViewerRuleDecorator;

})(Mn.Decorator);

ViewerRuleModel = (function(superClass) {
  extend(ViewerRuleModel, superClass);

  function ViewerRuleModel() {
    return ViewerRuleModel.__super__.constructor.apply(this, arguments);
  }

  ViewerRuleModel.prototype.decorator = ViewerRuleDecorator;

  ViewerRuleModel.prototype.radioChannel = 'viewer:rule';

  return ViewerRuleModel;

})(AbstractRuleEntities.Model);

ViewerRuleModel.setup();

ViewerRuleCollection = (function(superClass) {
  extend(ViewerRuleCollection, superClass);

  function ViewerRuleCollection() {
    return ViewerRuleCollection.__super__.constructor.apply(this, arguments);
  }

  ViewerRuleCollection.prototype.model = ViewerRuleModel;

  ViewerRuleCollection.prototype.target_object = 'views';

  return ViewerRuleCollection;

})(AbstractRuleEntities.Collection);

module.exports = {
  Model: ViewerRuleModel,
  Collection: ViewerRuleCollection
};

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL2Fla3Njby9naXRodWIvbWFnZWxsYW4vYXBwL2NvZmZlZS9tb2R1bGVzL3ZpZXdlcl9ydWxlL2VudGl0aWVzLmNvZmZlZSIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9hZWtzY28vZ2l0aHViL21hZ2VsbGFuL2FwcC9jb2ZmZWUvbW9kdWxlcy92aWV3ZXJfcnVsZS9lbnRpdGllcy5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsSUFBQSxnRkFBQTtFQUFBOzs7QUFBQSxvQkFBQSxHQUF1QixPQUFBLENBQVEsMkJBQVI7O0FBS2pCOzs7Ozs7O2dDQUVKLElBQUEsR0FBTSxTQUFBO0FBQ0osV0FBTztFQURIOzs7O0dBRjBCLEVBQUUsQ0FBQzs7QUFRL0I7Ozs7Ozs7NEJBR0osU0FBQSxHQUFXOzs0QkFHWCxZQUFBLEdBQWM7Ozs7R0FOYyxvQkFBb0IsQ0FBQzs7QUFVbkQsZUFBZSxDQUFDLEtBQWhCLENBQUE7O0FBS007Ozs7Ozs7aUNBQ0osS0FBQSxHQUFPOztpQ0FHUCxhQUFBLEdBQWU7Ozs7R0FKa0Isb0JBQW9CLENBQUM7O0FBUXhELE1BQU0sQ0FBQyxPQUFQLEdBQ0U7RUFBQSxLQUFBLEVBQVksZUFBWjtFQUNBLFVBQUEsRUFBWSxvQkFEWiJ9

},{"../abstract_rule/entities":29}],147:[function(require,module,exports){
var DexieFactory, Entities, ViewerRuleFactory,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Entities = require('./entities');

DexieFactory = require('../base/dexieFactory');

ViewerRuleFactory = (function(superClass) {
  extend(ViewerRuleFactory, superClass);

  function ViewerRuleFactory() {
    return ViewerRuleFactory.__super__.constructor.apply(this, arguments);
  }

  ViewerRuleFactory.prototype.tableName = 'viewer_rules';

  ViewerRuleFactory.prototype.radioRequests = {
    'viewer:rule collection': 'getCollection',
    'viewer:rule save': 'saveModel',
    'viewer:rule destroy': 'destroyModel'
  };

  ViewerRuleFactory.prototype.initialize = function() {
    return this.cachedCollection = new Entities.Collection();
  };

  return ViewerRuleFactory;

})(DexieFactory);

module.exports = new ViewerRuleFactory();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL2Fla3Njby9naXRodWIvbWFnZWxsYW4vYXBwL2NvZmZlZS9tb2R1bGVzL3ZpZXdlcl9ydWxlL2ZhY3RvcnkuY29mZmVlIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiL1VzZXJzL2Fla3Njby9naXRodWIvbWFnZWxsYW4vYXBwL2NvZmZlZS9tb2R1bGVzL3ZpZXdlcl9ydWxlL2ZhY3RvcnkuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLElBQUEseUNBQUE7RUFBQTs7O0FBQUEsUUFBQSxHQUFXLE9BQUEsQ0FBUSxZQUFSOztBQUNYLFlBQUEsR0FBZ0IsT0FBQSxDQUFRLHNCQUFSOztBQUlWOzs7Ozs7OzhCQUdKLFNBQUEsR0FBVzs7OEJBR1gsYUFBQSxHQUNFO0lBQUEsd0JBQUEsRUFBMkIsZUFBM0I7SUFDQSxrQkFBQSxFQUEyQixXQUQzQjtJQUVBLHFCQUFBLEVBQTJCLGNBRjNCOzs7OEJBSUYsVUFBQSxHQUFZLFNBQUE7V0FDVixJQUFDLENBQUEsZ0JBQUQsR0FBb0IsSUFBSSxRQUFRLENBQUMsVUFBYixDQUFBO0VBRFY7Ozs7R0FYa0I7O0FBZ0JoQyxNQUFNLENBQUMsT0FBUCxHQUFpQixJQUFJLGlCQUFKLENBQUEifQ==

},{"../base/dexieFactory":30,"./entities":146}],148:[function(require,module,exports){
var SwapRegion, SwapView, stillAnimating,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

stillAnimating = false;

SwapView = (function(superClass) {
  extend(SwapView, superClass);

  function SwapView() {
    return SwapView.__super__.constructor.apply(this, arguments);
  }

  SwapView.prototype.template = require('./swap');

  SwapView.prototype.className = 'swap-wrapper';

  SwapView.prototype.ui = {
    slot0: '[data-swap=one]',
    slot1: '[data-swap=two]'
  };

  SwapView.prototype.regions = {
    slot0: '[data-swap=one]',
    slot1: '[data-swap=two]'
  };

  SwapView.prototype.currentSlot = 0;

  SwapView.prototype.queued = null;

  SwapView.prototype.showQueued = function() {
    var options, view;
    if (!this.queued) {
      return;
    }
    view = this.queued.view;
    options = this.queued.options;
    this.queued = null;
    return this.swap(view, options);
  };

  SwapView.prototype.swap = function(view, options) {
    var animate, nextSlot, nextSlotNum, nextUI, prevSlot, prevUI;
    if (options == null) {
      options = {};
    }
    if (stillAnimating && this.slot0.currentView && this.slot1.currentView) {
      this.queued = {
        view: view,
        options: options
      };
      return this["slot" + this.currentSlot];
    }
    nextSlotNum = (this.currentSlot + 1) % 2;
    prevSlot = this["slot" + this.currentSlot];
    nextSlot = this["slot" + nextSlotNum];
    prevUI = this.ui["slot" + this.currentSlot];
    nextUI = this.ui["slot" + nextSlotNum];
    this.currentSlot = nextSlotNum;
    stillAnimating = true;
    $('html').css({
      overflow: 'hidden'
    });
    prevUI.addClass('leaving');
    nextUI.addClass('coming');
    if (!prevSlot.currentView) {
      nextUI.addClass('first');
    }
    nextSlot.show(view, options);
    animate = (function(_this) {
      return function() {
        view.triggerMethod('animation:done');
        $('html').css({
          overflow: 'auto'
        });
        prevUI.addClass('out').removeClass('in coming first leaving');
        nextUI.addClass('in').removeClass('out coming first leaving');
        prevSlot.empty();
        stillAnimating = false;
        return _this.showQueued();
      };
    })(this);
    return setTimeout(animate, 500);
  };

  return SwapView;

})(Marionette.LayoutView);

SwapRegion = (function(superClass) {
  extend(SwapRegion, superClass);

  function SwapRegion() {
    return SwapRegion.__super__.constructor.apply(this, arguments);
  }

  SwapRegion.prototype.initialize = function() {
    var swapFuncion;
    swapFuncion = (function(_this) {
      return function(view, options) {
        return _this.swapView.swap(view, options);
      };
    })(this);
    return this.swap = _.throttle(swapFuncion, 250);
  };

  SwapRegion.prototype.show = function(view, options) {
    if (options == null) {
      options = {};
    }
    if (this.swapView) {
      return this.swap(view, options);
    }
    this.swapView = new SwapView(this.swapViewOpts);
    this.swapView.on('show', (function(_this) {
      return function() {
        return _this.swap(view, options);
      };
    })(this));
    return SwapRegion.__super__.show.call(this, this.swapView, options);
  };

  return SwapRegion;

})(Marionette.Region);

module.exports = SwapRegion;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL2Fla3Njby9naXRodWIvbWFnZWxsYW4vbm9kZV9tb2R1bGVzL01hcmlvbmV0dGUuQW5pbWF0ZWRSZWdpb24vbGliL2FuaW1hdGVkUmVnaW9uLmNvZmZlZSIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9hZWtzY28vZ2l0aHViL21hZ2VsbGFuL25vZGVfbW9kdWxlcy9NYXJpb25ldHRlLkFuaW1hdGVkUmVnaW9uL2xpYi9hbmltYXRlZFJlZ2lvbi5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsSUFBQSxvQ0FBQTtFQUFBOzs7QUFBQSxjQUFBLEdBQWlCOztBQUtYOzs7Ozs7O3FCQUNKLFFBQUEsR0FBVSxPQUFBLENBQVEsUUFBUjs7cUJBQ1YsU0FBQSxHQUFXOztxQkFFWCxFQUFBLEdBQ0U7SUFBQSxLQUFBLEVBQU8saUJBQVA7SUFDQSxLQUFBLEVBQU8saUJBRFA7OztxQkFHRixPQUFBLEdBQ0U7SUFBQSxLQUFBLEVBQU8saUJBQVA7SUFDQSxLQUFBLEVBQU8saUJBRFA7OztxQkFJRixXQUFBLEdBQWE7O3FCQUdiLE1BQUEsR0FBUTs7cUJBR1IsVUFBQSxHQUFZLFNBQUE7QUFDVixRQUFBO0lBQUEsSUFBQSxDQUFjLElBQUMsQ0FBQSxNQUFmO0FBQUEsYUFBQTs7SUFDQSxJQUFBLEdBQVUsSUFBQyxDQUFBLE1BQU0sQ0FBQztJQUNsQixPQUFBLEdBQVUsSUFBQyxDQUFBLE1BQU0sQ0FBQztJQUNsQixJQUFDLENBQUEsTUFBRCxHQUFVO1dBQ1YsSUFBQyxDQUFBLElBQUQsQ0FBTSxJQUFOLEVBQVksT0FBWjtFQUxVOztxQkFRWixJQUFBLEdBQU0sU0FBQyxJQUFELEVBQU8sT0FBUDtBQUdKLFFBQUE7O01BSFcsVUFBUTs7SUFHbkIsSUFBRyxjQUFBLElBQWtCLElBQUMsQ0FBQSxLQUFLLENBQUMsV0FBekIsSUFBd0MsSUFBQyxDQUFBLEtBQUssQ0FBQyxXQUFsRDtNQUNFLElBQUMsQ0FBQSxNQUFELEdBQVU7UUFBRSxJQUFBLEVBQU0sSUFBUjtRQUFjLE9BQUEsRUFBUyxPQUF2Qjs7QUFDVixhQUFPLElBQUUsQ0FBQSxNQUFBLEdBQU8sSUFBQyxDQUFBLFdBQVIsRUFGWDs7SUFLQSxXQUFBLEdBQWMsQ0FBQyxJQUFDLENBQUEsV0FBRCxHQUFhLENBQWQsQ0FBQSxHQUFpQjtJQUcvQixRQUFBLEdBQVcsSUFBRSxDQUFBLE1BQUEsR0FBTyxJQUFDLENBQUEsV0FBUjtJQUNiLFFBQUEsR0FBVyxJQUFFLENBQUEsTUFBQSxHQUFPLFdBQVA7SUFDYixNQUFBLEdBQVMsSUFBQyxDQUFBLEVBQUcsQ0FBQSxNQUFBLEdBQU8sSUFBQyxDQUFBLFdBQVI7SUFDYixNQUFBLEdBQVMsSUFBQyxDQUFBLEVBQUcsQ0FBQSxNQUFBLEdBQU8sV0FBUDtJQUdiLElBQUMsQ0FBQSxXQUFELEdBQWU7SUFJZixjQUFBLEdBQWlCO0lBQ2pCLENBQUEsQ0FBRSxNQUFGLENBQVMsQ0FBQyxHQUFWLENBQWM7TUFBRSxRQUFBLEVBQVUsUUFBWjtLQUFkO0lBR0EsTUFBTSxDQUFDLFFBQVAsQ0FBZ0IsU0FBaEI7SUFDQSxNQUFNLENBQUMsUUFBUCxDQUFnQixRQUFoQjtJQUdBLElBQUEsQ0FBZ0MsUUFBUSxDQUFDLFdBQXpDO01BQUEsTUFBTSxDQUFDLFFBQVAsQ0FBZ0IsT0FBaEIsRUFBQTs7SUFDQSxRQUFRLENBQUMsSUFBVCxDQUFjLElBQWQsRUFBb0IsT0FBcEI7SUFHQSxPQUFBLEdBQVUsQ0FBQSxTQUFBLEtBQUE7YUFBQSxTQUFBO1FBRVIsSUFBSSxDQUFDLGFBQUwsQ0FBbUIsZ0JBQW5CO1FBR0EsQ0FBQSxDQUFFLE1BQUYsQ0FBUyxDQUFDLEdBQVYsQ0FBYztVQUFFLFFBQUEsRUFBVSxNQUFaO1NBQWQ7UUFDQSxNQUFNLENBQUMsUUFBUCxDQUFnQixLQUFoQixDQUFzQixDQUFDLFdBQXZCLENBQW1DLHlCQUFuQztRQUNBLE1BQU0sQ0FBQyxRQUFQLENBQWdCLElBQWhCLENBQXFCLENBQUMsV0FBdEIsQ0FBa0MsMEJBQWxDO1FBR0EsUUFBUSxDQUFDLEtBQVQsQ0FBQTtRQUNBLGNBQUEsR0FBaUI7ZUFHakIsS0FBQyxDQUFBLFVBQUQsQ0FBQTtNQWRRO0lBQUEsQ0FBQSxDQUFBLENBQUEsSUFBQTtXQWlCVixVQUFBLENBQVcsT0FBWCxFQUFvQixHQUFwQjtFQWxESTs7OztHQTNCZSxVQUFVLENBQUM7O0FBcUY1Qjs7Ozs7Ozt1QkFFSixVQUFBLEdBQVksU0FBQTtBQUdWLFFBQUE7SUFBQSxXQUFBLEdBQWMsQ0FBQSxTQUFBLEtBQUE7YUFBQSxTQUFDLElBQUQsRUFBTyxPQUFQO0FBQW1CLGVBQU8sS0FBQyxDQUFBLFFBQVEsQ0FBQyxJQUFWLENBQWUsSUFBZixFQUFxQixPQUFyQjtNQUExQjtJQUFBLENBQUEsQ0FBQSxDQUFBLElBQUE7V0FDZCxJQUFDLENBQUEsSUFBRCxHQUFRLENBQUMsQ0FBQyxRQUFGLENBQVksV0FBWixFQUF5QixHQUF6QjtFQUpFOzt1QkFNWixJQUFBLEdBQU0sU0FBQyxJQUFELEVBQU8sT0FBUDs7TUFBTyxVQUFROztJQUduQixJQUErQixJQUFDLENBQUEsUUFBaEM7QUFBQSxhQUFPLElBQUMsQ0FBQSxJQUFELENBQU0sSUFBTixFQUFZLE9BQVosRUFBUDs7SUFHQSxJQUFDLENBQUEsUUFBRCxHQUFZLElBQUksUUFBSixDQUFhLElBQUMsQ0FBQSxZQUFkO0lBQ1osSUFBQyxDQUFBLFFBQVEsQ0FBQyxFQUFWLENBQWEsTUFBYixFQUFxQixDQUFBLFNBQUEsS0FBQTthQUFBLFNBQUE7ZUFBRyxLQUFDLENBQUEsSUFBRCxDQUFNLElBQU4sRUFBWSxPQUFaO01BQUg7SUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLENBQXJCO1dBQ0EscUNBQU0sSUFBQyxDQUFBLFFBQVAsRUFBaUIsT0FBakI7RUFSSTs7OztHQVJpQixVQUFVLENBQUM7O0FBb0JwQyxNQUFNLENBQUMsT0FBUCxHQUFpQiJ9

},{"./swap":149}],149:[function(require,module,exports){
var jade = require("jade/runtime");

module.exports = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;

buf.push("<div data-swap=\"one\" class=\"swap up-down out\"></div><div data-swap=\"two\" class=\"swap up-down in\"></div>");;return buf.join("");
};
},{"jade/runtime":187}],150:[function(require,module,exports){
// Backbone.BabySitter
// -------------------
// v0.1.11
//
// Copyright (c)2016 Derick Bailey, Muted Solutions, LLC.
// Distributed under MIT license
//
// http://github.com/marionettejs/backbone.babysitter

(function(root, factory) {

  if (typeof define === 'function' && define.amd) {
    define(['backbone', 'underscore'], function(Backbone, _) {
      return factory(Backbone, _);
    });
  } else if (typeof exports !== 'undefined') {
    var Backbone = require('backbone');
    var _ = require('underscore');
    module.exports = factory(Backbone, _);
  } else {
    factory(root.Backbone, root._);
  }

}(this, function(Backbone, _) {
  'use strict';

  var previousChildViewContainer = Backbone.ChildViewContainer;

  // BabySitter.ChildViewContainer
  // -----------------------------
  //
  // Provide a container to store, retrieve and
  // shut down child views.
  
  Backbone.ChildViewContainer = (function (Backbone, _) {
  
    // Container Constructor
    // ---------------------
  
    var Container = function(views){
      this._views = {};
      this._indexByModel = {};
      this._indexByCustom = {};
      this._updateLength();
  
      _.each(views, this.add, this);
    };
  
    // Container Methods
    // -----------------
  
    _.extend(Container.prototype, {
  
      // Add a view to this container. Stores the view
      // by `cid` and makes it searchable by the model
      // cid (and model itself). Optionally specify
      // a custom key to store an retrieve the view.
      add: function(view, customIndex){
        var viewCid = view.cid;
  
        // store the view
        this._views[viewCid] = view;
  
        // index it by model
        if (view.model){
          this._indexByModel[view.model.cid] = viewCid;
        }
  
        // index by custom
        if (customIndex){
          this._indexByCustom[customIndex] = viewCid;
        }
  
        this._updateLength();
        return this;
      },
  
      // Find a view by the model that was attached to
      // it. Uses the model's `cid` to find it.
      findByModel: function(model){
        return this.findByModelCid(model.cid);
      },
  
      // Find a view by the `cid` of the model that was attached to
      // it. Uses the model's `cid` to find the view `cid` and
      // retrieve the view using it.
      findByModelCid: function(modelCid){
        var viewCid = this._indexByModel[modelCid];
        return this.findByCid(viewCid);
      },
  
      // Find a view by a custom indexer.
      findByCustom: function(index){
        var viewCid = this._indexByCustom[index];
        return this.findByCid(viewCid);
      },
  
      // Find by index. This is not guaranteed to be a
      // stable index.
      findByIndex: function(index){
        return _.values(this._views)[index];
      },
  
      // retrieve a view by its `cid` directly
      findByCid: function(cid){
        return this._views[cid];
      },
  
      // Remove a view
      remove: function(view){
        var viewCid = view.cid;
  
        // delete model index
        if (view.model){
          delete this._indexByModel[view.model.cid];
        }
  
        // delete custom index
        _.any(this._indexByCustom, function(cid, key) {
          if (cid === viewCid) {
            delete this._indexByCustom[key];
            return true;
          }
        }, this);
  
        // remove the view from the container
        delete this._views[viewCid];
  
        // update the length
        this._updateLength();
        return this;
      },
  
      // Call a method on every view in the container,
      // passing parameters to the call method one at a
      // time, like `function.call`.
      call: function(method){
        this.apply(method, _.tail(arguments));
      },
  
      // Apply a method on every view in the container,
      // passing parameters to the call method one at a
      // time, like `function.apply`.
      apply: function(method, args){
        _.each(this._views, function(view){
          if (_.isFunction(view[method])){
            view[method].apply(view, args || []);
          }
        });
      },
  
      // Update the `.length` attribute on this container
      _updateLength: function(){
        this.length = _.size(this._views);
      }
    });
  
    // Borrowing this code from Backbone.Collection:
    // http://backbonejs.org/docs/backbone.html#section-106
    //
    // Mix in methods from Underscore, for iteration, and other
    // collection related features.
    var methods = ['forEach', 'each', 'map', 'find', 'detect', 'filter',
      'select', 'reject', 'every', 'all', 'some', 'any', 'include',
      'contains', 'invoke', 'toArray', 'first', 'initial', 'rest',
      'last', 'without', 'isEmpty', 'pluck', 'reduce'];
  
    _.each(methods, function(method) {
      Container.prototype[method] = function() {
        var views = _.values(this._views);
        var args = [views].concat(_.toArray(arguments));
        return _[method].apply(_, args);
      };
    });
  
    // return the public API
    return Container;
  })(Backbone, _);
  

  Backbone.ChildViewContainer.VERSION = '0.1.11';

  Backbone.ChildViewContainer.noConflict = function () {
    Backbone.ChildViewContainer = previousChildViewContainer;
    return this;
  };

  return Backbone.ChildViewContainer;

}));

},{"backbone":153,"underscore":262}],151:[function(require,module,exports){
// MarionetteJS (Backbone.Marionette)
// ----------------------------------
// v2.4.7
//
// Copyright (c)2016 Derick Bailey, Muted Solutions, LLC.
// Distributed under MIT license
//
// http://marionettejs.com

(function(root, factory) {

  if (typeof define === 'function' && define.amd) {
    define(['backbone', 'underscore', 'backbone.wreqr', 'backbone.babysitter'], function(Backbone, _) {
      return (root.Marionette = root.Mn = factory(root, Backbone, _));
    });
  } else if (typeof exports !== 'undefined') {
    var Backbone = require('backbone');
    var _ = require('underscore');
    var Wreqr = require('backbone.wreqr');
    var BabySitter = require('backbone.babysitter');
    module.exports = factory(root, Backbone, _);
  } else {
    root.Marionette = root.Mn = factory(root, root.Backbone, root._);
  }

}(this, function(root, Backbone, _) {
  'use strict';

  var previousMarionette = root.Marionette;
  var previousMn = root.Mn;

  var Marionette = Backbone.Marionette = {};

  Marionette.VERSION = '2.4.7';

  Marionette.noConflict = function() {
    root.Marionette = previousMarionette;
    root.Mn = previousMn;
    return this;
  };

  // Get the Deferred creator for later use
  Marionette.Deferred = Backbone.$.Deferred;

  Marionette.FEATURES = {
  };
  
  Marionette.isEnabled = function(name) {
    return !!Marionette.FEATURES[name];
  };
  
  /* jshint unused: false *//* global console */
  
  // Helpers
  // -------
  
  // Marionette.extend
  // -----------------
  
  // Borrow the Backbone `extend` method so we can use it as needed
  Marionette.extend = Backbone.Model.extend;
  
  // Marionette.isNodeAttached
  // -------------------------
  
  // Determine if `el` is a child of the document
  Marionette.isNodeAttached = function(el) {
    return Backbone.$.contains(document.documentElement, el);
  };
  
  // Merge `keys` from `options` onto `this`
  Marionette.mergeOptions = function(options, keys) {
    if (!options) { return; }
    _.extend(this, _.pick(options, keys));
  };
  
  // Marionette.getOption
  // --------------------
  
  // Retrieve an object, function or other value from a target
  // object or its `options`, with `options` taking precedence.
  Marionette.getOption = function(target, optionName) {
    if (!target || !optionName) { return; }
    if (target.options && (target.options[optionName] !== undefined)) {
      return target.options[optionName];
    } else {
      return target[optionName];
    }
  };
  
  // Proxy `Marionette.getOption`
  Marionette.proxyGetOption = function(optionName) {
    return Marionette.getOption(this, optionName);
  };
  
  // Similar to `_.result`, this is a simple helper
  // If a function is provided we call it with context
  // otherwise just return the value. If the value is
  // undefined return a default value
  Marionette._getValue = function(value, context, params) {
    if (_.isFunction(value)) {
      value = params ? value.apply(context, params) : value.call(context);
    }
    return value;
  };
  
  // Marionette.normalizeMethods
  // ----------------------
  
  // Pass in a mapping of events => functions or function names
  // and return a mapping of events => functions
  Marionette.normalizeMethods = function(hash) {
    return _.reduce(hash, function(normalizedHash, method, name) {
      if (!_.isFunction(method)) {
        method = this[method];
      }
      if (method) {
        normalizedHash[name] = method;
      }
      return normalizedHash;
    }, {}, this);
  };
  
  // utility method for parsing @ui. syntax strings
  // into associated selector
  Marionette.normalizeUIString = function(uiString, ui) {
    return uiString.replace(/@ui\.[a-zA-Z-_$0-9]*/g, function(r) {
      return ui[r.slice(4)];
    });
  };
  
  // allows for the use of the @ui. syntax within
  // a given key for triggers and events
  // swaps the @ui with the associated selector.
  // Returns a new, non-mutated, parsed events hash.
  Marionette.normalizeUIKeys = function(hash, ui) {
    return _.reduce(hash, function(memo, val, key) {
      var normalizedKey = Marionette.normalizeUIString(key, ui);
      memo[normalizedKey] = val;
      return memo;
    }, {});
  };
  
  // allows for the use of the @ui. syntax within
  // a given value for regions
  // swaps the @ui with the associated selector
  Marionette.normalizeUIValues = function(hash, ui, properties) {
    _.each(hash, function(val, key) {
      if (_.isString(val)) {
        hash[key] = Marionette.normalizeUIString(val, ui);
      } else if (_.isObject(val) && _.isArray(properties)) {
        _.extend(val, Marionette.normalizeUIValues(_.pick(val, properties), ui));
        /* Value is an object, and we got an array of embedded property names to normalize. */
        _.each(properties, function(property) {
          var propertyVal = val[property];
          if (_.isString(propertyVal)) {
            val[property] = Marionette.normalizeUIString(propertyVal, ui);
          }
        });
      }
    });
    return hash;
  };
  
  // Mix in methods from Underscore, for iteration, and other
  // collection related features.
  // Borrowing this code from Backbone.Collection:
  // http://backbonejs.org/docs/backbone.html#section-121
  Marionette.actAsCollection = function(object, listProperty) {
    var methods = ['forEach', 'each', 'map', 'find', 'detect', 'filter',
      'select', 'reject', 'every', 'all', 'some', 'any', 'include',
      'contains', 'invoke', 'toArray', 'first', 'initial', 'rest',
      'last', 'without', 'isEmpty', 'pluck'];
  
    _.each(methods, function(method) {
      object[method] = function() {
        var list = _.values(_.result(this, listProperty));
        var args = [list].concat(_.toArray(arguments));
        return _[method].apply(_, args);
      };
    });
  };
  
  var deprecate = Marionette.deprecate = function(message, test) {
    if (_.isObject(message)) {
      message = (
        message.prev + ' is going to be removed in the future. ' +
        'Please use ' + message.next + ' instead.' +
        (message.url ? ' See: ' + message.url : '')
      );
    }
  
    if ((test === undefined || !test) && !deprecate._cache[message]) {
      deprecate._warn('Deprecation warning: ' + message);
      deprecate._cache[message] = true;
    }
  };
  
  deprecate._console = typeof console !== 'undefined' ? console : {};
  deprecate._warn = function() {
    var warn = deprecate._console.warn || deprecate._console.log || function() {};
    return warn.apply(deprecate._console, arguments);
  };
  deprecate._cache = {};
  
  /* jshint maxstatements: 14, maxcomplexity: 7 */
  
  // Trigger Method
  // --------------
  
  Marionette._triggerMethod = (function() {
    // split the event name on the ":"
    var splitter = /(^|:)(\w)/gi;
  
    // take the event section ("section1:section2:section3")
    // and turn it in to uppercase name
    function getEventName(match, prefix, eventName) {
      return eventName.toUpperCase();
    }
  
    return function(context, event, args) {
      var noEventArg = arguments.length < 3;
      if (noEventArg) {
        args = event;
        event = args[0];
      }
  
      // get the method name from the event name
      var methodName = 'on' + event.replace(splitter, getEventName);
      var method = context[methodName];
      var result;
  
      // call the onMethodName if it exists
      if (_.isFunction(method)) {
        // pass all args, except the event name
        result = method.apply(context, noEventArg ? _.rest(args) : args);
      }
  
      // trigger the event, if a trigger method exists
      if (_.isFunction(context.trigger)) {
        if (noEventArg + args.length > 1) {
          context.trigger.apply(context, noEventArg ? args : [event].concat(_.drop(args, 0)));
        } else {
          context.trigger(event);
        }
      }
  
      return result;
    };
  })();
  
  // Trigger an event and/or a corresponding method name. Examples:
  //
  // `this.triggerMethod("foo")` will trigger the "foo" event and
  // call the "onFoo" method.
  //
  // `this.triggerMethod("foo:bar")` will trigger the "foo:bar" event and
  // call the "onFooBar" method.
  Marionette.triggerMethod = function(event) {
    return Marionette._triggerMethod(this, arguments);
  };
  
  // triggerMethodOn invokes triggerMethod on a specific context
  //
  // e.g. `Marionette.triggerMethodOn(view, 'show')`
  // will trigger a "show" event or invoke onShow the view.
  Marionette.triggerMethodOn = function(context) {
    var fnc = _.isFunction(context.triggerMethod) ?
                  context.triggerMethod :
                  Marionette.triggerMethod;
  
    return fnc.apply(context, _.rest(arguments));
  };
  
  // DOM Refresh
  // -----------
  
  // Monitor a view's state, and after it has been rendered and shown
  // in the DOM, trigger a "dom:refresh" event every time it is
  // re-rendered.
  
  Marionette.MonitorDOMRefresh = function(view) {
    if (view._isDomRefreshMonitored) { return; }
    view._isDomRefreshMonitored = true;
  
    // track when the view has been shown in the DOM,
    // using a Marionette.Region (or by other means of triggering "show")
    function handleShow() {
      view._isShown = true;
      triggerDOMRefresh();
    }
  
    // track when the view has been rendered
    function handleRender() {
      view._isRendered = true;
      triggerDOMRefresh();
    }
  
    // Trigger the "dom:refresh" event and corresponding "onDomRefresh" method
    function triggerDOMRefresh() {
      if (view._isShown && view._isRendered && Marionette.isNodeAttached(view.el)) {
        Marionette.triggerMethodOn(view, 'dom:refresh', view);
      }
    }
  
    view.on({
      show: handleShow,
      render: handleRender
    });
  };
  
  /* jshint maxparams: 5 */
  
  // Bind Entity Events & Unbind Entity Events
  // -----------------------------------------
  //
  // These methods are used to bind/unbind a backbone "entity" (e.g. collection/model)
  // to methods on a target object.
  //
  // The first parameter, `target`, must have the Backbone.Events module mixed in.
  //
  // The second parameter is the `entity` (Backbone.Model, Backbone.Collection or
  // any object that has Backbone.Events mixed in) to bind the events from.
  //
  // The third parameter is a hash of { "event:name": "eventHandler" }
  // configuration. Multiple handlers can be separated by a space. A
  // function can be supplied instead of a string handler name.
  
  (function(Marionette) {
    'use strict';
  
    // Bind the event to handlers specified as a string of
    // handler names on the target object
    function bindFromStrings(target, entity, evt, methods) {
      var methodNames = methods.split(/\s+/);
  
      _.each(methodNames, function(methodName) {
  
        var method = target[methodName];
        if (!method) {
          throw new Marionette.Error('Method "' + methodName +
            '" was configured as an event handler, but does not exist.');
        }
  
        target.listenTo(entity, evt, method);
      });
    }
  
    // Bind the event to a supplied callback function
    function bindToFunction(target, entity, evt, method) {
      target.listenTo(entity, evt, method);
    }
  
    // Bind the event to handlers specified as a string of
    // handler names on the target object
    function unbindFromStrings(target, entity, evt, methods) {
      var methodNames = methods.split(/\s+/);
  
      _.each(methodNames, function(methodName) {
        var method = target[methodName];
        target.stopListening(entity, evt, method);
      });
    }
  
    // Bind the event to a supplied callback function
    function unbindToFunction(target, entity, evt, method) {
      target.stopListening(entity, evt, method);
    }
  
    // generic looping function
    function iterateEvents(target, entity, bindings, functionCallback, stringCallback) {
      if (!entity || !bindings) { return; }
  
      // type-check bindings
      if (!_.isObject(bindings)) {
        throw new Marionette.Error({
          message: 'Bindings must be an object or function.',
          url: 'marionette.functions.html#marionettebindentityevents'
        });
      }
  
      // allow the bindings to be a function
      bindings = Marionette._getValue(bindings, target);
  
      // iterate the bindings and bind them
      _.each(bindings, function(methods, evt) {
  
        // allow for a function as the handler,
        // or a list of event names as a string
        if (_.isFunction(methods)) {
          functionCallback(target, entity, evt, methods);
        } else {
          stringCallback(target, entity, evt, methods);
        }
  
      });
    }
  
    // Export Public API
    Marionette.bindEntityEvents = function(target, entity, bindings) {
      iterateEvents(target, entity, bindings, bindToFunction, bindFromStrings);
    };
  
    Marionette.unbindEntityEvents = function(target, entity, bindings) {
      iterateEvents(target, entity, bindings, unbindToFunction, unbindFromStrings);
    };
  
    // Proxy `bindEntityEvents`
    Marionette.proxyBindEntityEvents = function(entity, bindings) {
      return Marionette.bindEntityEvents(this, entity, bindings);
    };
  
    // Proxy `unbindEntityEvents`
    Marionette.proxyUnbindEntityEvents = function(entity, bindings) {
      return Marionette.unbindEntityEvents(this, entity, bindings);
    };
  })(Marionette);
  

  // Error
  // -----
  
  var errorProps = ['description', 'fileName', 'lineNumber', 'name', 'message', 'number'];
  
  Marionette.Error = Marionette.extend.call(Error, {
    urlRoot: 'http://marionettejs.com/docs/v' + Marionette.VERSION + '/',
  
    constructor: function(message, options) {
      if (_.isObject(message)) {
        options = message;
        message = options.message;
      } else if (!options) {
        options = {};
      }
  
      var error = Error.call(this, message);
      _.extend(this, _.pick(error, errorProps), _.pick(options, errorProps));
  
      this.captureStackTrace();
  
      if (options.url) {
        this.url = this.urlRoot + options.url;
      }
    },
  
    captureStackTrace: function() {
      if (Error.captureStackTrace) {
        Error.captureStackTrace(this, Marionette.Error);
      }
    },
  
    toString: function() {
      return this.name + ': ' + this.message + (this.url ? ' See: ' + this.url : '');
    }
  });
  
  Marionette.Error.extend = Marionette.extend;
  
  // Callbacks
  // ---------
  
  // A simple way of managing a collection of callbacks
  // and executing them at a later point in time, using jQuery's
  // `Deferred` object.
  Marionette.Callbacks = function() {
    this._deferred = Marionette.Deferred();
    this._callbacks = [];
  };
  
  _.extend(Marionette.Callbacks.prototype, {
  
    // Add a callback to be executed. Callbacks added here are
    // guaranteed to execute, even if they are added after the
    // `run` method is called.
    add: function(callback, contextOverride) {
      var promise = _.result(this._deferred, 'promise');
  
      this._callbacks.push({cb: callback, ctx: contextOverride});
  
      promise.then(function(args) {
        if (contextOverride) { args.context = contextOverride; }
        callback.call(args.context, args.options);
      });
    },
  
    // Run all registered callbacks with the context specified.
    // Additional callbacks can be added after this has been run
    // and they will still be executed.
    run: function(options, context) {
      this._deferred.resolve({
        options: options,
        context: context
      });
    },
  
    // Resets the list of callbacks to be run, allowing the same list
    // to be run multiple times - whenever the `run` method is called.
    reset: function() {
      var callbacks = this._callbacks;
      this._deferred = Marionette.Deferred();
      this._callbacks = [];
  
      _.each(callbacks, function(cb) {
        this.add(cb.cb, cb.ctx);
      }, this);
    }
  });
  
  // Controller
  // ----------
  
  // A multi-purpose object to use as a controller for
  // modules and routers, and as a mediator for workflow
  // and coordination of other objects, views, and more.
  Marionette.Controller = function(options) {
    this.options = options || {};
  
    if (_.isFunction(this.initialize)) {
      this.initialize(this.options);
    }
  };
  
  Marionette.Controller.extend = Marionette.extend;
  
  // Controller Methods
  // --------------
  
  // Ensure it can trigger events with Backbone.Events
  _.extend(Marionette.Controller.prototype, Backbone.Events, {
    destroy: function() {
      Marionette._triggerMethod(this, 'before:destroy', arguments);
      Marionette._triggerMethod(this, 'destroy', arguments);
  
      this.stopListening();
      this.off();
      return this;
    },
  
    // import the `triggerMethod` to trigger events with corresponding
    // methods if the method exists
    triggerMethod: Marionette.triggerMethod,
  
    // A handy way to merge options onto the instance
    mergeOptions: Marionette.mergeOptions,
  
    // Proxy `getOption` to enable getting options from this or this.options by name.
    getOption: Marionette.proxyGetOption
  
  });
  
  // Object
  // ------
  
  // A Base Class that other Classes should descend from.
  // Object borrows many conventions and utilities from Backbone.
  Marionette.Object = function(options) {
    this.options = _.extend({}, _.result(this, 'options'), options);
  
    this.initialize.apply(this, arguments);
  };
  
  Marionette.Object.extend = Marionette.extend;
  
  // Object Methods
  // --------------
  
  // Ensure it can trigger events with Backbone.Events
  _.extend(Marionette.Object.prototype, Backbone.Events, {
  
    //this is a noop method intended to be overridden by classes that extend from this base
    initialize: function() {},
  
    destroy: function(options) {
      options = options || {};
  
      this.triggerMethod('before:destroy', options);
      this.triggerMethod('destroy', options);
      this.stopListening();
  
      return this;
    },
  
    // Import the `triggerMethod` to trigger events with corresponding
    // methods if the method exists
    triggerMethod: Marionette.triggerMethod,
  
    // A handy way to merge options onto the instance
    mergeOptions: Marionette.mergeOptions,
  
    // Proxy `getOption` to enable getting options from this or this.options by name.
    getOption: Marionette.proxyGetOption,
  
    // Proxy `bindEntityEvents` to enable binding view's events from another entity.
    bindEntityEvents: Marionette.proxyBindEntityEvents,
  
    // Proxy `unbindEntityEvents` to enable unbinding view's events from another entity.
    unbindEntityEvents: Marionette.proxyUnbindEntityEvents
  });
  
  /* jshint maxcomplexity: 16, maxstatements: 45, maxlen: 120 */
  
  // Region
  // ------
  
  // Manage the visual regions of your composite application. See
  // http://lostechies.com/derickbailey/2011/12/12/composite-js-apps-regions-and-region-managers/
  
  Marionette.Region = Marionette.Object.extend({
    constructor: function(options) {
  
      // set options temporarily so that we can get `el`.
      // options will be overriden by Object.constructor
      this.options = options || {};
      this.el = this.getOption('el');
  
      // Handle when this.el is passed in as a $ wrapped element.
      this.el = this.el instanceof Backbone.$ ? this.el[0] : this.el;
  
      if (!this.el) {
        throw new Marionette.Error({
          name: 'NoElError',
          message: 'An "el" must be specified for a region.'
        });
      }
  
      this.$el = this.getEl(this.el);
      Marionette.Object.call(this, options);
    },
  
    // Displays a backbone view instance inside of the region.
    // Handles calling the `render` method for you. Reads content
    // directly from the `el` attribute. Also calls an optional
    // `onShow` and `onDestroy` method on your view, just after showing
    // or just before destroying the view, respectively.
    // The `preventDestroy` option can be used to prevent a view from
    // the old view being destroyed on show.
    // The `forceShow` option can be used to force a view to be
    // re-rendered if it's already shown in the region.
    show: function(view, options) {
      if (!this._ensureElement()) {
        return;
      }
  
      this._ensureViewIsIntact(view);
      Marionette.MonitorDOMRefresh(view);
  
      var showOptions     = options || {};
      var isDifferentView = view !== this.currentView;
      var preventDestroy  = !!showOptions.preventDestroy;
      var forceShow       = !!showOptions.forceShow;
  
      // We are only changing the view if there is a current view to change to begin with
      var isChangingView = !!this.currentView;
  
      // Only destroy the current view if we don't want to `preventDestroy` and if
      // the view given in the first argument is different than `currentView`
      var _shouldDestroyView = isDifferentView && !preventDestroy;
  
      // Only show the view given in the first argument if it is different than
      // the current view or if we want to re-show the view. Note that if
      // `_shouldDestroyView` is true, then `_shouldShowView` is also necessarily true.
      var _shouldShowView = isDifferentView || forceShow;
  
      if (isChangingView) {
        this.triggerMethod('before:swapOut', this.currentView, this, options);
      }
  
      if (this.currentView && isDifferentView) {
        delete this.currentView._parent;
      }
  
      if (_shouldDestroyView) {
        this.empty();
  
      // A `destroy` event is attached to the clean up manually removed views.
      // We need to detach this event when a new view is going to be shown as it
      // is no longer relevant.
      } else if (isChangingView && _shouldShowView) {
        this.currentView.off('destroy', this.empty, this);
      }
  
      if (_shouldShowView) {
  
        // We need to listen for if a view is destroyed
        // in a way other than through the region.
        // If this happens we need to remove the reference
        // to the currentView since once a view has been destroyed
        // we can not reuse it.
        view.once('destroy', this.empty, this);
  
        // make this region the view's parent,
        // It's important that this parent binding happens before rendering
        // so that any events the child may trigger during render can also be
        // triggered on the child's ancestor views
        view._parent = this;
        this._renderView(view);
  
        if (isChangingView) {
          this.triggerMethod('before:swap', view, this, options);
        }
  
        this.triggerMethod('before:show', view, this, options);
        Marionette.triggerMethodOn(view, 'before:show', view, this, options);
  
        if (isChangingView) {
          this.triggerMethod('swapOut', this.currentView, this, options);
        }
  
        // An array of views that we're about to display
        var attachedRegion = Marionette.isNodeAttached(this.el);
  
        // The views that we're about to attach to the document
        // It's important that we prevent _getNestedViews from being executed unnecessarily
        // as it's a potentially-slow method
        var displayedViews = [];
  
        var attachOptions = _.extend({
          triggerBeforeAttach: this.triggerBeforeAttach,
          triggerAttach: this.triggerAttach
        }, showOptions);
  
        if (attachedRegion && attachOptions.triggerBeforeAttach) {
          displayedViews = this._displayedViews(view);
          this._triggerAttach(displayedViews, 'before:');
        }
  
        this.attachHtml(view);
        this.currentView = view;
  
        if (attachedRegion && attachOptions.triggerAttach) {
          displayedViews = this._displayedViews(view);
          this._triggerAttach(displayedViews);
        }
  
        if (isChangingView) {
          this.triggerMethod('swap', view, this, options);
        }
  
        this.triggerMethod('show', view, this, options);
        Marionette.triggerMethodOn(view, 'show', view, this, options);
  
        return this;
      }
  
      return this;
    },
  
    triggerBeforeAttach: true,
    triggerAttach: true,
  
    _triggerAttach: function(views, prefix) {
      var eventName = (prefix || '') + 'attach';
      _.each(views, function(view) {
        Marionette.triggerMethodOn(view, eventName, view, this);
      }, this);
    },
  
    _displayedViews: function(view) {
      return _.union([view], _.result(view, '_getNestedViews') || []);
    },
  
    _renderView: function(view) {
      if (!view.supportsRenderLifecycle) {
        Marionette.triggerMethodOn(view, 'before:render', view);
      }
      view.render();
      if (!view.supportsRenderLifecycle) {
        Marionette.triggerMethodOn(view, 'render', view);
      }
    },
  
    _ensureElement: function() {
      if (!_.isObject(this.el)) {
        this.$el = this.getEl(this.el);
        this.el = this.$el[0];
      }
  
      if (!this.$el || this.$el.length === 0) {
        if (this.getOption('allowMissingEl')) {
          return false;
        } else {
          throw new Marionette.Error('An "el" ' + this.$el.selector + ' must exist in DOM');
        }
      }
      return true;
    },
  
    _ensureViewIsIntact: function(view) {
      if (!view) {
        throw new Marionette.Error({
          name: 'ViewNotValid',
          message: 'The view passed is undefined and therefore invalid. You must pass a view instance to show.'
        });
      }
  
      if (view.isDestroyed) {
        throw new Marionette.Error({
          name: 'ViewDestroyedError',
          message: 'View (cid: "' + view.cid + '") has already been destroyed and cannot be used.'
        });
      }
    },
  
    // Override this method to change how the region finds the DOM
    // element that it manages. Return a jQuery selector object scoped
    // to a provided parent el or the document if none exists.
    getEl: function(el) {
      return Backbone.$(el, Marionette._getValue(this.options.parentEl, this));
    },
  
    // Override this method to change how the new view is
    // appended to the `$el` that the region is managing
    attachHtml: function(view) {
      this.$el.contents().detach();
  
      this.el.appendChild(view.el);
    },
  
    // Destroy the current view, if there is one. If there is no
    // current view, it does nothing and returns immediately.
    empty: function(options) {
      var view = this.currentView;
  
      var emptyOptions = options || {};
      var preventDestroy  = !!emptyOptions.preventDestroy;
      // If there is no view in the region
      // we should not remove anything
      if (!view) { return this; }
  
      view.off('destroy', this.empty, this);
      this.triggerMethod('before:empty', view);
      if (!preventDestroy) {
        this._destroyView();
      }
      this.triggerMethod('empty', view);
  
      // Remove region pointer to the currentView
      delete this.currentView;
  
      if (preventDestroy) {
        this.$el.contents().detach();
      }
  
      return this;
    },
  
    // call 'destroy' or 'remove', depending on which is found
    // on the view (if showing a raw Backbone view or a Marionette View)
    _destroyView: function() {
      var view = this.currentView;
      if (view.isDestroyed) { return; }
  
      if (!view.supportsDestroyLifecycle) {
        Marionette.triggerMethodOn(view, 'before:destroy', view);
      }
      if (view.destroy) {
        view.destroy();
      } else {
        view.remove();
  
        // appending isDestroyed to raw Backbone View allows regions
        // to throw a ViewDestroyedError for this view
        view.isDestroyed = true;
      }
      if (!view.supportsDestroyLifecycle) {
        Marionette.triggerMethodOn(view, 'destroy', view);
      }
    },
  
    // Attach an existing view to the region. This
    // will not call `render` or `onShow` for the new view,
    // and will not replace the current HTML for the `el`
    // of the region.
    attachView: function(view) {
      if (this.currentView) {
        delete this.currentView._parent;
      }
      view._parent = this;
      this.currentView = view;
      return this;
    },
  
    // Checks whether a view is currently present within
    // the region. Returns `true` if there is and `false` if
    // no view is present.
    hasView: function() {
      return !!this.currentView;
    },
  
    // Reset the region by destroying any existing view and
    // clearing out the cached `$el`. The next time a view
    // is shown via this region, the region will re-query the
    // DOM for the region's `el`.
    reset: function() {
      this.empty();
  
      if (this.$el) {
        this.el = this.$el.selector;
      }
  
      delete this.$el;
      return this;
    }
  
  },
  
  // Static Methods
  {
  
    // Build an instance of a region by passing in a configuration object
    // and a default region class to use if none is specified in the config.
    //
    // The config object should either be a string as a jQuery DOM selector,
    // a Region class directly, or an object literal that specifies a selector,
    // a custom regionClass, and any options to be supplied to the region:
    //
    // ```js
    // {
    //   selector: "#foo",
    //   regionClass: MyCustomRegion,
    //   allowMissingEl: false
    // }
    // ```
    //
    buildRegion: function(regionConfig, DefaultRegionClass) {
      if (_.isString(regionConfig)) {
        return this._buildRegionFromSelector(regionConfig, DefaultRegionClass);
      }
  
      if (regionConfig.selector || regionConfig.el || regionConfig.regionClass) {
        return this._buildRegionFromObject(regionConfig, DefaultRegionClass);
      }
  
      if (_.isFunction(regionConfig)) {
        return this._buildRegionFromRegionClass(regionConfig);
      }
  
      throw new Marionette.Error({
        message: 'Improper region configuration type.',
        url: 'marionette.region.html#region-configuration-types'
      });
    },
  
    // Build the region from a string selector like '#foo-region'
    _buildRegionFromSelector: function(selector, DefaultRegionClass) {
      return new DefaultRegionClass({el: selector});
    },
  
    // Build the region from a configuration object
    // ```js
    // { selector: '#foo', regionClass: FooRegion, allowMissingEl: false }
    // ```
    _buildRegionFromObject: function(regionConfig, DefaultRegionClass) {
      var RegionClass = regionConfig.regionClass || DefaultRegionClass;
      var options = _.omit(regionConfig, 'selector', 'regionClass');
  
      if (regionConfig.selector && !options.el) {
        options.el = regionConfig.selector;
      }
  
      return new RegionClass(options);
    },
  
    // Build the region directly from a given `RegionClass`
    _buildRegionFromRegionClass: function(RegionClass) {
      return new RegionClass();
    }
  });
  
  // Region Manager
  // --------------
  
  // Manage one or more related `Marionette.Region` objects.
  Marionette.RegionManager = Marionette.Controller.extend({
    constructor: function(options) {
      this._regions = {};
      this.length = 0;
  
      Marionette.Controller.call(this, options);
  
      this.addRegions(this.getOption('regions'));
    },
  
    // Add multiple regions using an object literal or a
    // function that returns an object literal, where
    // each key becomes the region name, and each value is
    // the region definition.
    addRegions: function(regionDefinitions, defaults) {
      regionDefinitions = Marionette._getValue(regionDefinitions, this, arguments);
  
      return _.reduce(regionDefinitions, function(regions, definition, name) {
        if (_.isString(definition)) {
          definition = {selector: definition};
        }
        if (definition.selector) {
          definition = _.defaults({}, definition, defaults);
        }
  
        regions[name] = this.addRegion(name, definition);
        return regions;
      }, {}, this);
    },
  
    // Add an individual region to the region manager,
    // and return the region instance
    addRegion: function(name, definition) {
      var region;
  
      if (definition instanceof Marionette.Region) {
        region = definition;
      } else {
        region = Marionette.Region.buildRegion(definition, Marionette.Region);
      }
  
      this.triggerMethod('before:add:region', name, region);
  
      region._parent = this;
      this._store(name, region);
  
      this.triggerMethod('add:region', name, region);
      return region;
    },
  
    // Get a region by name
    get: function(name) {
      return this._regions[name];
    },
  
    // Gets all the regions contained within
    // the `regionManager` instance.
    getRegions: function() {
      return _.clone(this._regions);
    },
  
    // Remove a region by name
    removeRegion: function(name) {
      var region = this._regions[name];
      this._remove(name, region);
  
      return region;
    },
  
    // Empty all regions in the region manager, and
    // remove them
    removeRegions: function() {
      var regions = this.getRegions();
      _.each(this._regions, function(region, name) {
        this._remove(name, region);
      }, this);
  
      return regions;
    },
  
    // Empty all regions in the region manager, but
    // leave them attached
    emptyRegions: function() {
      var regions = this.getRegions();
      _.invoke(regions, 'empty');
      return regions;
    },
  
    // Destroy all regions and shut down the region
    // manager entirely
    destroy: function() {
      this.removeRegions();
      return Marionette.Controller.prototype.destroy.apply(this, arguments);
    },
  
    // internal method to store regions
    _store: function(name, region) {
      if (!this._regions[name]) {
        this.length++;
      }
  
      this._regions[name] = region;
    },
  
    // internal method to remove a region
    _remove: function(name, region) {
      this.triggerMethod('before:remove:region', name, region);
      region.empty();
      region.stopListening();
  
      delete region._parent;
      delete this._regions[name];
      this.length--;
      this.triggerMethod('remove:region', name, region);
    }
  });
  
  Marionette.actAsCollection(Marionette.RegionManager.prototype, '_regions');
  

  // Template Cache
  // --------------
  
  // Manage templates stored in `<script>` blocks,
  // caching them for faster access.
  Marionette.TemplateCache = function(templateId) {
    this.templateId = templateId;
  };
  
  // TemplateCache object-level methods. Manage the template
  // caches from these method calls instead of creating
  // your own TemplateCache instances
  _.extend(Marionette.TemplateCache, {
    templateCaches: {},
  
    // Get the specified template by id. Either
    // retrieves the cached version, or loads it
    // from the DOM.
    get: function(templateId, options) {
      var cachedTemplate = this.templateCaches[templateId];
  
      if (!cachedTemplate) {
        cachedTemplate = new Marionette.TemplateCache(templateId);
        this.templateCaches[templateId] = cachedTemplate;
      }
  
      return cachedTemplate.load(options);
    },
  
    // Clear templates from the cache. If no arguments
    // are specified, clears all templates:
    // `clear()`
    //
    // If arguments are specified, clears each of the
    // specified templates from the cache:
    // `clear("#t1", "#t2", "...")`
    clear: function() {
      var i;
      var args = _.toArray(arguments);
      var length = args.length;
  
      if (length > 0) {
        for (i = 0; i < length; i++) {
          delete this.templateCaches[args[i]];
        }
      } else {
        this.templateCaches = {};
      }
    }
  });
  
  // TemplateCache instance methods, allowing each
  // template cache object to manage its own state
  // and know whether or not it has been loaded
  _.extend(Marionette.TemplateCache.prototype, {
  
    // Internal method to load the template
    load: function(options) {
      // Guard clause to prevent loading this template more than once
      if (this.compiledTemplate) {
        return this.compiledTemplate;
      }
  
      // Load the template and compile it
      var template = this.loadTemplate(this.templateId, options);
      this.compiledTemplate = this.compileTemplate(template, options);
  
      return this.compiledTemplate;
    },
  
    // Load a template from the DOM, by default. Override
    // this method to provide your own template retrieval
    // For asynchronous loading with AMD/RequireJS, consider
    // using a template-loader plugin as described here:
    // https://github.com/marionettejs/backbone.marionette/wiki/Using-marionette-with-requirejs
    loadTemplate: function(templateId, options) {
      var $template = Backbone.$(templateId);
  
      if (!$template.length) {
        throw new Marionette.Error({
          name: 'NoTemplateError',
          message: 'Could not find template: "' + templateId + '"'
        });
      }
      return $template.html();
    },
  
    // Pre-compile the template before caching it. Override
    // this method if you do not need to pre-compile a template
    // (JST / RequireJS for example) or if you want to change
    // the template engine used (Handebars, etc).
    compileTemplate: function(rawTemplate, options) {
      return _.template(rawTemplate, options);
    }
  });
  
  // Renderer
  // --------
  
  // Render a template with data by passing in the template
  // selector and the data to render.
  Marionette.Renderer = {
  
    // Render a template with data. The `template` parameter is
    // passed to the `TemplateCache` object to retrieve the
    // template function. Override this method to provide your own
    // custom rendering and template handling for all of Marionette.
    render: function(template, data) {
      if (!template) {
        throw new Marionette.Error({
          name: 'TemplateNotFoundError',
          message: 'Cannot render the template since its false, null or undefined.'
        });
      }
  
      var templateFunc = _.isFunction(template) ? template : Marionette.TemplateCache.get(template);
  
      return templateFunc(data);
    }
  };
  

  /* jshint maxlen: 114, nonew: false */
  // View
  // ----
  
  // The core view class that other Marionette views extend from.
  Marionette.View = Backbone.View.extend({
    isDestroyed: false,
    supportsRenderLifecycle: true,
    supportsDestroyLifecycle: true,
  
    constructor: function(options) {
      this.render = _.bind(this.render, this);
  
      options = Marionette._getValue(options, this);
  
      // this exposes view options to the view initializer
      // this is a backfill since backbone removed the assignment
      // of this.options
      // at some point however this may be removed
      this.options = _.extend({}, _.result(this, 'options'), options);
  
      this._behaviors = Marionette.Behaviors(this);
  
      Backbone.View.call(this, this.options);
  
      Marionette.MonitorDOMRefresh(this);
    },
  
    // Get the template for this view
    // instance. You can set a `template` attribute in the view
    // definition or pass a `template: "whatever"` parameter in
    // to the constructor options.
    getTemplate: function() {
      return this.getOption('template');
    },
  
    // Serialize a model by returning its attributes. Clones
    // the attributes to allow modification.
    serializeModel: function(model) {
      return model.toJSON.apply(model, _.rest(arguments));
    },
  
    // Mix in template helper methods. Looks for a
    // `templateHelpers` attribute, which can either be an
    // object literal, or a function that returns an object
    // literal. All methods and attributes from this object
    // are copies to the object passed in.
    mixinTemplateHelpers: function(target) {
      target = target || {};
      var templateHelpers = this.getOption('templateHelpers');
      templateHelpers = Marionette._getValue(templateHelpers, this);
      return _.extend(target, templateHelpers);
    },
  
    // normalize the keys of passed hash with the views `ui` selectors.
    // `{"@ui.foo": "bar"}`
    normalizeUIKeys: function(hash) {
      var uiBindings = _.result(this, '_uiBindings');
      return Marionette.normalizeUIKeys(hash, uiBindings || _.result(this, 'ui'));
    },
  
    // normalize the values of passed hash with the views `ui` selectors.
    // `{foo: "@ui.bar"}`
    normalizeUIValues: function(hash, properties) {
      var ui = _.result(this, 'ui');
      var uiBindings = _.result(this, '_uiBindings');
      return Marionette.normalizeUIValues(hash, uiBindings || ui, properties);
    },
  
    // Configure `triggers` to forward DOM events to view
    // events. `triggers: {"click .foo": "do:foo"}`
    configureTriggers: function() {
      if (!this.triggers) { return; }
  
      // Allow `triggers` to be configured as a function
      var triggers = this.normalizeUIKeys(_.result(this, 'triggers'));
  
      // Configure the triggers, prevent default
      // action and stop propagation of DOM events
      return _.reduce(triggers, function(events, value, key) {
        events[key] = this._buildViewTrigger(value);
        return events;
      }, {}, this);
    },
  
    // Overriding Backbone.View's delegateEvents to handle
    // the `triggers`, `modelEvents`, and `collectionEvents` configuration
    delegateEvents: function(events) {
      this._delegateDOMEvents(events);
      this.bindEntityEvents(this.model, this.getOption('modelEvents'));
      this.bindEntityEvents(this.collection, this.getOption('collectionEvents'));
  
      _.each(this._behaviors, function(behavior) {
        behavior.bindEntityEvents(this.model, behavior.getOption('modelEvents'));
        behavior.bindEntityEvents(this.collection, behavior.getOption('collectionEvents'));
      }, this);
  
      return this;
    },
  
    // internal method to delegate DOM events and triggers
    _delegateDOMEvents: function(eventsArg) {
      var events = Marionette._getValue(eventsArg || this.events, this);
  
      // normalize ui keys
      events = this.normalizeUIKeys(events);
      if (_.isUndefined(eventsArg)) {this.events = events;}
  
      var combinedEvents = {};
  
      // look up if this view has behavior events
      var behaviorEvents = _.result(this, 'behaviorEvents') || {};
      var triggers = this.configureTriggers();
      var behaviorTriggers = _.result(this, 'behaviorTriggers') || {};
  
      // behavior events will be overriden by view events and or triggers
      _.extend(combinedEvents, behaviorEvents, events, triggers, behaviorTriggers);
  
      Backbone.View.prototype.delegateEvents.call(this, combinedEvents);
    },
  
    // Overriding Backbone.View's undelegateEvents to handle unbinding
    // the `triggers`, `modelEvents`, and `collectionEvents` config
    undelegateEvents: function() {
      Backbone.View.prototype.undelegateEvents.apply(this, arguments);
  
      this.unbindEntityEvents(this.model, this.getOption('modelEvents'));
      this.unbindEntityEvents(this.collection, this.getOption('collectionEvents'));
  
      _.each(this._behaviors, function(behavior) {
        behavior.unbindEntityEvents(this.model, behavior.getOption('modelEvents'));
        behavior.unbindEntityEvents(this.collection, behavior.getOption('collectionEvents'));
      }, this);
  
      return this;
    },
  
    // Internal helper method to verify whether the view hasn't been destroyed
    _ensureViewIsIntact: function() {
      if (this.isDestroyed) {
        throw new Marionette.Error({
          name: 'ViewDestroyedError',
          message: 'View (cid: "' + this.cid + '") has already been destroyed and cannot be used.'
        });
      }
    },
  
    // Default `destroy` implementation, for removing a view from the
    // DOM and unbinding it. Regions will call this method
    // for you. You can specify an `onDestroy` method in your view to
    // add custom code that is called after the view is destroyed.
    destroy: function() {
      if (this.isDestroyed) { return this; }
  
      var args = _.toArray(arguments);
  
      this.triggerMethod.apply(this, ['before:destroy'].concat(args));
  
      // mark as destroyed before doing the actual destroy, to
      // prevent infinite loops within "destroy" event handlers
      // that are trying to destroy other views
      this.isDestroyed = true;
      this.triggerMethod.apply(this, ['destroy'].concat(args));
  
      // unbind UI elements
      this.unbindUIElements();
  
      this.isRendered = false;
  
      // remove the view from the DOM
      this.remove();
  
      // Call destroy on each behavior after
      // destroying the view.
      // This unbinds event listeners
      // that behaviors have registered for.
      _.invoke(this._behaviors, 'destroy', args);
  
      return this;
    },
  
    bindUIElements: function() {
      this._bindUIElements();
      _.invoke(this._behaviors, this._bindUIElements);
    },
  
    // This method binds the elements specified in the "ui" hash inside the view's code with
    // the associated jQuery selectors.
    _bindUIElements: function() {
      if (!this.ui) { return; }
  
      // store the ui hash in _uiBindings so they can be reset later
      // and so re-rendering the view will be able to find the bindings
      if (!this._uiBindings) {
        this._uiBindings = this.ui;
      }
  
      // get the bindings result, as a function or otherwise
      var bindings = _.result(this, '_uiBindings');
  
      // empty the ui so we don't have anything to start with
      this.ui = {};
  
      // bind each of the selectors
      _.each(bindings, function(selector, key) {
        this.ui[key] = this.$(selector);
      }, this);
    },
  
    // This method unbinds the elements specified in the "ui" hash
    unbindUIElements: function() {
      this._unbindUIElements();
      _.invoke(this._behaviors, this._unbindUIElements);
    },
  
    _unbindUIElements: function() {
      if (!this.ui || !this._uiBindings) { return; }
  
      // delete all of the existing ui bindings
      _.each(this.ui, function($el, name) {
        delete this.ui[name];
      }, this);
  
      // reset the ui element to the original bindings configuration
      this.ui = this._uiBindings;
      delete this._uiBindings;
    },
  
    // Internal method to create an event handler for a given `triggerDef` like
    // 'click:foo'
    _buildViewTrigger: function(triggerDef) {
  
      var options = _.defaults({}, triggerDef, {
        preventDefault: true,
        stopPropagation: true
      });
  
      var eventName = _.isObject(triggerDef) ? options.event : triggerDef;
  
      return function(e) {
        if (e) {
          if (e.preventDefault && options.preventDefault) {
            e.preventDefault();
          }
  
          if (e.stopPropagation && options.stopPropagation) {
            e.stopPropagation();
          }
        }
  
        var args = {
          view: this,
          model: this.model,
          collection: this.collection
        };
  
        this.triggerMethod(eventName, args);
      };
    },
  
    setElement: function() {
      var ret = Backbone.View.prototype.setElement.apply(this, arguments);
  
      // proxy behavior $el to the view's $el.
      // This is needed because a view's $el proxy
      // is not set until after setElement is called.
      _.invoke(this._behaviors, 'proxyViewProperties', this);
  
      return ret;
    },
  
    // import the `triggerMethod` to trigger events with corresponding
    // methods if the method exists
    triggerMethod: function() {
      var ret = Marionette._triggerMethod(this, arguments);
  
      this._triggerEventOnBehaviors(arguments);
      this._triggerEventOnParentLayout(arguments[0], _.rest(arguments));
  
      return ret;
    },
  
    _triggerEventOnBehaviors: function(args) {
      var triggerMethod = Marionette._triggerMethod;
      var behaviors = this._behaviors;
      // Use good ol' for as this is a very hot function
      for (var i = 0, length = behaviors && behaviors.length; i < length; i++) {
        triggerMethod(behaviors[i], args);
      }
    },
  
    _triggerEventOnParentLayout: function(eventName, args) {
      var layoutView = this._parentLayoutView();
      if (!layoutView) {
        return;
      }
  
      // invoke triggerMethod on parent view
      var eventPrefix = Marionette.getOption(layoutView, 'childViewEventPrefix');
      var prefixedEventName = eventPrefix + ':' + eventName;
      var callArgs = [this].concat(args);
  
      Marionette._triggerMethod(layoutView, prefixedEventName, callArgs);
  
      // call the parent view's childEvents handler
      var childEvents = Marionette.getOption(layoutView, 'childEvents');
  
      // since childEvents can be an object or a function use Marionette._getValue
      // to handle the abstaction for us.
      childEvents = Marionette._getValue(childEvents, layoutView);
      var normalizedChildEvents = layoutView.normalizeMethods(childEvents);
  
      if (normalizedChildEvents && _.isFunction(normalizedChildEvents[eventName])) {
        normalizedChildEvents[eventName].apply(layoutView, callArgs);
      }
    },
  
    // This method returns any views that are immediate
    // children of this view
    _getImmediateChildren: function() {
      return [];
    },
  
    // Returns an array of every nested view within this view
    _getNestedViews: function() {
      var children = this._getImmediateChildren();
  
      if (!children.length) { return children; }
  
      return _.reduce(children, function(memo, view) {
        if (!view._getNestedViews) { return memo; }
        return memo.concat(view._getNestedViews());
      }, children);
    },
  
    // Walk the _parent tree until we find a layout view (if one exists).
    // Returns the parent layout view hierarchically closest to this view.
    _parentLayoutView: function() {
      var parent  = this._parent;
  
      while (parent) {
        if (parent instanceof Marionette.LayoutView) {
          return parent;
        }
        parent = parent._parent;
      }
    },
  
    // Imports the "normalizeMethods" to transform hashes of
    // events=>function references/names to a hash of events=>function references
    normalizeMethods: Marionette.normalizeMethods,
  
    // A handy way to merge passed-in options onto the instance
    mergeOptions: Marionette.mergeOptions,
  
    // Proxy `getOption` to enable getting options from this or this.options by name.
    getOption: Marionette.proxyGetOption,
  
    // Proxy `bindEntityEvents` to enable binding view's events from another entity.
    bindEntityEvents: Marionette.proxyBindEntityEvents,
  
    // Proxy `unbindEntityEvents` to enable unbinding view's events from another entity.
    unbindEntityEvents: Marionette.proxyUnbindEntityEvents
  });
  
  // Item View
  // ---------
  
  // A single item view implementation that contains code for rendering
  // with underscore.js templates, serializing the view's model or collection,
  // and calling several methods on extended views, such as `onRender`.
  Marionette.ItemView = Marionette.View.extend({
  
    // Setting up the inheritance chain which allows changes to
    // Marionette.View.prototype.constructor which allows overriding
    constructor: function() {
      Marionette.View.apply(this, arguments);
    },
  
    // Serialize the model or collection for the view. If a model is
    // found, the view's `serializeModel` is called. If a collection is found,
    // each model in the collection is serialized by calling
    // the view's `serializeCollection` and put into an `items` array in
    // the resulting data. If both are found, defaults to the model.
    // You can override the `serializeData` method in your own view definition,
    // to provide custom serialization for your view's data.
    serializeData: function() {
      if (!this.model && !this.collection) {
        return {};
      }
  
      var args = [this.model || this.collection];
      if (arguments.length) {
        args.push.apply(args, arguments);
      }
  
      if (this.model) {
        return this.serializeModel.apply(this, args);
      } else {
        return {
          items: this.serializeCollection.apply(this, args)
        };
      }
    },
  
    // Serialize a collection by serializing each of its models.
    serializeCollection: function(collection) {
      return collection.toJSON.apply(collection, _.rest(arguments));
    },
  
    // Render the view, defaulting to underscore.js templates.
    // You can override this in your view definition to provide
    // a very specific rendering for your view. In general, though,
    // you should override the `Marionette.Renderer` object to
    // change how Marionette renders views.
    render: function() {
      this._ensureViewIsIntact();
  
      this.triggerMethod('before:render', this);
  
      this._renderTemplate();
      this.isRendered = true;
      this.bindUIElements();
  
      this.triggerMethod('render', this);
  
      return this;
    },
  
    // Internal method to render the template with the serialized data
    // and template helpers via the `Marionette.Renderer` object.
    // Throws an `UndefinedTemplateError` error if the template is
    // any falsely value but literal `false`.
    _renderTemplate: function() {
      var template = this.getTemplate();
  
      // Allow template-less item views
      if (template === false) {
        return;
      }
  
      if (!template) {
        throw new Marionette.Error({
          name: 'UndefinedTemplateError',
          message: 'Cannot render the template since it is null or undefined.'
        });
      }
  
      // Add in entity data and template helpers
      var data = this.mixinTemplateHelpers(this.serializeData());
  
      // Render and add to el
      var html = Marionette.Renderer.render(template, data, this);
      this.attachElContent(html);
  
      return this;
    },
  
    // Attaches the content of a given view.
    // This method can be overridden to optimize rendering,
    // or to render in a non standard way.
    //
    // For example, using `innerHTML` instead of `$el.html`
    //
    // ```js
    // attachElContent: function(html) {
    //   this.el.innerHTML = html;
    //   return this;
    // }
    // ```
    attachElContent: function(html) {
      this.$el.html(html);
  
      return this;
    }
  });
  
  /* jshint maxstatements: 20, maxcomplexity: 7 */
  
  // Collection View
  // ---------------
  
  // A view that iterates over a Backbone.Collection
  // and renders an individual child view for each model.
  Marionette.CollectionView = Marionette.View.extend({
  
    // used as the prefix for child view events
    // that are forwarded through the collectionview
    childViewEventPrefix: 'childview',
  
    // flag for maintaining the sorted order of the collection
    sort: true,
  
    // constructor
    // option to pass `{sort: false}` to prevent the `CollectionView` from
    // maintaining the sorted order of the collection.
    // This will fallback onto appending childView's to the end.
    //
    // option to pass `{comparator: compFunction()}` to allow the `CollectionView`
    // to use a custom sort order for the collection.
    constructor: function(options) {
      this.once('render', this._initialEvents);
      this._initChildViewStorage();
  
      Marionette.View.apply(this, arguments);
  
      this.on({
        'before:show':   this._onBeforeShowCalled,
        'show':          this._onShowCalled,
        'before:attach': this._onBeforeAttachCalled,
        'attach':        this._onAttachCalled
      });
      this.initRenderBuffer();
    },
  
    // Instead of inserting elements one by one into the page,
    // it's much more performant to insert elements into a document
    // fragment and then insert that document fragment into the page
    initRenderBuffer: function() {
      this._bufferedChildren = [];
    },
  
    startBuffering: function() {
      this.initRenderBuffer();
      this.isBuffering = true;
    },
  
    endBuffering: function() {
      // Only trigger attach if already shown and attached, otherwise Region#show() handles this.
      var canTriggerAttach = this._isShown && Marionette.isNodeAttached(this.el);
      var nestedViews;
  
      this.isBuffering = false;
  
      if (this._isShown) {
        this._triggerMethodMany(this._bufferedChildren, this, 'before:show');
      }
      if (canTriggerAttach && this._triggerBeforeAttach) {
        nestedViews = this._getNestedViews();
        this._triggerMethodMany(nestedViews, this, 'before:attach');
      }
  
      this.attachBuffer(this, this._createBuffer());
  
      if (canTriggerAttach && this._triggerAttach) {
        nestedViews = this._getNestedViews();
        this._triggerMethodMany(nestedViews, this, 'attach');
      }
      if (this._isShown) {
        this._triggerMethodMany(this._bufferedChildren, this, 'show');
      }
      this.initRenderBuffer();
    },
  
    _triggerMethodMany: function(targets, source, eventName) {
      var args = _.drop(arguments, 3);
  
      _.each(targets, function(target) {
        Marionette.triggerMethodOn.apply(target, [target, eventName, target, source].concat(args));
      });
    },
  
    // Configured the initial events that the collection view
    // binds to.
    _initialEvents: function() {
      if (this.collection) {
        this.listenTo(this.collection, 'add', this._onCollectionAdd);
        this.listenTo(this.collection, 'remove', this._onCollectionRemove);
        this.listenTo(this.collection, 'reset', this.render);
  
        if (this.getOption('sort')) {
          this.listenTo(this.collection, 'sort', this._sortViews);
        }
      }
    },
  
    // Handle a child added to the collection
    _onCollectionAdd: function(child, collection, opts) {
      // `index` is present when adding with `at` since BB 1.2; indexOf fallback for < 1.2
      var index = opts.at !== undefined && (opts.index || collection.indexOf(child));
  
      // When filtered or when there is no initial index, calculate index.
      if (this.getOption('filter') || index === false) {
        index = _.indexOf(this._filteredSortedModels(index), child);
      }
  
      if (this._shouldAddChild(child, index)) {
        this.destroyEmptyView();
        var ChildView = this.getChildView(child);
        this.addChild(child, ChildView, index);
      }
    },
  
    // get the child view by model it holds, and remove it
    _onCollectionRemove: function(model) {
      var view = this.children.findByModel(model);
      this.removeChildView(view);
      this.checkEmpty();
    },
  
    _onBeforeShowCalled: function() {
      // Reset attach event flags at the top of the Region#show() event lifecycle; if the Region's
      // show() options permit onBeforeAttach/onAttach events, these flags will be set true again.
      this._triggerBeforeAttach = this._triggerAttach = false;
      this.children.each(function(childView) {
        Marionette.triggerMethodOn(childView, 'before:show', childView);
      });
    },
  
    _onShowCalled: function() {
      this.children.each(function(childView) {
        Marionette.triggerMethodOn(childView, 'show', childView);
      });
    },
  
    // If during Region#show() onBeforeAttach was fired, continue firing it for child views
    _onBeforeAttachCalled: function() {
      this._triggerBeforeAttach = true;
    },
  
    // If during Region#show() onAttach was fired, continue firing it for child views
    _onAttachCalled: function() {
      this._triggerAttach = true;
    },
  
    // Render children views. Override this method to
    // provide your own implementation of a render function for
    // the collection view.
    render: function() {
      this._ensureViewIsIntact();
      this.triggerMethod('before:render', this);
      this._renderChildren();
      this.isRendered = true;
      this.triggerMethod('render', this);
      return this;
    },
  
    // Reorder DOM after sorting. When your element's rendering
    // do not use their index, you can pass reorderOnSort: true
    // to only reorder the DOM after a sort instead of rendering
    // all the collectionView
    reorder: function() {
      var children = this.children;
      var models = this._filteredSortedModels();
  
      if (!models.length && this._showingEmptyView) { return this; }
  
      var anyModelsAdded = _.some(models, function(model) {
        return !children.findByModel(model);
      });
  
      // If there are any new models added due to filtering
      // We need to add child views
      // So render as normal
      if (anyModelsAdded) {
        this.render();
      } else {
        // get the DOM nodes in the same order as the models
        var elsToReorder = _.map(models, function(model, index) {
          var view = children.findByModel(model);
          view._index = index;
          return view.el;
        });
  
        // find the views that were children before but arent in this new ordering
        var filteredOutViews = children.filter(function(view) {
          return !_.contains(elsToReorder, view.el);
        });
  
        this.triggerMethod('before:reorder');
  
        // since append moves elements that are already in the DOM,
        // appending the elements will effectively reorder them
        this._appendReorderedChildren(elsToReorder);
  
        // remove any views that have been filtered out
        _.each(filteredOutViews, this.removeChildView, this);
        this.checkEmpty();
  
        this.triggerMethod('reorder');
      }
    },
  
    // Render view after sorting. Override this method to
    // change how the view renders after a `sort` on the collection.
    // An example of this would be to only `renderChildren` in a `CompositeView`
    // rather than the full view.
    resortView: function() {
      if (Marionette.getOption(this, 'reorderOnSort')) {
        this.reorder();
      } else {
        this.render();
      }
    },
  
    // Internal method. This checks for any changes in the order of the collection.
    // If the index of any view doesn't match, it will render.
    _sortViews: function() {
      var models = this._filteredSortedModels();
  
      // check for any changes in sort order of views
      var orderChanged = _.find(models, function(item, index) {
        var view = this.children.findByModel(item);
        return !view || view._index !== index;
      }, this);
  
      if (orderChanged) {
        this.resortView();
      }
    },
  
    // Internal reference to what index a `emptyView` is.
    _emptyViewIndex: -1,
  
    // Internal method. Separated so that CompositeView can append to the childViewContainer
    // if necessary
    _appendReorderedChildren: function(children) {
      this.$el.append(children);
    },
  
    // Internal method. Separated so that CompositeView can have
    // more control over events being triggered, around the rendering
    // process
    _renderChildren: function() {
      this.destroyEmptyView();
      this.destroyChildren({checkEmpty: false});
  
      if (this.isEmpty(this.collection)) {
        this.showEmptyView();
      } else {
        this.triggerMethod('before:render:collection', this);
        this.startBuffering();
        this.showCollection();
        this.endBuffering();
        this.triggerMethod('render:collection', this);
  
        // If we have shown children and none have passed the filter, show the empty view
        if (this.children.isEmpty() && this.getOption('filter')) {
          this.showEmptyView();
        }
      }
    },
  
    // Internal method to loop through collection and show each child view.
    showCollection: function() {
      var ChildView;
  
      var models = this._filteredSortedModels();
  
      _.each(models, function(child, index) {
        ChildView = this.getChildView(child);
        this.addChild(child, ChildView, index);
      }, this);
    },
  
    // Allow the collection to be sorted by a custom view comparator
    _filteredSortedModels: function(addedAt) {
      var viewComparator = this.getViewComparator();
      var models = this.collection.models;
      addedAt = Math.min(Math.max(addedAt, 0), models.length - 1);
  
      if (viewComparator) {
        var addedModel;
        // Preserve `at` location, even for a sorted view
        if (addedAt) {
          addedModel = models[addedAt];
          models = models.slice(0, addedAt).concat(models.slice(addedAt + 1));
        }
        models = this._sortModelsBy(models, viewComparator);
        if (addedModel) {
          models.splice(addedAt, 0, addedModel);
        }
      }
  
      // Filter after sorting in case the filter uses the index
      if (this.getOption('filter')) {
        models = _.filter(models, function(model, index) {
          return this._shouldAddChild(model, index);
        }, this);
      }
  
      return models;
    },
  
    _sortModelsBy: function(models, comparator) {
      if (typeof comparator === 'string') {
        return _.sortBy(models, function(model) {
          return model.get(comparator);
        }, this);
      } else if (comparator.length === 1) {
        return _.sortBy(models, comparator, this);
      } else {
        return models.sort(_.bind(comparator, this));
      }
    },
  
    // Internal method to show an empty view in place of
    // a collection of child views, when the collection is empty
    showEmptyView: function() {
      var EmptyView = this.getEmptyView();
  
      if (EmptyView && !this._showingEmptyView) {
        this.triggerMethod('before:render:empty');
  
        this._showingEmptyView = true;
        var model = new Backbone.Model();
        this.addEmptyView(model, EmptyView);
  
        this.triggerMethod('render:empty');
      }
    },
  
    // Internal method to destroy an existing emptyView instance
    // if one exists. Called when a collection view has been
    // rendered empty, and then a child is added to the collection.
    destroyEmptyView: function() {
      if (this._showingEmptyView) {
        this.triggerMethod('before:remove:empty');
  
        this.destroyChildren();
        delete this._showingEmptyView;
  
        this.triggerMethod('remove:empty');
      }
    },
  
    // Retrieve the empty view class
    getEmptyView: function() {
      return this.getOption('emptyView');
    },
  
    // Render and show the emptyView. Similar to addChild method
    // but "add:child" events are not fired, and the event from
    // emptyView are not forwarded
    addEmptyView: function(child, EmptyView) {
      // Only trigger attach if already shown, attached, and not buffering, otherwise endBuffer() or
      // Region#show() handles this.
      var canTriggerAttach = this._isShown && !this.isBuffering && Marionette.isNodeAttached(this.el);
      var nestedViews;
  
      // get the emptyViewOptions, falling back to childViewOptions
      var emptyViewOptions = this.getOption('emptyViewOptions') ||
                            this.getOption('childViewOptions');
  
      if (_.isFunction(emptyViewOptions)) {
        emptyViewOptions = emptyViewOptions.call(this, child, this._emptyViewIndex);
      }
  
      // build the empty view
      var view = this.buildChildView(child, EmptyView, emptyViewOptions);
  
      view._parent = this;
  
      // Proxy emptyView events
      this.proxyChildEvents(view);
  
      view.once('render', function() {
        // trigger the 'before:show' event on `view` if the collection view has already been shown
        if (this._isShown) {
          Marionette.triggerMethodOn(view, 'before:show', view);
        }
  
        // Trigger `before:attach` following `render` to avoid adding logic and event triggers
        // to public method `renderChildView()`.
        if (canTriggerAttach && this._triggerBeforeAttach) {
          nestedViews = this._getViewAndNested(view);
          this._triggerMethodMany(nestedViews, this, 'before:attach');
        }
      }, this);
  
      // Store the `emptyView` like a `childView` so we can properly remove and/or close it later
      this.children.add(view);
      this.renderChildView(view, this._emptyViewIndex);
  
      // Trigger `attach`
      if (canTriggerAttach && this._triggerAttach) {
        nestedViews = this._getViewAndNested(view);
        this._triggerMethodMany(nestedViews, this, 'attach');
      }
      // call the 'show' method if the collection view has already been shown
      if (this._isShown) {
        Marionette.triggerMethodOn(view, 'show', view);
      }
    },
  
    // Retrieve the `childView` class, either from `this.options.childView`
    // or from the `childView` in the object definition. The "options"
    // takes precedence.
    // This method receives the model that will be passed to the instance
    // created from this `childView`. Overriding methods may use the child
    // to determine what `childView` class to return.
    getChildView: function(child) {
      var childView = this.getOption('childView');
  
      if (!childView) {
        throw new Marionette.Error({
          name: 'NoChildViewError',
          message: 'A "childView" must be specified'
        });
      }
  
      return childView;
    },
  
    // Render the child's view and add it to the
    // HTML for the collection view at a given index.
    // This will also update the indices of later views in the collection
    // in order to keep the children in sync with the collection.
    addChild: function(child, ChildView, index) {
      var childViewOptions = this.getOption('childViewOptions');
      childViewOptions = Marionette._getValue(childViewOptions, this, [child, index]);
  
      var view = this.buildChildView(child, ChildView, childViewOptions);
  
      // increment indices of views after this one
      this._updateIndices(view, true, index);
  
      this.triggerMethod('before:add:child', view);
      this._addChildView(view, index);
      this.triggerMethod('add:child', view);
  
      view._parent = this;
  
      return view;
    },
  
    // Internal method. This decrements or increments the indices of views after the
    // added/removed view to keep in sync with the collection.
    _updateIndices: function(view, increment, index) {
      if (!this.getOption('sort')) {
        return;
      }
  
      if (increment) {
        // assign the index to the view
        view._index = index;
      }
  
      // update the indexes of views after this one
      this.children.each(function(laterView) {
        if (laterView._index >= view._index) {
          laterView._index += increment ? 1 : -1;
        }
      });
    },
  
    // Internal Method. Add the view to children and render it at
    // the given index.
    _addChildView: function(view, index) {
      // Only trigger attach if already shown, attached, and not buffering, otherwise endBuffer() or
      // Region#show() handles this.
      var canTriggerAttach = this._isShown && !this.isBuffering && Marionette.isNodeAttached(this.el);
      var nestedViews;
  
      // set up the child view event forwarding
      this.proxyChildEvents(view);
  
      view.once('render', function() {
        // trigger the 'before:show' event on `view` if the collection view has already been shown
        if (this._isShown && !this.isBuffering) {
          Marionette.triggerMethodOn(view, 'before:show', view);
        }
  
        // Trigger `before:attach` following `render` to avoid adding logic and event triggers
        // to public method `renderChildView()`.
        if (canTriggerAttach && this._triggerBeforeAttach) {
          nestedViews = this._getViewAndNested(view);
          this._triggerMethodMany(nestedViews, this, 'before:attach');
        }
      }, this);
  
      // Store the child view itself so we can properly remove and/or destroy it later
      this.children.add(view);
      this.renderChildView(view, index);
  
      // Trigger `attach`
      if (canTriggerAttach && this._triggerAttach) {
        nestedViews = this._getViewAndNested(view);
        this._triggerMethodMany(nestedViews, this, 'attach');
      }
      // Trigger `show`
      if (this._isShown && !this.isBuffering) {
        Marionette.triggerMethodOn(view, 'show', view);
      }
    },
  
    // render the child view
    renderChildView: function(view, index) {
      if (!view.supportsRenderLifecycle) {
        Marionette.triggerMethodOn(view, 'before:render', view);
      }
      view.render();
      if (!view.supportsRenderLifecycle) {
        Marionette.triggerMethodOn(view, 'render', view);
      }
      this.attachHtml(this, view, index);
      return view;
    },
  
    // Build a `childView` for a model in the collection.
    buildChildView: function(child, ChildViewClass, childViewOptions) {
      var options = _.extend({model: child}, childViewOptions);
      var childView = new ChildViewClass(options);
      Marionette.MonitorDOMRefresh(childView);
      return childView;
    },
  
    // Remove the child view and destroy it.
    // This function also updates the indices of
    // later views in the collection in order to keep
    // the children in sync with the collection.
    removeChildView: function(view) {
      if (!view) { return view; }
  
      this.triggerMethod('before:remove:child', view);
  
      if (!view.supportsDestroyLifecycle) {
        Marionette.triggerMethodOn(view, 'before:destroy', view);
      }
      // call 'destroy' or 'remove', depending on which is found
      if (view.destroy) {
        view.destroy();
      } else {
        view.remove();
      }
      if (!view.supportsDestroyLifecycle) {
        Marionette.triggerMethodOn(view, 'destroy', view);
      }
  
      delete view._parent;
      this.stopListening(view);
      this.children.remove(view);
      this.triggerMethod('remove:child', view);
  
      // decrement the index of views after this one
      this._updateIndices(view, false);
  
      return view;
    },
  
    // check if the collection is empty
    isEmpty: function() {
      return !this.collection || this.collection.length === 0;
    },
  
    // If empty, show the empty view
    checkEmpty: function() {
      if (this.isEmpty(this.collection)) {
        this.showEmptyView();
      }
    },
  
    // You might need to override this if you've overridden attachHtml
    attachBuffer: function(collectionView, buffer) {
      collectionView.$el.append(buffer);
    },
  
    // Create a fragment buffer from the currently buffered children
    _createBuffer: function() {
      var elBuffer = document.createDocumentFragment();
      _.each(this._bufferedChildren, function(b) {
        elBuffer.appendChild(b.el);
      });
      return elBuffer;
    },
  
    // Append the HTML to the collection's `el`.
    // Override this method to do something other
    // than `.append`.
    attachHtml: function(collectionView, childView, index) {
      if (collectionView.isBuffering) {
        // buffering happens on reset events and initial renders
        // in order to reduce the number of inserts into the
        // document, which are expensive.
        collectionView._bufferedChildren.splice(index, 0, childView);
      } else {
        // If we've already rendered the main collection, append
        // the new child into the correct order if we need to. Otherwise
        // append to the end.
        if (!collectionView._insertBefore(childView, index)) {
          collectionView._insertAfter(childView);
        }
      }
    },
  
    // Internal method. Check whether we need to insert the view into
    // the correct position.
    _insertBefore: function(childView, index) {
      var currentView;
      var findPosition = this.getOption('sort') && (index < this.children.length - 1);
      if (findPosition) {
        // Find the view after this one
        currentView = this.children.find(function(view) {
          return view._index === index + 1;
        });
      }
  
      if (currentView) {
        currentView.$el.before(childView.el);
        return true;
      }
  
      return false;
    },
  
    // Internal method. Append a view to the end of the $el
    _insertAfter: function(childView) {
      this.$el.append(childView.el);
    },
  
    // Internal method to set up the `children` object for
    // storing all of the child views
    _initChildViewStorage: function() {
      this.children = new Backbone.ChildViewContainer();
    },
  
    // Handle cleanup and other destroying needs for the collection of views
    destroy: function() {
      if (this.isDestroyed) { return this; }
  
      this.triggerMethod('before:destroy:collection');
      this.destroyChildren({checkEmpty: false});
      this.triggerMethod('destroy:collection');
  
      return Marionette.View.prototype.destroy.apply(this, arguments);
    },
  
    // Destroy the child views that this collection view
    // is holding on to, if any
    destroyChildren: function(options) {
      var destroyOptions = options || {};
      var shouldCheckEmpty = true;
      var childViews = this.children.map(_.identity);
  
      if (!_.isUndefined(destroyOptions.checkEmpty)) {
        shouldCheckEmpty = destroyOptions.checkEmpty;
      }
  
      this.children.each(this.removeChildView, this);
  
      if (shouldCheckEmpty) {
        this.checkEmpty();
      }
      return childViews;
    },
  
    // Return true if the given child should be shown
    // Return false otherwise
    // The filter will be passed (child, index, collection)
    // Where
    //  'child' is the given model
    //  'index' is the index of that model in the collection
    //  'collection' is the collection referenced by this CollectionView
    _shouldAddChild: function(child, index) {
      var filter = this.getOption('filter');
      return !_.isFunction(filter) || filter.call(this, child, index, this.collection);
    },
  
    // Set up the child view event forwarding. Uses a "childview:"
    // prefix in front of all forwarded events.
    proxyChildEvents: function(view) {
      var prefix = this.getOption('childViewEventPrefix');
  
      // Forward all child view events through the parent,
      // prepending "childview:" to the event name
      this.listenTo(view, 'all', function() {
        var args = _.toArray(arguments);
        var rootEvent = args[0];
        var childEvents = this.normalizeMethods(_.result(this, 'childEvents'));
  
        args[0] = prefix + ':' + rootEvent;
        args.splice(1, 0, view);
  
        // call collectionView childEvent if defined
        if (typeof childEvents !== 'undefined' && _.isFunction(childEvents[rootEvent])) {
          childEvents[rootEvent].apply(this, args.slice(1));
        }
  
        this.triggerMethod.apply(this, args);
      });
    },
  
    _getImmediateChildren: function() {
      return _.values(this.children._views);
    },
  
    _getViewAndNested: function(view) {
      // This will not fail on Backbone.View which does not have #_getNestedViews.
      return [view].concat(_.result(view, '_getNestedViews') || []);
    },
  
    getViewComparator: function() {
      return this.getOption('viewComparator');
    }
  });
  
  /* jshint maxstatements: 17, maxlen: 117 */
  
  // Composite View
  // --------------
  
  // Used for rendering a branch-leaf, hierarchical structure.
  // Extends directly from CollectionView and also renders an
  // a child view as `modelView`, for the top leaf
  Marionette.CompositeView = Marionette.CollectionView.extend({
  
    // Setting up the inheritance chain which allows changes to
    // Marionette.CollectionView.prototype.constructor which allows overriding
    // option to pass '{sort: false}' to prevent the CompositeView from
    // maintaining the sorted order of the collection.
    // This will fallback onto appending childView's to the end.
    constructor: function() {
      Marionette.CollectionView.apply(this, arguments);
    },
  
    // Configured the initial events that the composite view
    // binds to. Override this method to prevent the initial
    // events, or to add your own initial events.
    _initialEvents: function() {
  
      // Bind only after composite view is rendered to avoid adding child views
      // to nonexistent childViewContainer
  
      if (this.collection) {
        this.listenTo(this.collection, 'add', this._onCollectionAdd);
        this.listenTo(this.collection, 'remove', this._onCollectionRemove);
        this.listenTo(this.collection, 'reset', this._renderChildren);
  
        if (this.getOption('sort')) {
          this.listenTo(this.collection, 'sort', this._sortViews);
        }
      }
    },
  
    // Retrieve the `childView` to be used when rendering each of
    // the items in the collection. The default is to return
    // `this.childView` or Marionette.CompositeView if no `childView`
    // has been defined
    getChildView: function(child) {
      var childView = this.getOption('childView') || this.constructor;
  
      return childView;
    },
  
    // Serialize the model for the view.
    // You can override the `serializeData` method in your own view
    // definition, to provide custom serialization for your view's data.
    serializeData: function() {
      var data = {};
  
      if (this.model) {
        data = _.partial(this.serializeModel, this.model).apply(this, arguments);
      }
  
      return data;
    },
  
    // Renders the model and the collection.
    render: function() {
      this._ensureViewIsIntact();
      this._isRendering = true;
      this.resetChildViewContainer();
  
      this.triggerMethod('before:render', this);
  
      this._renderTemplate();
      this._renderChildren();
  
      this._isRendering = false;
      this.isRendered = true;
      this.triggerMethod('render', this);
      return this;
    },
  
    _renderChildren: function() {
      if (this.isRendered || this._isRendering) {
        Marionette.CollectionView.prototype._renderChildren.call(this);
      }
    },
  
    // Render the root template that the children
    // views are appended to
    _renderTemplate: function() {
      var data = {};
      data = this.serializeData();
      data = this.mixinTemplateHelpers(data);
  
      this.triggerMethod('before:render:template');
  
      var template = this.getTemplate();
      var html = Marionette.Renderer.render(template, data, this);
      this.attachElContent(html);
  
      // the ui bindings is done here and not at the end of render since they
      // will not be available until after the model is rendered, but should be
      // available before the collection is rendered.
      this.bindUIElements();
      this.triggerMethod('render:template');
    },
  
    // Attaches the content of the root.
    // This method can be overridden to optimize rendering,
    // or to render in a non standard way.
    //
    // For example, using `innerHTML` instead of `$el.html`
    //
    // ```js
    // attachElContent: function(html) {
    //   this.el.innerHTML = html;
    //   return this;
    // }
    // ```
    attachElContent: function(html) {
      this.$el.html(html);
  
      return this;
    },
  
    // You might need to override this if you've overridden attachHtml
    attachBuffer: function(compositeView, buffer) {
      var $container = this.getChildViewContainer(compositeView);
      $container.append(buffer);
    },
  
    // Internal method. Append a view to the end of the $el.
    // Overidden from CollectionView to ensure view is appended to
    // childViewContainer
    _insertAfter: function(childView) {
      var $container = this.getChildViewContainer(this, childView);
      $container.append(childView.el);
    },
  
    // Internal method. Append reordered childView'.
    // Overidden from CollectionView to ensure reordered views
    // are appended to childViewContainer
    _appendReorderedChildren: function(children) {
      var $container = this.getChildViewContainer(this);
      $container.append(children);
    },
  
    // Internal method to ensure an `$childViewContainer` exists, for the
    // `attachHtml` method to use.
    getChildViewContainer: function(containerView, childView) {
      if (!!containerView.$childViewContainer) {
        return containerView.$childViewContainer;
      }
  
      var container;
      var childViewContainer = Marionette.getOption(containerView, 'childViewContainer');
      if (childViewContainer) {
  
        var selector = Marionette._getValue(childViewContainer, containerView);
  
        if (selector.charAt(0) === '@' && containerView.ui) {
          container = containerView.ui[selector.substr(4)];
        } else {
          container = containerView.$(selector);
        }
  
        if (container.length <= 0) {
          throw new Marionette.Error({
            name: 'ChildViewContainerMissingError',
            message: 'The specified "childViewContainer" was not found: ' + containerView.childViewContainer
          });
        }
  
      } else {
        container = containerView.$el;
      }
  
      containerView.$childViewContainer = container;
      return container;
    },
  
    // Internal method to reset the `$childViewContainer` on render
    resetChildViewContainer: function() {
      if (this.$childViewContainer) {
        this.$childViewContainer = undefined;
      }
    }
  });
  
  // Layout View
  // -----------
  
  // Used for managing application layoutViews, nested layoutViews and
  // multiple regions within an application or sub-application.
  //
  // A specialized view class that renders an area of HTML and then
  // attaches `Region` instances to the specified `regions`.
  // Used for composite view management and sub-application areas.
  Marionette.LayoutView = Marionette.ItemView.extend({
    regionClass: Marionette.Region,
  
    options: {
      destroyImmediate: false
    },
  
    // used as the prefix for child view events
    // that are forwarded through the layoutview
    childViewEventPrefix: 'childview',
  
    // Ensure the regions are available when the `initialize` method
    // is called.
    constructor: function(options) {
      options = options || {};
  
      this._firstRender = true;
      this._initializeRegions(options);
  
      Marionette.ItemView.call(this, options);
    },
  
    // LayoutView's render will use the existing region objects the
    // first time it is called. Subsequent calls will destroy the
    // views that the regions are showing and then reset the `el`
    // for the regions to the newly rendered DOM elements.
    render: function() {
      this._ensureViewIsIntact();
  
      if (this._firstRender) {
        // if this is the first render, don't do anything to
        // reset the regions
        this._firstRender = false;
      } else {
        // If this is not the first render call, then we need to
        // re-initialize the `el` for each region
        this._reInitializeRegions();
      }
  
      return Marionette.ItemView.prototype.render.apply(this, arguments);
    },
  
    // Handle destroying regions, and then destroy the view itself.
    destroy: function() {
      if (this.isDestroyed) { return this; }
      // #2134: remove parent element before destroying the child views, so
      // removing the child views doesn't retrigger repaints
      if (this.getOption('destroyImmediate') === true) {
        this.$el.remove();
      }
      this.regionManager.destroy();
      return Marionette.ItemView.prototype.destroy.apply(this, arguments);
    },
  
    showChildView: function(regionName, view, options) {
      var region = this.getRegion(regionName);
      return region.show.apply(region, _.rest(arguments));
    },
  
    getChildView: function(regionName) {
      return this.getRegion(regionName).currentView;
    },
  
    // Add a single region, by name, to the layoutView
    addRegion: function(name, definition) {
      var regions = {};
      regions[name] = definition;
      return this._buildRegions(regions)[name];
    },
  
    // Add multiple regions as a {name: definition, name2: def2} object literal
    addRegions: function(regions) {
      this.regions = _.extend({}, this.regions, regions);
      return this._buildRegions(regions);
    },
  
    // Remove a single region from the LayoutView, by name
    removeRegion: function(name) {
      delete this.regions[name];
      return this.regionManager.removeRegion(name);
    },
  
    // Provides alternative access to regions
    // Accepts the region name
    // getRegion('main')
    getRegion: function(region) {
      return this.regionManager.get(region);
    },
  
    // Get all regions
    getRegions: function() {
      return this.regionManager.getRegions();
    },
  
    // internal method to build regions
    _buildRegions: function(regions) {
      var defaults = {
        regionClass: this.getOption('regionClass'),
        parentEl: _.partial(_.result, this, 'el')
      };
  
      return this.regionManager.addRegions(regions, defaults);
    },
  
    // Internal method to initialize the regions that have been defined in a
    // `regions` attribute on this layoutView.
    _initializeRegions: function(options) {
      var regions;
      this._initRegionManager();
  
      regions = Marionette._getValue(this.regions, this, [options]) || {};
  
      // Enable users to define `regions` as instance options.
      var regionOptions = this.getOption.call(options, 'regions');
  
      // enable region options to be a function
      regionOptions = Marionette._getValue(regionOptions, this, [options]);
  
      _.extend(regions, regionOptions);
  
      // Normalize region selectors hash to allow
      // a user to use the @ui. syntax.
      regions = this.normalizeUIValues(regions, ['selector', 'el']);
  
      this.addRegions(regions);
    },
  
    // Internal method to re-initialize all of the regions by updating the `el` that
    // they point to
    _reInitializeRegions: function() {
      this.regionManager.invoke('reset');
    },
  
    // Enable easy overriding of the default `RegionManager`
    // for customized region interactions and business specific
    // view logic for better control over single regions.
    getRegionManager: function() {
      return new Marionette.RegionManager();
    },
  
    // Internal method to initialize the region manager
    // and all regions in it
    _initRegionManager: function() {
      this.regionManager = this.getRegionManager();
      this.regionManager._parent = this;
  
      this.listenTo(this.regionManager, 'before:add:region', function(name) {
        this.triggerMethod('before:add:region', name);
      });
  
      this.listenTo(this.regionManager, 'add:region', function(name, region) {
        this[name] = region;
        this.triggerMethod('add:region', name, region);
      });
  
      this.listenTo(this.regionManager, 'before:remove:region', function(name) {
        this.triggerMethod('before:remove:region', name);
      });
  
      this.listenTo(this.regionManager, 'remove:region', function(name, region) {
        delete this[name];
        this.triggerMethod('remove:region', name, region);
      });
    },
  
    _getImmediateChildren: function() {
      return _.chain(this.regionManager.getRegions())
        .pluck('currentView')
        .compact()
        .value();
    }
  });
  

  // Behavior
  // --------
  
  // A Behavior is an isolated set of DOM /
  // user interactions that can be mixed into any View.
  // Behaviors allow you to blackbox View specific interactions
  // into portable logical chunks, keeping your views simple and your code DRY.
  
  Marionette.Behavior = Marionette.Object.extend({
    constructor: function(options, view) {
      // Setup reference to the view.
      // this comes in handle when a behavior
      // wants to directly talk up the chain
      // to the view.
      this.view = view;
      this.defaults = _.result(this, 'defaults') || {};
      this.options  = _.extend({}, this.defaults, options);
      // Construct an internal UI hash using
      // the views UI hash and then the behaviors UI hash.
      // This allows the user to use UI hash elements
      // defined in the parent view as well as those
      // defined in the given behavior.
      this.ui = _.extend({}, _.result(view, 'ui'), _.result(this, 'ui'));
  
      Marionette.Object.apply(this, arguments);
    },
  
    // proxy behavior $ method to the view
    // this is useful for doing jquery DOM lookups
    // scoped to behaviors view.
    $: function() {
      return this.view.$.apply(this.view, arguments);
    },
  
    // Stops the behavior from listening to events.
    // Overrides Object#destroy to prevent additional events from being triggered.
    destroy: function() {
      this.stopListening();
  
      return this;
    },
  
    proxyViewProperties: function(view) {
      this.$el = view.$el;
      this.el = view.el;
    }
  });
  
  /* jshint maxlen: 143 */
  // Behaviors
  // ---------
  
  // Behaviors is a utility class that takes care of
  // gluing your behavior instances to their given View.
  // The most important part of this class is that you
  // **MUST** override the class level behaviorsLookup
  // method for things to work properly.
  
  Marionette.Behaviors = (function(Marionette, _) {
    // Borrow event splitter from Backbone
    var delegateEventSplitter = /^(\S+)\s*(.*)$/;
  
    function Behaviors(view, behaviors) {
  
      if (!_.isObject(view.behaviors)) {
        return {};
      }
  
      // Behaviors defined on a view can be a flat object literal
      // or it can be a function that returns an object.
      behaviors = Behaviors.parseBehaviors(view, behaviors || _.result(view, 'behaviors'));
  
      // Wraps several of the view's methods
      // calling the methods first on each behavior
      // and then eventually calling the method on the view.
      Behaviors.wrap(view, behaviors, _.keys(methods));
      return behaviors;
    }
  
    var methods = {
      behaviorTriggers: function(behaviorTriggers, behaviors) {
        var triggerBuilder = new BehaviorTriggersBuilder(this, behaviors);
        return triggerBuilder.buildBehaviorTriggers();
      },
  
      behaviorEvents: function(behaviorEvents, behaviors) {
        var _behaviorsEvents = {};
  
        _.each(behaviors, function(b, i) {
          var _events = {};
          var behaviorEvents = _.clone(_.result(b, 'events')) || {};
  
          // Normalize behavior events hash to allow
          // a user to use the @ui. syntax.
          behaviorEvents = Marionette.normalizeUIKeys(behaviorEvents, getBehaviorsUI(b));
  
          var j = 0;
          _.each(behaviorEvents, function(behaviour, key) {
            var match     = key.match(delegateEventSplitter);
  
            // Set event name to be namespaced using the view cid,
            // the behavior index, and the behavior event index
            // to generate a non colliding event namespace
            // http://api.jquery.com/event.namespace/
            var eventName = match[1] + '.' + [this.cid, i, j++, ' '].join('');
            var selector  = match[2];
  
            var eventKey  = eventName + selector;
            var handler   = _.isFunction(behaviour) ? behaviour : b[behaviour];
            if (!handler) { return; }
            _events[eventKey] = _.bind(handler, b);
          }, this);
  
          _behaviorsEvents = _.extend(_behaviorsEvents, _events);
        }, this);
  
        return _behaviorsEvents;
      }
    };
  
    _.extend(Behaviors, {
  
      // Placeholder method to be extended by the user.
      // The method should define the object that stores the behaviors.
      // i.e.
      //
      // ```js
      // Marionette.Behaviors.behaviorsLookup: function() {
      //   return App.Behaviors
      // }
      // ```
      behaviorsLookup: function() {
        throw new Marionette.Error({
          message: 'You must define where your behaviors are stored.',
          url: 'marionette.behaviors.html#behaviorslookup'
        });
      },
  
      // Takes care of getting the behavior class
      // given options and a key.
      // If a user passes in options.behaviorClass
      // default to using that. Otherwise delegate
      // the lookup to the users `behaviorsLookup` implementation.
      getBehaviorClass: function(options, key) {
        if (options.behaviorClass) {
          return options.behaviorClass;
        }
  
        // Get behavior class can be either a flat object or a method
        return Marionette._getValue(Behaviors.behaviorsLookup, this, [options, key])[key];
      },
  
      // Iterate over the behaviors object, for each behavior
      // instantiate it and get its grouped behaviors.
      parseBehaviors: function(view, behaviors) {
        return _.chain(behaviors).map(function(options, key) {
          var BehaviorClass = Behaviors.getBehaviorClass(options, key);
  
          var behavior = new BehaviorClass(options, view);
          var nestedBehaviors = Behaviors.parseBehaviors(view, _.result(behavior, 'behaviors'));
  
          return [behavior].concat(nestedBehaviors);
        }).flatten().value();
      },
  
      // Wrap view internal methods so that they delegate to behaviors. For example,
      // `onDestroy` should trigger destroy on all of the behaviors and then destroy itself.
      // i.e.
      //
      // `view.delegateEvents = _.partial(methods.delegateEvents, view.delegateEvents, behaviors);`
      wrap: function(view, behaviors, methodNames) {
        _.each(methodNames, function(methodName) {
          view[methodName] = _.partial(methods[methodName], view[methodName], behaviors);
        });
      }
    });
  
    // Class to build handlers for `triggers` on behaviors
    // for views
    function BehaviorTriggersBuilder(view, behaviors) {
      this._view      = view;
      this._behaviors = behaviors;
      this._triggers  = {};
    }
  
    _.extend(BehaviorTriggersBuilder.prototype, {
      // Main method to build the triggers hash with event keys and handlers
      buildBehaviorTriggers: function() {
        _.each(this._behaviors, this._buildTriggerHandlersForBehavior, this);
        return this._triggers;
      },
  
      // Internal method to build all trigger handlers for a given behavior
      _buildTriggerHandlersForBehavior: function(behavior, i) {
        var triggersHash = _.clone(_.result(behavior, 'triggers')) || {};
  
        triggersHash = Marionette.normalizeUIKeys(triggersHash, getBehaviorsUI(behavior));
  
        _.each(triggersHash, _.bind(this._setHandlerForBehavior, this, behavior, i));
      },
  
      // Internal method to create and assign the trigger handler for a given
      // behavior
      _setHandlerForBehavior: function(behavior, i, eventName, trigger) {
        // Unique identifier for the `this._triggers` hash
        var triggerKey = trigger.replace(/^\S+/, function(triggerName) {
          return triggerName + '.' + 'behaviortriggers' + i;
        });
  
        this._triggers[triggerKey] = this._view._buildViewTrigger(eventName);
      }
    });
  
    function getBehaviorsUI(behavior) {
      return behavior._uiBindings || behavior.ui;
    }
  
    return Behaviors;
  
  })(Marionette, _);
  

  // App Router
  // ----------
  
  // Reduce the boilerplate code of handling route events
  // and then calling a single method on another object.
  // Have your routers configured to call the method on
  // your object, directly.
  //
  // Configure an AppRouter with `appRoutes`.
  //
  // App routers can only take one `controller` object.
  // It is recommended that you divide your controller
  // objects in to smaller pieces of related functionality
  // and have multiple routers / controllers, instead of
  // just one giant router and controller.
  //
  // You can also add standard routes to an AppRouter.
  
  Marionette.AppRouter = Backbone.Router.extend({
  
    constructor: function(options) {
      this.options = options || {};
  
      Backbone.Router.apply(this, arguments);
  
      var appRoutes = this.getOption('appRoutes');
      var controller = this._getController();
      this.processAppRoutes(controller, appRoutes);
      this.on('route', this._processOnRoute, this);
    },
  
    // Similar to route method on a Backbone Router but
    // method is called on the controller
    appRoute: function(route, methodName) {
      var controller = this._getController();
      this._addAppRoute(controller, route, methodName);
    },
  
    // process the route event and trigger the onRoute
    // method call, if it exists
    _processOnRoute: function(routeName, routeArgs) {
      // make sure an onRoute before trying to call it
      if (_.isFunction(this.onRoute)) {
        // find the path that matches the current route
        var routePath = _.invert(this.getOption('appRoutes'))[routeName];
        this.onRoute(routeName, routePath, routeArgs);
      }
    },
  
    // Internal method to process the `appRoutes` for the
    // router, and turn them in to routes that trigger the
    // specified method on the specified `controller`.
    processAppRoutes: function(controller, appRoutes) {
      if (!appRoutes) { return; }
  
      var routeNames = _.keys(appRoutes).reverse(); // Backbone requires reverted order of routes
  
      _.each(routeNames, function(route) {
        this._addAppRoute(controller, route, appRoutes[route]);
      }, this);
    },
  
    _getController: function() {
      return this.getOption('controller');
    },
  
    _addAppRoute: function(controller, route, methodName) {
      var method = controller[methodName];
  
      if (!method) {
        throw new Marionette.Error('Method "' + methodName + '" was not found on the controller');
      }
  
      this.route(route, methodName, _.bind(method, controller));
    },
  
    mergeOptions: Marionette.mergeOptions,
  
    // Proxy `getOption` to enable getting options from this or this.options by name.
    getOption: Marionette.proxyGetOption,
  
    triggerMethod: Marionette.triggerMethod,
  
    bindEntityEvents: Marionette.proxyBindEntityEvents,
  
    unbindEntityEvents: Marionette.proxyUnbindEntityEvents
  });
  
  // Application
  // -----------
  
  // Contain and manage the composite application as a whole.
  // Stores and starts up `Region` objects, includes an
  // event aggregator as `app.vent`
  Marionette.Application = Marionette.Object.extend({
    constructor: function(options) {
      this._initializeRegions(options);
      this._initCallbacks = new Marionette.Callbacks();
      this.submodules = {};
      _.extend(this, options);
      this._initChannel();
      Marionette.Object.apply(this, arguments);
    },
  
    // Command execution, facilitated by Backbone.Wreqr.Commands
    execute: function() {
      this.commands.execute.apply(this.commands, arguments);
    },
  
    // Request/response, facilitated by Backbone.Wreqr.RequestResponse
    request: function() {
      return this.reqres.request.apply(this.reqres, arguments);
    },
  
    // Add an initializer that is either run at when the `start`
    // method is called, or run immediately if added after `start`
    // has already been called.
    addInitializer: function(initializer) {
      this._initCallbacks.add(initializer);
    },
  
    // kick off all of the application's processes.
    // initializes all of the regions that have been added
    // to the app, and runs all of the initializer functions
    start: function(options) {
      this.triggerMethod('before:start', options);
      this._initCallbacks.run(options, this);
      this.triggerMethod('start', options);
    },
  
    // Add regions to your app.
    // Accepts a hash of named strings or Region objects
    // addRegions({something: "#someRegion"})
    // addRegions({something: Region.extend({el: "#someRegion"}) });
    addRegions: function(regions) {
      return this._regionManager.addRegions(regions);
    },
  
    // Empty all regions in the app, without removing them
    emptyRegions: function() {
      return this._regionManager.emptyRegions();
    },
  
    // Removes a region from your app, by name
    // Accepts the regions name
    // removeRegion('myRegion')
    removeRegion: function(region) {
      return this._regionManager.removeRegion(region);
    },
  
    // Provides alternative access to regions
    // Accepts the region name
    // getRegion('main')
    getRegion: function(region) {
      return this._regionManager.get(region);
    },
  
    // Get all the regions from the region manager
    getRegions: function() {
      return this._regionManager.getRegions();
    },
  
    // Create a module, attached to the application
    module: function(moduleNames, moduleDefinition) {
  
      // Overwrite the module class if the user specifies one
      var ModuleClass = Marionette.Module.getClass(moduleDefinition);
  
      var args = _.toArray(arguments);
      args.unshift(this);
  
      // see the Marionette.Module object for more information
      return ModuleClass.create.apply(ModuleClass, args);
    },
  
    // Enable easy overriding of the default `RegionManager`
    // for customized region interactions and business-specific
    // view logic for better control over single regions.
    getRegionManager: function() {
      return new Marionette.RegionManager();
    },
  
    // Internal method to initialize the regions that have been defined in a
    // `regions` attribute on the application instance
    _initializeRegions: function(options) {
      var regions = _.isFunction(this.regions) ? this.regions(options) : this.regions || {};
  
      this._initRegionManager();
  
      // Enable users to define `regions` in instance options.
      var optionRegions = Marionette.getOption(options, 'regions');
  
      // Enable region options to be a function
      if (_.isFunction(optionRegions)) {
        optionRegions = optionRegions.call(this, options);
      }
  
      // Overwrite current regions with those passed in options
      _.extend(regions, optionRegions);
  
      this.addRegions(regions);
  
      return this;
    },
  
    // Internal method to set up the region manager
    _initRegionManager: function() {
      this._regionManager = this.getRegionManager();
      this._regionManager._parent = this;
  
      this.listenTo(this._regionManager, 'before:add:region', function() {
        Marionette._triggerMethod(this, 'before:add:region', arguments);
      });
  
      this.listenTo(this._regionManager, 'add:region', function(name, region) {
        this[name] = region;
        Marionette._triggerMethod(this, 'add:region', arguments);
      });
  
      this.listenTo(this._regionManager, 'before:remove:region', function() {
        Marionette._triggerMethod(this, 'before:remove:region', arguments);
      });
  
      this.listenTo(this._regionManager, 'remove:region', function(name) {
        delete this[name];
        Marionette._triggerMethod(this, 'remove:region', arguments);
      });
    },
  
    // Internal method to setup the Wreqr.radio channel
    _initChannel: function() {
      this.channelName = _.result(this, 'channelName') || 'global';
      this.channel = _.result(this, 'channel') || Backbone.Wreqr.radio.channel(this.channelName);
      this.vent = _.result(this, 'vent') || this.channel.vent;
      this.commands = _.result(this, 'commands') || this.channel.commands;
      this.reqres = _.result(this, 'reqres') || this.channel.reqres;
    }
  });
  
  /* jshint maxparams: 9 */
  
  // Module
  // ------
  
  // A simple module system, used to create privacy and encapsulation in
  // Marionette applications
  Marionette.Module = function(moduleName, app, options) {
    this.moduleName = moduleName;
    this.options = _.extend({}, this.options, options);
    // Allow for a user to overide the initialize
    // for a given module instance.
    this.initialize = options.initialize || this.initialize;
  
    // Set up an internal store for sub-modules.
    this.submodules = {};
  
    this._setupInitializersAndFinalizers();
  
    // Set an internal reference to the app
    // within a module.
    this.app = app;
  
    if (_.isFunction(this.initialize)) {
      this.initialize(moduleName, app, this.options);
    }
  };
  
  Marionette.Module.extend = Marionette.extend;
  
  // Extend the Module prototype with events / listenTo, so that the module
  // can be used as an event aggregator or pub/sub.
  _.extend(Marionette.Module.prototype, Backbone.Events, {
  
    // By default modules start with their parents.
    startWithParent: true,
  
    // Initialize is an empty function by default. Override it with your own
    // initialization logic when extending Marionette.Module.
    initialize: function() {},
  
    // Initializer for a specific module. Initializers are run when the
    // module's `start` method is called.
    addInitializer: function(callback) {
      this._initializerCallbacks.add(callback);
    },
  
    // Finalizers are run when a module is stopped. They are used to teardown
    // and finalize any variables, references, events and other code that the
    // module had set up.
    addFinalizer: function(callback) {
      this._finalizerCallbacks.add(callback);
    },
  
    // Start the module, and run all of its initializers
    start: function(options) {
      // Prevent re-starting a module that is already started
      if (this._isInitialized) { return; }
  
      // start the sub-modules (depth-first hierarchy)
      _.each(this.submodules, function(mod) {
        // check to see if we should start the sub-module with this parent
        if (mod.startWithParent) {
          mod.start(options);
        }
      });
  
      // run the callbacks to "start" the current module
      this.triggerMethod('before:start', options);
  
      this._initializerCallbacks.run(options, this);
      this._isInitialized = true;
  
      this.triggerMethod('start', options);
    },
  
    // Stop this module by running its finalizers and then stop all of
    // the sub-modules for this module
    stop: function() {
      // if we are not initialized, don't bother finalizing
      if (!this._isInitialized) { return; }
      this._isInitialized = false;
  
      this.triggerMethod('before:stop');
  
      // stop the sub-modules; depth-first, to make sure the
      // sub-modules are stopped / finalized before parents
      _.invoke(this.submodules, 'stop');
  
      // run the finalizers
      this._finalizerCallbacks.run(undefined, this);
  
      // reset the initializers and finalizers
      this._initializerCallbacks.reset();
      this._finalizerCallbacks.reset();
  
      this.triggerMethod('stop');
    },
  
    // Configure the module with a definition function and any custom args
    // that are to be passed in to the definition function
    addDefinition: function(moduleDefinition, customArgs) {
      this._runModuleDefinition(moduleDefinition, customArgs);
    },
  
    // Internal method: run the module definition function with the correct
    // arguments
    _runModuleDefinition: function(definition, customArgs) {
      // If there is no definition short circut the method.
      if (!definition) { return; }
  
      // build the correct list of arguments for the module definition
      var args = _.flatten([
        this,
        this.app,
        Backbone,
        Marionette,
        Backbone.$, _,
        customArgs
      ]);
  
      definition.apply(this, args);
    },
  
    // Internal method: set up new copies of initializers and finalizers.
    // Calling this method will wipe out all existing initializers and
    // finalizers.
    _setupInitializersAndFinalizers: function() {
      this._initializerCallbacks = new Marionette.Callbacks();
      this._finalizerCallbacks = new Marionette.Callbacks();
    },
  
    // import the `triggerMethod` to trigger events with corresponding
    // methods if the method exists
    triggerMethod: Marionette.triggerMethod
  });
  
  // Class methods to create modules
  _.extend(Marionette.Module, {
  
    // Create a module, hanging off the app parameter as the parent object.
    create: function(app, moduleNames, moduleDefinition) {
      var module = app;
  
      // get the custom args passed in after the module definition and
      // get rid of the module name and definition function
      var customArgs = _.drop(arguments, 3);
  
      // Split the module names and get the number of submodules.
      // i.e. an example module name of `Doge.Wow.Amaze` would
      // then have the potential for 3 module definitions.
      moduleNames = moduleNames.split('.');
      var length = moduleNames.length;
  
      // store the module definition for the last module in the chain
      var moduleDefinitions = [];
      moduleDefinitions[length - 1] = moduleDefinition;
  
      // Loop through all the parts of the module definition
      _.each(moduleNames, function(moduleName, i) {
        var parentModule = module;
        module = this._getModule(parentModule, moduleName, app, moduleDefinition);
        this._addModuleDefinition(parentModule, module, moduleDefinitions[i], customArgs);
      }, this);
  
      // Return the last module in the definition chain
      return module;
    },
  
    _getModule: function(parentModule, moduleName, app, def, args) {
      var options = _.extend({}, def);
      var ModuleClass = this.getClass(def);
  
      // Get an existing module of this name if we have one
      var module = parentModule[moduleName];
  
      if (!module) {
        // Create a new module if we don't have one
        module = new ModuleClass(moduleName, app, options);
        parentModule[moduleName] = module;
        // store the module on the parent
        parentModule.submodules[moduleName] = module;
      }
  
      return module;
    },
  
    // ## Module Classes
    //
    // Module classes can be used as an alternative to the define pattern.
    // The extend function of a Module is identical to the extend functions
    // on other Backbone and Marionette classes.
    // This allows module lifecyle events like `onStart` and `onStop` to be called directly.
    getClass: function(moduleDefinition) {
      var ModuleClass = Marionette.Module;
  
      if (!moduleDefinition) {
        return ModuleClass;
      }
  
      // If all of the module's functionality is defined inside its class,
      // then the class can be passed in directly. `MyApp.module("Foo", FooModule)`.
      if (moduleDefinition.prototype instanceof ModuleClass) {
        return moduleDefinition;
      }
  
      return moduleDefinition.moduleClass || ModuleClass;
    },
  
    // Add the module definition and add a startWithParent initializer function.
    // This is complicated because module definitions are heavily overloaded
    // and support an anonymous function, module class, or options object
    _addModuleDefinition: function(parentModule, module, def, args) {
      var fn = this._getDefine(def);
      var startWithParent = this._getStartWithParent(def, module);
  
      if (fn) {
        module.addDefinition(fn, args);
      }
  
      this._addStartWithParent(parentModule, module, startWithParent);
    },
  
    _getStartWithParent: function(def, module) {
      var swp;
  
      if (_.isFunction(def) && (def.prototype instanceof Marionette.Module)) {
        swp = module.constructor.prototype.startWithParent;
        return _.isUndefined(swp) ? true : swp;
      }
  
      if (_.isObject(def)) {
        swp = def.startWithParent;
        return _.isUndefined(swp) ? true : swp;
      }
  
      return true;
    },
  
    _getDefine: function(def) {
      if (_.isFunction(def) && !(def.prototype instanceof Marionette.Module)) {
        return def;
      }
  
      if (_.isObject(def)) {
        return def.define;
      }
  
      return null;
    },
  
    _addStartWithParent: function(parentModule, module, startWithParent) {
      module.startWithParent = module.startWithParent && startWithParent;
  
      if (!module.startWithParent || !!module.startWithParentIsConfigured) {
        return;
      }
  
      module.startWithParentIsConfigured = true;
  
      parentModule.addInitializer(function(options) {
        if (module.startWithParent) {
          module.start(options);
        }
      });
    }
  });
  

  return Marionette;
}));

},{"backbone":153,"backbone.babysitter":150,"backbone.wreqr":152,"underscore":262}],152:[function(require,module,exports){
// Backbone.Wreqr (Backbone.Marionette)
// ----------------------------------
// v1.4.0
//
// Copyright (c)2016 Derick Bailey, Muted Solutions, LLC.
// Distributed under MIT license
//
// http://github.com/marionettejs/backbone.wreqr


(function(root, factory) {

  if (typeof define === 'function' && define.amd) {
    define(['backbone', 'underscore'], function(Backbone, _) {
      return factory(Backbone, _);
    });
  } else if (typeof exports !== 'undefined') {
    var Backbone = require('backbone');
    var _ = require('underscore');
    module.exports = factory(Backbone, _);
  } else {
    factory(root.Backbone, root._);
  }

}(this, function(Backbone, _) {
  "use strict";

  var previousWreqr = Backbone.Wreqr;

  var Wreqr = Backbone.Wreqr = {};

  Backbone.Wreqr.VERSION = '1.4.0';

  Backbone.Wreqr.noConflict = function () {
    Backbone.Wreqr = previousWreqr;
    return this;
  };

  // Handlers
  // --------
  // A registry of functions to call, given a name
  
  Wreqr.Handlers = (function(Backbone, _){
    "use strict";
    
    // Constructor
    // -----------
  
    var Handlers = function(options){
      this.options = options;
      this._wreqrHandlers = {};
      
      if (_.isFunction(this.initialize)){
        this.initialize(options);
      }
    };
  
    Handlers.extend = Backbone.Model.extend;
  
    // Instance Members
    // ----------------
  
    _.extend(Handlers.prototype, Backbone.Events, {
  
      // Add multiple handlers using an object literal configuration
      setHandlers: function(handlers){
        _.each(handlers, _.bind(function(handler, name){
          var context = null;
  
          if (_.isObject(handler) && !_.isFunction(handler)){
            context = handler.context;
            handler = handler.callback;
          }
  
          this.setHandler(name, handler, context);
        }, this));
      },
  
      // Add a handler for the given name, with an
      // optional context to run the handler within
      setHandler: function(name, handler, context){
        var config = {
          callback: handler,
          context: context
        };
  
        this._wreqrHandlers[name] = config;
  
        this.trigger("handler:add", name, handler, context);
      },
  
      // Determine whether or not a handler is registered
      hasHandler: function(name){
        return !! this._wreqrHandlers[name];
      },
  
      // Get the currently registered handler for
      // the specified name. Throws an exception if
      // no handler is found.
      getHandler: function(name){
        var config = this._wreqrHandlers[name];
  
        if (!config){
          return;
        }
  
        return function(){
          return config.callback.apply(config.context, arguments);
        };
      },
  
      // Remove a handler for the specified name
      removeHandler: function(name){
        delete this._wreqrHandlers[name];
      },
  
      // Remove all handlers from this registry
      removeAllHandlers: function(){
        this._wreqrHandlers = {};
      }
    });
  
    return Handlers;
  })(Backbone, _);
  
  // Wreqr.CommandStorage
  // --------------------
  //
  // Store and retrieve commands for execution.
  Wreqr.CommandStorage = (function(){
    "use strict";
  
    // Constructor function
    var CommandStorage = function(options){
      this.options = options;
      this._commands = {};
  
      if (_.isFunction(this.initialize)){
        this.initialize(options);
      }
    };
  
    // Instance methods
    _.extend(CommandStorage.prototype, Backbone.Events, {
  
      // Get an object literal by command name, that contains
      // the `commandName` and the `instances` of all commands
      // represented as an array of arguments to process
      getCommands: function(commandName){
        var commands = this._commands[commandName];
  
        // we don't have it, so add it
        if (!commands){
  
          // build the configuration
          commands = {
            command: commandName, 
            instances: []
          };
  
          // store it
          this._commands[commandName] = commands;
        }
  
        return commands;
      },
  
      // Add a command by name, to the storage and store the
      // args for the command
      addCommand: function(commandName, args){
        var command = this.getCommands(commandName);
        command.instances.push(args);
      },
  
      // Clear all commands for the given `commandName`
      clearCommands: function(commandName){
        var command = this.getCommands(commandName);
        command.instances = [];
      }
    });
  
    return CommandStorage;
  })();
  
  // Wreqr.Commands
  // --------------
  //
  // A simple command pattern implementation. Register a command
  // handler and execute it.
  Wreqr.Commands = (function(Wreqr, _){
    "use strict";
  
    return Wreqr.Handlers.extend({
      // default storage type
      storageType: Wreqr.CommandStorage,
  
      constructor: function(options){
        this.options = options || {};
  
        this._initializeStorage(this.options);
        this.on("handler:add", this._executeCommands, this);
  
        Wreqr.Handlers.prototype.constructor.apply(this, arguments);
      },
  
      // Execute a named command with the supplied args
      execute: function(name){
        name = arguments[0];
        var args = _.rest(arguments);
  
        if (this.hasHandler(name)){
          this.getHandler(name).apply(this, args);
        } else {
          this.storage.addCommand(name, args);
        }
  
      },
  
      // Internal method to handle bulk execution of stored commands
      _executeCommands: function(name, handler, context){
        var command = this.storage.getCommands(name);
  
        // loop through and execute all the stored command instances
        _.each(command.instances, function(args){
          handler.apply(context, args);
        });
  
        this.storage.clearCommands(name);
      },
  
      // Internal method to initialize storage either from the type's
      // `storageType` or the instance `options.storageType`.
      _initializeStorage: function(options){
        var storage;
  
        var StorageType = options.storageType || this.storageType;
        if (_.isFunction(StorageType)){
          storage = new StorageType();
        } else {
          storage = StorageType;
        }
  
        this.storage = storage;
      }
    });
  
  })(Wreqr, _);
  
  // Wreqr.RequestResponse
  // ---------------------
  //
  // A simple request/response implementation. Register a
  // request handler, and return a response from it
  Wreqr.RequestResponse = (function(Wreqr, _){
    "use strict";
  
    return Wreqr.Handlers.extend({
      request: function(name){
        if (this.hasHandler(name)) {
          return this.getHandler(name).apply(this, _.rest(arguments));
        }
      }
    });
  
  })(Wreqr, _);
  
  // Event Aggregator
  // ----------------
  // A pub-sub object that can be used to decouple various parts
  // of an application through event-driven architecture.
  
  Wreqr.EventAggregator = (function(Backbone, _){
    "use strict";
    var EA = function(){};
  
    // Copy the `extend` function used by Backbone's classes
    EA.extend = Backbone.Model.extend;
  
    // Copy the basic Backbone.Events on to the event aggregator
    _.extend(EA.prototype, Backbone.Events);
  
    return EA;
  })(Backbone, _);
  
  // Wreqr.Channel
  // --------------
  //
  // An object that wraps the three messaging systems:
  // EventAggregator, RequestResponse, Commands
  Wreqr.Channel = (function(Wreqr){
    "use strict";
  
    var Channel = function(channelName) {
      this.vent        = new Backbone.Wreqr.EventAggregator();
      this.reqres      = new Backbone.Wreqr.RequestResponse();
      this.commands    = new Backbone.Wreqr.Commands();
      this.channelName = channelName;
    };
  
    _.extend(Channel.prototype, {
  
      // Remove all handlers from the messaging systems of this channel
      reset: function() {
        this.vent.off();
        this.vent.stopListening();
        this.reqres.removeAllHandlers();
        this.commands.removeAllHandlers();
        return this;
      },
  
      // Connect a hash of events; one for each messaging system
      connectEvents: function(hash, context) {
        this._connect('vent', hash, context);
        return this;
      },
  
      connectCommands: function(hash, context) {
        this._connect('commands', hash, context);
        return this;
      },
  
      connectRequests: function(hash, context) {
        this._connect('reqres', hash, context);
        return this;
      },
  
      // Attach the handlers to a given message system `type`
      _connect: function(type, hash, context) {
        if (!hash) {
          return;
        }
  
        context = context || this;
        var method = (type === 'vent') ? 'on' : 'setHandler';
  
        _.each(hash, _.bind(function(fn, eventName) {
          this[type][method](eventName, _.bind(fn, context));
        }, this));
      }
    });
  
  
    return Channel;
  })(Wreqr);
  
  // Wreqr.Radio
  // --------------
  //
  // An object that lets you communicate with many channels.
  Wreqr.radio = (function(Wreqr, _){
    "use strict";
  
    var Radio = function() {
      this._channels = {};
      this.vent = {};
      this.commands = {};
      this.reqres = {};
      this._proxyMethods();
    };
  
    _.extend(Radio.prototype, {
  
      channel: function(channelName) {
        if (!channelName) {
          throw new Error('Channel must receive a name');
        }
  
        return this._getChannel( channelName );
      },
  
      _getChannel: function(channelName) {
        var channel = this._channels[channelName];
  
        if(!channel) {
          channel = new Wreqr.Channel(channelName);
          this._channels[channelName] = channel;
        }
  
        return channel;
      },
  
      _proxyMethods: function() {
        _.each(['vent', 'commands', 'reqres'], _.bind(function(system) {
          _.each( messageSystems[system], _.bind(function(method) {
            this[system][method] = proxyMethod(this, system, method);
          }, this));
        }, this));
      }
    });
  
  
    var messageSystems = {
      vent: [
        'on',
        'off',
        'trigger',
        'once',
        'stopListening',
        'listenTo',
        'listenToOnce'
      ],
  
      commands: [
        'execute',
        'setHandler',
        'setHandlers',
        'removeHandler',
        'removeAllHandlers'
      ],
  
      reqres: [
        'request',
        'setHandler',
        'setHandlers',
        'removeHandler',
        'removeAllHandlers'
      ]
    };
  
    var proxyMethod = function(radio, system, method) {
      return function(channelName) {
        var messageSystem = radio._getChannel(channelName)[system];
  
        return messageSystem[method].apply(messageSystem, _.rest(arguments));
      };
    };
  
    return new Radio();
  
  })(Wreqr, _);
  

  return Backbone.Wreqr;

}));

},{"backbone":153,"underscore":262}],153:[function(require,module,exports){
(function (global){
//     Backbone.js 1.2.3

//     (c) 2010-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
//     Backbone may be freely distributed under the MIT license.
//     For all details and documentation:
//     http://backbonejs.org

(function(factory) {

  // Establish the root object, `window` (`self`) in the browser, or `global` on the server.
  // We use `self` instead of `window` for `WebWorker` support.
  var root = (typeof self == 'object' && self.self == self && self) ||
            (typeof global == 'object' && global.global == global && global);

  // Set up Backbone appropriately for the environment. Start with AMD.
  if (typeof define === 'function' && define.amd) {
    define(['underscore', 'jquery', 'exports'], function(_, $, exports) {
      // Export global even in AMD case in case this script is loaded with
      // others that may still expect a global Backbone.
      root.Backbone = factory(root, exports, _, $);
    });

  // Next for Node.js or CommonJS. jQuery may not be needed as a module.
  } else if (typeof exports !== 'undefined') {
    var _ = require('underscore'), $;
    try { $ = require('jquery'); } catch(e) {}
    factory(root, exports, _, $);

  // Finally, as a browser global.
  } else {
    root.Backbone = factory(root, {}, root._, (root.jQuery || root.Zepto || root.ender || root.$));
  }

}(function(root, Backbone, _, $) {

  // Initial Setup
  // -------------

  // Save the previous value of the `Backbone` variable, so that it can be
  // restored later on, if `noConflict` is used.
  var previousBackbone = root.Backbone;

  // Create a local reference to a common array method we'll want to use later.
  var slice = Array.prototype.slice;

  // Current version of the library. Keep in sync with `package.json`.
  Backbone.VERSION = '1.2.3';

  // For Backbone's purposes, jQuery, Zepto, Ender, or My Library (kidding) owns
  // the `$` variable.
  Backbone.$ = $;

  // Runs Backbone.js in *noConflict* mode, returning the `Backbone` variable
  // to its previous owner. Returns a reference to this Backbone object.
  Backbone.noConflict = function() {
    root.Backbone = previousBackbone;
    return this;
  };

  // Turn on `emulateHTTP` to support legacy HTTP servers. Setting this option
  // will fake `"PATCH"`, `"PUT"` and `"DELETE"` requests via the `_method` parameter and
  // set a `X-Http-Method-Override` header.
  Backbone.emulateHTTP = false;

  // Turn on `emulateJSON` to support legacy servers that can't deal with direct
  // `application/json` requests ... this will encode the body as
  // `application/x-www-form-urlencoded` instead and will send the model in a
  // form param named `model`.
  Backbone.emulateJSON = false;

  // Proxy Backbone class methods to Underscore functions, wrapping the model's
  // `attributes` object or collection's `models` array behind the scenes.
  //
  // collection.filter(function(model) { return model.get('age') > 10 });
  // collection.each(this.addView);
  //
  // `Function#apply` can be slow so we use the method's arg count, if we know it.
  var addMethod = function(length, method, attribute) {
    switch (length) {
      case 1: return function() {
        return _[method](this[attribute]);
      };
      case 2: return function(value) {
        return _[method](this[attribute], value);
      };
      case 3: return function(iteratee, context) {
        return _[method](this[attribute], cb(iteratee, this), context);
      };
      case 4: return function(iteratee, defaultVal, context) {
        return _[method](this[attribute], cb(iteratee, this), defaultVal, context);
      };
      default: return function() {
        var args = slice.call(arguments);
        args.unshift(this[attribute]);
        return _[method].apply(_, args);
      };
    }
  };
  var addUnderscoreMethods = function(Class, methods, attribute) {
    _.each(methods, function(length, method) {
      if (_[method]) Class.prototype[method] = addMethod(length, method, attribute);
    });
  };

  // Support `collection.sortBy('attr')` and `collection.findWhere({id: 1})`.
  var cb = function(iteratee, instance) {
    if (_.isFunction(iteratee)) return iteratee;
    if (_.isObject(iteratee) && !instance._isModel(iteratee)) return modelMatcher(iteratee);
    if (_.isString(iteratee)) return function(model) { return model.get(iteratee); };
    return iteratee;
  };
  var modelMatcher = function(attrs) {
    var matcher = _.matches(attrs);
    return function(model) {
      return matcher(model.attributes);
    };
  };

  // Backbone.Events
  // ---------------

  // A module that can be mixed in to *any object* in order to provide it with
  // a custom event channel. You may bind a callback to an event with `on` or
  // remove with `off`; `trigger`-ing an event fires all callbacks in
  // succession.
  //
  //     var object = {};
  //     _.extend(object, Backbone.Events);
  //     object.on('expand', function(){ alert('expanded'); });
  //     object.trigger('expand');
  //
  var Events = Backbone.Events = {};

  // Regular expression used to split event strings.
  var eventSplitter = /\s+/;

  // Iterates over the standard `event, callback` (as well as the fancy multiple
  // space-separated events `"change blur", callback` and jQuery-style event
  // maps `{event: callback}`).
  var eventsApi = function(iteratee, events, name, callback, opts) {
    var i = 0, names;
    if (name && typeof name === 'object') {
      // Handle event maps.
      if (callback !== void 0 && 'context' in opts && opts.context === void 0) opts.context = callback;
      for (names = _.keys(name); i < names.length ; i++) {
        events = eventsApi(iteratee, events, names[i], name[names[i]], opts);
      }
    } else if (name && eventSplitter.test(name)) {
      // Handle space separated event names by delegating them individually.
      for (names = name.split(eventSplitter); i < names.length; i++) {
        events = iteratee(events, names[i], callback, opts);
      }
    } else {
      // Finally, standard events.
      events = iteratee(events, name, callback, opts);
    }
    return events;
  };

  // Bind an event to a `callback` function. Passing `"all"` will bind
  // the callback to all events fired.
  Events.on = function(name, callback, context) {
    return internalOn(this, name, callback, context);
  };

  // Guard the `listening` argument from the public API.
  var internalOn = function(obj, name, callback, context, listening) {
    obj._events = eventsApi(onApi, obj._events || {}, name, callback, {
        context: context,
        ctx: obj,
        listening: listening
    });

    if (listening) {
      var listeners = obj._listeners || (obj._listeners = {});
      listeners[listening.id] = listening;
    }

    return obj;
  };

  // Inversion-of-control versions of `on`. Tell *this* object to listen to
  // an event in another object... keeping track of what it's listening to
  // for easier unbinding later.
  Events.listenTo =  function(obj, name, callback) {
    if (!obj) return this;
    var id = obj._listenId || (obj._listenId = _.uniqueId('l'));
    var listeningTo = this._listeningTo || (this._listeningTo = {});
    var listening = listeningTo[id];

    // This object is not listening to any other events on `obj` yet.
    // Setup the necessary references to track the listening callbacks.
    if (!listening) {
      var thisId = this._listenId || (this._listenId = _.uniqueId('l'));
      listening = listeningTo[id] = {obj: obj, objId: id, id: thisId, listeningTo: listeningTo, count: 0};
    }

    // Bind callbacks on obj, and keep track of them on listening.
    internalOn(obj, name, callback, this, listening);
    return this;
  };

  // The reducing API that adds a callback to the `events` object.
  var onApi = function(events, name, callback, options) {
    if (callback) {
      var handlers = events[name] || (events[name] = []);
      var context = options.context, ctx = options.ctx, listening = options.listening;
      if (listening) listening.count++;

      handlers.push({ callback: callback, context: context, ctx: context || ctx, listening: listening });
    }
    return events;
  };

  // Remove one or many callbacks. If `context` is null, removes all
  // callbacks with that function. If `callback` is null, removes all
  // callbacks for the event. If `name` is null, removes all bound
  // callbacks for all events.
  Events.off =  function(name, callback, context) {
    if (!this._events) return this;
    this._events = eventsApi(offApi, this._events, name, callback, {
        context: context,
        listeners: this._listeners
    });
    return this;
  };

  // Tell this object to stop listening to either specific events ... or
  // to every object it's currently listening to.
  Events.stopListening =  function(obj, name, callback) {
    var listeningTo = this._listeningTo;
    if (!listeningTo) return this;

    var ids = obj ? [obj._listenId] : _.keys(listeningTo);

    for (var i = 0; i < ids.length; i++) {
      var listening = listeningTo[ids[i]];

      // If listening doesn't exist, this object is not currently
      // listening to obj. Break out early.
      if (!listening) break;

      listening.obj.off(name, callback, this);
    }
    if (_.isEmpty(listeningTo)) this._listeningTo = void 0;

    return this;
  };

  // The reducing API that removes a callback from the `events` object.
  var offApi = function(events, name, callback, options) {
    if (!events) return;

    var i = 0, listening;
    var context = options.context, listeners = options.listeners;

    // Delete all events listeners and "drop" events.
    if (!name && !callback && !context) {
      var ids = _.keys(listeners);
      for (; i < ids.length; i++) {
        listening = listeners[ids[i]];
        delete listeners[listening.id];
        delete listening.listeningTo[listening.objId];
      }
      return;
    }

    var names = name ? [name] : _.keys(events);
    for (; i < names.length; i++) {
      name = names[i];
      var handlers = events[name];

      // Bail out if there are no events stored.
      if (!handlers) break;

      // Replace events if there are any remaining.  Otherwise, clean up.
      var remaining = [];
      for (var j = 0; j < handlers.length; j++) {
        var handler = handlers[j];
        if (
          callback && callback !== handler.callback &&
            callback !== handler.callback._callback ||
              context && context !== handler.context
        ) {
          remaining.push(handler);
        } else {
          listening = handler.listening;
          if (listening && --listening.count === 0) {
            delete listeners[listening.id];
            delete listening.listeningTo[listening.objId];
          }
        }
      }

      // Update tail event if the list has any events.  Otherwise, clean up.
      if (remaining.length) {
        events[name] = remaining;
      } else {
        delete events[name];
      }
    }
    if (_.size(events)) return events;
  };

  // Bind an event to only be triggered a single time. After the first time
  // the callback is invoked, its listener will be removed. If multiple events
  // are passed in using the space-separated syntax, the handler will fire
  // once for each event, not once for a combination of all events.
  Events.once =  function(name, callback, context) {
    // Map the event into a `{event: once}` object.
    var events = eventsApi(onceMap, {}, name, callback, _.bind(this.off, this));
    return this.on(events, void 0, context);
  };

  // Inversion-of-control versions of `once`.
  Events.listenToOnce =  function(obj, name, callback) {
    // Map the event into a `{event: once}` object.
    var events = eventsApi(onceMap, {}, name, callback, _.bind(this.stopListening, this, obj));
    return this.listenTo(obj, events);
  };

  // Reduces the event callbacks into a map of `{event: onceWrapper}`.
  // `offer` unbinds the `onceWrapper` after it has been called.
  var onceMap = function(map, name, callback, offer) {
    if (callback) {
      var once = map[name] = _.once(function() {
        offer(name, once);
        callback.apply(this, arguments);
      });
      once._callback = callback;
    }
    return map;
  };

  // Trigger one or many events, firing all bound callbacks. Callbacks are
  // passed the same arguments as `trigger` is, apart from the event name
  // (unless you're listening on `"all"`, which will cause your callback to
  // receive the true name of the event as the first argument).
  Events.trigger =  function(name) {
    if (!this._events) return this;

    var length = Math.max(0, arguments.length - 1);
    var args = Array(length);
    for (var i = 0; i < length; i++) args[i] = arguments[i + 1];

    eventsApi(triggerApi, this._events, name, void 0, args);
    return this;
  };

  // Handles triggering the appropriate event callbacks.
  var triggerApi = function(objEvents, name, cb, args) {
    if (objEvents) {
      var events = objEvents[name];
      var allEvents = objEvents.all;
      if (events && allEvents) allEvents = allEvents.slice();
      if (events) triggerEvents(events, args);
      if (allEvents) triggerEvents(allEvents, [name].concat(args));
    }
    return objEvents;
  };

  // A difficult-to-believe, but optimized internal dispatch function for
  // triggering events. Tries to keep the usual cases speedy (most internal
  // Backbone events have 3 arguments).
  var triggerEvents = function(events, args) {
    var ev, i = -1, l = events.length, a1 = args[0], a2 = args[1], a3 = args[2];
    switch (args.length) {
      case 0: while (++i < l) (ev = events[i]).callback.call(ev.ctx); return;
      case 1: while (++i < l) (ev = events[i]).callback.call(ev.ctx, a1); return;
      case 2: while (++i < l) (ev = events[i]).callback.call(ev.ctx, a1, a2); return;
      case 3: while (++i < l) (ev = events[i]).callback.call(ev.ctx, a1, a2, a3); return;
      default: while (++i < l) (ev = events[i]).callback.apply(ev.ctx, args); return;
    }
  };

  // Aliases for backwards compatibility.
  Events.bind   = Events.on;
  Events.unbind = Events.off;

  // Allow the `Backbone` object to serve as a global event bus, for folks who
  // want global "pubsub" in a convenient place.
  _.extend(Backbone, Events);

  // Backbone.Model
  // --------------

  // Backbone **Models** are the basic data object in the framework --
  // frequently representing a row in a table in a database on your server.
  // A discrete chunk of data and a bunch of useful, related methods for
  // performing computations and transformations on that data.

  // Create a new model with the specified attributes. A client id (`cid`)
  // is automatically generated and assigned for you.
  var Model = Backbone.Model = function(attributes, options) {
    var attrs = attributes || {};
    options || (options = {});
    this.cid = _.uniqueId(this.cidPrefix);
    this.attributes = {};
    if (options.collection) this.collection = options.collection;
    if (options.parse) attrs = this.parse(attrs, options) || {};
    attrs = _.defaults({}, attrs, _.result(this, 'defaults'));
    this.set(attrs, options);
    this.changed = {};
    this.initialize.apply(this, arguments);
  };

  // Attach all inheritable methods to the Model prototype.
  _.extend(Model.prototype, Events, {

    // A hash of attributes whose current and previous value differ.
    changed: null,

    // The value returned during the last failed validation.
    validationError: null,

    // The default name for the JSON `id` attribute is `"id"`. MongoDB and
    // CouchDB users may want to set this to `"_id"`.
    idAttribute: 'id',

    // The prefix is used to create the client id which is used to identify models locally.
    // You may want to override this if you're experiencing name clashes with model ids.
    cidPrefix: 'c',

    // Initialize is an empty function by default. Override it with your own
    // initialization logic.
    initialize: function(){},

    // Return a copy of the model's `attributes` object.
    toJSON: function(options) {
      return _.clone(this.attributes);
    },

    // Proxy `Backbone.sync` by default -- but override this if you need
    // custom syncing semantics for *this* particular model.
    sync: function() {
      return Backbone.sync.apply(this, arguments);
    },

    // Get the value of an attribute.
    get: function(attr) {
      return this.attributes[attr];
    },

    // Get the HTML-escaped value of an attribute.
    escape: function(attr) {
      return _.escape(this.get(attr));
    },

    // Returns `true` if the attribute contains a value that is not null
    // or undefined.
    has: function(attr) {
      return this.get(attr) != null;
    },

    // Special-cased proxy to underscore's `_.matches` method.
    matches: function(attrs) {
      return !!_.iteratee(attrs, this)(this.attributes);
    },

    // Set a hash of model attributes on the object, firing `"change"`. This is
    // the core primitive operation of a model, updating the data and notifying
    // anyone who needs to know about the change in state. The heart of the beast.
    set: function(key, val, options) {
      if (key == null) return this;

      // Handle both `"key", value` and `{key: value}` -style arguments.
      var attrs;
      if (typeof key === 'object') {
        attrs = key;
        options = val;
      } else {
        (attrs = {})[key] = val;
      }

      options || (options = {});

      // Run validation.
      if (!this._validate(attrs, options)) return false;

      // Extract attributes and options.
      var unset      = options.unset;
      var silent     = options.silent;
      var changes    = [];
      var changing   = this._changing;
      this._changing = true;

      if (!changing) {
        this._previousAttributes = _.clone(this.attributes);
        this.changed = {};
      }

      var current = this.attributes;
      var changed = this.changed;
      var prev    = this._previousAttributes;

      // For each `set` attribute, update or delete the current value.
      for (var attr in attrs) {
        val = attrs[attr];
        if (!_.isEqual(current[attr], val)) changes.push(attr);
        if (!_.isEqual(prev[attr], val)) {
          changed[attr] = val;
        } else {
          delete changed[attr];
        }
        unset ? delete current[attr] : current[attr] = val;
      }

      // Update the `id`.
      this.id = this.get(this.idAttribute);

      // Trigger all relevant attribute changes.
      if (!silent) {
        if (changes.length) this._pending = options;
        for (var i = 0; i < changes.length; i++) {
          this.trigger('change:' + changes[i], this, current[changes[i]], options);
        }
      }

      // You might be wondering why there's a `while` loop here. Changes can
      // be recursively nested within `"change"` events.
      if (changing) return this;
      if (!silent) {
        while (this._pending) {
          options = this._pending;
          this._pending = false;
          this.trigger('change', this, options);
        }
      }
      this._pending = false;
      this._changing = false;
      return this;
    },

    // Remove an attribute from the model, firing `"change"`. `unset` is a noop
    // if the attribute doesn't exist.
    unset: function(attr, options) {
      return this.set(attr, void 0, _.extend({}, options, {unset: true}));
    },

    // Clear all attributes on the model, firing `"change"`.
    clear: function(options) {
      var attrs = {};
      for (var key in this.attributes) attrs[key] = void 0;
      return this.set(attrs, _.extend({}, options, {unset: true}));
    },

    // Determine if the model has changed since the last `"change"` event.
    // If you specify an attribute name, determine if that attribute has changed.
    hasChanged: function(attr) {
      if (attr == null) return !_.isEmpty(this.changed);
      return _.has(this.changed, attr);
    },

    // Return an object containing all the attributes that have changed, or
    // false if there are no changed attributes. Useful for determining what
    // parts of a view need to be updated and/or what attributes need to be
    // persisted to the server. Unset attributes will be set to undefined.
    // You can also pass an attributes object to diff against the model,
    // determining if there *would be* a change.
    changedAttributes: function(diff) {
      if (!diff) return this.hasChanged() ? _.clone(this.changed) : false;
      var old = this._changing ? this._previousAttributes : this.attributes;
      var changed = {};
      for (var attr in diff) {
        var val = diff[attr];
        if (_.isEqual(old[attr], val)) continue;
        changed[attr] = val;
      }
      return _.size(changed) ? changed : false;
    },

    // Get the previous value of an attribute, recorded at the time the last
    // `"change"` event was fired.
    previous: function(attr) {
      if (attr == null || !this._previousAttributes) return null;
      return this._previousAttributes[attr];
    },

    // Get all of the attributes of the model at the time of the previous
    // `"change"` event.
    previousAttributes: function() {
      return _.clone(this._previousAttributes);
    },

    // Fetch the model from the server, merging the response with the model's
    // local attributes. Any changed attributes will trigger a "change" event.
    fetch: function(options) {
      options = _.extend({parse: true}, options);
      var model = this;
      var success = options.success;
      options.success = function(resp) {
        var serverAttrs = options.parse ? model.parse(resp, options) : resp;
        if (!model.set(serverAttrs, options)) return false;
        if (success) success.call(options.context, model, resp, options);
        model.trigger('sync', model, resp, options);
      };
      wrapError(this, options);
      return this.sync('read', this, options);
    },

    // Set a hash of model attributes, and sync the model to the server.
    // If the server returns an attributes hash that differs, the model's
    // state will be `set` again.
    save: function(key, val, options) {
      // Handle both `"key", value` and `{key: value}` -style arguments.
      var attrs;
      if (key == null || typeof key === 'object') {
        attrs = key;
        options = val;
      } else {
        (attrs = {})[key] = val;
      }

      options = _.extend({validate: true, parse: true}, options);
      var wait = options.wait;

      // If we're not waiting and attributes exist, save acts as
      // `set(attr).save(null, opts)` with validation. Otherwise, check if
      // the model will be valid when the attributes, if any, are set.
      if (attrs && !wait) {
        if (!this.set(attrs, options)) return false;
      } else {
        if (!this._validate(attrs, options)) return false;
      }

      // After a successful server-side save, the client is (optionally)
      // updated with the server-side state.
      var model = this;
      var success = options.success;
      var attributes = this.attributes;
      options.success = function(resp) {
        // Ensure attributes are restored during synchronous saves.
        model.attributes = attributes;
        var serverAttrs = options.parse ? model.parse(resp, options) : resp;
        if (wait) serverAttrs = _.extend({}, attrs, serverAttrs);
        if (serverAttrs && !model.set(serverAttrs, options)) return false;
        if (success) success.call(options.context, model, resp, options);
        model.trigger('sync', model, resp, options);
      };
      wrapError(this, options);

      // Set temporary attributes if `{wait: true}` to properly find new ids.
      if (attrs && wait) this.attributes = _.extend({}, attributes, attrs);

      var method = this.isNew() ? 'create' : (options.patch ? 'patch' : 'update');
      if (method === 'patch' && !options.attrs) options.attrs = attrs;
      var xhr = this.sync(method, this, options);

      // Restore attributes.
      this.attributes = attributes;

      return xhr;
    },

    // Destroy this model on the server if it was already persisted.
    // Optimistically removes the model from its collection, if it has one.
    // If `wait: true` is passed, waits for the server to respond before removal.
    destroy: function(options) {
      options = options ? _.clone(options) : {};
      var model = this;
      var success = options.success;
      var wait = options.wait;

      var destroy = function() {
        model.stopListening();
        model.trigger('destroy', model, model.collection, options);
      };

      options.success = function(resp) {
        if (wait) destroy();
        if (success) success.call(options.context, model, resp, options);
        if (!model.isNew()) model.trigger('sync', model, resp, options);
      };

      var xhr = false;
      if (this.isNew()) {
        _.defer(options.success);
      } else {
        wrapError(this, options);
        xhr = this.sync('delete', this, options);
      }
      if (!wait) destroy();
      return xhr;
    },

    // Default URL for the model's representation on the server -- if you're
    // using Backbone's restful methods, override this to change the endpoint
    // that will be called.
    url: function() {
      var base =
        _.result(this, 'urlRoot') ||
        _.result(this.collection, 'url') ||
        urlError();
      if (this.isNew()) return base;
      var id = this.get(this.idAttribute);
      return base.replace(/[^\/]$/, '$&/') + encodeURIComponent(id);
    },

    // **parse** converts a response into the hash of attributes to be `set` on
    // the model. The default implementation is just to pass the response along.
    parse: function(resp, options) {
      return resp;
    },

    // Create a new model with identical attributes to this one.
    clone: function() {
      return new this.constructor(this.attributes);
    },

    // A model is new if it has never been saved to the server, and lacks an id.
    isNew: function() {
      return !this.has(this.idAttribute);
    },

    // Check if the model is currently in a valid state.
    isValid: function(options) {
      return this._validate({}, _.defaults({validate: true}, options));
    },

    // Run validation against the next complete set of model attributes,
    // returning `true` if all is well. Otherwise, fire an `"invalid"` event.
    _validate: function(attrs, options) {
      if (!options.validate || !this.validate) return true;
      attrs = _.extend({}, this.attributes, attrs);
      var error = this.validationError = this.validate(attrs, options) || null;
      if (!error) return true;
      this.trigger('invalid', this, error, _.extend(options, {validationError: error}));
      return false;
    }

  });

  // Underscore methods that we want to implement on the Model, mapped to the
  // number of arguments they take.
  var modelMethods = { keys: 1, values: 1, pairs: 1, invert: 1, pick: 0,
      omit: 0, chain: 1, isEmpty: 1 };

  // Mix in each Underscore method as a proxy to `Model#attributes`.
  addUnderscoreMethods(Model, modelMethods, 'attributes');

  // Backbone.Collection
  // -------------------

  // If models tend to represent a single row of data, a Backbone Collection is
  // more analogous to a table full of data ... or a small slice or page of that
  // table, or a collection of rows that belong together for a particular reason
  // -- all of the messages in this particular folder, all of the documents
  // belonging to this particular author, and so on. Collections maintain
  // indexes of their models, both in order, and for lookup by `id`.

  // Create a new **Collection**, perhaps to contain a specific type of `model`.
  // If a `comparator` is specified, the Collection will maintain
  // its models in sort order, as they're added and removed.
  var Collection = Backbone.Collection = function(models, options) {
    options || (options = {});
    if (options.model) this.model = options.model;
    if (options.comparator !== void 0) this.comparator = options.comparator;
    this._reset();
    this.initialize.apply(this, arguments);
    if (models) this.reset(models, _.extend({silent: true}, options));
  };

  // Default options for `Collection#set`.
  var setOptions = {add: true, remove: true, merge: true};
  var addOptions = {add: true, remove: false};

  // Splices `insert` into `array` at index `at`.
  var splice = function(array, insert, at) {
    at = Math.min(Math.max(at, 0), array.length);
    var tail = Array(array.length - at);
    var length = insert.length;
    for (var i = 0; i < tail.length; i++) tail[i] = array[i + at];
    for (i = 0; i < length; i++) array[i + at] = insert[i];
    for (i = 0; i < tail.length; i++) array[i + length + at] = tail[i];
  };

  // Define the Collection's inheritable methods.
  _.extend(Collection.prototype, Events, {

    // The default model for a collection is just a **Backbone.Model**.
    // This should be overridden in most cases.
    model: Model,

    // Initialize is an empty function by default. Override it with your own
    // initialization logic.
    initialize: function(){},

    // The JSON representation of a Collection is an array of the
    // models' attributes.
    toJSON: function(options) {
      return this.map(function(model) { return model.toJSON(options); });
    },

    // Proxy `Backbone.sync` by default.
    sync: function() {
      return Backbone.sync.apply(this, arguments);
    },

    // Add a model, or list of models to the set. `models` may be Backbone
    // Models or raw JavaScript objects to be converted to Models, or any
    // combination of the two.
    add: function(models, options) {
      return this.set(models, _.extend({merge: false}, options, addOptions));
    },

    // Remove a model, or a list of models from the set.
    remove: function(models, options) {
      options = _.extend({}, options);
      var singular = !_.isArray(models);
      models = singular ? [models] : _.clone(models);
      var removed = this._removeModels(models, options);
      if (!options.silent && removed) this.trigger('update', this, options);
      return singular ? removed[0] : removed;
    },

    // Update a collection by `set`-ing a new list of models, adding new ones,
    // removing models that are no longer present, and merging models that
    // already exist in the collection, as necessary. Similar to **Model#set**,
    // the core operation for updating the data contained by the collection.
    set: function(models, options) {
      if (models == null) return;

      options = _.defaults({}, options, setOptions);
      if (options.parse && !this._isModel(models)) models = this.parse(models, options);

      var singular = !_.isArray(models);
      models = singular ? [models] : models.slice();

      var at = options.at;
      if (at != null) at = +at;
      if (at < 0) at += this.length + 1;

      var set = [];
      var toAdd = [];
      var toRemove = [];
      var modelMap = {};

      var add = options.add;
      var merge = options.merge;
      var remove = options.remove;

      var sort = false;
      var sortable = this.comparator && (at == null) && options.sort !== false;
      var sortAttr = _.isString(this.comparator) ? this.comparator : null;

      // Turn bare objects into model references, and prevent invalid models
      // from being added.
      var model;
      for (var i = 0; i < models.length; i++) {
        model = models[i];

        // If a duplicate is found, prevent it from being added and
        // optionally merge it into the existing model.
        var existing = this.get(model);
        if (existing) {
          if (merge && model !== existing) {
            var attrs = this._isModel(model) ? model.attributes : model;
            if (options.parse) attrs = existing.parse(attrs, options);
            existing.set(attrs, options);
            if (sortable && !sort) sort = existing.hasChanged(sortAttr);
          }
          if (!modelMap[existing.cid]) {
            modelMap[existing.cid] = true;
            set.push(existing);
          }
          models[i] = existing;

        // If this is a new, valid model, push it to the `toAdd` list.
        } else if (add) {
          model = models[i] = this._prepareModel(model, options);
          if (model) {
            toAdd.push(model);
            this._addReference(model, options);
            modelMap[model.cid] = true;
            set.push(model);
          }
        }
      }

      // Remove stale models.
      if (remove) {
        for (i = 0; i < this.length; i++) {
          model = this.models[i];
          if (!modelMap[model.cid]) toRemove.push(model);
        }
        if (toRemove.length) this._removeModels(toRemove, options);
      }

      // See if sorting is needed, update `length` and splice in new models.
      var orderChanged = false;
      var replace = !sortable && add && remove;
      if (set.length && replace) {
        orderChanged = this.length != set.length || _.some(this.models, function(model, index) {
          return model !== set[index];
        });
        this.models.length = 0;
        splice(this.models, set, 0);
        this.length = this.models.length;
      } else if (toAdd.length) {
        if (sortable) sort = true;
        splice(this.models, toAdd, at == null ? this.length : at);
        this.length = this.models.length;
      }

      // Silently sort the collection if appropriate.
      if (sort) this.sort({silent: true});

      // Unless silenced, it's time to fire all appropriate add/sort events.
      if (!options.silent) {
        for (i = 0; i < toAdd.length; i++) {
          if (at != null) options.index = at + i;
          model = toAdd[i];
          model.trigger('add', model, this, options);
        }
        if (sort || orderChanged) this.trigger('sort', this, options);
        if (toAdd.length || toRemove.length) this.trigger('update', this, options);
      }

      // Return the added (or merged) model (or models).
      return singular ? models[0] : models;
    },

    // When you have more items than you want to add or remove individually,
    // you can reset the entire set with a new list of models, without firing
    // any granular `add` or `remove` events. Fires `reset` when finished.
    // Useful for bulk operations and optimizations.
    reset: function(models, options) {
      options = options ? _.clone(options) : {};
      for (var i = 0; i < this.models.length; i++) {
        this._removeReference(this.models[i], options);
      }
      options.previousModels = this.models;
      this._reset();
      models = this.add(models, _.extend({silent: true}, options));
      if (!options.silent) this.trigger('reset', this, options);
      return models;
    },

    // Add a model to the end of the collection.
    push: function(model, options) {
      return this.add(model, _.extend({at: this.length}, options));
    },

    // Remove a model from the end of the collection.
    pop: function(options) {
      var model = this.at(this.length - 1);
      return this.remove(model, options);
    },

    // Add a model to the beginning of the collection.
    unshift: function(model, options) {
      return this.add(model, _.extend({at: 0}, options));
    },

    // Remove a model from the beginning of the collection.
    shift: function(options) {
      var model = this.at(0);
      return this.remove(model, options);
    },

    // Slice out a sub-array of models from the collection.
    slice: function() {
      return slice.apply(this.models, arguments);
    },

    // Get a model from the set by id.
    get: function(obj) {
      if (obj == null) return void 0;
      var id = this.modelId(this._isModel(obj) ? obj.attributes : obj);
      return this._byId[obj] || this._byId[id] || this._byId[obj.cid];
    },

    // Get the model at the given index.
    at: function(index) {
      if (index < 0) index += this.length;
      return this.models[index];
    },

    // Return models with matching attributes. Useful for simple cases of
    // `filter`.
    where: function(attrs, first) {
      return this[first ? 'find' : 'filter'](attrs);
    },

    // Return the first model with matching attributes. Useful for simple cases
    // of `find`.
    findWhere: function(attrs) {
      return this.where(attrs, true);
    },

    // Force the collection to re-sort itself. You don't need to call this under
    // normal circumstances, as the set will maintain sort order as each item
    // is added.
    sort: function(options) {
      var comparator = this.comparator;
      if (!comparator) throw new Error('Cannot sort a set without a comparator');
      options || (options = {});

      var length = comparator.length;
      if (_.isFunction(comparator)) comparator = _.bind(comparator, this);

      // Run sort based on type of `comparator`.
      if (length === 1 || _.isString(comparator)) {
        this.models = this.sortBy(comparator);
      } else {
        this.models.sort(comparator);
      }
      if (!options.silent) this.trigger('sort', this, options);
      return this;
    },

    // Pluck an attribute from each model in the collection.
    pluck: function(attr) {
      return _.invoke(this.models, 'get', attr);
    },

    // Fetch the default set of models for this collection, resetting the
    // collection when they arrive. If `reset: true` is passed, the response
    // data will be passed through the `reset` method instead of `set`.
    fetch: function(options) {
      options = _.extend({parse: true}, options);
      var success = options.success;
      var collection = this;
      options.success = function(resp) {
        var method = options.reset ? 'reset' : 'set';
        collection[method](resp, options);
        if (success) success.call(options.context, collection, resp, options);
        collection.trigger('sync', collection, resp, options);
      };
      wrapError(this, options);
      return this.sync('read', this, options);
    },

    // Create a new instance of a model in this collection. Add the model to the
    // collection immediately, unless `wait: true` is passed, in which case we
    // wait for the server to agree.
    create: function(model, options) {
      options = options ? _.clone(options) : {};
      var wait = options.wait;
      model = this._prepareModel(model, options);
      if (!model) return false;
      if (!wait) this.add(model, options);
      var collection = this;
      var success = options.success;
      options.success = function(model, resp, callbackOpts) {
        if (wait) collection.add(model, callbackOpts);
        if (success) success.call(callbackOpts.context, model, resp, callbackOpts);
      };
      model.save(null, options);
      return model;
    },

    // **parse** converts a response into a list of models to be added to the
    // collection. The default implementation is just to pass it through.
    parse: function(resp, options) {
      return resp;
    },

    // Create a new collection with an identical list of models as this one.
    clone: function() {
      return new this.constructor(this.models, {
        model: this.model,
        comparator: this.comparator
      });
    },

    // Define how to uniquely identify models in the collection.
    modelId: function (attrs) {
      return attrs[this.model.prototype.idAttribute || 'id'];
    },

    // Private method to reset all internal state. Called when the collection
    // is first initialized or reset.
    _reset: function() {
      this.length = 0;
      this.models = [];
      this._byId  = {};
    },

    // Prepare a hash of attributes (or other model) to be added to this
    // collection.
    _prepareModel: function(attrs, options) {
      if (this._isModel(attrs)) {
        if (!attrs.collection) attrs.collection = this;
        return attrs;
      }
      options = options ? _.clone(options) : {};
      options.collection = this;
      var model = new this.model(attrs, options);
      if (!model.validationError) return model;
      this.trigger('invalid', this, model.validationError, options);
      return false;
    },

    // Internal method called by both remove and set.
    _removeModels: function(models, options) {
      var removed = [];
      for (var i = 0; i < models.length; i++) {
        var model = this.get(models[i]);
        if (!model) continue;

        var index = this.indexOf(model);
        this.models.splice(index, 1);
        this.length--;

        if (!options.silent) {
          options.index = index;
          model.trigger('remove', model, this, options);
        }

        removed.push(model);
        this._removeReference(model, options);
      }
      return removed.length ? removed : false;
    },

    // Method for checking whether an object should be considered a model for
    // the purposes of adding to the collection.
    _isModel: function (model) {
      return model instanceof Model;
    },

    // Internal method to create a model's ties to a collection.
    _addReference: function(model, options) {
      this._byId[model.cid] = model;
      var id = this.modelId(model.attributes);
      if (id != null) this._byId[id] = model;
      model.on('all', this._onModelEvent, this);
    },

    // Internal method to sever a model's ties to a collection.
    _removeReference: function(model, options) {
      delete this._byId[model.cid];
      var id = this.modelId(model.attributes);
      if (id != null) delete this._byId[id];
      if (this === model.collection) delete model.collection;
      model.off('all', this._onModelEvent, this);
    },

    // Internal method called every time a model in the set fires an event.
    // Sets need to update their indexes when models change ids. All other
    // events simply proxy through. "add" and "remove" events that originate
    // in other collections are ignored.
    _onModelEvent: function(event, model, collection, options) {
      if ((event === 'add' || event === 'remove') && collection !== this) return;
      if (event === 'destroy') this.remove(model, options);
      if (event === 'change') {
        var prevId = this.modelId(model.previousAttributes());
        var id = this.modelId(model.attributes);
        if (prevId !== id) {
          if (prevId != null) delete this._byId[prevId];
          if (id != null) this._byId[id] = model;
        }
      }
      this.trigger.apply(this, arguments);
    }

  });

  // Underscore methods that we want to implement on the Collection.
  // 90% of the core usefulness of Backbone Collections is actually implemented
  // right here:
  var collectionMethods = { forEach: 3, each: 3, map: 3, collect: 3, reduce: 4,
      foldl: 4, inject: 4, reduceRight: 4, foldr: 4, find: 3, detect: 3, filter: 3,
      select: 3, reject: 3, every: 3, all: 3, some: 3, any: 3, include: 3, includes: 3,
      contains: 3, invoke: 0, max: 3, min: 3, toArray: 1, size: 1, first: 3,
      head: 3, take: 3, initial: 3, rest: 3, tail: 3, drop: 3, last: 3,
      without: 0, difference: 0, indexOf: 3, shuffle: 1, lastIndexOf: 3,
      isEmpty: 1, chain: 1, sample: 3, partition: 3, groupBy: 3, countBy: 3,
      sortBy: 3, indexBy: 3};

  // Mix in each Underscore method as a proxy to `Collection#models`.
  addUnderscoreMethods(Collection, collectionMethods, 'models');

  // Backbone.View
  // -------------

  // Backbone Views are almost more convention than they are actual code. A View
  // is simply a JavaScript object that represents a logical chunk of UI in the
  // DOM. This might be a single item, an entire list, a sidebar or panel, or
  // even the surrounding frame which wraps your whole app. Defining a chunk of
  // UI as a **View** allows you to define your DOM events declaratively, without
  // having to worry about render order ... and makes it easy for the view to
  // react to specific changes in the state of your models.

  // Creating a Backbone.View creates its initial element outside of the DOM,
  // if an existing element is not provided...
  var View = Backbone.View = function(options) {
    this.cid = _.uniqueId('view');
    _.extend(this, _.pick(options, viewOptions));
    this._ensureElement();
    this.initialize.apply(this, arguments);
  };

  // Cached regex to split keys for `delegate`.
  var delegateEventSplitter = /^(\S+)\s*(.*)$/;

  // List of view options to be set as properties.
  var viewOptions = ['model', 'collection', 'el', 'id', 'attributes', 'className', 'tagName', 'events'];

  // Set up all inheritable **Backbone.View** properties and methods.
  _.extend(View.prototype, Events, {

    // The default `tagName` of a View's element is `"div"`.
    tagName: 'div',

    // jQuery delegate for element lookup, scoped to DOM elements within the
    // current view. This should be preferred to global lookups where possible.
    $: function(selector) {
      return this.$el.find(selector);
    },

    // Initialize is an empty function by default. Override it with your own
    // initialization logic.
    initialize: function(){},

    // **render** is the core function that your view should override, in order
    // to populate its element (`this.el`), with the appropriate HTML. The
    // convention is for **render** to always return `this`.
    render: function() {
      return this;
    },

    // Remove this view by taking the element out of the DOM, and removing any
    // applicable Backbone.Events listeners.
    remove: function() {
      this._removeElement();
      this.stopListening();
      return this;
    },

    // Remove this view's element from the document and all event listeners
    // attached to it. Exposed for subclasses using an alternative DOM
    // manipulation API.
    _removeElement: function() {
      this.$el.remove();
    },

    // Change the view's element (`this.el` property) and re-delegate the
    // view's events on the new element.
    setElement: function(element) {
      this.undelegateEvents();
      this._setElement(element);
      this.delegateEvents();
      return this;
    },

    // Creates the `this.el` and `this.$el` references for this view using the
    // given `el`. `el` can be a CSS selector or an HTML string, a jQuery
    // context or an element. Subclasses can override this to utilize an
    // alternative DOM manipulation API and are only required to set the
    // `this.el` property.
    _setElement: function(el) {
      this.$el = el instanceof Backbone.$ ? el : Backbone.$(el);
      this.el = this.$el[0];
    },

    // Set callbacks, where `this.events` is a hash of
    //
    // *{"event selector": "callback"}*
    //
    //     {
    //       'mousedown .title':  'edit',
    //       'click .button':     'save',
    //       'click .open':       function(e) { ... }
    //     }
    //
    // pairs. Callbacks will be bound to the view, with `this` set properly.
    // Uses event delegation for efficiency.
    // Omitting the selector binds the event to `this.el`.
    delegateEvents: function(events) {
      events || (events = _.result(this, 'events'));
      if (!events) return this;
      this.undelegateEvents();
      for (var key in events) {
        var method = events[key];
        if (!_.isFunction(method)) method = this[method];
        if (!method) continue;
        var match = key.match(delegateEventSplitter);
        this.delegate(match[1], match[2], _.bind(method, this));
      }
      return this;
    },

    // Add a single event listener to the view's element (or a child element
    // using `selector`). This only works for delegate-able events: not `focus`,
    // `blur`, and not `change`, `submit`, and `reset` in Internet Explorer.
    delegate: function(eventName, selector, listener) {
      this.$el.on(eventName + '.delegateEvents' + this.cid, selector, listener);
      return this;
    },

    // Clears all callbacks previously bound to the view by `delegateEvents`.
    // You usually don't need to use this, but may wish to if you have multiple
    // Backbone views attached to the same DOM element.
    undelegateEvents: function() {
      if (this.$el) this.$el.off('.delegateEvents' + this.cid);
      return this;
    },

    // A finer-grained `undelegateEvents` for removing a single delegated event.
    // `selector` and `listener` are both optional.
    undelegate: function(eventName, selector, listener) {
      this.$el.off(eventName + '.delegateEvents' + this.cid, selector, listener);
      return this;
    },

    // Produces a DOM element to be assigned to your view. Exposed for
    // subclasses using an alternative DOM manipulation API.
    _createElement: function(tagName) {
      return document.createElement(tagName);
    },

    // Ensure that the View has a DOM element to render into.
    // If `this.el` is a string, pass it through `$()`, take the first
    // matching element, and re-assign it to `el`. Otherwise, create
    // an element from the `id`, `className` and `tagName` properties.
    _ensureElement: function() {
      if (!this.el) {
        var attrs = _.extend({}, _.result(this, 'attributes'));
        if (this.id) attrs.id = _.result(this, 'id');
        if (this.className) attrs['class'] = _.result(this, 'className');
        this.setElement(this._createElement(_.result(this, 'tagName')));
        this._setAttributes(attrs);
      } else {
        this.setElement(_.result(this, 'el'));
      }
    },

    // Set attributes from a hash on this view's element.  Exposed for
    // subclasses using an alternative DOM manipulation API.
    _setAttributes: function(attributes) {
      this.$el.attr(attributes);
    }

  });

  // Backbone.sync
  // -------------

  // Override this function to change the manner in which Backbone persists
  // models to the server. You will be passed the type of request, and the
  // model in question. By default, makes a RESTful Ajax request
  // to the model's `url()`. Some possible customizations could be:
  //
  // * Use `setTimeout` to batch rapid-fire updates into a single request.
  // * Send up the models as XML instead of JSON.
  // * Persist models via WebSockets instead of Ajax.
  //
  // Turn on `Backbone.emulateHTTP` in order to send `PUT` and `DELETE` requests
  // as `POST`, with a `_method` parameter containing the true HTTP method,
  // as well as all requests with the body as `application/x-www-form-urlencoded`
  // instead of `application/json` with the model in a param named `model`.
  // Useful when interfacing with server-side languages like **PHP** that make
  // it difficult to read the body of `PUT` requests.
  Backbone.sync = function(method, model, options) {
    var type = methodMap[method];

    // Default options, unless specified.
    _.defaults(options || (options = {}), {
      emulateHTTP: Backbone.emulateHTTP,
      emulateJSON: Backbone.emulateJSON
    });

    // Default JSON-request options.
    var params = {type: type, dataType: 'json'};

    // Ensure that we have a URL.
    if (!options.url) {
      params.url = _.result(model, 'url') || urlError();
    }

    // Ensure that we have the appropriate request data.
    if (options.data == null && model && (method === 'create' || method === 'update' || method === 'patch')) {
      params.contentType = 'application/json';
      params.data = JSON.stringify(options.attrs || model.toJSON(options));
    }

    // For older servers, emulate JSON by encoding the request into an HTML-form.
    if (options.emulateJSON) {
      params.contentType = 'application/x-www-form-urlencoded';
      params.data = params.data ? {model: params.data} : {};
    }

    // For older servers, emulate HTTP by mimicking the HTTP method with `_method`
    // And an `X-HTTP-Method-Override` header.
    if (options.emulateHTTP && (type === 'PUT' || type === 'DELETE' || type === 'PATCH')) {
      params.type = 'POST';
      if (options.emulateJSON) params.data._method = type;
      var beforeSend = options.beforeSend;
      options.beforeSend = function(xhr) {
        xhr.setRequestHeader('X-HTTP-Method-Override', type);
        if (beforeSend) return beforeSend.apply(this, arguments);
      };
    }

    // Don't process data on a non-GET request.
    if (params.type !== 'GET' && !options.emulateJSON) {
      params.processData = false;
    }

    // Pass along `textStatus` and `errorThrown` from jQuery.
    var error = options.error;
    options.error = function(xhr, textStatus, errorThrown) {
      options.textStatus = textStatus;
      options.errorThrown = errorThrown;
      if (error) error.call(options.context, xhr, textStatus, errorThrown);
    };

    // Make the request, allowing the user to override any Ajax options.
    var xhr = options.xhr = Backbone.ajax(_.extend(params, options));
    model.trigger('request', model, xhr, options);
    return xhr;
  };

  // Map from CRUD to HTTP for our default `Backbone.sync` implementation.
  var methodMap = {
    'create': 'POST',
    'update': 'PUT',
    'patch':  'PATCH',
    'delete': 'DELETE',
    'read':   'GET'
  };

  // Set the default implementation of `Backbone.ajax` to proxy through to `$`.
  // Override this if you'd like to use a different library.
  Backbone.ajax = function() {
    return Backbone.$.ajax.apply(Backbone.$, arguments);
  };

  // Backbone.Router
  // ---------------

  // Routers map faux-URLs to actions, and fire events when routes are
  // matched. Creating a new one sets its `routes` hash, if not set statically.
  var Router = Backbone.Router = function(options) {
    options || (options = {});
    if (options.routes) this.routes = options.routes;
    this._bindRoutes();
    this.initialize.apply(this, arguments);
  };

  // Cached regular expressions for matching named param parts and splatted
  // parts of route strings.
  var optionalParam = /\((.*?)\)/g;
  var namedParam    = /(\(\?)?:\w+/g;
  var splatParam    = /\*\w+/g;
  var escapeRegExp  = /[\-{}\[\]+?.,\\\^$|#\s]/g;

  // Set up all inheritable **Backbone.Router** properties and methods.
  _.extend(Router.prototype, Events, {

    // Initialize is an empty function by default. Override it with your own
    // initialization logic.
    initialize: function(){},

    // Manually bind a single named route to a callback. For example:
    //
    //     this.route('search/:query/p:num', 'search', function(query, num) {
    //       ...
    //     });
    //
    route: function(route, name, callback) {
      if (!_.isRegExp(route)) route = this._routeToRegExp(route);
      if (_.isFunction(name)) {
        callback = name;
        name = '';
      }
      if (!callback) callback = this[name];
      var router = this;
      Backbone.history.route(route, function(fragment) {
        var args = router._extractParameters(route, fragment);
        if (router.execute(callback, args, name) !== false) {
          router.trigger.apply(router, ['route:' + name].concat(args));
          router.trigger('route', name, args);
          Backbone.history.trigger('route', router, name, args);
        }
      });
      return this;
    },

    // Execute a route handler with the provided parameters.  This is an
    // excellent place to do pre-route setup or post-route cleanup.
    execute: function(callback, args, name) {
      if (callback) callback.apply(this, args);
    },

    // Simple proxy to `Backbone.history` to save a fragment into the history.
    navigate: function(fragment, options) {
      Backbone.history.navigate(fragment, options);
      return this;
    },

    // Bind all defined routes to `Backbone.history`. We have to reverse the
    // order of the routes here to support behavior where the most general
    // routes can be defined at the bottom of the route map.
    _bindRoutes: function() {
      if (!this.routes) return;
      this.routes = _.result(this, 'routes');
      var route, routes = _.keys(this.routes);
      while ((route = routes.pop()) != null) {
        this.route(route, this.routes[route]);
      }
    },

    // Convert a route string into a regular expression, suitable for matching
    // against the current location hash.
    _routeToRegExp: function(route) {
      route = route.replace(escapeRegExp, '\\$&')
                   .replace(optionalParam, '(?:$1)?')
                   .replace(namedParam, function(match, optional) {
                     return optional ? match : '([^/?]+)';
                   })
                   .replace(splatParam, '([^?]*?)');
      return new RegExp('^' + route + '(?:\\?([\\s\\S]*))?$');
    },

    // Given a route, and a URL fragment that it matches, return the array of
    // extracted decoded parameters. Empty or unmatched parameters will be
    // treated as `null` to normalize cross-browser behavior.
    _extractParameters: function(route, fragment) {
      var params = route.exec(fragment).slice(1);
      return _.map(params, function(param, i) {
        // Don't decode the search params.
        if (i === params.length - 1) return param || null;
        return param ? decodeURIComponent(param) : null;
      });
    }

  });

  // Backbone.History
  // ----------------

  // Handles cross-browser history management, based on either
  // [pushState](http://diveintohtml5.info/history.html) and real URLs, or
  // [onhashchange](https://developer.mozilla.org/en-US/docs/DOM/window.onhashchange)
  // and URL fragments. If the browser supports neither (old IE, natch),
  // falls back to polling.
  var History = Backbone.History = function() {
    this.handlers = [];
    this.checkUrl = _.bind(this.checkUrl, this);

    // Ensure that `History` can be used outside of the browser.
    if (typeof window !== 'undefined') {
      this.location = window.location;
      this.history = window.history;
    }
  };

  // Cached regex for stripping a leading hash/slash and trailing space.
  var routeStripper = /^[#\/]|\s+$/g;

  // Cached regex for stripping leading and trailing slashes.
  var rootStripper = /^\/+|\/+$/g;

  // Cached regex for stripping urls of hash.
  var pathStripper = /#.*$/;

  // Has the history handling already been started?
  History.started = false;

  // Set up all inheritable **Backbone.History** properties and methods.
  _.extend(History.prototype, Events, {

    // The default interval to poll for hash changes, if necessary, is
    // twenty times a second.
    interval: 50,

    // Are we at the app root?
    atRoot: function() {
      var path = this.location.pathname.replace(/[^\/]$/, '$&/');
      return path === this.root && !this.getSearch();
    },

    // Does the pathname match the root?
    matchRoot: function() {
      var path = this.decodeFragment(this.location.pathname);
      var root = path.slice(0, this.root.length - 1) + '/';
      return root === this.root;
    },

    // Unicode characters in `location.pathname` are percent encoded so they're
    // decoded for comparison. `%25` should not be decoded since it may be part
    // of an encoded parameter.
    decodeFragment: function(fragment) {
      return decodeURI(fragment.replace(/%25/g, '%2525'));
    },

    // In IE6, the hash fragment and search params are incorrect if the
    // fragment contains `?`.
    getSearch: function() {
      var match = this.location.href.replace(/#.*/, '').match(/\?.+/);
      return match ? match[0] : '';
    },

    // Gets the true hash value. Cannot use location.hash directly due to bug
    // in Firefox where location.hash will always be decoded.
    getHash: function(window) {
      var match = (window || this).location.href.match(/#(.*)$/);
      return match ? match[1] : '';
    },

    // Get the pathname and search params, without the root.
    getPath: function() {
      var path = this.decodeFragment(
        this.location.pathname + this.getSearch()
      ).slice(this.root.length - 1);
      return path.charAt(0) === '/' ? path.slice(1) : path;
    },

    // Get the cross-browser normalized URL fragment from the path or hash.
    getFragment: function(fragment) {
      if (fragment == null) {
        if (this._usePushState || !this._wantsHashChange) {
          fragment = this.getPath();
        } else {
          fragment = this.getHash();
        }
      }
      return fragment.replace(routeStripper, '');
    },

    // Start the hash change handling, returning `true` if the current URL matches
    // an existing route, and `false` otherwise.
    start: function(options) {
      if (History.started) throw new Error('Backbone.history has already been started');
      History.started = true;

      // Figure out the initial configuration. Do we need an iframe?
      // Is pushState desired ... is it available?
      this.options          = _.extend({root: '/'}, this.options, options);
      this.root             = this.options.root;
      this._wantsHashChange = this.options.hashChange !== false;
      this._hasHashChange   = 'onhashchange' in window && (document.documentMode === void 0 || document.documentMode > 7);
      this._useHashChange   = this._wantsHashChange && this._hasHashChange;
      this._wantsPushState  = !!this.options.pushState;
      this._hasPushState    = !!(this.history && this.history.pushState);
      this._usePushState    = this._wantsPushState && this._hasPushState;
      this.fragment         = this.getFragment();

      // Normalize root to always include a leading and trailing slash.
      this.root = ('/' + this.root + '/').replace(rootStripper, '/');

      // Transition from hashChange to pushState or vice versa if both are
      // requested.
      if (this._wantsHashChange && this._wantsPushState) {

        // If we've started off with a route from a `pushState`-enabled
        // browser, but we're currently in a browser that doesn't support it...
        if (!this._hasPushState && !this.atRoot()) {
          var root = this.root.slice(0, -1) || '/';
          this.location.replace(root + '#' + this.getPath());
          // Return immediately as browser will do redirect to new url
          return true;

        // Or if we've started out with a hash-based route, but we're currently
        // in a browser where it could be `pushState`-based instead...
        } else if (this._hasPushState && this.atRoot()) {
          this.navigate(this.getHash(), {replace: true});
        }

      }

      // Proxy an iframe to handle location events if the browser doesn't
      // support the `hashchange` event, HTML5 history, or the user wants
      // `hashChange` but not `pushState`.
      if (!this._hasHashChange && this._wantsHashChange && !this._usePushState) {
        this.iframe = document.createElement('iframe');
        this.iframe.src = 'javascript:0';
        this.iframe.style.display = 'none';
        this.iframe.tabIndex = -1;
        var body = document.body;
        // Using `appendChild` will throw on IE < 9 if the document is not ready.
        var iWindow = body.insertBefore(this.iframe, body.firstChild).contentWindow;
        iWindow.document.open();
        iWindow.document.close();
        iWindow.location.hash = '#' + this.fragment;
      }

      // Add a cross-platform `addEventListener` shim for older browsers.
      var addEventListener = window.addEventListener || function (eventName, listener) {
        return attachEvent('on' + eventName, listener);
      };

      // Depending on whether we're using pushState or hashes, and whether
      // 'onhashchange' is supported, determine how we check the URL state.
      if (this._usePushState) {
        addEventListener('popstate', this.checkUrl, false);
      } else if (this._useHashChange && !this.iframe) {
        addEventListener('hashchange', this.checkUrl, false);
      } else if (this._wantsHashChange) {
        this._checkUrlInterval = setInterval(this.checkUrl, this.interval);
      }

      if (!this.options.silent) return this.loadUrl();
    },

    // Disable Backbone.history, perhaps temporarily. Not useful in a real app,
    // but possibly useful for unit testing Routers.
    stop: function() {
      // Add a cross-platform `removeEventListener` shim for older browsers.
      var removeEventListener = window.removeEventListener || function (eventName, listener) {
        return detachEvent('on' + eventName, listener);
      };

      // Remove window listeners.
      if (this._usePushState) {
        removeEventListener('popstate', this.checkUrl, false);
      } else if (this._useHashChange && !this.iframe) {
        removeEventListener('hashchange', this.checkUrl, false);
      }

      // Clean up the iframe if necessary.
      if (this.iframe) {
        document.body.removeChild(this.iframe);
        this.iframe = null;
      }

      // Some environments will throw when clearing an undefined interval.
      if (this._checkUrlInterval) clearInterval(this._checkUrlInterval);
      History.started = false;
    },

    // Add a route to be tested when the fragment changes. Routes added later
    // may override previous routes.
    route: function(route, callback) {
      this.handlers.unshift({route: route, callback: callback});
    },

    // Checks the current URL to see if it has changed, and if it has,
    // calls `loadUrl`, normalizing across the hidden iframe.
    checkUrl: function(e) {
      var current = this.getFragment();

      // If the user pressed the back button, the iframe's hash will have
      // changed and we should use that for comparison.
      if (current === this.fragment && this.iframe) {
        current = this.getHash(this.iframe.contentWindow);
      }

      if (current === this.fragment) return false;
      if (this.iframe) this.navigate(current);
      this.loadUrl();
    },

    // Attempt to load the current URL fragment. If a route succeeds with a
    // match, returns `true`. If no defined routes matches the fragment,
    // returns `false`.
    loadUrl: function(fragment) {
      // If the root doesn't match, no routes can match either.
      if (!this.matchRoot()) return false;
      fragment = this.fragment = this.getFragment(fragment);
      return _.some(this.handlers, function(handler) {
        if (handler.route.test(fragment)) {
          handler.callback(fragment);
          return true;
        }
      });
    },

    // Save a fragment into the hash history, or replace the URL state if the
    // 'replace' option is passed. You are responsible for properly URL-encoding
    // the fragment in advance.
    //
    // The options object can contain `trigger: true` if you wish to have the
    // route callback be fired (not usually desirable), or `replace: true`, if
    // you wish to modify the current URL without adding an entry to the history.
    navigate: function(fragment, options) {
      if (!History.started) return false;
      if (!options || options === true) options = {trigger: !!options};

      // Normalize the fragment.
      fragment = this.getFragment(fragment || '');

      // Don't include a trailing slash on the root.
      var root = this.root;
      if (fragment === '' || fragment.charAt(0) === '?') {
        root = root.slice(0, -1) || '/';
      }
      var url = root + fragment;

      // Strip the hash and decode for matching.
      fragment = this.decodeFragment(fragment.replace(pathStripper, ''));

      if (this.fragment === fragment) return;
      this.fragment = fragment;

      // If pushState is available, we use it to set the fragment as a real URL.
      if (this._usePushState) {
        this.history[options.replace ? 'replaceState' : 'pushState']({}, document.title, url);

      // If hash changes haven't been explicitly disabled, update the hash
      // fragment to store history.
      } else if (this._wantsHashChange) {
        this._updateHash(this.location, fragment, options.replace);
        if (this.iframe && (fragment !== this.getHash(this.iframe.contentWindow))) {
          var iWindow = this.iframe.contentWindow;

          // Opening and closing the iframe tricks IE7 and earlier to push a
          // history entry on hash-tag change.  When replace is true, we don't
          // want this.
          if (!options.replace) {
            iWindow.document.open();
            iWindow.document.close();
          }

          this._updateHash(iWindow.location, fragment, options.replace);
        }

      // If you've told us that you explicitly don't want fallback hashchange-
      // based history, then `navigate` becomes a page refresh.
      } else {
        return this.location.assign(url);
      }
      if (options.trigger) return this.loadUrl(fragment);
    },

    // Update the hash location, either replacing the current entry, or adding
    // a new one to the browser history.
    _updateHash: function(location, fragment, replace) {
      if (replace) {
        var href = location.href.replace(/(javascript:|#).*$/, '');
        location.replace(href + '#' + fragment);
      } else {
        // Some browsers require that `hash` contains a leading #.
        location.hash = '#' + fragment;
      }
    }

  });

  // Create the default Backbone.history.
  Backbone.history = new History;

  // Helpers
  // -------

  // Helper function to correctly set up the prototype chain for subclasses.
  // Similar to `goog.inherits`, but uses a hash of prototype properties and
  // class properties to be extended.
  var extend = function(protoProps, staticProps) {
    var parent = this;
    var child;

    // The constructor function for the new subclass is either defined by you
    // (the "constructor" property in your `extend` definition), or defaulted
    // by us to simply call the parent constructor.
    if (protoProps && _.has(protoProps, 'constructor')) {
      child = protoProps.constructor;
    } else {
      child = function(){ return parent.apply(this, arguments); };
    }

    // Add static properties to the constructor function, if supplied.
    _.extend(child, parent, staticProps);

    // Set the prototype chain to inherit from `parent`, without calling
    // `parent` constructor function.
    var Surrogate = function(){ this.constructor = child; };
    Surrogate.prototype = parent.prototype;
    child.prototype = new Surrogate;

    // Add prototype properties (instance properties) to the subclass,
    // if supplied.
    if (protoProps) _.extend(child.prototype, protoProps);

    // Set a convenience property in case the parent's prototype is needed
    // later.
    child.__super__ = parent.prototype;

    return child;
  };

  // Set up inheritance for the model, collection, router, view and history.
  Model.extend = Collection.extend = Router.extend = View.extend = History.extend = extend;

  // Throw an error when a URL is needed, and none is supplied.
  var urlError = function() {
    throw new Error('A "url" property or function must be specified');
  };

  // Wrap an optional error callback with a fallback error event.
  var wrapError = function(model, options) {
    var error = options.error;
    options.error = function(resp) {
      if (error) error.call(options.context, model, resp, options);
      model.trigger('error', model, resp, options);
    };
  };

  return Backbone;

}));

}).call(this,typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"jquery":188,"underscore":262}],154:[function(require,module,exports){
// d3.tip
// Copyright (c) 2013 Justin Palmer
//
// Tooltips for d3.js SVG visualizations

(function (root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module with d3 as a dependency.
    define(['d3'], factory)
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS
    module.exports = function(d3) {
      d3.tip = factory(d3)
      return d3.tip
    }
  } else {
    // Browser global.
    root.d3.tip = factory(root.d3)
  }
}(this, function (d3) {

  // Public - contructs a new tooltip
  //
  // Returns a tip
  return function() {
    var direction = d3_tip_direction,
        offset    = d3_tip_offset,
        html      = d3_tip_html,
        node      = initNode(),
        svg       = null,
        point     = null,
        target    = null

    function tip(vis) {
      svg = getSVGNode(vis)
      point = svg.createSVGPoint()
      document.body.appendChild(node)
    }

    // Public - show the tooltip on the screen
    //
    // Returns a tip
    tip.show = function() {
      var args = Array.prototype.slice.call(arguments)
      if(args[args.length - 1] instanceof SVGElement) target = args.pop()

      var content = html.apply(this, args),
          poffset = offset.apply(this, args),
          dir     = direction.apply(this, args),
          nodel   = d3.select(node),
          i       = directions.length,
          coords,
          scrollTop  = document.documentElement.scrollTop || document.body.scrollTop,
          scrollLeft = document.documentElement.scrollLeft || document.body.scrollLeft

      nodel.html(content)
        .style({ opacity: 1, 'pointer-events': 'all' })

      while(i--) nodel.classed(directions[i], false)
      coords = direction_callbacks.get(dir).apply(this)
      nodel.classed(dir, true).style({
        top: (coords.top +  poffset[0]) + scrollTop + 'px',
        left: (coords.left + poffset[1]) + scrollLeft + 'px'
      })

      return tip
    }

    // Public - hide the tooltip
    //
    // Returns a tip
    tip.hide = function() {
      var nodel = d3.select(node)
      nodel.style({ opacity: 0, 'pointer-events': 'none' })
      return tip
    }

    // Public: Proxy attr calls to the d3 tip container.  Sets or gets attribute value.
    //
    // n - name of the attribute
    // v - value of the attribute
    //
    // Returns tip or attribute value
    tip.attr = function(n, v) {
      if (arguments.length < 2 && typeof n === 'string') {
        return d3.select(node).attr(n)
      } else {
        var args =  Array.prototype.slice.call(arguments)
        d3.selection.prototype.attr.apply(d3.select(node), args)
      }

      return tip
    }

    // Public: Proxy style calls to the d3 tip container.  Sets or gets a style value.
    //
    // n - name of the property
    // v - value of the property
    //
    // Returns tip or style property value
    tip.style = function(n, v) {
      if (arguments.length < 2 && typeof n === 'string') {
        return d3.select(node).style(n)
      } else {
        var args =  Array.prototype.slice.call(arguments)
        d3.selection.prototype.style.apply(d3.select(node), args)
      }

      return tip
    }

    // Public: Set or get the direction of the tooltip
    //
    // v - One of n(north), s(south), e(east), or w(west), nw(northwest),
    //     sw(southwest), ne(northeast) or se(southeast)
    //
    // Returns tip or direction
    tip.direction = function(v) {
      if (!arguments.length) return direction
      direction = v == null ? v : d3.functor(v)

      return tip
    }

    // Public: Sets or gets the offset of the tip
    //
    // v - Array of [x, y] offset
    //
    // Returns offset or
    tip.offset = function(v) {
      if (!arguments.length) return offset
      offset = v == null ? v : d3.functor(v)

      return tip
    }

    // Public: sets or gets the html value of the tooltip
    //
    // v - String value of the tip
    //
    // Returns html value or tip
    tip.html = function(v) {
      if (!arguments.length) return html
      html = v == null ? v : d3.functor(v)

      return tip
    }

    function d3_tip_direction() { return 'n' }
    function d3_tip_offset() { return [0, 0] }
    function d3_tip_html() { return ' ' }

    var direction_callbacks = d3.map({
      n:  direction_n,
      s:  direction_s,
      e:  direction_e,
      w:  direction_w,
      nw: direction_nw,
      ne: direction_ne,
      sw: direction_sw,
      se: direction_se
    }),

    directions = direction_callbacks.keys()

    function direction_n() {
      var bbox = getScreenBBox()
      return {
        top:  bbox.n.y - node.offsetHeight,
        left: bbox.n.x - node.offsetWidth / 2
      }
    }

    function direction_s() {
      var bbox = getScreenBBox()
      return {
        top:  bbox.s.y,
        left: bbox.s.x - node.offsetWidth / 2
      }
    }

    function direction_e() {
      var bbox = getScreenBBox()
      return {
        top:  bbox.e.y - node.offsetHeight / 2,
        left: bbox.e.x
      }
    }

    function direction_w() {
      var bbox = getScreenBBox()
      return {
        top:  bbox.w.y - node.offsetHeight / 2,
        left: bbox.w.x - node.offsetWidth
      }
    }

    function direction_nw() {
      var bbox = getScreenBBox()
      return {
        top:  bbox.nw.y - node.offsetHeight,
        left: bbox.nw.x - node.offsetWidth
      }
    }

    function direction_ne() {
      var bbox = getScreenBBox()
      return {
        top:  bbox.ne.y - node.offsetHeight,
        left: bbox.ne.x
      }
    }

    function direction_sw() {
      var bbox = getScreenBBox()
      return {
        top:  bbox.sw.y,
        left: bbox.sw.x - node.offsetWidth
      }
    }

    function direction_se() {
      var bbox = getScreenBBox()
      return {
        top:  bbox.se.y,
        left: bbox.e.x
      }
    }

    function initNode() {
      var node = d3.select(document.createElement('div'))
      node.style({
        position: 'absolute',
        top: 0,
        opacity: 0,
        'pointer-events': 'none',
        'box-sizing': 'border-box'
      })

      return node.node()
    }

    function getSVGNode(el) {
      el = el.node()
      if(el.tagName.toLowerCase() === 'svg')
        return el

      return el.ownerSVGElement
    }

    // Private - gets the screen coordinates of a shape
    //
    // Given a shape on the screen, will return an SVGPoint for the directions
    // n(north), s(south), e(east), w(west), ne(northeast), se(southeast), nw(northwest),
    // sw(southwest).
    //
    //    +-+-+
    //    |   |
    //    +   +
    //    |   |
    //    +-+-+
    //
    // Returns an Object {n, s, e, w, nw, sw, ne, se}
    function getScreenBBox() {
      var targetel   = target || d3.event.target;

      while ('undefined' === typeof targetel.getScreenCTM && 'undefined' === targetel.parentNode) {
          targetel = targetel.parentNode;
      }

      var bbox       = {},
          matrix     = targetel.getScreenCTM(),
          tbbox      = targetel.getBBox(),
          width      = tbbox.width,
          height     = tbbox.height,
          x          = tbbox.x,
          y          = tbbox.y

      point.x = x
      point.y = y
      bbox.nw = point.matrixTransform(matrix)
      point.x += width
      bbox.ne = point.matrixTransform(matrix)
      point.y += height
      bbox.se = point.matrixTransform(matrix)
      point.x -= width
      bbox.sw = point.matrixTransform(matrix)
      point.y -= height / 2
      bbox.w  = point.matrixTransform(matrix)
      point.x += width
      bbox.e = point.matrixTransform(matrix)
      point.x -= width / 2
      point.y -= height / 2
      bbox.n = point.matrixTransform(matrix)
      point.y += height
      bbox.s = point.matrixTransform(matrix)

      return bbox
    }

    return tip
  };

}));

},{}],155:[function(require,module,exports){

},{}],156:[function(require,module,exports){
var BindBase,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

BindBase = (function(superClass) {
  extend(BindBase, superClass);

  function BindBase() {
    return BindBase.__super__.constructor.apply(this, arguments);
  }

  BindBase.prototype.updateAttrs = function(e) {
    e.stopPropagation();
    return this.view.model.set(Backbone.Syphon.serialize(this));
  };

  return BindBase;

})(Marionette.Behavior);

module.exports = BindBase;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL2Fla3Njby9naXRodWIvbWFnZWxsYW4vbm9kZV9tb2R1bGVzL2huX2JlaGF2aW9ycy9saWIvYmluZEJhc2UuY29mZmVlIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiL1VzZXJzL2Fla3Njby9naXRodWIvbWFnZWxsYW4vbm9kZV9tb2R1bGVzL2huX2JlaGF2aW9ycy9saWIvYmluZEJhc2UuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLElBQUEsUUFBQTtFQUFBOzs7QUFBTTs7Ozs7OztxQkFFSixXQUFBLEdBQWEsU0FBQyxDQUFEO0lBQ1gsQ0FBQyxDQUFDLGVBQUYsQ0FBQTtXQUNBLElBQUMsQ0FBQSxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQVosQ0FBZ0IsUUFBUSxDQUFDLE1BQU0sQ0FBQyxTQUFoQixDQUEwQixJQUExQixDQUFoQjtFQUZXOzs7O0dBRlEsVUFBVSxDQUFDOztBQVFsQyxNQUFNLENBQUMsT0FBUCxHQUFpQiJ9

},{}],157:[function(require,module,exports){
var BindInputs,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

BindInputs = (function(superClass) {
  extend(BindInputs, superClass);

  function BindInputs() {
    return BindInputs.__super__.constructor.apply(this, arguments);
  }

  BindInputs.prototype.events = {
    'input input': 'updateAttrs'
  };

  return BindInputs;

})(require('./bindBase'));

module.exports = BindInputs;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL2Fla3Njby9naXRodWIvbWFnZWxsYW4vbm9kZV9tb2R1bGVzL2huX2JlaGF2aW9ycy9saWIvYmluZElucHV0cy5jb2ZmZWUiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIvVXNlcnMvYWVrc2NvL2dpdGh1Yi9tYWdlbGxhbi9ub2RlX21vZHVsZXMvaG5fYmVoYXZpb3JzL2xpYi9iaW5kSW5wdXRzLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxJQUFBLFVBQUE7RUFBQTs7O0FBQU07Ozs7Ozs7dUJBRUosTUFBQSxHQUNFO0lBQUEsYUFBQSxFQUFnQixhQUFoQjs7Ozs7R0FIcUIsT0FBQSxDQUFRLFlBQVI7O0FBT3pCLE1BQU0sQ0FBQyxPQUFQLEdBQWlCIn0=

},{"./bindBase":156}],158:[function(require,module,exports){
var CopyToClipboard,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

CopyToClipboard = (function(superClass) {
  extend(CopyToClipboard, superClass);

  function CopyToClipboard() {
    this.destroyClipboard = bind(this.destroyClipboard, this);
    return CopyToClipboard.__super__.constructor.apply(this, arguments);
  }

  CopyToClipboard.prototype.ui = {
    copyToClipboard: '[data-click=clipboard]'
  };

  CopyToClipboard.prototype.events = {
    'click @ui.copyToClipboard': 'copyToClipboard'
  };

  CopyToClipboard.prototype.copyToClipboard = function(e) {
    var text;
    e.preventDefault();
    text = this.options.text;
    this.clipboard = new Clipboard('[data-click=clipboard]', {
      text: function() {
        return text;
      }
    });
    this.clipboard.on('success', (function(_this) {
      return function() {
        _this.destroyClipboard();
        return _this.view.triggerMethod('clipboard:success');
      };
    })(this));
    return this.clipboard.on('error', (function(_this) {
      return function() {
        _this.destroyClipboard();
        return _this.view.triggerMethod('clipboard:error');
      };
    })(this));
  };

  CopyToClipboard.prototype.destroyClipboard = function() {
    return this.clipboard.destroy();
  };

  return CopyToClipboard;

})(Marionette.Behavior);

module.exports = CopyToClipboard;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL2Fla3Njby9naXRodWIvbWFnZWxsYW4vbm9kZV9tb2R1bGVzL2huX2JlaGF2aW9ycy9saWIvY29weVRvQ2xpcGJvYXJkLmNvZmZlZSIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9hZWtzY28vZ2l0aHViL21hZ2VsbGFuL25vZGVfbW9kdWxlcy9obl9iZWhhdmlvcnMvbGliL2NvcHlUb0NsaXBib2FyZC5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsSUFBQSxlQUFBO0VBQUE7Ozs7QUFBTTs7Ozs7Ozs7NEJBRUosRUFBQSxHQUNFO0lBQUEsZUFBQSxFQUFpQix3QkFBakI7Ozs0QkFFRixNQUFBLEdBQ0U7SUFBQSwyQkFBQSxFQUE2QixpQkFBN0I7Ozs0QkFFRixlQUFBLEdBQWlCLFNBQUMsQ0FBRDtBQUNmLFFBQUE7SUFBQSxDQUFDLENBQUMsY0FBRixDQUFBO0lBR0EsSUFBQSxHQUFPLElBQUMsQ0FBQSxPQUFPLENBQUM7SUFDaEIsSUFBQyxDQUFBLFNBQUQsR0FBYSxJQUFJLFNBQUosQ0FBYyx3QkFBZCxFQUF3QztNQUFFLElBQUEsRUFBTSxTQUFBO2VBQUc7TUFBSCxDQUFSO0tBQXhDO0lBR2IsSUFBQyxDQUFBLFNBQVMsQ0FBQyxFQUFYLENBQWMsU0FBZCxFQUF5QixDQUFBLFNBQUEsS0FBQTthQUFBLFNBQUE7UUFDdkIsS0FBQyxDQUFBLGdCQUFELENBQUE7ZUFDQSxLQUFDLENBQUEsSUFBSSxDQUFDLGFBQU4sQ0FBb0IsbUJBQXBCO01BRnVCO0lBQUEsQ0FBQSxDQUFBLENBQUEsSUFBQSxDQUF6QjtXQUtBLElBQUMsQ0FBQSxTQUFTLENBQUMsRUFBWCxDQUFjLE9BQWQsRUFBdUIsQ0FBQSxTQUFBLEtBQUE7YUFBQSxTQUFBO1FBQ3JCLEtBQUMsQ0FBQSxnQkFBRCxDQUFBO2VBQ0EsS0FBQyxDQUFBLElBQUksQ0FBQyxhQUFOLENBQW9CLGlCQUFwQjtNQUZxQjtJQUFBLENBQUEsQ0FBQSxDQUFBLElBQUEsQ0FBdkI7RUFiZTs7NEJBa0JqQixnQkFBQSxHQUFrQixTQUFBO1dBQUcsSUFBQyxDQUFBLFNBQVMsQ0FBQyxPQUFYLENBQUE7RUFBSDs7OztHQTFCVSxVQUFVLENBQUM7O0FBOEJ6QyxNQUFNLENBQUMsT0FBUCxHQUFpQiJ9

},{}],159:[function(require,module,exports){
var FlashesBehavior, _sendFlash,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

_sendFlash = function(type, obj) {
  return Backbone.Radio.channel('flash').trigger(type, obj);
};

FlashesBehavior = (function(superClass) {
  extend(FlashesBehavior, superClass);

  function FlashesBehavior() {
    return FlashesBehavior.__super__.constructor.apply(this, arguments);
  }

  FlashesBehavior.prototype.initialize = function(options) {
    if (options == null) {
      options = {};
    }
    this.view._flashes = this.options;
    this.view.flashError = this.flashError;
    return this.view.flashSuccess = this.flashSuccess;
  };

  FlashesBehavior.prototype.flashError = function(obj) {
    if (obj == null) {
      obj = {};
    }
    return _sendFlash('error', this._flashes['error'] || obj);
  };

  FlashesBehavior.prototype.flashSuccess = function(obj) {
    if (obj == null) {
      obj = {};
    }
    return _sendFlash('success', this._flashes['success'] || obj);
  };

  return FlashesBehavior;

})(Marionette.Behavior);

module.exports = FlashesBehavior;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL2Fla3Njby9naXRodWIvbWFnZWxsYW4vbm9kZV9tb2R1bGVzL2huX2JlaGF2aW9ycy9saWIvZmxhc2hlcy5jb2ZmZWUiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIvVXNlcnMvYWVrc2NvL2dpdGh1Yi9tYWdlbGxhbi9ub2RlX21vZHVsZXMvaG5fYmVoYXZpb3JzL2xpYi9mbGFzaGVzLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxJQUFBLDJCQUFBO0VBQUE7OztBQUFBLFVBQUEsR0FBYSxTQUFDLElBQUQsRUFBTyxHQUFQO1NBQ1gsUUFBUSxDQUFDLEtBQUssQ0FBQyxPQUFmLENBQXVCLE9BQXZCLENBQStCLENBQUMsT0FBaEMsQ0FBd0MsSUFBeEMsRUFBOEMsR0FBOUM7QUFEVzs7QUFLUDs7Ozs7Ozs0QkFFSixVQUFBLEdBQVksU0FBQyxPQUFEOztNQUFDLFVBQVE7O0lBQ25CLElBQUMsQ0FBQSxJQUFJLENBQUMsUUFBTixHQUFzQixJQUFDLENBQUE7SUFDdkIsSUFBQyxDQUFBLElBQUksQ0FBQyxVQUFOLEdBQXNCLElBQUMsQ0FBQTtXQUN2QixJQUFDLENBQUEsSUFBSSxDQUFDLFlBQU4sR0FBc0IsSUFBQyxDQUFBO0VBSGI7OzRCQUtaLFVBQUEsR0FBWSxTQUFDLEdBQUQ7O01BQUMsTUFBSTs7V0FDZixVQUFBLENBQVcsT0FBWCxFQUFvQixJQUFDLENBQUEsUUFBUyxDQUFBLE9BQUEsQ0FBVixJQUFzQixHQUExQztFQURVOzs0QkFHWixZQUFBLEdBQWMsU0FBQyxHQUFEOztNQUFDLE1BQUk7O1dBQ2pCLFVBQUEsQ0FBVyxTQUFYLEVBQXNCLElBQUMsQ0FBQSxRQUFTLENBQUEsU0FBQSxDQUFWLElBQXdCLEdBQTlDO0VBRFk7Ozs7R0FWYyxVQUFVLENBQUM7O0FBZXpDLE1BQU0sQ0FBQyxPQUFQLEdBQWlCIn0=

},{}],160:[function(require,module,exports){
var FormSerializeBehavior,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

FormSerializeBehavior = (function(superClass) {
  extend(FormSerializeBehavior, superClass);

  function FormSerializeBehavior() {
    return FormSerializeBehavior.__super__.constructor.apply(this, arguments);
  }

  FormSerializeBehavior.prototype.initialize = function(options) {
    if (options == null) {
      options = {};
    }
    this.view.getFormData = (function(_this) {
      return function(options) {
        return _this.getFormData(options);
      };
    })(this);
    return this.view.setFormData = (function(_this) {
      return function(options) {
        return _this.setFormData(options);
      };
    })(this);
  };

  FormSerializeBehavior.prototype.getFormData = function(options) {
    var data, key, val;
    if (options == null) {
      options = {};
    }
    if (!options.excludeFalsey) {
      return Backbone.Syphon.serialize(this);
    }
    data = Backbone.Syphon.serialize(this);
    for (key in data) {
      val = data[key];
      if (!val) {
        delete data[key];
      }
    }
    return data;
  };

  FormSerializeBehavior.prototype.setFormData = function(options) {
    return Backbone.Syphon.deserialize(this, this.model.attributes);
  };

  return FormSerializeBehavior;

})(Marionette.Behavior);

module.exports = FormSerializeBehavior;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL2Fla3Njby9naXRodWIvbWFnZWxsYW4vbm9kZV9tb2R1bGVzL2huX2JlaGF2aW9ycy9saWIvZm9ybVNlcmlhbGl6ZS5jb2ZmZWUiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIvVXNlcnMvYWVrc2NvL2dpdGh1Yi9tYWdlbGxhbi9ub2RlX21vZHVsZXMvaG5fYmVoYXZpb3JzL2xpYi9mb3JtU2VyaWFsaXplLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxJQUFBLHFCQUFBO0VBQUE7OztBQUFNOzs7Ozs7O2tDQUVKLFVBQUEsR0FBWSxTQUFDLE9BQUQ7O01BQUMsVUFBUTs7SUFDbkIsSUFBQyxDQUFBLElBQUksQ0FBQyxXQUFOLEdBQW9CLENBQUEsU0FBQSxLQUFBO2FBQUEsU0FBQyxPQUFEO2VBQWEsS0FBQyxDQUFBLFdBQUQsQ0FBYSxPQUFiO01BQWI7SUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBO1dBQ3BCLElBQUMsQ0FBQSxJQUFJLENBQUMsV0FBTixHQUFvQixDQUFBLFNBQUEsS0FBQTthQUFBLFNBQUMsT0FBRDtlQUFhLEtBQUMsQ0FBQSxXQUFELENBQWEsT0FBYjtNQUFiO0lBQUEsQ0FBQSxDQUFBLENBQUEsSUFBQTtFQUZWOztrQ0FJWixXQUFBLEdBQWEsU0FBQyxPQUFEO0FBQ1gsUUFBQTs7TUFEWSxVQUFROztJQUNwQixJQUFBLENBQTJDLE9BQU8sQ0FBQyxhQUFuRDtBQUFBLGFBQU8sUUFBUSxDQUFDLE1BQU0sQ0FBQyxTQUFoQixDQUEwQixJQUExQixFQUFQOztJQUdBLElBQUEsR0FBTyxRQUFRLENBQUMsTUFBTSxDQUFDLFNBQWhCLENBQTBCLElBQTFCO0FBRVAsU0FBQSxXQUFBOztNQUNFLElBQW9CLENBQUksR0FBeEI7UUFBQSxPQUFPLElBQUssQ0FBQSxHQUFBLEVBQVo7O0FBREY7QUFHQSxXQUFPO0VBVEk7O2tDQVdiLFdBQUEsR0FBYSxTQUFDLE9BQUQ7V0FDWCxRQUFRLENBQUMsTUFBTSxDQUFDLFdBQWhCLENBQTZCLElBQTdCLEVBQWdDLElBQUMsQ0FBQSxLQUFLLENBQUMsVUFBdkM7RUFEVzs7OztHQWpCcUIsVUFBVSxDQUFDOztBQXNCL0MsTUFBTSxDQUFDLE9BQVAsR0FBaUIifQ==

},{}],161:[function(require,module,exports){
var ModelEventsBehavior,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

ModelEventsBehavior = (function(superClass) {
  extend(ModelEventsBehavior, superClass);

  function ModelEventsBehavior() {
    return ModelEventsBehavior.__super__.constructor.apply(this, arguments);
  }

  ModelEventsBehavior.prototype.modelEvents = {
    'request': 'onModelRequest',
    'sync': 'onModelSync',
    'error': 'onModelError'
  };

  ModelEventsBehavior.prototype.onModelRequest = function(model, status, options) {
    var base;
    return typeof (base = this.view).onRequest === "function" ? base.onRequest(model, status, options) : void 0;
  };

  ModelEventsBehavior.prototype.onModelSync = function(model, response, options) {
    var base;
    return typeof (base = this.view).onSync === "function" ? base.onSync(model, response, options) : void 0;
  };

  ModelEventsBehavior.prototype.onModelError = function(model, response, options) {
    var base;
    return typeof (base = this.view).onError === "function" ? base.onError(model, response, options) : void 0;
  };

  return ModelEventsBehavior;

})(Marionette.Behavior);

module.exports = ModelEventsBehavior;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL2Fla3Njby9naXRodWIvbWFnZWxsYW4vbm9kZV9tb2R1bGVzL2huX2JlaGF2aW9ycy9saWIvbW9kZWxFdmVudHMuY29mZmVlIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiL1VzZXJzL2Fla3Njby9naXRodWIvbWFnZWxsYW4vbm9kZV9tb2R1bGVzL2huX2JlaGF2aW9ycy9saWIvbW9kZWxFdmVudHMuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLElBQUEsbUJBQUE7RUFBQTs7O0FBQU07Ozs7Ozs7Z0NBRUosV0FBQSxHQUNFO0lBQUEsU0FBQSxFQUFZLGdCQUFaO0lBQ0EsTUFBQSxFQUFZLGFBRFo7SUFFQSxPQUFBLEVBQVksY0FGWjs7O2dDQUlGLGNBQUEsR0FBZ0IsU0FBQyxLQUFELEVBQVEsTUFBUixFQUFnQixPQUFoQjtBQUNkLFFBQUE7b0VBQUssQ0FBQyxVQUFXLE9BQU8sUUFBUTtFQURsQjs7Z0NBR2hCLFdBQUEsR0FBYSxTQUFDLEtBQUQsRUFBUSxRQUFSLEVBQWtCLE9BQWxCO0FBQ1gsUUFBQTtpRUFBSyxDQUFDLE9BQVEsT0FBTyxVQUFVO0VBRHBCOztnQ0FHYixZQUFBLEdBQWMsU0FBQyxLQUFELEVBQVEsUUFBUixFQUFrQixPQUFsQjtBQUNaLFFBQUE7a0VBQUssQ0FBQyxRQUFTLE9BQU8sVUFBVTtFQURwQjs7OztHQWJrQixVQUFVLENBQUM7O0FBa0I3QyxNQUFNLENBQUMsT0FBUCxHQUFpQiJ9

},{}],162:[function(require,module,exports){
var SubmitButtonBehavior,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

SubmitButtonBehavior = (function(superClass) {
  extend(SubmitButtonBehavior, superClass);

  function SubmitButtonBehavior() {
    return SubmitButtonBehavior.__super__.constructor.apply(this, arguments);
  }

  SubmitButtonBehavior.prototype.ui = {
    submit: '[data-click=submit]'
  };

  SubmitButtonBehavior.prototype.events = {
    'click @ui.submit:not(.disabled)': 'onSubmitClick'
  };

  SubmitButtonBehavior.prototype.initialize = function(options) {
    if (options == null) {
      options = {};
    }
    this.view.disableSubmit = (function(_this) {
      return function() {
        return _this.disableSubmit();
      };
    })(this);
    return this.view.enableSubmit = (function(_this) {
      return function() {
        return _this.enableSubmit();
      };
    })(this);
  };

  SubmitButtonBehavior.prototype.onSubmitClick = function(e) {
    var base;
    return typeof (base = this.view).onSubmit === "function" ? base.onSubmit(e) : void 0;
  };

  SubmitButtonBehavior.prototype.disableSubmit = function() {
    return this.ui.submit.addClass('disabled');
  };

  SubmitButtonBehavior.prototype.enableSubmit = function() {
    return this.ui.submit.removeClass('disabled');
  };

  return SubmitButtonBehavior;

})(Marionette.Behavior);

module.exports = SubmitButtonBehavior;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL2Fla3Njby9naXRodWIvbWFnZWxsYW4vbm9kZV9tb2R1bGVzL2huX2JlaGF2aW9ycy9saWIvc3VibWl0QnV0dG9uLmNvZmZlZSIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9hZWtzY28vZ2l0aHViL21hZ2VsbGFuL25vZGVfbW9kdWxlcy9obl9iZWhhdmlvcnMvbGliL3N1Ym1pdEJ1dHRvbi5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBS0EsSUFBQSxvQkFBQTtFQUFBOzs7QUFBTTs7Ozs7OztpQ0FFSixFQUFBLEdBQ0U7SUFBQSxNQUFBLEVBQVEscUJBQVI7OztpQ0FFRixNQUFBLEdBQ0U7SUFBQSxpQ0FBQSxFQUFtQyxlQUFuQzs7O2lDQUVGLFVBQUEsR0FBWSxTQUFDLE9BQUQ7O01BQUMsVUFBUTs7SUFDbkIsSUFBQyxDQUFBLElBQUksQ0FBQyxhQUFOLEdBQXNCLENBQUEsU0FBQSxLQUFBO2FBQUEsU0FBQTtlQUFHLEtBQUMsQ0FBQSxhQUFELENBQUE7TUFBSDtJQUFBLENBQUEsQ0FBQSxDQUFBLElBQUE7V0FDdEIsSUFBQyxDQUFBLElBQUksQ0FBQyxZQUFOLEdBQXNCLENBQUEsU0FBQSxLQUFBO2FBQUEsU0FBQTtlQUFHLEtBQUMsQ0FBQSxZQUFELENBQUE7TUFBSDtJQUFBLENBQUEsQ0FBQSxDQUFBLElBQUE7RUFGWjs7aUNBSVosYUFBQSxHQUFlLFNBQUMsQ0FBRDtBQUFPLFFBQUE7bUVBQUssQ0FBQyxTQUFVO0VBQXZCOztpQ0FDZixhQUFBLEdBQWUsU0FBQTtXQUFHLElBQUMsQ0FBQSxFQUFFLENBQUMsTUFBTSxDQUFDLFFBQVgsQ0FBb0IsVUFBcEI7RUFBSDs7aUNBQ2YsWUFBQSxHQUFjLFNBQUE7V0FBSSxJQUFDLENBQUEsRUFBRSxDQUFDLE1BQU0sQ0FBQyxXQUFYLENBQXVCLFVBQXZCO0VBQUo7Ozs7R0FkbUIsVUFBVSxDQUFDOztBQWtCOUMsTUFBTSxDQUFDLE9BQVAsR0FBaUIifQ==

},{}],163:[function(require,module,exports){
var TooltipBehavior,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

TooltipBehavior = (function(superClass) {
  extend(TooltipBehavior, superClass);

  function TooltipBehavior() {
    return TooltipBehavior.__super__.constructor.apply(this, arguments);
  }

  TooltipBehavior.prototype.ui = {
    tooltips: '[data-toggle=tooltip]'
  };

  TooltipBehavior.prototype.initialize = function() {
    return this.view.clearTooltips = (function(_this) {
      return function() {
        return _this.clear();
      };
    })(this);
  };

  TooltipBehavior.prototype.clear = function() {
    this.ui.tooltips.tooltip('hide');
    return this.ui.tooltips.tooltip('dispose');
  };

  TooltipBehavior.prototype.onRender = function() {
    var ref;
    return (ref = this.ui.tooltips) != null ? ref.tooltip() : void 0;
  };

  TooltipBehavior.prototype.onBeforeDestroy = function() {
    return this.clear();
  };

  return TooltipBehavior;

})(Marionette.Behavior);

module.exports = TooltipBehavior;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL2Fla3Njby9naXRodWIvbWFnZWxsYW4vbm9kZV9tb2R1bGVzL2huX2JlaGF2aW9ycy9saWIvdG9vbHRpcHMuY29mZmVlIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiL1VzZXJzL2Fla3Njby9naXRodWIvbWFnZWxsYW4vbm9kZV9tb2R1bGVzL2huX2JlaGF2aW9ycy9saWIvdG9vbHRpcHMuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLElBQUEsZUFBQTtFQUFBOzs7QUFBTTs7Ozs7Ozs0QkFFSixFQUFBLEdBQ0U7SUFBQSxRQUFBLEVBQVUsdUJBQVY7Ozs0QkFFRixVQUFBLEdBQVksU0FBQTtXQUVWLElBQUMsQ0FBQSxJQUFJLENBQUMsYUFBTixHQUFzQixDQUFBLFNBQUEsS0FBQTthQUFBLFNBQUE7ZUFBRyxLQUFDLENBQUEsS0FBRCxDQUFBO01BQUg7SUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBO0VBRlo7OzRCQUlaLEtBQUEsR0FBTyxTQUFBO0lBQ0wsSUFBQyxDQUFBLEVBQUUsQ0FBQyxRQUFRLENBQUMsT0FBYixDQUFxQixNQUFyQjtXQUNBLElBQUMsQ0FBQSxFQUFFLENBQUMsUUFBUSxDQUFDLE9BQWIsQ0FBcUIsU0FBckI7RUFGSzs7NEJBSVAsUUFBQSxHQUFVLFNBQUE7QUFBRyxRQUFBO2lEQUFZLENBQUUsT0FBZCxDQUFBO0VBQUg7OzRCQUNWLGVBQUEsR0FBaUIsU0FBQTtXQUFHLElBQUMsQ0FBQSxLQUFELENBQUE7RUFBSDs7OztHQWRXLFVBQVUsQ0FBQzs7QUFrQnpDLE1BQU0sQ0FBQyxPQUFQLEdBQWlCIn0=

},{}],164:[function(require,module,exports){
var BreadcrumbComponent, BreadcrumbList,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

BreadcrumbList = require('./views/breadcrumbList');

BreadcrumbComponent = (function(superClass) {
  extend(BreadcrumbComponent, superClass);

  function BreadcrumbComponent() {
    return BreadcrumbComponent.__super__.constructor.apply(this, arguments);
  }

  BreadcrumbComponent.prototype.initialize = function(options) {
    if (options == null) {
      options = {};
    }
    this.container = options.container;
    return this.collection = new Backbone.Collection();
  };

  BreadcrumbComponent.prototype.radioEvents = {
    'breadcrumb ready': 'onReady',
    'breadcrumb set': 'set'
  };

  BreadcrumbComponent.prototype.onReady = function() {
    this.set([
      {
        text: 'Loading...'
      }
    ]);
    return this.showView();
  };

  BreadcrumbComponent.prototype.set = function(models) {
    return this.collection.set(models);
  };

  BreadcrumbComponent.prototype.showView = function() {
    if (!this.shown) {
      this.container.show(new BreadcrumbList({
        collection: this.collection
      }));
      return this.shown = true;
    }
  };

  return BreadcrumbComponent;

})(Mn.Service);

module.exports = BreadcrumbComponent;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL2Fla3Njby9naXRodWIvbWFnZWxsYW4vbm9kZV9tb2R1bGVzL2huX2JyZWFkY3J1bWIvbGliL2NvbXBvbmVudC5jb2ZmZWUiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIvVXNlcnMvYWVrc2NvL2dpdGh1Yi9tYWdlbGxhbi9ub2RlX21vZHVsZXMvaG5fYnJlYWRjcnVtYi9saWIvY29tcG9uZW50LmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxJQUFBLG1DQUFBO0VBQUE7OztBQUFBLGNBQUEsR0FBaUIsT0FBQSxDQUFRLHdCQUFSOztBQUlYOzs7Ozs7O2dDQUVKLFVBQUEsR0FBWSxTQUFDLE9BQUQ7O01BQUMsVUFBVTs7SUFDckIsSUFBQyxDQUFBLFNBQUQsR0FBYyxPQUFPLENBQUM7V0FDdEIsSUFBQyxDQUFBLFVBQUQsR0FBYyxJQUFJLFFBQVEsQ0FBQyxVQUFiLENBQUE7RUFGSjs7Z0NBSVosV0FBQSxHQUNFO0lBQUEsa0JBQUEsRUFBb0IsU0FBcEI7SUFDQSxnQkFBQSxFQUFvQixLQURwQjs7O2dDQUdGLE9BQUEsR0FBUyxTQUFBO0lBQ1AsSUFBQyxDQUFBLEdBQUQsQ0FBSztNQUFDO1FBQUMsSUFBQSxFQUFNLFlBQVA7T0FBRDtLQUFMO1dBQ0EsSUFBQyxDQUFBLFFBQUQsQ0FBQTtFQUZPOztnQ0FJVCxHQUFBLEdBQUssU0FBQyxNQUFEO1dBQ0gsSUFBQyxDQUFBLFVBQVUsQ0FBQyxHQUFaLENBQWdCLE1BQWhCO0VBREc7O2dDQUdMLFFBQUEsR0FBVSxTQUFBO0lBQ1IsSUFBQSxDQUFPLElBQUMsQ0FBQSxLQUFSO01BQ0UsSUFBQyxDQUFBLFNBQVMsQ0FBQyxJQUFYLENBQWdCLElBQUksY0FBSixDQUFtQjtRQUFFLFVBQUEsRUFBWSxJQUFDLENBQUEsVUFBZjtPQUFuQixDQUFoQjthQUNBLElBQUMsQ0FBQSxLQUFELEdBQVMsS0FGWDs7RUFEUTs7OztHQWpCc0IsRUFBRSxDQUFDOztBQXdCckMsTUFBTSxDQUFDLE9BQVAsR0FBaUIifQ==

},{"./views/breadcrumbList":165}],165:[function(require,module,exports){
var BreadcrumbChild, BreadcrumbList,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

BreadcrumbChild = (function(superClass) {
  extend(BreadcrumbChild, superClass);

  function BreadcrumbChild() {
    return BreadcrumbChild.__super__.constructor.apply(this, arguments);
  }

  BreadcrumbChild.prototype.tagName = 'li';

  BreadcrumbChild.prototype.template = require('./templates/breadcrumb_child');

  BreadcrumbChild.prototype.className = function() {
    if (!this.model.get('href')) {
      return 'active';
    }
  };

  return BreadcrumbChild;

})(Mn.LayoutView);

BreadcrumbList = (function(superClass) {
  extend(BreadcrumbList, superClass);

  function BreadcrumbList() {
    return BreadcrumbList.__super__.constructor.apply(this, arguments);
  }

  BreadcrumbList.prototype.className = 'breadcrumb';

  BreadcrumbList.prototype.tagName = 'ol';

  BreadcrumbList.prototype.childView = BreadcrumbChild;

  BreadcrumbList.prototype.attributes = {
    role: 'navigation'
  };

  return BreadcrumbList;

})(Mn.CollectionView);

module.exports = BreadcrumbList;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL2Fla3Njby9naXRodWIvbWFnZWxsYW4vbm9kZV9tb2R1bGVzL2huX2JyZWFkY3J1bWIvbGliL3ZpZXdzL2JyZWFkY3J1bWJMaXN0LmNvZmZlZSIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9hZWtzY28vZ2l0aHViL21hZ2VsbGFuL25vZGVfbW9kdWxlcy9obl9icmVhZGNydW1iL2xpYi92aWV3cy9icmVhZGNydW1iTGlzdC5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsSUFBQSwrQkFBQTtFQUFBOzs7QUFBTTs7Ozs7Ozs0QkFDSixPQUFBLEdBQVM7OzRCQUNULFFBQUEsR0FBVSxPQUFBLENBQVEsOEJBQVI7OzRCQUVWLFNBQUEsR0FBVyxTQUFBO0lBQ1QsSUFBQSxDQUF1QixJQUFDLENBQUEsS0FBSyxDQUFDLEdBQVAsQ0FBVyxNQUFYLENBQXZCO0FBQUEsYUFBTyxTQUFQOztFQURTOzs7O0dBSmlCLEVBQUUsQ0FBQzs7QUFTM0I7Ozs7Ozs7MkJBQ0osU0FBQSxHQUFXOzsyQkFDWCxPQUFBLEdBQVM7OzJCQUNULFNBQUEsR0FBVzs7MkJBRVgsVUFBQSxHQUNFO0lBQUEsSUFBQSxFQUFNLFlBQU47Ozs7O0dBTnlCLEVBQUUsQ0FBQzs7QUFVaEMsTUFBTSxDQUFDLE9BQVAsR0FBaUIifQ==

},{"./templates/breadcrumb_child":166}],166:[function(require,module,exports){
var jade = require("jade/runtime");

module.exports = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (href, text) {
if ( href)
{
buf.push("<a" + (jade.attr("href", href, true, false)) + ">" + (jade.escape(null == (jade_interp = text) ? "" : jade_interp)) + "</a>");
}
else
{
buf.push(jade.escape(null == (jade_interp = text) ? "" : jade_interp));
}}.call(this,"href" in locals_for_with?locals_for_with.href:typeof href!=="undefined"?href:undefined,"text" in locals_for_with?locals_for_with.text:typeof text!=="undefined"?text:undefined));;return buf.join("");
};
},{"jade/runtime":187}],167:[function(require,module,exports){
Marionette.Decorator = require('./decorator');

Marionette.View.prototype.serializeModel = function() {
  if (!this.model) {
    return {};
  } else if (this.model.decorator) {
    return this.model.decorator.decorate(this.model);
  }
  return _.clone(this.model.attributes);
};

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL2Fla3Njby9naXRodWIvbWFnZWxsYW4vbm9kZV9tb2R1bGVzL2huX2VudGl0aWVzL2xpYi9jb25maWcuY29mZmVlIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiL1VzZXJzL2Fla3Njby9naXRodWIvbWFnZWxsYW4vbm9kZV9tb2R1bGVzL2huX2VudGl0aWVzL2xpYi9jb25maWcuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLFVBQVUsQ0FBQyxTQUFYLEdBQXVCLE9BQUEsQ0FBUSxhQUFSOztBQU12QixVQUFVLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxjQUExQixHQUEyQyxTQUFBO0VBR3pDLElBQUcsQ0FBQyxJQUFJLENBQUMsS0FBVDtBQUNFLFdBQU8sR0FEVDtHQUFBLE1BS0ssSUFBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQWQ7QUFDSCxXQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLFFBQXJCLENBQThCLElBQUksQ0FBQyxLQUFuQyxFQURKOztBQUlMLFNBQU8sQ0FBQyxDQUFDLEtBQUYsQ0FBUSxJQUFJLENBQUMsS0FBSyxDQUFDLFVBQW5CO0FBWmtDIn0=

},{"./decorator":168}],168:[function(require,module,exports){
var BaseDecorator;

BaseDecorator = (function() {
  function BaseDecorator() {}

  BaseDecorator.decorate = function(model) {
    var data, func, i, len, ref;
    data = _.clone(model.attributes);
    ref = _.functions(this.prototype);
    for (i = 0, len = ref.length; i < len; i++) {
      func = ref[i];
      if (func === 'constructor') {
        continue;
      }
      data[func] = this.prototype[func].apply(model);
    }
    return data;
  };

  return BaseDecorator;

})();

module.exports = BaseDecorator;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL2Fla3Njby9naXRodWIvbWFnZWxsYW4vbm9kZV9tb2R1bGVzL2huX2VudGl0aWVzL2xpYi9kZWNvcmF0b3IuY29mZmVlIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiL1VzZXJzL2Fla3Njby9naXRodWIvbWFnZWxsYW4vbm9kZV9tb2R1bGVzL2huX2VudGl0aWVzL2xpYi9kZWNvcmF0b3IuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUlBLElBQUE7O0FBQU07OztFQUlKLGFBQUMsQ0FBQSxRQUFELEdBQVcsU0FBQyxLQUFEO0FBSVQsUUFBQTtJQUFBLElBQUEsR0FBTyxDQUFDLENBQUMsS0FBRixDQUFRLEtBQUssQ0FBQyxVQUFkO0FBSVA7QUFBQSxTQUFBLHFDQUFBOztNQUdFLElBQVksSUFBQSxLQUFRLGFBQXBCO0FBQUEsaUJBQUE7O01BR0EsSUFBSyxDQUFBLElBQUEsQ0FBTCxHQUFhLElBQUMsQ0FBQSxTQUFVLENBQUEsSUFBQSxDQUFLLENBQUMsS0FBakIsQ0FBdUIsS0FBdkI7QUFOZjtBQVNBLFdBQU87RUFqQkU7Ozs7OztBQXFCYixNQUFNLENBQUMsT0FBUCxHQUFpQiJ9

},{}],169:[function(require,module,exports){
var FlashCollection,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

FlashCollection = (function(superClass) {
  extend(FlashCollection, superClass);

  function FlashCollection() {
    return FlashCollection.__super__.constructor.apply(this, arguments);
  }

  FlashCollection.prototype.model = require('./model');

  return FlashCollection;

})(Backbone.Collection);

module.exports = FlashCollection;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL2Fla3Njby9naXRodWIvbWFnZWxsYW4vbm9kZV9tb2R1bGVzL2huX2ZsYXNoL2xpYi9jb2xsZWN0aW9uLmNvZmZlZSIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9hZWtzY28vZ2l0aHViL21hZ2VsbGFuL25vZGVfbW9kdWxlcy9obl9mbGFzaC9saWIvY29sbGVjdGlvbi5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBSUEsSUFBQSxlQUFBO0VBQUE7OztBQUFNOzs7Ozs7OzRCQUNKLEtBQUEsR0FBTyxPQUFBLENBQVEsU0FBUjs7OztHQURxQixRQUFRLENBQUM7O0FBS3ZDLE1BQU0sQ0FBQyxPQUFQLEdBQWlCIn0=

},{"./model":171}],170:[function(require,module,exports){
var FlashComponent, FlashList,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

require('./service');

FlashList = require('./views/flashList');

FlashComponent = (function(superClass) {
  extend(FlashComponent, superClass);

  function FlashComponent() {
    this.showListView = bind(this.showListView, this);
    return FlashComponent.__super__.constructor.apply(this, arguments);
  }

  FlashComponent.prototype.initialize = function(options) {
    if (options == null) {
      options = {};
    }
    this.container = options.container;
    return Backbone.Radio.channel('flash').request('collection').then((function(_this) {
      return function(collection) {
        _this.collection = collection;
        return _this.collection.on('update', _this.showListView, _this);
      };
    })(this));
  };

  FlashComponent.prototype.radioEvents = {
    'flash add': 'add',
    'flash reset': 'reset',
    'flash error': 'error',
    'flash warning': 'warning',
    'flash success': 'success'
  };

  FlashComponent.prototype.add = function(options) {
    if (options == null) {
      options = {};
    }
    return this.collection.add(options);
  };

  FlashComponent.prototype.reset = function() {
    return this.collection.reset();
  };

  FlashComponent.prototype.error = function(options) {
    if (options == null) {
      options = {};
    }
    return this.collection.add(_.extend(options, {
      context: 'danger'
    }));
  };

  FlashComponent.prototype.warning = function(options) {
    if (options == null) {
      options = {};
    }
    return this.collection.add(_.extend(options, {
      context: 'warning'
    }));
  };

  FlashComponent.prototype.success = function(options) {
    if (options == null) {
      options = {};
    }
    return this.collection.add(_.extend(options, {
      context: 'success'
    }));
  };

  FlashComponent.prototype.showListView = function() {
    if (!this.rendered) {
      this.container.show(new FlashList({
        collection: this.collection
      }));
      return this.rendered = true;
    }
  };

  return FlashComponent;

})(Backbone.Marionette.Service);

module.exports = FlashComponent;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL2Fla3Njby9naXRodWIvbWFnZWxsYW4vbm9kZV9tb2R1bGVzL2huX2ZsYXNoL2xpYi9jb21wb25lbnQuY29mZmVlIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiL1VzZXJzL2Fla3Njby9naXRodWIvbWFnZWxsYW4vbm9kZV9tb2R1bGVzL2huX2ZsYXNoL2xpYi9jb21wb25lbnQuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLElBQUEseUJBQUE7RUFBQTs7OztBQUFBLE9BQUEsQ0FBUSxXQUFSOztBQUNBLFNBQUEsR0FBWSxPQUFBLENBQVEsbUJBQVI7O0FBUU47Ozs7Ozs7OzJCQUVKLFVBQUEsR0FBWSxTQUFDLE9BQUQ7O01BQUMsVUFBVTs7SUFDckIsSUFBQyxDQUFBLFNBQUQsR0FBYSxPQUFPLENBQUM7V0FDckIsUUFBUSxDQUFDLEtBQUssQ0FBQyxPQUFmLENBQXVCLE9BQXZCLENBQStCLENBQUMsT0FBaEMsQ0FBd0MsWUFBeEMsQ0FBcUQsQ0FBQyxJQUF0RCxDQUEyRCxDQUFBLFNBQUEsS0FBQTthQUFBLFNBQUMsVUFBRDtRQUN6RCxLQUFDLENBQUEsVUFBRCxHQUFjO2VBQ2QsS0FBQyxDQUFBLFVBQVUsQ0FBQyxFQUFaLENBQWUsUUFBZixFQUF5QixLQUFDLENBQUEsWUFBMUIsRUFBd0MsS0FBeEM7TUFGeUQ7SUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLENBQTNEO0VBRlU7OzJCQU1aLFdBQUEsR0FDRTtJQUFBLFdBQUEsRUFBa0IsS0FBbEI7SUFDQSxhQUFBLEVBQWtCLE9BRGxCO0lBRUEsYUFBQSxFQUFrQixPQUZsQjtJQUdBLGVBQUEsRUFBa0IsU0FIbEI7SUFJQSxlQUFBLEVBQWtCLFNBSmxCOzs7MkJBTUYsR0FBQSxHQUFLLFNBQUMsT0FBRDs7TUFBQyxVQUFVOztXQUNkLElBQUMsQ0FBQSxVQUFVLENBQUMsR0FBWixDQUFnQixPQUFoQjtFQURHOzsyQkFHTCxLQUFBLEdBQU8sU0FBQTtXQUNMLElBQUMsQ0FBQSxVQUFVLENBQUMsS0FBWixDQUFBO0VBREs7OzJCQUdQLEtBQUEsR0FBTyxTQUFDLE9BQUQ7O01BQUMsVUFBUTs7V0FDZCxJQUFDLENBQUEsVUFBVSxDQUFDLEdBQVosQ0FBZ0IsQ0FBQyxDQUFDLE1BQUYsQ0FBVSxPQUFWLEVBQW1CO01BQUUsT0FBQSxFQUFVLFFBQVo7S0FBbkIsQ0FBaEI7RUFESzs7MkJBR1AsT0FBQSxHQUFTLFNBQUMsT0FBRDs7TUFBQyxVQUFROztXQUNoQixJQUFDLENBQUEsVUFBVSxDQUFDLEdBQVosQ0FBZ0IsQ0FBQyxDQUFDLE1BQUYsQ0FBVSxPQUFWLEVBQW1CO01BQUUsT0FBQSxFQUFVLFNBQVo7S0FBbkIsQ0FBaEI7RUFETzs7MkJBR1QsT0FBQSxHQUFTLFNBQUMsT0FBRDs7TUFBQyxVQUFROztXQUNoQixJQUFDLENBQUEsVUFBVSxDQUFDLEdBQVosQ0FBZ0IsQ0FBQyxDQUFDLE1BQUYsQ0FBVSxPQUFWLEVBQW1CO01BQUUsT0FBQSxFQUFVLFNBQVo7S0FBbkIsQ0FBaEI7RUFETzs7MkJBR1QsWUFBQSxHQUFjLFNBQUE7SUFDWixJQUFBLENBQU8sSUFBQyxDQUFBLFFBQVI7TUFDRSxJQUFDLENBQUEsU0FBUyxDQUFDLElBQVgsQ0FBZ0IsSUFBSSxTQUFKLENBQWM7UUFBRSxVQUFBLEVBQVksSUFBQyxDQUFBLFVBQWY7T0FBZCxDQUFoQjthQUNBLElBQUMsQ0FBQSxRQUFELEdBQVksS0FGZDs7RUFEWTs7OztHQTlCYSxRQUFRLENBQUMsVUFBVSxDQUFDOztBQXFDakQsTUFBTSxDQUFDLE9BQVAsR0FBaUIifQ==

},{"./service":172,"./views/flashList":173}],171:[function(require,module,exports){
var FlashModel,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

FlashModel = (function(superClass) {
  extend(FlashModel, superClass);

  function FlashModel() {
    return FlashModel.__super__.constructor.apply(this, arguments);
  }

  FlashModel.prototype.defaults = {
    timeout: 5000,
    dismissible: true,
    context: 'info'
  };

  FlashModel.prototype.dismiss = function() {
    return this.collection.remove(this);
  };

  return FlashModel;

})(Backbone.Model);

module.exports = FlashModel;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL2Fla3Njby9naXRodWIvbWFnZWxsYW4vbm9kZV9tb2R1bGVzL2huX2ZsYXNoL2xpYi9tb2RlbC5jb2ZmZWUiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIvVXNlcnMvYWVrc2NvL2dpdGh1Yi9tYWdlbGxhbi9ub2RlX21vZHVsZXMvaG5fZmxhc2gvbGliL21vZGVsLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFJQSxJQUFBLFVBQUE7RUFBQTs7O0FBQU07Ozs7Ozs7dUJBRUosUUFBQSxHQUNFO0lBQUEsT0FBQSxFQUFTLElBQVQ7SUFDQSxXQUFBLEVBQWEsSUFEYjtJQUVBLE9BQUEsRUFBUyxNQUZUOzs7dUJBV0YsT0FBQSxHQUFTLFNBQUE7V0FDUCxJQUFDLENBQUEsVUFBVSxDQUFDLE1BQVosQ0FBbUIsSUFBbkI7RUFETzs7OztHQWRjLFFBQVEsQ0FBQzs7QUFtQmxDLE1BQU0sQ0FBQyxPQUFQLEdBQWlCIn0=

},{}],172:[function(require,module,exports){
var FlashCollection, FlashService,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

FlashCollection = require('./collection');

FlashService = (function(superClass) {
  extend(FlashService, superClass);

  function FlashService() {
    return FlashService.__super__.constructor.apply(this, arguments);
  }

  FlashService.prototype.radioRequests = {
    'flash collection': 'getCollection'
  };

  FlashService.prototype.alerts = null;

  FlashService.prototype.getCollection = function() {
    return new Promise((function(_this) {
      return function(resolve, reject) {
        _this.alerts || (_this.alerts = new FlashCollection());
        resolve(_this.alerts);
      };
    })(this));
  };

  return FlashService;

})(Backbone.Marionette.Service);

module.exports = new FlashService();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL2Fla3Njby9naXRodWIvbWFnZWxsYW4vbm9kZV9tb2R1bGVzL2huX2ZsYXNoL2xpYi9zZXJ2aWNlLmNvZmZlZSIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9hZWtzY28vZ2l0aHViL21hZ2VsbGFuL25vZGVfbW9kdWxlcy9obl9mbGFzaC9saWIvc2VydmljZS5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsSUFBQSw2QkFBQTtFQUFBOzs7QUFBQSxlQUFBLEdBQWtCLE9BQUEsQ0FBUSxjQUFSOztBQVFaOzs7Ozs7O3lCQUVKLGFBQUEsR0FDRTtJQUFBLGtCQUFBLEVBQW9CLGVBQXBCOzs7eUJBRUYsTUFBQSxHQUFROzt5QkFFUixhQUFBLEdBQWUsU0FBQTtBQUNiLFdBQU8sSUFBSSxPQUFKLENBQVksQ0FBQSxTQUFBLEtBQUE7YUFBQSxTQUFDLE9BQUQsRUFBUyxNQUFUO1FBQ2pCLEtBQUMsQ0FBQSxXQUFELEtBQUMsQ0FBQSxTQUFXLElBQUksZUFBSixDQUFBO1FBQ1osT0FBQSxDQUFRLEtBQUMsQ0FBQSxNQUFUO01BRmlCO0lBQUEsQ0FBQSxDQUFBLENBQUEsSUFBQSxDQUFaO0VBRE07Ozs7R0FQVSxRQUFRLENBQUMsVUFBVSxDQUFDOztBQWUvQyxNQUFNLENBQUMsT0FBUCxHQUFpQixJQUFJLFlBQUosQ0FBQSJ9

},{"./collection":169}],173:[function(require,module,exports){
var FlashChild, FlashList,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

FlashChild = (function(superClass) {
  extend(FlashChild, superClass);

  function FlashChild() {
    this.dismiss = bind(this.dismiss, this);
    return FlashChild.__super__.constructor.apply(this, arguments);
  }

  FlashChild.prototype.className = 'row';

  FlashChild.prototype.template = require('./templates/flash_child');

  FlashChild.prototype.attributes = {
    style: 'display:none;'
  };

  FlashChild.prototype.ui = {
    close: '[data-click=dismiss]'
  };

  FlashChild.prototype.events = {
    'click @ui.close': 'dismiss'
  };

  FlashChild.prototype.onShow = function() {
    var timeout;
    timeout = this.model.get('timeout');
    return setTimeout(this.dismiss, timeout);
  };

  FlashChild.prototype.onAttach = function() {
    return this.$el.fadeIn();
  };

  FlashChild.prototype.remove = function() {
    return this.$el.slideToggle((function(_this) {
      return function() {
        return Marionette.LayoutView.prototype.remove.call(_this);
      };
    })(this));
  };

  FlashChild.prototype.dismiss = function() {
    var ref;
    return (ref = this.model.collection) != null ? ref.remove(this.model) : void 0;
  };

  return FlashChild;

})(Marionette.LayoutView);

FlashList = (function(superClass) {
  extend(FlashList, superClass);

  function FlashList() {
    return FlashList.__super__.constructor.apply(this, arguments);
  }

  FlashList.prototype.className = 'container-fluid';

  FlashList.prototype.childView = FlashChild;

  return FlashList;

})(Marionette.CollectionView);

module.exports = FlashList;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL2Fla3Njby9naXRodWIvbWFnZWxsYW4vbm9kZV9tb2R1bGVzL2huX2ZsYXNoL2xpYi92aWV3cy9mbGFzaExpc3QuY29mZmVlIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiL1VzZXJzL2Fla3Njby9naXRodWIvbWFnZWxsYW4vbm9kZV9tb2R1bGVzL2huX2ZsYXNoL2xpYi92aWV3cy9mbGFzaExpc3QuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLElBQUEscUJBQUE7RUFBQTs7OztBQUFNOzs7Ozs7Ozt1QkFDSixTQUFBLEdBQVc7O3VCQUNYLFFBQUEsR0FBVSxPQUFBLENBQVEseUJBQVI7O3VCQUVWLFVBQUEsR0FDRTtJQUFBLEtBQUEsRUFBTyxlQUFQOzs7dUJBRUYsRUFBQSxHQUNFO0lBQUEsS0FBQSxFQUFPLHNCQUFQOzs7dUJBRUYsTUFBQSxHQUNFO0lBQUEsaUJBQUEsRUFBbUIsU0FBbkI7Ozt1QkFFRixNQUFBLEdBQVEsU0FBQTtBQUNOLFFBQUE7SUFBQSxPQUFBLEdBQVUsSUFBQyxDQUFBLEtBQUssQ0FBQyxHQUFQLENBQVcsU0FBWDtXQUNWLFVBQUEsQ0FBWSxJQUFDLENBQUEsT0FBYixFQUFzQixPQUF0QjtFQUZNOzt1QkFJUixRQUFBLEdBQVUsU0FBQTtXQUNSLElBQUMsQ0FBQSxHQUFHLENBQUMsTUFBTCxDQUFBO0VBRFE7O3VCQUdWLE1BQUEsR0FBUSxTQUFBO1dBQ04sSUFBQyxDQUFBLEdBQUcsQ0FBQyxXQUFMLENBQWtCLENBQUEsU0FBQSxLQUFBO2FBQUEsU0FBQTtlQUNoQixVQUFVLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsSUFBdkMsQ0FBNEMsS0FBNUM7TUFEZ0I7SUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLENBQWxCO0VBRE07O3VCQUtSLE9BQUEsR0FBUyxTQUFBO0FBQ1AsUUFBQTtzREFBaUIsQ0FBRSxNQUFuQixDQUEyQixJQUFDLENBQUEsS0FBNUI7RUFETzs7OztHQXpCYyxVQUFVLENBQUM7O0FBOEI5Qjs7Ozs7OztzQkFDSixTQUFBLEdBQVc7O3NCQUNYLFNBQUEsR0FBVzs7OztHQUZXLFVBQVUsQ0FBQzs7QUFNbkMsTUFBTSxDQUFDLE9BQVAsR0FBaUIifQ==

},{"./templates/flash_child":174}],174:[function(require,module,exports){
var jade = require("jade/runtime");

module.exports = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (context, dismissible, message, strong) {
buf.push("<div class=\"col-xs-12 text-center\"><div role=\"alert\"" + (jade.cls(['alert','alert-dismissible','fade','in',"alert-" + context], [null,null,null,null,true])) + ">");
if ( dismissible)
{
buf.push("<button type=\"button\" data-click=\"dismiss\" aria-label=\"Close\" class=\"close\"><span aria-hidden=\"true\">×</span><span class=\"sr-only\">Close</span></button>");
}
if ( strong)
{
buf.push("<strong>" + (jade.escape(null == (jade_interp = strong + " ") ? "" : jade_interp)) + "</strong>");
}
if ( message)
{
buf.push(jade.escape(null == (jade_interp = message) ? "" : jade_interp));
}
buf.push("</div></div>");}.call(this,"context" in locals_for_with?locals_for_with.context:typeof context!=="undefined"?context:undefined,"dismissible" in locals_for_with?locals_for_with.dismissible:typeof dismissible!=="undefined"?dismissible:undefined,"message" in locals_for_with?locals_for_with.message:typeof message!=="undefined"?message:undefined,"strong" in locals_for_with?locals_for_with.strong:typeof strong!=="undefined"?strong:undefined));;return buf.join("");
};
},{"jade/runtime":187}],175:[function(require,module,exports){
var OverlayComponent, OverlayView,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

OverlayView = (function(superClass) {
  extend(OverlayView, superClass);

  function OverlayView() {
    return OverlayView.__super__.constructor.apply(this, arguments);
  }

  OverlayView.prototype.template = false;

  OverlayView.prototype.className = 'overlay';

  OverlayView.prototype.events = {
    'click': 'onClick'
  };

  OverlayView.prototype.onClick = function() {
    return Backbone.Radio.channel('sidebar').trigger('hide');
  };

  return OverlayView;

})(Mn.LayoutView);

OverlayComponent = (function(superClass) {
  extend(OverlayComponent, superClass);

  function OverlayComponent() {
    return OverlayComponent.__super__.constructor.apply(this, arguments);
  }

  OverlayComponent.prototype.initialize = function(options) {
    if (options == null) {
      options = {};
    }
    return this.container = options.container;
  };

  OverlayComponent.prototype.radioEvents = {
    'overlay ready': 'onReady',
    'overlay show': 'showOverlay',
    'overlay hide': 'hideOverlay'
  };

  OverlayComponent.prototype.showOverlay = function() {
    return $('.overlay-region').addClass('active');
  };

  OverlayComponent.prototype.hideOverlay = function() {
    return $('.overlay-region').removeClass('active');
  };

  OverlayComponent.prototype.onReady = function() {
    if (!this.view) {
      this.view = new OverlayView();
      return this.container.show(this.view);
    }
  };

  return OverlayComponent;

})(Mn.Service);

module.exports = OverlayComponent;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL2Fla3Njby9naXRodWIvbWFnZWxsYW4vbm9kZV9tb2R1bGVzL2huX292ZXJsYXkvbGliL2NvbXBvbmVudC5jb2ZmZWUiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIvVXNlcnMvYWVrc2NvL2dpdGh1Yi9tYWdlbGxhbi9ub2RlX21vZHVsZXMvaG5fb3ZlcmxheS9saWIvY29tcG9uZW50LmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxJQUFBLDZCQUFBO0VBQUE7OztBQUFNOzs7Ozs7O3dCQUNKLFFBQUEsR0FBVTs7d0JBQ1YsU0FBQSxHQUFXOzt3QkFFWCxNQUFBLEdBQ0U7SUFBQSxPQUFBLEVBQVMsU0FBVDs7O3dCQUVGLE9BQUEsR0FBUyxTQUFBO1dBQ1AsUUFBUSxDQUFDLEtBQUssQ0FBQyxPQUFmLENBQXVCLFNBQXZCLENBQWlDLENBQUMsT0FBbEMsQ0FBMEMsTUFBMUM7RUFETzs7OztHQVBlLEVBQUUsQ0FBQzs7QUFZdkI7Ozs7Ozs7NkJBRUosVUFBQSxHQUFZLFNBQUMsT0FBRDs7TUFBQyxVQUFVOztXQUNyQixJQUFDLENBQUEsU0FBRCxHQUFjLE9BQU8sQ0FBQztFQURaOzs2QkFHWixXQUFBLEdBQ0U7SUFBQSxlQUFBLEVBQWtCLFNBQWxCO0lBQ0EsY0FBQSxFQUFrQixhQURsQjtJQUVBLGNBQUEsRUFBa0IsYUFGbEI7Ozs2QkFJRixXQUFBLEdBQWEsU0FBQTtXQUNYLENBQUEsQ0FBRSxpQkFBRixDQUFvQixDQUFDLFFBQXJCLENBQThCLFFBQTlCO0VBRFc7OzZCQUdiLFdBQUEsR0FBYSxTQUFBO1dBQ1gsQ0FBQSxDQUFFLGlCQUFGLENBQW9CLENBQUMsV0FBckIsQ0FBaUMsUUFBakM7RUFEVzs7NkJBR2IsT0FBQSxHQUFTLFNBQUE7SUFDUCxJQUFBLENBQU8sSUFBQyxDQUFBLElBQVI7TUFDRSxJQUFDLENBQUEsSUFBRCxHQUFRLElBQUksV0FBSixDQUFBO2FBQ1IsSUFBQyxDQUFBLFNBQVMsQ0FBQyxJQUFYLENBQWdCLElBQUMsQ0FBQSxJQUFqQixFQUZGOztFQURPOzs7O0dBaEJvQixFQUFFLENBQUM7O0FBdUJsQyxNQUFNLENBQUMsT0FBUCxHQUFpQiJ9

},{}],176:[function(require,module,exports){
var ModalRegion,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

ModalRegion = (function(superClass) {
  extend(ModalRegion, superClass);

  function ModalRegion() {
    return ModalRegion.__super__.constructor.apply(this, arguments);
  }

  ModalRegion.prototype.show = function(view, options) {
    if (options == null) {
      options = {};
    }
    view.on('hidden:modal', function() {
      return this.destroy();
    });
    return ModalRegion.__super__.show.call(this, view, options);
  };

  return ModalRegion;

})(Marionette.Region);

module.exports = ModalRegion;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL2Fla3Njby9naXRodWIvbWFnZWxsYW4vbm9kZV9tb2R1bGVzL2huX3JlZ2lvbnMvbGliL3JlZ2lvbnMvbW9kYWwuY29mZmVlIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiL1VzZXJzL2Fla3Njby9naXRodWIvbWFnZWxsYW4vbm9kZV9tb2R1bGVzL2huX3JlZ2lvbnMvbGliL3JlZ2lvbnMvbW9kYWwuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUtBLElBQUEsV0FBQTtFQUFBOzs7QUFBTTs7Ozs7Ozt3QkFFSixJQUFBLEdBQU0sU0FBQyxJQUFELEVBQU8sT0FBUDs7TUFBTyxVQUFVOztJQUNyQixJQUFJLENBQUMsRUFBTCxDQUFRLGNBQVIsRUFBd0IsU0FBQTthQUFHLElBQUMsQ0FBQSxPQUFELENBQUE7SUFBSCxDQUF4QjtXQUNBLHNDQUFNLElBQU4sRUFBWSxPQUFaO0VBRkk7Ozs7R0FGa0IsVUFBVSxDQUFDOztBQVFyQyxNQUFNLENBQUMsT0FBUCxHQUFpQiJ9

},{}],177:[function(require,module,exports){
var BaseRoute,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

BaseRoute = (function(superClass) {
  extend(BaseRoute, superClass);

  function BaseRoute() {
    return BaseRoute.__super__.constructor.apply(this, arguments);
  }

  BaseRoute.prototype.breadcrumbs = [];

  BaseRoute.prototype.initialize = function(options) {
    this.options = options;
    this.container = options.container;
    this.on('before:enter', (function(_this) {
      return function() {
        return typeof _this.onBeforeEnter === "function" ? _this.onBeforeEnter(arguments) : void 0;
      };
    })(this));
    this.on('before:fetch', (function(_this) {
      return function() {
        return typeof _this.onBeforeFetch === "function" ? _this.onBeforeFetch(arguments) : void 0;
      };
    })(this));
    this.on('before:render', (function(_this) {
      return function() {
        return typeof _this.onBeforeRender === "function" ? _this.onBeforeRender(arguments) : void 0;
      };
    })(this));
    this.on('fetch', (function(_this) {
      return function() {
        return typeof _this.onFetch === "function" ? _this.onFetch(arguments) : void 0;
      };
    })(this));
    this.on('render', (function(_this) {
      return function() {
        return typeof _this.onRender === "function" ? _this.onRender(arguments) : void 0;
      };
    })(this));
    this.on('enter', (function(_this) {
      return function() {
        return typeof _this.onEnter === "function" ? _this.onEnter(arguments) : void 0;
      };
    })(this));
    return Backbone.Radio.channel('sidebar').trigger('hide');
  };

  BaseRoute.prototype._setPageTitle = function() {
    return document.title = _.result(this, 'title');
  };

  BaseRoute.prototype._updateBreadcrumbs = function() {
    var breadcrumbs;
    breadcrumbs = _.result(this, 'breadcrumbs');
    if (breadcrumbs) {
      return Backbone.Radio.channel('breadcrumb').trigger('set', breadcrumbs);
    }
  };

  BaseRoute.prototype.onFetch = function() {
    this._setPageTitle();
    return this._updateBreadcrumbs();
  };

  return BaseRoute;

})(Backbone.Routing.Route);

module.exports = BaseRoute;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL2Fla3Njby9naXRodWIvbWFnZWxsYW4vbm9kZV9tb2R1bGVzL2huX3JvdXRpbmcvbGliL3JvdXRlLmNvZmZlZSIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9hZWtzY28vZ2l0aHViL21hZ2VsbGFuL25vZGVfbW9kdWxlcy9obl9yb3V0aW5nL2xpYi9yb3V0ZS5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBS0EsSUFBQSxTQUFBO0VBQUE7OztBQUFNOzs7Ozs7O3NCQUVKLFdBQUEsR0FBYTs7c0JBRWIsVUFBQSxHQUFZLFNBQUMsT0FBRDtJQUdWLElBQUMsQ0FBQSxPQUFELEdBQVc7SUFHWCxJQUFDLENBQUEsU0FBRCxHQUFhLE9BQU8sQ0FBQztJQUdyQixJQUFDLENBQUEsRUFBRCxDQUFJLGNBQUosRUFBb0IsQ0FBQSxTQUFBLEtBQUE7YUFBQSxTQUFBOzJEQUFHLEtBQUMsQ0FBQSxjQUFlO01BQW5CO0lBQUEsQ0FBQSxDQUFBLENBQUEsSUFBQSxDQUFwQjtJQUNBLElBQUMsQ0FBQSxFQUFELENBQUksY0FBSixFQUFvQixDQUFBLFNBQUEsS0FBQTthQUFBLFNBQUE7MkRBQUcsS0FBQyxDQUFBLGNBQWU7TUFBbkI7SUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLENBQXBCO0lBQ0EsSUFBQyxDQUFBLEVBQUQsQ0FBSSxlQUFKLEVBQXFCLENBQUEsU0FBQSxLQUFBO2FBQUEsU0FBQTs0REFBRyxLQUFDLENBQUEsZUFBZ0I7TUFBcEI7SUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLENBQXJCO0lBQ0EsSUFBQyxDQUFBLEVBQUQsQ0FBSSxPQUFKLEVBQWEsQ0FBQSxTQUFBLEtBQUE7YUFBQSxTQUFBO3FEQUFHLEtBQUMsQ0FBQSxRQUFTO01BQWI7SUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLENBQWI7SUFDQSxJQUFDLENBQUEsRUFBRCxDQUFJLFFBQUosRUFBYyxDQUFBLFNBQUEsS0FBQTthQUFBLFNBQUE7c0RBQUcsS0FBQyxDQUFBLFNBQVU7TUFBZDtJQUFBLENBQUEsQ0FBQSxDQUFBLElBQUEsQ0FBZDtJQUNBLElBQUMsQ0FBQSxFQUFELENBQUksT0FBSixFQUFhLENBQUEsU0FBQSxLQUFBO2FBQUEsU0FBQTtxREFBRyxLQUFDLENBQUEsUUFBUztNQUFiO0lBQUEsQ0FBQSxDQUFBLENBQUEsSUFBQSxDQUFiO1dBR0EsUUFBUSxDQUFDLEtBQUssQ0FBQyxPQUFmLENBQXVCLFNBQXZCLENBQWlDLENBQUMsT0FBbEMsQ0FBMEMsTUFBMUM7RUFqQlU7O3NCQW1CWixhQUFBLEdBQWUsU0FBQTtXQUNiLFFBQVEsQ0FBQyxLQUFULEdBQWlCLENBQUMsQ0FBQyxNQUFGLENBQVMsSUFBVCxFQUFZLE9BQVo7RUFESjs7c0JBR2Ysa0JBQUEsR0FBb0IsU0FBQTtBQUNsQixRQUFBO0lBQUEsV0FBQSxHQUFjLENBQUMsQ0FBQyxNQUFGLENBQVMsSUFBVCxFQUFZLGFBQVo7SUFDZCxJQUFvRSxXQUFwRTthQUFBLFFBQVEsQ0FBQyxLQUFLLENBQUMsT0FBZixDQUF1QixZQUF2QixDQUFvQyxDQUFDLE9BQXJDLENBQTZDLEtBQTdDLEVBQW9ELFdBQXBELEVBQUE7O0VBRmtCOztzQkFJcEIsT0FBQSxHQUFTLFNBQUE7SUFDUCxJQUFDLENBQUEsYUFBRCxDQUFBO1dBQ0EsSUFBQyxDQUFBLGtCQUFELENBQUE7RUFGTzs7OztHQTlCYSxRQUFRLENBQUMsT0FBTyxDQUFDOztBQW9DekMsTUFBTSxDQUFDLE9BQVAsR0FBaUIifQ==

},{}],178:[function(require,module,exports){
var BaseRouter,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

BaseRouter = (function(superClass) {
  extend(BaseRouter, superClass);

  function BaseRouter() {
    return BaseRouter.__super__.constructor.apply(this, arguments);
  }

  BaseRouter.prototype.initialize = function(options) {
    return this.container = options.container;
  };

  return BaseRouter;

})(Backbone.Routing.Router);

module.exports = BaseRouter;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL2Fla3Njby9naXRodWIvbWFnZWxsYW4vbm9kZV9tb2R1bGVzL2huX3JvdXRpbmcvbGliL3JvdXRlci5jb2ZmZWUiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIvVXNlcnMvYWVrc2NvL2dpdGh1Yi9tYWdlbGxhbi9ub2RlX21vZHVsZXMvaG5fcm91dGluZy9saWIvcm91dGVyLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFNQSxJQUFBLFVBQUE7RUFBQTs7O0FBQU07Ozs7Ozs7dUJBRUosVUFBQSxHQUFZLFNBQUMsT0FBRDtXQUFhLElBQUMsQ0FBQSxTQUFELEdBQWEsT0FBTyxDQUFDO0VBQWxDOzs7O0dBRlcsUUFBUSxDQUFDLE9BQU8sQ0FBQzs7QUFNMUMsTUFBTSxDQUFDLE9BQVAsR0FBaUIifQ==

},{}],179:[function(require,module,exports){
var SidebarComponent, SidebarView,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

SidebarView = require('./view');

SidebarComponent = (function(superClass) {
  extend(SidebarComponent, superClass);

  function SidebarComponent() {
    return SidebarComponent.__super__.constructor.apply(this, arguments);
  }

  SidebarComponent.prototype.radioEvents = {
    'sidebar reset': 'showView',
    'sidebar toggle': 'toggleSidebar',
    'sidebar hide': 'hideSidebar'
  };

  SidebarComponent.prototype.initialize = function(options) {
    if (options == null) {
      options = {};
    }
    return this.menuItems = options.menuItems;
  };

  SidebarComponent.prototype.showView = function() {
    this.view = new SidebarView({
      menuItems: this.menuItems
    });
    return this.options.container.show(this.view);
  };

  SidebarComponent.prototype.hideSidebar = function() {
    if (!this.view) {
      return;
    }
    return $('body').removeClass('sidebar-active');
  };

  SidebarComponent.prototype.toggleSidebar = function() {
    if (!this.view) {
      return;
    }
    return $('body').toggleClass('sidebar-active');
  };

  return SidebarComponent;

})(Marionette.Service);

module.exports = SidebarComponent;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL2Fla3Njby9naXRodWIvbWFnZWxsYW4vbm9kZV9tb2R1bGVzL2huX3NpZGViYXIvbGliL2NvbXBvbmVudC5jb2ZmZWUiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIvVXNlcnMvYWVrc2NvL2dpdGh1Yi9tYWdlbGxhbi9ub2RlX21vZHVsZXMvaG5fc2lkZWJhci9saWIvY29tcG9uZW50LmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxJQUFBLDZCQUFBO0VBQUE7OztBQUFBLFdBQUEsR0FBYyxPQUFBLENBQVEsUUFBUjs7QUFRUjs7Ozs7Ozs2QkFFSixXQUFBLEdBQ0U7SUFBQSxlQUFBLEVBQWtCLFVBQWxCO0lBQ0EsZ0JBQUEsRUFBa0IsZUFEbEI7SUFFQSxjQUFBLEVBQWtCLGFBRmxCOzs7NkJBSUYsVUFBQSxHQUFZLFNBQUMsT0FBRDs7TUFBQyxVQUFROztXQUNuQixJQUFDLENBQUEsU0FBRCxHQUFhLE9BQU8sQ0FBQztFQURYOzs2QkFHWixRQUFBLEdBQVUsU0FBQTtJQUNSLElBQUMsQ0FBQSxJQUFELEdBQVEsSUFBSSxXQUFKLENBQWdCO01BQUUsU0FBQSxFQUFXLElBQUMsQ0FBQSxTQUFkO0tBQWhCO1dBQ1IsSUFBQyxDQUFBLE9BQU8sQ0FBQyxTQUFTLENBQUMsSUFBbkIsQ0FBd0IsSUFBQyxDQUFBLElBQXpCO0VBRlE7OzZCQUlWLFdBQUEsR0FBYSxTQUFBO0lBQ1gsSUFBQSxDQUFjLElBQUMsQ0FBQSxJQUFmO0FBQUEsYUFBQTs7V0FDQSxDQUFBLENBQUUsTUFBRixDQUFTLENBQUMsV0FBVixDQUFzQixnQkFBdEI7RUFGVzs7NkJBSWIsYUFBQSxHQUFlLFNBQUE7SUFDYixJQUFBLENBQWMsSUFBQyxDQUFBLElBQWY7QUFBQSxhQUFBOztXQUNBLENBQUEsQ0FBRSxNQUFGLENBQVMsQ0FBQyxXQUFWLENBQXNCLGdCQUF0QjtFQUZhOzs7O0dBbEJjLFVBQVUsQ0FBQzs7QUF3QjFDLE1BQU0sQ0FBQyxPQUFQLEdBQWlCIn0=

},{"./view":181}],180:[function(require,module,exports){
var jade = require("jade/runtime");

module.exports = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (items, undefined) {
jade_mixins["sidebarLink"] = jade_interp = function(opts){
var block = (this && this.block), attributes = (this && this.attributes) || {};
buf.push("<a" + (jade.attr("href", opts.href, true, false)) + " class=\"nav-link\"><i" + (jade.cls(['fa','fa-fw','fa-lg','m-r-1',opts.icon], [null,null,null,null,true])) + "></i>" + (jade.escape(null == (jade_interp = opts.title) ? "" : jade_interp)) + "</a>");
if ( opts.divider)
{
buf.push("<a class=\"nav-link divider\"></a>");
}
};
buf.push("");
// iterate items
;(function(){
  var $$obj = items;
  if ('number' == typeof $$obj.length) {

    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {
      var item = $$obj[$index];

jade_mixins["sidebarLink"](item);
    }

  } else {
    var $$l = 0;
    for (var $index in $$obj) {
      $$l++;      var item = $$obj[$index];

jade_mixins["sidebarLink"](item);
    }

  }
}).call(this);
}.call(this,"items" in locals_for_with?locals_for_with.items:typeof items!=="undefined"?items:undefined,"undefined" in locals_for_with?locals_for_with.undefined:typeof undefined!=="undefined"?undefined:undefined));;return buf.join("");
};
},{"jade/runtime":187}],181:[function(require,module,exports){
var SidebarView,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

SidebarView = (function(superClass) {
  extend(SidebarView, superClass);

  function SidebarView() {
    return SidebarView.__super__.constructor.apply(this, arguments);
  }

  SidebarView.prototype.template = require('./template');

  SidebarView.prototype.className = 'nav nav-pills nav-stacked';

  SidebarView.prototype.tagName = 'nav';

  SidebarView.prototype.initialize = function(options) {
    if (options == null) {
      options = {};
    }
    return this.menuItems = options.menuItems;
  };

  SidebarView.prototype.events = {
    'click a': 'onClicked'
  };

  SidebarView.prototype.onClicked = function() {
    return Backbone.Radio.channel('sidebar').trigger('hide');
  };

  SidebarView.prototype.serializeData = function() {
    return {
      items: this.menuItems
    };
  };

  return SidebarView;

})(Marionette.LayoutView);

module.exports = SidebarView;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL2Fla3Njby9naXRodWIvbWFnZWxsYW4vbm9kZV9tb2R1bGVzL2huX3NpZGViYXIvbGliL3ZpZXcuY29mZmVlIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiL1VzZXJzL2Fla3Njby9naXRodWIvbWFnZWxsYW4vbm9kZV9tb2R1bGVzL2huX3NpZGViYXIvbGliL3ZpZXcuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUlBLElBQUEsV0FBQTtFQUFBOzs7QUFBTTs7Ozs7Ozt3QkFDSixRQUFBLEdBQVUsT0FBQSxDQUFRLFlBQVI7O3dCQUNWLFNBQUEsR0FBVzs7d0JBQ1gsT0FBQSxHQUFTOzt3QkFFVCxVQUFBLEdBQVksU0FBQyxPQUFEOztNQUFDLFVBQVE7O1dBQ25CLElBQUMsQ0FBQSxTQUFELEdBQWEsT0FBTyxDQUFDO0VBRFg7O3dCQUdaLE1BQUEsR0FDRTtJQUFBLFNBQUEsRUFBVyxXQUFYOzs7d0JBRUYsU0FBQSxHQUFXLFNBQUE7V0FDVCxRQUFRLENBQUMsS0FBSyxDQUFDLE9BQWYsQ0FBdUIsU0FBdkIsQ0FBaUMsQ0FBQyxPQUFsQyxDQUEwQyxNQUExQztFQURTOzt3QkFHWCxhQUFBLEdBQWUsU0FBQTtBQUNiLFdBQU87TUFBRSxLQUFBLEVBQU8sSUFBQyxDQUFBLFNBQVY7O0VBRE07Ozs7R0FkUyxVQUFVLENBQUM7O0FBbUJyQyxNQUFNLENBQUMsT0FBUCxHQUFpQiJ9

},{"./template":180}],182:[function(require,module,exports){
var JsonViewer,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

JsonViewer = (function(superClass) {
  extend(JsonViewer, superClass);

  function JsonViewer() {
    return JsonViewer.__super__.constructor.apply(this, arguments);
  }

  JsonViewer.prototype.className = 'json-viewer';

  JsonViewer.prototype.template = require('./templates/json_viewer');

  JsonViewer.prototype.serializeData = function() {
    return {
      json: JSON.stringify(this.model.toJSON(), null, 2).split("\n")
    };
  };

  return JsonViewer;

})(Marionette.LayoutView);

module.exports = JsonViewer;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL2Fla3Njby9naXRodWIvbWFnZWxsYW4vbm9kZV9tb2R1bGVzL2huX3ZpZXdzL2xpYi9qc29uX3ZpZXdlci9pbmRleC5jb2ZmZWUiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIvVXNlcnMvYWVrc2NvL2dpdGh1Yi9tYWdlbGxhbi9ub2RlX21vZHVsZXMvaG5fdmlld3MvbGliL2pzb25fdmlld2VyL2luZGV4LmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxJQUFBLFVBQUE7RUFBQTs7O0FBQU07Ozs7Ozs7dUJBQ0osU0FBQSxHQUFXOzt1QkFDWCxRQUFBLEdBQVUsT0FBQSxDQUFRLHlCQUFSOzt1QkFFVixhQUFBLEdBQWUsU0FBQTtBQUNiLFdBQU87TUFBRSxJQUFBLEVBQU0sSUFBSSxDQUFDLFNBQUwsQ0FBZSxJQUFDLENBQUEsS0FBSyxDQUFDLE1BQVAsQ0FBQSxDQUFmLEVBQWdDLElBQWhDLEVBQXNDLENBQXRDLENBQXdDLENBQUMsS0FBekMsQ0FBK0MsSUFBL0MsQ0FBUjs7RUFETTs7OztHQUpRLFVBQVUsQ0FBQzs7QUFPcEMsTUFBTSxDQUFDLE9BQVAsR0FBaUIifQ==

},{"./templates/json_viewer":183}],183:[function(require,module,exports){
var jade = require("jade/runtime");

module.exports = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (json, undefined) {
buf.push("<div class=\"row\"><div class=\"col-xs-12\"><pre>");
// iterate json
;(function(){
  var $$obj = json;
  if ('number' == typeof $$obj.length) {

    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {
      var each = $$obj[$index];

buf.push("<span>" + (jade.escape(null == (jade_interp = each) ? "" : jade_interp)) + "</span>");
    }

  } else {
    var $$l = 0;
    for (var $index in $$obj) {
      $$l++;      var each = $$obj[$index];

buf.push("<span>" + (jade.escape(null == (jade_interp = each) ? "" : jade_interp)) + "</span>");
    }

  }
}).call(this);

buf.push("</pre></div></div>");}.call(this,"json" in locals_for_with?locals_for_with.json:typeof json!=="undefined"?json:undefined,"undefined" in locals_for_with?locals_for_with.undefined:typeof undefined!=="undefined"?undefined:undefined));;return buf.join("");
};
},{"jade/runtime":187}],184:[function(require,module,exports){
var NavChild, NavList, NavView,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

NavChild = (function(superClass) {
  extend(NavChild, superClass);

  function NavChild() {
    return NavChild.__super__.constructor.apply(this, arguments);
  }

  NavChild.prototype.tagName = 'li';

  NavChild.prototype.className = 'nav-item';

  NavChild.prototype.template = require('./templates/nav_child');

  NavChild.prototype.behaviors = {
    SelectableChild: {}
  };

  NavChild.prototype.className = function() {
    var css;
    css = 'nav-item';
    if (this.model.get('active')) {
      css += ' active';
    }
    if (this.model.get('dropdown')) {
      css += ' dropdown';
    }
    return css;
  };

  NavChild.prototype.onRender = function() {
    if (this.model.get('active')) {
      return this.triggerMethod('selected');
    }
  };

  NavChild.prototype.onClick = function(e) {
    if (this.model.get('href')) {
      return;
    }
    if (this.model.get('dropdown')) {
      return;
    }
    if (this.$el.hasClass('active')) {
      return;
    }
    if (e != null) {
      e.preventDefault();
    }
    this.triggerMethod('selected');
    return this.$el.addClass('active').siblings().removeClass('active');
  };

  return NavChild;

})(Mn.LayoutView);

NavList = (function(superClass) {
  extend(NavList, superClass);

  function NavList() {
    return NavList.__super__.constructor.apply(this, arguments);
  }

  NavList.prototype.tagName = 'ul';

  NavList.prototype.childView = NavChild;

  NavList.prototype.className = function() {
    var css;
    css = 'nav';
    if (this.options.stacked) {
      return css += ' nav-pills nav-stacked';
    }
    if (this.options.pills) {
      return css += ' nav-pills';
    }
    return css += ' nav-tabs';
  };

  NavList.prototype.childEvents = {
    'selected': 'onChildSelected'
  };

  NavList.prototype.onChildSelected = function(view) {
    this.trigger('nav:change', view);
    return this.trigger(view.model.get('trigger'));
  };

  return NavList;

})(Mn.CollectionView);

NavView = (function(superClass) {
  extend(NavView, superClass);

  function NavView() {
    this._getActiveNav = bind(this._getActiveNav, this);
    return NavView.__super__.constructor.apply(this, arguments);
  }

  NavView.prototype.template = require('./templates/nav');

  NavView.prototype.regions = {
    navRegion: '[data-region=nav]',
    contentRegion: '[data-region=content]'
  };

  NavView.prototype.behaviors = function() {
    if (this.navOptions.stateful) {
      return {
        ViewState: {
          key: this.navOptions.stateful
        }
      };
    }
    return {};
  };

  NavView.prototype.navItems = [
    {
      icon: 'fa-times',
      text: 'Default Nav',
      trigger: 'default'
    }
  ];

  NavView.prototype.navOptions = {};

  NavView.prototype.navEvents = {};

  NavView.prototype.initialize = function() {
    var trigger;
    this.navOptions = _.result(this, 'navOptions') || {};
    this.navItems = _.result(this, 'navItems');
    trigger = this._getActiveNav();
    if (!trigger) {
      return;
    }
    return _.map(this.navItems, function(item) {
      if (item.trigger === trigger) {
        return item.active = true;
      }
      return item.active = false;
    });
  };

  NavView.prototype.templateHelpers = function() {
    return {
      stacked: this.navOptions.stacked || null
    };
  };

  NavView.prototype._getActiveNav = function() {
    var ref, state;
    if (this.navOptions.stateful) {
      state = this.getState();
      if (state) {
        return state;
      }
    }
    return ((ref = _.findWhere(this.navItems, {
      "default": true
    })) != null ? ref.trigger : void 0) || null;
  };

  NavView.prototype._setActiveNav = function(navChildView) {
    this.activeNav = navChildView;
    if (!this.navOptions.stateful) {
      return;
    }
    return this.setState(navChildView.model.get('trigger'));
  };

  NavView.prototype.triggerActiveNav = function() {
    var ref;
    return (ref = this.activeNav) != null ? ref.trigger('selected') : void 0;
  };

  NavView.prototype.showNavView = function() {
    this.navCollection = new Backbone.Collection(this.navItems);
    this.navList = new NavList(_.extend(this.navOptions, {
      collection: this.navCollection
    }));
    this.navList.on('nav:change', (function(_this) {
      return function(navChildView) {
        return _this._setActiveNav(navChildView);
      };
    })(this));
    Mn.bindEntityEvents(this, this.navList, _.result(this, 'navEvents'));
    return this.navRegion.show(this.navList);
  };

  NavView.prototype.onRender = function() {
    return this.showNavView();
  };

  return NavView;

})(Mn.LayoutView);

module.exports = NavView;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL2Fla3Njby9naXRodWIvbWFnZWxsYW4vbm9kZV9tb2R1bGVzL2huX3ZpZXdzL2xpYi9uYXYvaW5kZXguY29mZmVlIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiL1VzZXJzL2Fla3Njby9naXRodWIvbWFnZWxsYW4vbm9kZV9tb2R1bGVzL2huX3ZpZXdzL2xpYi9uYXYvaW5kZXguY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLElBQUEsMEJBQUE7RUFBQTs7OztBQUFNOzs7Ozs7O3FCQUNKLE9BQUEsR0FBUzs7cUJBQ1QsU0FBQSxHQUFXOztxQkFDWCxRQUFBLEdBQVUsT0FBQSxDQUFRLHVCQUFSOztxQkFFVixTQUFBLEdBQ0U7SUFBQSxlQUFBLEVBQWlCLEVBQWpCOzs7cUJBRUYsU0FBQSxHQUFXLFNBQUE7QUFDVCxRQUFBO0lBQUEsR0FBQSxHQUFNO0lBQ04sSUFBb0IsSUFBQyxDQUFBLEtBQUssQ0FBQyxHQUFQLENBQVcsUUFBWCxDQUFwQjtNQUFBLEdBQUEsSUFBTyxVQUFQOztJQUNBLElBQXNCLElBQUMsQ0FBQSxLQUFLLENBQUMsR0FBUCxDQUFXLFVBQVgsQ0FBdEI7TUFBQSxHQUFBLElBQU8sWUFBUDs7QUFDQSxXQUFPO0VBSkU7O3FCQU1YLFFBQUEsR0FBVSxTQUFBO0lBQ1IsSUFBOEIsSUFBQyxDQUFBLEtBQUssQ0FBQyxHQUFQLENBQVcsUUFBWCxDQUE5QjthQUFBLElBQUMsQ0FBQSxhQUFELENBQWUsVUFBZixFQUFBOztFQURROztxQkFHVixPQUFBLEdBQVMsU0FBQyxDQUFEO0lBQ1AsSUFBVSxJQUFDLENBQUEsS0FBSyxDQUFDLEdBQVAsQ0FBVyxNQUFYLENBQVY7QUFBQSxhQUFBOztJQUNBLElBQVUsSUFBQyxDQUFBLEtBQUssQ0FBQyxHQUFQLENBQVcsVUFBWCxDQUFWO0FBQUEsYUFBQTs7SUFDQSxJQUFVLElBQUMsQ0FBQSxHQUFHLENBQUMsUUFBTCxDQUFjLFFBQWQsQ0FBVjtBQUFBLGFBQUE7OztNQUNBLENBQUMsQ0FBRSxjQUFILENBQUE7O0lBQ0EsSUFBQyxDQUFBLGFBQUQsQ0FBZSxVQUFmO1dBQ0EsSUFBQyxDQUFBLEdBQUcsQ0FBQyxRQUFMLENBQWMsUUFBZCxDQUF1QixDQUFDLFFBQXhCLENBQUEsQ0FBa0MsQ0FBQyxXQUFuQyxDQUErQyxRQUEvQztFQU5POzs7O0dBakJZLEVBQUUsQ0FBQzs7QUEyQnBCOzs7Ozs7O29CQUNKLE9BQUEsR0FBUzs7b0JBQ1QsU0FBQSxHQUFXOztvQkFFWCxTQUFBLEdBQVcsU0FBQTtBQUNULFFBQUE7SUFBQSxHQUFBLEdBQU07SUFDTixJQUEyQyxJQUFDLENBQUEsT0FBTyxDQUFDLE9BQXBEO0FBQUEsYUFBTyxHQUFBLElBQU8seUJBQWQ7O0lBQ0EsSUFBMkMsSUFBQyxDQUFBLE9BQU8sQ0FBQyxLQUFwRDtBQUFBLGFBQU8sR0FBQSxJQUFPLGFBQWQ7O0FBQ0EsV0FBTyxHQUFBLElBQU87RUFKTDs7b0JBTVgsV0FBQSxHQUNFO0lBQUEsVUFBQSxFQUFZLGlCQUFaOzs7b0JBRUYsZUFBQSxHQUFpQixTQUFDLElBQUQ7SUFDZixJQUFDLENBQUEsT0FBRCxDQUFTLFlBQVQsRUFBdUIsSUFBdkI7QUFDQSxXQUFPLElBQUMsQ0FBQSxPQUFELENBQVMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFYLENBQWUsU0FBZixDQUFUO0VBRlE7Ozs7R0FiRyxFQUFFLENBQUM7O0FBbUJuQjs7Ozs7Ozs7b0JBQ0osUUFBQSxHQUFVLE9BQUEsQ0FBUSxpQkFBUjs7b0JBRVYsT0FBQSxHQUNFO0lBQUEsU0FBQSxFQUFnQixtQkFBaEI7SUFDQSxhQUFBLEVBQWdCLHVCQURoQjs7O29CQUlGLFNBQUEsR0FBVyxTQUFBO0lBQ1QsSUFBdUQsSUFBQyxDQUFBLFVBQVUsQ0FBQyxRQUFuRTtBQUFBLGFBQU87UUFBRSxTQUFBLEVBQVc7VUFBRSxHQUFBLEVBQUssSUFBQyxDQUFBLFVBQVUsQ0FBQyxRQUFuQjtTQUFiO1FBQVA7O0FBQ0EsV0FBTztFQUZFOztvQkFLWCxRQUFBLEdBQVU7SUFBQztNQUFFLElBQUEsRUFBTSxVQUFSO01BQW9CLElBQUEsRUFBTSxhQUExQjtNQUF5QyxPQUFBLEVBQVMsU0FBbEQ7S0FBRDs7O29CQUlWLFVBQUEsR0FBWTs7b0JBR1osU0FBQSxHQUFXOztvQkFFWCxVQUFBLEdBQVksU0FBQTtBQUNWLFFBQUE7SUFBQSxJQUFDLENBQUEsVUFBRCxHQUFjLENBQUMsQ0FBQyxNQUFGLENBQVMsSUFBVCxFQUFZLFlBQVosQ0FBQSxJQUE2QjtJQUMzQyxJQUFDLENBQUEsUUFBRCxHQUFjLENBQUMsQ0FBQyxNQUFGLENBQVMsSUFBVCxFQUFZLFVBQVo7SUFHZCxPQUFBLEdBQVUsSUFBQyxDQUFBLGFBQUQsQ0FBQTtJQUNWLElBQUEsQ0FBYyxPQUFkO0FBQUEsYUFBQTs7V0FDQSxDQUFDLENBQUMsR0FBRixDQUFNLElBQUMsQ0FBQSxRQUFQLEVBQWlCLFNBQUMsSUFBRDtNQUNiLElBQTZCLElBQUksQ0FBQyxPQUFMLEtBQWdCLE9BQTdDO0FBQUEsZUFBTyxJQUFJLENBQUMsTUFBTCxHQUFjLEtBQXJCOztBQUNBLGFBQU8sSUFBSSxDQUFDLE1BQUwsR0FBYztJQUZSLENBQWpCO0VBUFU7O29CQVlaLGVBQUEsR0FBaUIsU0FBQTtBQUNmLFdBQU87TUFBRSxPQUFBLEVBQVMsSUFBQyxDQUFBLFVBQVUsQ0FBQyxPQUFaLElBQXVCLElBQWxDOztFQURROztvQkFJakIsYUFBQSxHQUFlLFNBQUE7QUFDYixRQUFBO0lBQUEsSUFBRyxJQUFDLENBQUEsVUFBVSxDQUFDLFFBQWY7TUFDRSxLQUFBLEdBQVEsSUFBQyxDQUFBLFFBQUQsQ0FBQTtNQUNSLElBQWdCLEtBQWhCO0FBQUEsZUFBTyxNQUFQO09BRkY7O0FBSUE7O3FCQUFnRCxDQUFFLGlCQUEzQyxJQUFzRDtFQUxoRDs7b0JBUWYsYUFBQSxHQUFlLFNBQUMsWUFBRDtJQUNiLElBQUMsQ0FBQSxTQUFELEdBQWE7SUFDYixJQUFBLENBQWMsSUFBQyxDQUFBLFVBQVUsQ0FBQyxRQUExQjtBQUFBLGFBQUE7O0FBQ0EsV0FBTyxJQUFDLENBQUEsUUFBRCxDQUFVLFlBQVksQ0FBQyxLQUFLLENBQUMsR0FBbkIsQ0FBdUIsU0FBdkIsQ0FBVjtFQUhNOztvQkFLZixnQkFBQSxHQUFrQixTQUFBO0FBQ2hCLFFBQUE7K0NBQVUsQ0FBRSxPQUFaLENBQW9CLFVBQXBCO0VBRGdCOztvQkFHbEIsV0FBQSxHQUFhLFNBQUE7SUFFWCxJQUFDLENBQUEsYUFBRCxHQUFpQixJQUFJLFFBQVEsQ0FBQyxVQUFiLENBQXdCLElBQUMsQ0FBQSxRQUF6QjtJQUdqQixJQUFDLENBQUEsT0FBRCxHQUFXLElBQUksT0FBSixDQUFhLENBQUMsQ0FBQyxNQUFGLENBQVMsSUFBQyxDQUFBLFVBQVYsRUFBc0I7TUFBRSxVQUFBLEVBQVksSUFBQyxDQUFBLGFBQWY7S0FBdEIsQ0FBYjtJQUNYLElBQUMsQ0FBQSxPQUFPLENBQUMsRUFBVCxDQUFZLFlBQVosRUFBMEIsQ0FBQSxTQUFBLEtBQUE7YUFBQSxTQUFDLFlBQUQ7ZUFBa0IsS0FBQyxDQUFBLGFBQUQsQ0FBZSxZQUFmO01BQWxCO0lBQUEsQ0FBQSxDQUFBLENBQUEsSUFBQSxDQUExQjtJQUNBLEVBQUUsQ0FBQyxnQkFBSCxDQUFxQixJQUFyQixFQUF3QixJQUFDLENBQUEsT0FBekIsRUFBa0MsQ0FBQyxDQUFDLE1BQUYsQ0FBUyxJQUFULEVBQVksV0FBWixDQUFsQztXQUNBLElBQUMsQ0FBQSxTQUFTLENBQUMsSUFBWCxDQUFnQixJQUFDLENBQUEsT0FBakI7RUFSVzs7b0JBVWIsUUFBQSxHQUFVLFNBQUE7V0FDUixJQUFDLENBQUEsV0FBRCxDQUFBO0VBRFE7Ozs7R0FoRVUsRUFBRSxDQUFDOztBQXFFekIsTUFBTSxDQUFDLE9BQVAsR0FBaUIifQ==

},{"./templates/nav":185,"./templates/nav_child":186}],185:[function(require,module,exports){
var jade = require("jade/runtime");

module.exports = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (span, stacked) {
buf.push("<div class=\"row\">");
if ( stacked)
{
buf.push("<div data-region=\"nav\"" + (jade.cls(["col-xs-" + (span) + ""], [true])) + "></div><div data-region=\"content\"" + (jade.cls(["col-xs-" + (12-span) + ""], [true])) + "></div>");
}
else
{
buf.push("<div class=\"col-xs-12\"><div class=\"row\"><div data-region=\"nav\" class=\"col-xs-12\"></div></div><div class=\"row m-t-1\"><div data-region=\"content\" class=\"col-xs-12\"></div></div></div>");
}
buf.push("</div>");}.call(this,"span" in locals_for_with?locals_for_with.span:typeof span!=="undefined"?span:undefined,"stacked" in locals_for_with?locals_for_with.stacked:typeof stacked!=="undefined"?stacked:undefined));;return buf.join("");
};
},{"jade/runtime":187}],186:[function(require,module,exports){
var jade = require("jade/runtime");

module.exports = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (dropdown, href, icon, linkCss, text, trigger, undefined) {
if ( !dropdown)
{
buf.push("<a" + (jade.attr("href", href, true, false)) + (jade.attr("data-trigger", trigger, true, false)) + (jade.cls(['nav-link','cursor-pointer',linkCss], [null,null,true])) + ">");
if ( icon)
{
buf.push("<i" + (jade.cls(['fa','fa-fw',icon], [null,null,true])) + "></i>&nbsp;");
}
buf.push((jade.escape(null == (jade_interp = text) ? "" : jade_interp)) + "</a>");
}
else
{
buf.push("<a data-toggle=\"dropdown\" class=\"nav-link cursor-pointer dropdown-toggle\">");
if ( icon)
{
buf.push("<i" + (jade.cls(['fa','fa-fw',icon], [null,null,true])) + "></i>&nbsp;");
}
buf.push((jade.escape(null == (jade_interp = text) ? "" : jade_interp)) + "</a><div class=\"dropdown-menu w-100\">");
// iterate dropdown
;(function(){
  var $$obj = dropdown;
  if ('number' == typeof $$obj.length) {

    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {
      var item = $$obj[$index];

buf.push("<a class=\"dropdown-item\">" + (jade.escape(null == (jade_interp = item.text) ? "" : jade_interp)) + "</a>");
    }

  } else {
    var $$l = 0;
    for (var $index in $$obj) {
      $$l++;      var item = $$obj[$index];

buf.push("<a class=\"dropdown-item\">" + (jade.escape(null == (jade_interp = item.text) ? "" : jade_interp)) + "</a>");
    }

  }
}).call(this);

buf.push("</div>");
}}.call(this,"dropdown" in locals_for_with?locals_for_with.dropdown:typeof dropdown!=="undefined"?dropdown:undefined,"href" in locals_for_with?locals_for_with.href:typeof href!=="undefined"?href:undefined,"icon" in locals_for_with?locals_for_with.icon:typeof icon!=="undefined"?icon:undefined,"linkCss" in locals_for_with?locals_for_with.linkCss:typeof linkCss!=="undefined"?linkCss:undefined,"text" in locals_for_with?locals_for_with.text:typeof text!=="undefined"?text:undefined,"trigger" in locals_for_with?locals_for_with.trigger:typeof trigger!=="undefined"?trigger:undefined,"undefined" in locals_for_with?locals_for_with.undefined:typeof undefined!=="undefined"?undefined:undefined));;return buf.join("");
};
},{"jade/runtime":187}],187:[function(require,module,exports){
(function (global){
(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.jade = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

/**
 * Merge two attribute objects giving precedence
 * to values in object `b`. Classes are special-cased
 * allowing for arrays and merging/joining appropriately
 * resulting in a string.
 *
 * @param {Object} a
 * @param {Object} b
 * @return {Object} a
 * @api private
 */

exports.merge = function merge(a, b) {
  if (arguments.length === 1) {
    var attrs = a[0];
    for (var i = 1; i < a.length; i++) {
      attrs = merge(attrs, a[i]);
    }
    return attrs;
  }
  var ac = a['class'];
  var bc = b['class'];

  if (ac || bc) {
    ac = ac || [];
    bc = bc || [];
    if (!Array.isArray(ac)) ac = [ac];
    if (!Array.isArray(bc)) bc = [bc];
    a['class'] = ac.concat(bc).filter(nulls);
  }

  for (var key in b) {
    if (key != 'class') {
      a[key] = b[key];
    }
  }

  return a;
};

/**
 * Filter null `val`s.
 *
 * @param {*} val
 * @return {Boolean}
 * @api private
 */

function nulls(val) {
  return val != null && val !== '';
}

/**
 * join array as classes.
 *
 * @param {*} val
 * @return {String}
 */
exports.joinClasses = joinClasses;
function joinClasses(val) {
  return (Array.isArray(val) ? val.map(joinClasses) :
    (val && typeof val === 'object') ? Object.keys(val).filter(function (key) { return val[key]; }) :
    [val]).filter(nulls).join(' ');
}

/**
 * Render the given classes.
 *
 * @param {Array} classes
 * @param {Array.<Boolean>} escaped
 * @return {String}
 */
exports.cls = function cls(classes, escaped) {
  var buf = [];
  for (var i = 0; i < classes.length; i++) {
    if (escaped && escaped[i]) {
      buf.push(exports.escape(joinClasses([classes[i]])));
    } else {
      buf.push(joinClasses(classes[i]));
    }
  }
  var text = joinClasses(buf);
  if (text.length) {
    return ' class="' + text + '"';
  } else {
    return '';
  }
};


exports.style = function (val) {
  if (val && typeof val === 'object') {
    return Object.keys(val).map(function (style) {
      return style + ':' + val[style];
    }).join(';');
  } else {
    return val;
  }
};
/**
 * Render the given attribute.
 *
 * @param {String} key
 * @param {String} val
 * @param {Boolean} escaped
 * @param {Boolean} terse
 * @return {String}
 */
exports.attr = function attr(key, val, escaped, terse) {
  if (key === 'style') {
    val = exports.style(val);
  }
  if ('boolean' == typeof val || null == val) {
    if (val) {
      return ' ' + (terse ? key : key + '="' + key + '"');
    } else {
      return '';
    }
  } else if (0 == key.indexOf('data') && 'string' != typeof val) {
    if (JSON.stringify(val).indexOf('&') !== -1) {
      console.warn('Since Jade 2.0.0, ampersands (`&`) in data attributes ' +
                   'will be escaped to `&amp;`');
    };
    if (val && typeof val.toISOString === 'function') {
      console.warn('Jade will eliminate the double quotes around dates in ' +
                   'ISO form after 2.0.0');
    }
    return ' ' + key + "='" + JSON.stringify(val).replace(/'/g, '&apos;') + "'";
  } else if (escaped) {
    if (val && typeof val.toISOString === 'function') {
      console.warn('Jade will stringify dates in ISO form after 2.0.0');
    }
    return ' ' + key + '="' + exports.escape(val) + '"';
  } else {
    if (val && typeof val.toISOString === 'function') {
      console.warn('Jade will stringify dates in ISO form after 2.0.0');
    }
    return ' ' + key + '="' + val + '"';
  }
};

/**
 * Render the given attributes object.
 *
 * @param {Object} obj
 * @param {Object} escaped
 * @return {String}
 */
exports.attrs = function attrs(obj, terse){
  var buf = [];

  var keys = Object.keys(obj);

  if (keys.length) {
    for (var i = 0; i < keys.length; ++i) {
      var key = keys[i]
        , val = obj[key];

      if ('class' == key) {
        if (val = joinClasses(val)) {
          buf.push(' ' + key + '="' + val + '"');
        }
      } else {
        buf.push(exports.attr(key, val, false, terse));
      }
    }
  }

  return buf.join('');
};

/**
 * Escape the given string of `html`.
 *
 * @param {String} html
 * @return {String}
 * @api private
 */

var jade_encode_html_rules = {
  '&': '&amp;',
  '<': '&lt;',
  '>': '&gt;',
  '"': '&quot;'
};
var jade_match_html = /[&<>"]/g;

function jade_encode_char(c) {
  return jade_encode_html_rules[c] || c;
}

exports.escape = jade_escape;
function jade_escape(html){
  var result = String(html).replace(jade_match_html, jade_encode_char);
  if (result === '' + html) return html;
  else return result;
};

/**
 * Re-throw the given `err` in context to the
 * the jade in `filename` at the given `lineno`.
 *
 * @param {Error} err
 * @param {String} filename
 * @param {String} lineno
 * @api private
 */

exports.rethrow = function rethrow(err, filename, lineno, str){
  if (!(err instanceof Error)) throw err;
  if ((typeof window != 'undefined' || !filename) && !str) {
    err.message += ' on line ' + lineno;
    throw err;
  }
  try {
    str = str || require('fs').readFileSync(filename, 'utf8')
  } catch (ex) {
    rethrow(err, null, lineno)
  }
  var context = 3
    , lines = str.split('\n')
    , start = Math.max(lineno - context, 0)
    , end = Math.min(lines.length, lineno + context);

  // Error context
  var context = lines.slice(start, end).map(function(line, i){
    var curr = i + start + 1;
    return (curr == lineno ? '  > ' : '    ')
      + curr
      + '| '
      + line;
  }).join('\n');

  // Alter exception message
  err.path = filename;
  err.message = (filename || 'Jade') + ':' + lineno
    + '\n' + context + '\n\n' + err.message;
  throw err;
};

exports.DebugItem = function DebugItem(lineno, filename) {
  this.lineno = lineno;
  this.filename = filename;
}

},{"fs":2}],2:[function(require,module,exports){

},{}]},{},[1])(1)
});
}).call(this,typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"fs":155}],188:[function(require,module,exports){
/*!
 * jQuery JavaScript Library v2.1.4
 * http://jquery.com/
 *
 * Includes Sizzle.js
 * http://sizzlejs.com/
 *
 * Copyright 2005, 2014 jQuery Foundation, Inc. and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2015-04-28T16:01Z
 */

(function( global, factory ) {

	if ( typeof module === "object" && typeof module.exports === "object" ) {
		// For CommonJS and CommonJS-like environments where a proper `window`
		// is present, execute the factory and get jQuery.
		// For environments that do not have a `window` with a `document`
		// (such as Node.js), expose a factory as module.exports.
		// This accentuates the need for the creation of a real `window`.
		// e.g. var jQuery = require("jquery")(window);
		// See ticket #14549 for more info.
		module.exports = global.document ?
			factory( global, true ) :
			function( w ) {
				if ( !w.document ) {
					throw new Error( "jQuery requires a window with a document" );
				}
				return factory( w );
			};
	} else {
		factory( global );
	}

// Pass this if window is not defined yet
}(typeof window !== "undefined" ? window : this, function( window, noGlobal ) {

// Support: Firefox 18+
// Can't be in strict mode, several libs including ASP.NET trace
// the stack via arguments.caller.callee and Firefox dies if
// you try to trace through "use strict" call chains. (#13335)
//

var arr = [];

var slice = arr.slice;

var concat = arr.concat;

var push = arr.push;

var indexOf = arr.indexOf;

var class2type = {};

var toString = class2type.toString;

var hasOwn = class2type.hasOwnProperty;

var support = {};



var
	// Use the correct document accordingly with window argument (sandbox)
	document = window.document,

	version = "2.1.4",

	// Define a local copy of jQuery
	jQuery = function( selector, context ) {
		// The jQuery object is actually just the init constructor 'enhanced'
		// Need init if jQuery is called (just allow error to be thrown if not included)
		return new jQuery.fn.init( selector, context );
	},

	// Support: Android<4.1
	// Make sure we trim BOM and NBSP
	rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,

	// Matches dashed string for camelizing
	rmsPrefix = /^-ms-/,
	rdashAlpha = /-([\da-z])/gi,

	// Used by jQuery.camelCase as callback to replace()
	fcamelCase = function( all, letter ) {
		return letter.toUpperCase();
	};

jQuery.fn = jQuery.prototype = {
	// The current version of jQuery being used
	jquery: version,

	constructor: jQuery,

	// Start with an empty selector
	selector: "",

	// The default length of a jQuery object is 0
	length: 0,

	toArray: function() {
		return slice.call( this );
	},

	// Get the Nth element in the matched element set OR
	// Get the whole matched element set as a clean array
	get: function( num ) {
		return num != null ?

			// Return just the one element from the set
			( num < 0 ? this[ num + this.length ] : this[ num ] ) :

			// Return all the elements in a clean array
			slice.call( this );
	},

	// Take an array of elements and push it onto the stack
	// (returning the new matched element set)
	pushStack: function( elems ) {

		// Build a new jQuery matched element set
		var ret = jQuery.merge( this.constructor(), elems );

		// Add the old object onto the stack (as a reference)
		ret.prevObject = this;
		ret.context = this.context;

		// Return the newly-formed element set
		return ret;
	},

	// Execute a callback for every element in the matched set.
	// (You can seed the arguments with an array of args, but this is
	// only used internally.)
	each: function( callback, args ) {
		return jQuery.each( this, callback, args );
	},

	map: function( callback ) {
		return this.pushStack( jQuery.map(this, function( elem, i ) {
			return callback.call( elem, i, elem );
		}));
	},

	slice: function() {
		return this.pushStack( slice.apply( this, arguments ) );
	},

	first: function() {
		return this.eq( 0 );
	},

	last: function() {
		return this.eq( -1 );
	},

	eq: function( i ) {
		var len = this.length,
			j = +i + ( i < 0 ? len : 0 );
		return this.pushStack( j >= 0 && j < len ? [ this[j] ] : [] );
	},

	end: function() {
		return this.prevObject || this.constructor(null);
	},

	// For internal use only.
	// Behaves like an Array's method, not like a jQuery method.
	push: push,
	sort: arr.sort,
	splice: arr.splice
};

jQuery.extend = jQuery.fn.extend = function() {
	var options, name, src, copy, copyIsArray, clone,
		target = arguments[0] || {},
		i = 1,
		length = arguments.length,
		deep = false;

	// Handle a deep copy situation
	if ( typeof target === "boolean" ) {
		deep = target;

		// Skip the boolean and the target
		target = arguments[ i ] || {};
		i++;
	}

	// Handle case when target is a string or something (possible in deep copy)
	if ( typeof target !== "object" && !jQuery.isFunction(target) ) {
		target = {};
	}

	// Extend jQuery itself if only one argument is passed
	if ( i === length ) {
		target = this;
		i--;
	}

	for ( ; i < length; i++ ) {
		// Only deal with non-null/undefined values
		if ( (options = arguments[ i ]) != null ) {
			// Extend the base object
			for ( name in options ) {
				src = target[ name ];
				copy = options[ name ];

				// Prevent never-ending loop
				if ( target === copy ) {
					continue;
				}

				// Recurse if we're merging plain objects or arrays
				if ( deep && copy && ( jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)) ) ) {
					if ( copyIsArray ) {
						copyIsArray = false;
						clone = src && jQuery.isArray(src) ? src : [];

					} else {
						clone = src && jQuery.isPlainObject(src) ? src : {};
					}

					// Never move original objects, clone them
					target[ name ] = jQuery.extend( deep, clone, copy );

				// Don't bring in undefined values
				} else if ( copy !== undefined ) {
					target[ name ] = copy;
				}
			}
		}
	}

	// Return the modified object
	return target;
};

jQuery.extend({
	// Unique for each copy of jQuery on the page
	expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),

	// Assume jQuery is ready without the ready module
	isReady: true,

	error: function( msg ) {
		throw new Error( msg );
	},

	noop: function() {},

	isFunction: function( obj ) {
		return jQuery.type(obj) === "function";
	},

	isArray: Array.isArray,

	isWindow: function( obj ) {
		return obj != null && obj === obj.window;
	},

	isNumeric: function( obj ) {
		// parseFloat NaNs numeric-cast false positives (null|true|false|"")
		// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
		// subtraction forces infinities to NaN
		// adding 1 corrects loss of precision from parseFloat (#15100)
		return !jQuery.isArray( obj ) && (obj - parseFloat( obj ) + 1) >= 0;
	},

	isPlainObject: function( obj ) {
		// Not plain objects:
		// - Any object or value whose internal [[Class]] property is not "[object Object]"
		// - DOM nodes
		// - window
		if ( jQuery.type( obj ) !== "object" || obj.nodeType || jQuery.isWindow( obj ) ) {
			return false;
		}

		if ( obj.constructor &&
				!hasOwn.call( obj.constructor.prototype, "isPrototypeOf" ) ) {
			return false;
		}

		// If the function hasn't returned already, we're confident that
		// |obj| is a plain object, created by {} or constructed with new Object
		return true;
	},

	isEmptyObject: function( obj ) {
		var name;
		for ( name in obj ) {
			return false;
		}
		return true;
	},

	type: function( obj ) {
		if ( obj == null ) {
			return obj + "";
		}
		// Support: Android<4.0, iOS<6 (functionish RegExp)
		return typeof obj === "object" || typeof obj === "function" ?
			class2type[ toString.call(obj) ] || "object" :
			typeof obj;
	},

	// Evaluates a script in a global context
	globalEval: function( code ) {
		var script,
			indirect = eval;

		code = jQuery.trim( code );

		if ( code ) {
			// If the code includes a valid, prologue position
			// strict mode pragma, execute code by injecting a
			// script tag into the document.
			if ( code.indexOf("use strict") === 1 ) {
				script = document.createElement("script");
				script.text = code;
				document.head.appendChild( script ).parentNode.removeChild( script );
			} else {
			// Otherwise, avoid the DOM node creation, insertion
			// and removal by using an indirect global eval
				indirect( code );
			}
		}
	},

	// Convert dashed to camelCase; used by the css and data modules
	// Support: IE9-11+
	// Microsoft forgot to hump their vendor prefix (#9572)
	camelCase: function( string ) {
		return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
	},

	nodeName: function( elem, name ) {
		return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
	},

	// args is for internal usage only
	each: function( obj, callback, args ) {
		var value,
			i = 0,
			length = obj.length,
			isArray = isArraylike( obj );

		if ( args ) {
			if ( isArray ) {
				for ( ; i < length; i++ ) {
					value = callback.apply( obj[ i ], args );

					if ( value === false ) {
						break;
					}
				}
			} else {
				for ( i in obj ) {
					value = callback.apply( obj[ i ], args );

					if ( value === false ) {
						break;
					}
				}
			}

		// A special, fast, case for the most common use of each
		} else {
			if ( isArray ) {
				for ( ; i < length; i++ ) {
					value = callback.call( obj[ i ], i, obj[ i ] );

					if ( value === false ) {
						break;
					}
				}
			} else {
				for ( i in obj ) {
					value = callback.call( obj[ i ], i, obj[ i ] );

					if ( value === false ) {
						break;
					}
				}
			}
		}

		return obj;
	},

	// Support: Android<4.1
	trim: function( text ) {
		return text == null ?
			"" :
			( text + "" ).replace( rtrim, "" );
	},

	// results is for internal usage only
	makeArray: function( arr, results ) {
		var ret = results || [];

		if ( arr != null ) {
			if ( isArraylike( Object(arr) ) ) {
				jQuery.merge( ret,
					typeof arr === "string" ?
					[ arr ] : arr
				);
			} else {
				push.call( ret, arr );
			}
		}

		return ret;
	},

	inArray: function( elem, arr, i ) {
		return arr == null ? -1 : indexOf.call( arr, elem, i );
	},

	merge: function( first, second ) {
		var len = +second.length,
			j = 0,
			i = first.length;

		for ( ; j < len; j++ ) {
			first[ i++ ] = second[ j ];
		}

		first.length = i;

		return first;
	},

	grep: function( elems, callback, invert ) {
		var callbackInverse,
			matches = [],
			i = 0,
			length = elems.length,
			callbackExpect = !invert;

		// Go through the array, only saving the items
		// that pass the validator function
		for ( ; i < length; i++ ) {
			callbackInverse = !callback( elems[ i ], i );
			if ( callbackInverse !== callbackExpect ) {
				matches.push( elems[ i ] );
			}
		}

		return matches;
	},

	// arg is for internal usage only
	map: function( elems, callback, arg ) {
		var value,
			i = 0,
			length = elems.length,
			isArray = isArraylike( elems ),
			ret = [];

		// Go through the array, translating each of the items to their new values
		if ( isArray ) {
			for ( ; i < length; i++ ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}

		// Go through every key on the object,
		} else {
			for ( i in elems ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}
		}

		// Flatten any nested arrays
		return concat.apply( [], ret );
	},

	// A global GUID counter for objects
	guid: 1,

	// Bind a function to a context, optionally partially applying any
	// arguments.
	proxy: function( fn, context ) {
		var tmp, args, proxy;

		if ( typeof context === "string" ) {
			tmp = fn[ context ];
			context = fn;
			fn = tmp;
		}

		// Quick check to determine if target is callable, in the spec
		// this throws a TypeError, but we will just return undefined.
		if ( !jQuery.isFunction( fn ) ) {
			return undefined;
		}

		// Simulated bind
		args = slice.call( arguments, 2 );
		proxy = function() {
			return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
		};

		// Set the guid of unique handler to the same of original handler, so it can be removed
		proxy.guid = fn.guid = fn.guid || jQuery.guid++;

		return proxy;
	},

	now: Date.now,

	// jQuery.support is not used in Core but other projects attach their
	// properties to it so it needs to exist.
	support: support
});

// Populate the class2type map
jQuery.each("Boolean Number String Function Array Date RegExp Object Error".split(" "), function(i, name) {
	class2type[ "[object " + name + "]" ] = name.toLowerCase();
});

function isArraylike( obj ) {

	// Support: iOS 8.2 (not reproducible in simulator)
	// `in` check used to prevent JIT error (gh-2145)
	// hasOwn isn't used here due to false negatives
	// regarding Nodelist length in IE
	var length = "length" in obj && obj.length,
		type = jQuery.type( obj );

	if ( type === "function" || jQuery.isWindow( obj ) ) {
		return false;
	}

	if ( obj.nodeType === 1 && length ) {
		return true;
	}

	return type === "array" || length === 0 ||
		typeof length === "number" && length > 0 && ( length - 1 ) in obj;
}
var Sizzle =
/*!
 * Sizzle CSS Selector Engine v2.2.0-pre
 * http://sizzlejs.com/
 *
 * Copyright 2008, 2014 jQuery Foundation, Inc. and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2014-12-16
 */
(function( window ) {

var i,
	support,
	Expr,
	getText,
	isXML,
	tokenize,
	compile,
	select,
	outermostContext,
	sortInput,
	hasDuplicate,

	// Local document vars
	setDocument,
	document,
	docElem,
	documentIsHTML,
	rbuggyQSA,
	rbuggyMatches,
	matches,
	contains,

	// Instance-specific data
	expando = "sizzle" + 1 * new Date(),
	preferredDoc = window.document,
	dirruns = 0,
	done = 0,
	classCache = createCache(),
	tokenCache = createCache(),
	compilerCache = createCache(),
	sortOrder = function( a, b ) {
		if ( a === b ) {
			hasDuplicate = true;
		}
		return 0;
	},

	// General-purpose constants
	MAX_NEGATIVE = 1 << 31,

	// Instance methods
	hasOwn = ({}).hasOwnProperty,
	arr = [],
	pop = arr.pop,
	push_native = arr.push,
	push = arr.push,
	slice = arr.slice,
	// Use a stripped-down indexOf as it's faster than native
	// http://jsperf.com/thor-indexof-vs-for/5
	indexOf = function( list, elem ) {
		var i = 0,
			len = list.length;
		for ( ; i < len; i++ ) {
			if ( list[i] === elem ) {
				return i;
			}
		}
		return -1;
	},

	booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",

	// Regular expressions

	// Whitespace characters http://www.w3.org/TR/css3-selectors/#whitespace
	whitespace = "[\\x20\\t\\r\\n\\f]",
	// http://www.w3.org/TR/css3-syntax/#characters
	characterEncoding = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",

	// Loosely modeled on CSS identifier characters
	// An unquoted value should be a CSS identifier http://www.w3.org/TR/css3-selectors/#attribute-selectors
	// Proper syntax: http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
	identifier = characterEncoding.replace( "w", "w#" ),

	// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
	attributes = "\\[" + whitespace + "*(" + characterEncoding + ")(?:" + whitespace +
		// Operator (capture 2)
		"*([*^$|!~]?=)" + whitespace +
		// "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
		"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace +
		"*\\]",

	pseudos = ":(" + characterEncoding + ")(?:\\((" +
		// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
		// 1. quoted (capture 3; capture 4 or capture 5)
		"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
		// 2. simple (capture 6)
		"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +
		// 3. anything else (capture 2)
		".*" +
		")\\)|)",

	// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
	rwhitespace = new RegExp( whitespace + "+", "g" ),
	rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),

	rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
	rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*" ),

	rattributeQuotes = new RegExp( "=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g" ),

	rpseudo = new RegExp( pseudos ),
	ridentifier = new RegExp( "^" + identifier + "$" ),

	matchExpr = {
		"ID": new RegExp( "^#(" + characterEncoding + ")" ),
		"CLASS": new RegExp( "^\\.(" + characterEncoding + ")" ),
		"TAG": new RegExp( "^(" + characterEncoding.replace( "w", "w*" ) + ")" ),
		"ATTR": new RegExp( "^" + attributes ),
		"PSEUDO": new RegExp( "^" + pseudos ),
		"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
			"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
			"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
		"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),
		// For use in libraries implementing .is()
		// We use this for POS matching in `select`
		"needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
			whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
	},

	rinputs = /^(?:input|select|textarea|button)$/i,
	rheader = /^h\d$/i,

	rnative = /^[^{]+\{\s*\[native \w/,

	// Easily-parseable/retrievable ID or TAG or CLASS selectors
	rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

	rsibling = /[+~]/,
	rescape = /'|\\/g,

	// CSS escapes http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
	runescape = new RegExp( "\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig" ),
	funescape = function( _, escaped, escapedWhitespace ) {
		var high = "0x" + escaped - 0x10000;
		// NaN means non-codepoint
		// Support: Firefox<24
		// Workaround erroneous numeric interpretation of +"0x"
		return high !== high || escapedWhitespace ?
			escaped :
			high < 0 ?
				// BMP codepoint
				String.fromCharCode( high + 0x10000 ) :
				// Supplemental Plane codepoint (surrogate pair)
				String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
	},

	// Used for iframes
	// See setDocument()
	// Removing the function wrapper causes a "Permission Denied"
	// error in IE
	unloadHandler = function() {
		setDocument();
	};

// Optimize for push.apply( _, NodeList )
try {
	push.apply(
		(arr = slice.call( preferredDoc.childNodes )),
		preferredDoc.childNodes
	);
	// Support: Android<4.0
	// Detect silently failing push.apply
	arr[ preferredDoc.childNodes.length ].nodeType;
} catch ( e ) {
	push = { apply: arr.length ?

		// Leverage slice if possible
		function( target, els ) {
			push_native.apply( target, slice.call(els) );
		} :

		// Support: IE<9
		// Otherwise append directly
		function( target, els ) {
			var j = target.length,
				i = 0;
			// Can't trust NodeList.length
			while ( (target[j++] = els[i++]) ) {}
			target.length = j - 1;
		}
	};
}

function Sizzle( selector, context, results, seed ) {
	var match, elem, m, nodeType,
		// QSA vars
		i, groups, old, nid, newContext, newSelector;

	if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {
		setDocument( context );
	}

	context = context || document;
	results = results || [];
	nodeType = context.nodeType;

	if ( typeof selector !== "string" || !selector ||
		nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {

		return results;
	}

	if ( !seed && documentIsHTML ) {

		// Try to shortcut find operations when possible (e.g., not under DocumentFragment)
		if ( nodeType !== 11 && (match = rquickExpr.exec( selector )) ) {
			// Speed-up: Sizzle("#ID")
			if ( (m = match[1]) ) {
				if ( nodeType === 9 ) {
					elem = context.getElementById( m );
					// Check parentNode to catch when Blackberry 4.6 returns
					// nodes that are no longer in the document (jQuery #6963)
					if ( elem && elem.parentNode ) {
						// Handle the case where IE, Opera, and Webkit return items
						// by name instead of ID
						if ( elem.id === m ) {
							results.push( elem );
							return results;
						}
					} else {
						return results;
					}
				} else {
					// Context is not a document
					if ( context.ownerDocument && (elem = context.ownerDocument.getElementById( m )) &&
						contains( context, elem ) && elem.id === m ) {
						results.push( elem );
						return results;
					}
				}

			// Speed-up: Sizzle("TAG")
			} else if ( match[2] ) {
				push.apply( results, context.getElementsByTagName( selector ) );
				return results;

			// Speed-up: Sizzle(".CLASS")
			} else if ( (m = match[3]) && support.getElementsByClassName ) {
				push.apply( results, context.getElementsByClassName( m ) );
				return results;
			}
		}

		// QSA path
		if ( support.qsa && (!rbuggyQSA || !rbuggyQSA.test( selector )) ) {
			nid = old = expando;
			newContext = context;
			newSelector = nodeType !== 1 && selector;

			// qSA works strangely on Element-rooted queries
			// We can work around this by specifying an extra ID on the root
			// and working up from there (Thanks to Andrew Dupont for the technique)
			// IE 8 doesn't work on object elements
			if ( nodeType === 1 && context.nodeName.toLowerCase() !== "object" ) {
				groups = tokenize( selector );

				if ( (old = context.getAttribute("id")) ) {
					nid = old.replace( rescape, "\\$&" );
				} else {
					context.setAttribute( "id", nid );
				}
				nid = "[id='" + nid + "'] ";

				i = groups.length;
				while ( i-- ) {
					groups[i] = nid + toSelector( groups[i] );
				}
				newContext = rsibling.test( selector ) && testContext( context.parentNode ) || context;
				newSelector = groups.join(",");
			}

			if ( newSelector ) {
				try {
					push.apply( results,
						newContext.querySelectorAll( newSelector )
					);
					return results;
				} catch(qsaError) {
				} finally {
					if ( !old ) {
						context.removeAttribute("id");
					}
				}
			}
		}
	}

	// All others
	return select( selector.replace( rtrim, "$1" ), context, results, seed );
}

/**
 * Create key-value caches of limited size
 * @returns {Function(string, Object)} Returns the Object data after storing it on itself with
 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
 *	deleting the oldest entry
 */
function createCache() {
	var keys = [];

	function cache( key, value ) {
		// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
		if ( keys.push( key + " " ) > Expr.cacheLength ) {
			// Only keep the most recent entries
			delete cache[ keys.shift() ];
		}
		return (cache[ key + " " ] = value);
	}
	return cache;
}

/**
 * Mark a function for special use by Sizzle
 * @param {Function} fn The function to mark
 */
function markFunction( fn ) {
	fn[ expando ] = true;
	return fn;
}

/**
 * Support testing using an element
 * @param {Function} fn Passed the created div and expects a boolean result
 */
function assert( fn ) {
	var div = document.createElement("div");

	try {
		return !!fn( div );
	} catch (e) {
		return false;
	} finally {
		// Remove from its parent by default
		if ( div.parentNode ) {
			div.parentNode.removeChild( div );
		}
		// release memory in IE
		div = null;
	}
}

/**
 * Adds the same handler for all of the specified attrs
 * @param {String} attrs Pipe-separated list of attributes
 * @param {Function} handler The method that will be applied
 */
function addHandle( attrs, handler ) {
	var arr = attrs.split("|"),
		i = attrs.length;

	while ( i-- ) {
		Expr.attrHandle[ arr[i] ] = handler;
	}
}

/**
 * Checks document order of two siblings
 * @param {Element} a
 * @param {Element} b
 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
 */
function siblingCheck( a, b ) {
	var cur = b && a,
		diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
			( ~b.sourceIndex || MAX_NEGATIVE ) -
			( ~a.sourceIndex || MAX_NEGATIVE );

	// Use IE sourceIndex if available on both nodes
	if ( diff ) {
		return diff;
	}

	// Check if b follows a
	if ( cur ) {
		while ( (cur = cur.nextSibling) ) {
			if ( cur === b ) {
				return -1;
			}
		}
	}

	return a ? 1 : -1;
}

/**
 * Returns a function to use in pseudos for input types
 * @param {String} type
 */
function createInputPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return name === "input" && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for buttons
 * @param {String} type
 */
function createButtonPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return (name === "input" || name === "button") && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for positionals
 * @param {Function} fn
 */
function createPositionalPseudo( fn ) {
	return markFunction(function( argument ) {
		argument = +argument;
		return markFunction(function( seed, matches ) {
			var j,
				matchIndexes = fn( [], seed.length, argument ),
				i = matchIndexes.length;

			// Match elements found at the specified indexes
			while ( i-- ) {
				if ( seed[ (j = matchIndexes[i]) ] ) {
					seed[j] = !(matches[j] = seed[j]);
				}
			}
		});
	});
}

/**
 * Checks a node for validity as a Sizzle context
 * @param {Element|Object=} context
 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
 */
function testContext( context ) {
	return context && typeof context.getElementsByTagName !== "undefined" && context;
}

// Expose support vars for convenience
support = Sizzle.support = {};

/**
 * Detects XML nodes
 * @param {Element|Object} elem An element or a document
 * @returns {Boolean} True iff elem is a non-HTML XML node
 */
isXML = Sizzle.isXML = function( elem ) {
	// documentElement is verified for cases where it doesn't yet exist
	// (such as loading iframes in IE - #4833)
	var documentElement = elem && (elem.ownerDocument || elem).documentElement;
	return documentElement ? documentElement.nodeName !== "HTML" : false;
};

/**
 * Sets document-related variables once based on the current document
 * @param {Element|Object} [doc] An element or document object to use to set the document
 * @returns {Object} Returns the current document
 */
setDocument = Sizzle.setDocument = function( node ) {
	var hasCompare, parent,
		doc = node ? node.ownerDocument || node : preferredDoc;

	// If no document and documentElement is available, return
	if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {
		return document;
	}

	// Set our document
	document = doc;
	docElem = doc.documentElement;
	parent = doc.defaultView;

	// Support: IE>8
	// If iframe document is assigned to "document" variable and if iframe has been reloaded,
	// IE will throw "permission denied" error when accessing "document" variable, see jQuery #13936
	// IE6-8 do not support the defaultView property so parent will be undefined
	if ( parent && parent !== parent.top ) {
		// IE11 does not have attachEvent, so all must suffer
		if ( parent.addEventListener ) {
			parent.addEventListener( "unload", unloadHandler, false );
		} else if ( parent.attachEvent ) {
			parent.attachEvent( "onunload", unloadHandler );
		}
	}

	/* Support tests
	---------------------------------------------------------------------- */
	documentIsHTML = !isXML( doc );

	/* Attributes
	---------------------------------------------------------------------- */

	// Support: IE<8
	// Verify that getAttribute really returns attributes and not properties
	// (excepting IE8 booleans)
	support.attributes = assert(function( div ) {
		div.className = "i";
		return !div.getAttribute("className");
	});

	/* getElement(s)By*
	---------------------------------------------------------------------- */

	// Check if getElementsByTagName("*") returns only elements
	support.getElementsByTagName = assert(function( div ) {
		div.appendChild( doc.createComment("") );
		return !div.getElementsByTagName("*").length;
	});

	// Support: IE<9
	support.getElementsByClassName = rnative.test( doc.getElementsByClassName );

	// Support: IE<10
	// Check if getElementById returns elements by name
	// The broken getElementById methods don't pick up programatically-set names,
	// so use a roundabout getElementsByName test
	support.getById = assert(function( div ) {
		docElem.appendChild( div ).id = expando;
		return !doc.getElementsByName || !doc.getElementsByName( expando ).length;
	});

	// ID find and filter
	if ( support.getById ) {
		Expr.find["ID"] = function( id, context ) {
			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
				var m = context.getElementById( id );
				// Check parentNode to catch when Blackberry 4.6 returns
				// nodes that are no longer in the document #6963
				return m && m.parentNode ? [ m ] : [];
			}
		};
		Expr.filter["ID"] = function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				return elem.getAttribute("id") === attrId;
			};
		};
	} else {
		// Support: IE6/7
		// getElementById is not reliable as a find shortcut
		delete Expr.find["ID"];

		Expr.filter["ID"] =  function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				var node = typeof elem.getAttributeNode !== "undefined" && elem.getAttributeNode("id");
				return node && node.value === attrId;
			};
		};
	}

	// Tag
	Expr.find["TAG"] = support.getElementsByTagName ?
		function( tag, context ) {
			if ( typeof context.getElementsByTagName !== "undefined" ) {
				return context.getElementsByTagName( tag );

			// DocumentFragment nodes don't have gEBTN
			} else if ( support.qsa ) {
				return context.querySelectorAll( tag );
			}
		} :

		function( tag, context ) {
			var elem,
				tmp = [],
				i = 0,
				// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
				results = context.getElementsByTagName( tag );

			// Filter out possible comments
			if ( tag === "*" ) {
				while ( (elem = results[i++]) ) {
					if ( elem.nodeType === 1 ) {
						tmp.push( elem );
					}
				}

				return tmp;
			}
			return results;
		};

	// Class
	Expr.find["CLASS"] = support.getElementsByClassName && function( className, context ) {
		if ( documentIsHTML ) {
			return context.getElementsByClassName( className );
		}
	};

	/* QSA/matchesSelector
	---------------------------------------------------------------------- */

	// QSA and matchesSelector support

	// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
	rbuggyMatches = [];

	// qSa(:focus) reports false when true (Chrome 21)
	// We allow this because of a bug in IE8/9 that throws an error
	// whenever `document.activeElement` is accessed on an iframe
	// So, we allow :focus to pass through QSA all the time to avoid the IE error
	// See http://bugs.jquery.com/ticket/13378
	rbuggyQSA = [];

	if ( (support.qsa = rnative.test( doc.querySelectorAll )) ) {
		// Build QSA regex
		// Regex strategy adopted from Diego Perini
		assert(function( div ) {
			// Select is set to empty string on purpose
			// This is to test IE's treatment of not explicitly
			// setting a boolean content attribute,
			// since its presence should be enough
			// http://bugs.jquery.com/ticket/12359
			docElem.appendChild( div ).innerHTML = "<a id='" + expando + "'></a>" +
				"<select id='" + expando + "-\f]' msallowcapture=''>" +
				"<option selected=''></option></select>";

			// Support: IE8, Opera 11-12.16
			// Nothing should be selected when empty strings follow ^= or $= or *=
			// The test attribute must be unknown in Opera but "safe" for WinRT
			// http://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
			if ( div.querySelectorAll("[msallowcapture^='']").length ) {
				rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
			}

			// Support: IE8
			// Boolean attributes and "value" are not treated correctly
			if ( !div.querySelectorAll("[selected]").length ) {
				rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
			}

			// Support: Chrome<29, Android<4.2+, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.7+
			if ( !div.querySelectorAll( "[id~=" + expando + "-]" ).length ) {
				rbuggyQSA.push("~=");
			}

			// Webkit/Opera - :checked should return selected option elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			// IE8 throws error here and will not see later tests
			if ( !div.querySelectorAll(":checked").length ) {
				rbuggyQSA.push(":checked");
			}

			// Support: Safari 8+, iOS 8+
			// https://bugs.webkit.org/show_bug.cgi?id=136851
			// In-page `selector#id sibing-combinator selector` fails
			if ( !div.querySelectorAll( "a#" + expando + "+*" ).length ) {
				rbuggyQSA.push(".#.+[+~]");
			}
		});

		assert(function( div ) {
			// Support: Windows 8 Native Apps
			// The type and name attributes are restricted during .innerHTML assignment
			var input = doc.createElement("input");
			input.setAttribute( "type", "hidden" );
			div.appendChild( input ).setAttribute( "name", "D" );

			// Support: IE8
			// Enforce case-sensitivity of name attribute
			if ( div.querySelectorAll("[name=d]").length ) {
				rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );
			}

			// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
			// IE8 throws error here and will not see later tests
			if ( !div.querySelectorAll(":enabled").length ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Opera 10-11 does not throw on post-comma invalid pseudos
			div.querySelectorAll("*,:x");
			rbuggyQSA.push(",.*:");
		});
	}

	if ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||
		docElem.webkitMatchesSelector ||
		docElem.mozMatchesSelector ||
		docElem.oMatchesSelector ||
		docElem.msMatchesSelector) )) ) {

		assert(function( div ) {
			// Check to see if it's possible to do matchesSelector
			// on a disconnected node (IE 9)
			support.disconnectedMatch = matches.call( div, "div" );

			// This should fail with an exception
			// Gecko does not error, returns false instead
			matches.call( div, "[s!='']:x" );
			rbuggyMatches.push( "!=", pseudos );
		});
	}

	rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join("|") );
	rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join("|") );

	/* Contains
	---------------------------------------------------------------------- */
	hasCompare = rnative.test( docElem.compareDocumentPosition );

	// Element contains another
	// Purposefully does not implement inclusive descendent
	// As in, an element does not contain itself
	contains = hasCompare || rnative.test( docElem.contains ) ?
		function( a, b ) {
			var adown = a.nodeType === 9 ? a.documentElement : a,
				bup = b && b.parentNode;
			return a === bup || !!( bup && bup.nodeType === 1 && (
				adown.contains ?
					adown.contains( bup ) :
					a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
			));
		} :
		function( a, b ) {
			if ( b ) {
				while ( (b = b.parentNode) ) {
					if ( b === a ) {
						return true;
					}
				}
			}
			return false;
		};

	/* Sorting
	---------------------------------------------------------------------- */

	// Document order sorting
	sortOrder = hasCompare ?
	function( a, b ) {

		// Flag for duplicate removal
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		// Sort on method existence if only one input has compareDocumentPosition
		var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
		if ( compare ) {
			return compare;
		}

		// Calculate position if both inputs belong to the same document
		compare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?
			a.compareDocumentPosition( b ) :

			// Otherwise we know they are disconnected
			1;

		// Disconnected nodes
		if ( compare & 1 ||
			(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {

			// Choose the first element that is related to our preferred document
			if ( a === doc || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {
				return -1;
			}
			if ( b === doc || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {
				return 1;
			}

			// Maintain original order
			return sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;
		}

		return compare & 4 ? -1 : 1;
	} :
	function( a, b ) {
		// Exit early if the nodes are identical
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		var cur,
			i = 0,
			aup = a.parentNode,
			bup = b.parentNode,
			ap = [ a ],
			bp = [ b ];

		// Parentless nodes are either documents or disconnected
		if ( !aup || !bup ) {
			return a === doc ? -1 :
				b === doc ? 1 :
				aup ? -1 :
				bup ? 1 :
				sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;

		// If the nodes are siblings, we can do a quick check
		} else if ( aup === bup ) {
			return siblingCheck( a, b );
		}

		// Otherwise we need full lists of their ancestors for comparison
		cur = a;
		while ( (cur = cur.parentNode) ) {
			ap.unshift( cur );
		}
		cur = b;
		while ( (cur = cur.parentNode) ) {
			bp.unshift( cur );
		}

		// Walk down the tree looking for a discrepancy
		while ( ap[i] === bp[i] ) {
			i++;
		}

		return i ?
			// Do a sibling check if the nodes have a common ancestor
			siblingCheck( ap[i], bp[i] ) :

			// Otherwise nodes in our document sort first
			ap[i] === preferredDoc ? -1 :
			bp[i] === preferredDoc ? 1 :
			0;
	};

	return doc;
};

Sizzle.matches = function( expr, elements ) {
	return Sizzle( expr, null, null, elements );
};

Sizzle.matchesSelector = function( elem, expr ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	// Make sure that attribute selectors are quoted
	expr = expr.replace( rattributeQuotes, "='$1']" );

	if ( support.matchesSelector && documentIsHTML &&
		( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
		( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {

		try {
			var ret = matches.call( elem, expr );

			// IE 9's matchesSelector returns false on disconnected nodes
			if ( ret || support.disconnectedMatch ||
					// As well, disconnected nodes are said to be in a document
					// fragment in IE 9
					elem.document && elem.document.nodeType !== 11 ) {
				return ret;
			}
		} catch (e) {}
	}

	return Sizzle( expr, document, null, [ elem ] ).length > 0;
};

Sizzle.contains = function( context, elem ) {
	// Set document vars if needed
	if ( ( context.ownerDocument || context ) !== document ) {
		setDocument( context );
	}
	return contains( context, elem );
};

Sizzle.attr = function( elem, name ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	var fn = Expr.attrHandle[ name.toLowerCase() ],
		// Don't get fooled by Object.prototype properties (jQuery #13807)
		val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
			fn( elem, name, !documentIsHTML ) :
			undefined;

	return val !== undefined ?
		val :
		support.attributes || !documentIsHTML ?
			elem.getAttribute( name ) :
			(val = elem.getAttributeNode(name)) && val.specified ?
				val.value :
				null;
};

Sizzle.error = function( msg ) {
	throw new Error( "Syntax error, unrecognized expression: " + msg );
};

/**
 * Document sorting and removing duplicates
 * @param {ArrayLike} results
 */
Sizzle.uniqueSort = function( results ) {
	var elem,
		duplicates = [],
		j = 0,
		i = 0;

	// Unless we *know* we can detect duplicates, assume their presence
	hasDuplicate = !support.detectDuplicates;
	sortInput = !support.sortStable && results.slice( 0 );
	results.sort( sortOrder );

	if ( hasDuplicate ) {
		while ( (elem = results[i++]) ) {
			if ( elem === results[ i ] ) {
				j = duplicates.push( i );
			}
		}
		while ( j-- ) {
			results.splice( duplicates[ j ], 1 );
		}
	}

	// Clear input after sorting to release objects
	// See https://github.com/jquery/sizzle/pull/225
	sortInput = null;

	return results;
};

/**
 * Utility function for retrieving the text value of an array of DOM nodes
 * @param {Array|Element} elem
 */
getText = Sizzle.getText = function( elem ) {
	var node,
		ret = "",
		i = 0,
		nodeType = elem.nodeType;

	if ( !nodeType ) {
		// If no nodeType, this is expected to be an array
		while ( (node = elem[i++]) ) {
			// Do not traverse comment nodes
			ret += getText( node );
		}
	} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
		// Use textContent for elements
		// innerText usage removed for consistency of new lines (jQuery #11153)
		if ( typeof elem.textContent === "string" ) {
			return elem.textContent;
		} else {
			// Traverse its children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				ret += getText( elem );
			}
		}
	} else if ( nodeType === 3 || nodeType === 4 ) {
		return elem.nodeValue;
	}
	// Do not include comment or processing instruction nodes

	return ret;
};

Expr = Sizzle.selectors = {

	// Can be adjusted by the user
	cacheLength: 50,

	createPseudo: markFunction,

	match: matchExpr,

	attrHandle: {},

	find: {},

	relative: {
		">": { dir: "parentNode", first: true },
		" ": { dir: "parentNode" },
		"+": { dir: "previousSibling", first: true },
		"~": { dir: "previousSibling" }
	},

	preFilter: {
		"ATTR": function( match ) {
			match[1] = match[1].replace( runescape, funescape );

			// Move the given value to match[3] whether quoted or unquoted
			match[3] = ( match[3] || match[4] || match[5] || "" ).replace( runescape, funescape );

			if ( match[2] === "~=" ) {
				match[3] = " " + match[3] + " ";
			}

			return match.slice( 0, 4 );
		},

		"CHILD": function( match ) {
			/* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 what (child|of-type)
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				4 xn-component of xn+y argument ([+-]?\d*n|)
				5 sign of xn-component
				6 x of xn-component
				7 sign of y-component
				8 y of y-component
			*/
			match[1] = match[1].toLowerCase();

			if ( match[1].slice( 0, 3 ) === "nth" ) {
				// nth-* requires argument
				if ( !match[3] ) {
					Sizzle.error( match[0] );
				}

				// numeric x and y parameters for Expr.filter.CHILD
				// remember that false/true cast respectively to 0/1
				match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );
				match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );

			// other types prohibit arguments
			} else if ( match[3] ) {
				Sizzle.error( match[0] );
			}

			return match;
		},

		"PSEUDO": function( match ) {
			var excess,
				unquoted = !match[6] && match[2];

			if ( matchExpr["CHILD"].test( match[0] ) ) {
				return null;
			}

			// Accept quoted arguments as-is
			if ( match[3] ) {
				match[2] = match[4] || match[5] || "";

			// Strip excess characters from unquoted arguments
			} else if ( unquoted && rpseudo.test( unquoted ) &&
				// Get excess from tokenize (recursively)
				(excess = tokenize( unquoted, true )) &&
				// advance to the next closing parenthesis
				(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {

				// excess is a negative index
				match[0] = match[0].slice( 0, excess );
				match[2] = unquoted.slice( 0, excess );
			}

			// Return only captures needed by the pseudo filter method (type and argument)
			return match.slice( 0, 3 );
		}
	},

	filter: {

		"TAG": function( nodeNameSelector ) {
			var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
			return nodeNameSelector === "*" ?
				function() { return true; } :
				function( elem ) {
					return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
				};
		},

		"CLASS": function( className ) {
			var pattern = classCache[ className + " " ];

			return pattern ||
				(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
				classCache( className, function( elem ) {
					return pattern.test( typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "" );
				});
		},

		"ATTR": function( name, operator, check ) {
			return function( elem ) {
				var result = Sizzle.attr( elem, name );

				if ( result == null ) {
					return operator === "!=";
				}
				if ( !operator ) {
					return true;
				}

				result += "";

				return operator === "=" ? result === check :
					operator === "!=" ? result !== check :
					operator === "^=" ? check && result.indexOf( check ) === 0 :
					operator === "*=" ? check && result.indexOf( check ) > -1 :
					operator === "$=" ? check && result.slice( -check.length ) === check :
					operator === "~=" ? ( " " + result.replace( rwhitespace, " " ) + " " ).indexOf( check ) > -1 :
					operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
					false;
			};
		},

		"CHILD": function( type, what, argument, first, last ) {
			var simple = type.slice( 0, 3 ) !== "nth",
				forward = type.slice( -4 ) !== "last",
				ofType = what === "of-type";

			return first === 1 && last === 0 ?

				// Shortcut for :nth-*(n)
				function( elem ) {
					return !!elem.parentNode;
				} :

				function( elem, context, xml ) {
					var cache, outerCache, node, diff, nodeIndex, start,
						dir = simple !== forward ? "nextSibling" : "previousSibling",
						parent = elem.parentNode,
						name = ofType && elem.nodeName.toLowerCase(),
						useCache = !xml && !ofType;

					if ( parent ) {

						// :(first|last|only)-(child|of-type)
						if ( simple ) {
							while ( dir ) {
								node = elem;
								while ( (node = node[ dir ]) ) {
									if ( ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1 ) {
										return false;
									}
								}
								// Reverse direction for :only-* (if we haven't yet done so)
								start = dir = type === "only" && !start && "nextSibling";
							}
							return true;
						}

						start = [ forward ? parent.firstChild : parent.lastChild ];

						// non-xml :nth-child(...) stores cache data on `parent`
						if ( forward && useCache ) {
							// Seek `elem` from a previously-cached index
							outerCache = parent[ expando ] || (parent[ expando ] = {});
							cache = outerCache[ type ] || [];
							nodeIndex = cache[0] === dirruns && cache[1];
							diff = cache[0] === dirruns && cache[2];
							node = nodeIndex && parent.childNodes[ nodeIndex ];

							while ( (node = ++nodeIndex && node && node[ dir ] ||

								// Fallback to seeking `elem` from the start
								(diff = nodeIndex = 0) || start.pop()) ) {

								// When found, cache indexes on `parent` and break
								if ( node.nodeType === 1 && ++diff && node === elem ) {
									outerCache[ type ] = [ dirruns, nodeIndex, diff ];
									break;
								}
							}

						// Use previously-cached element index if available
						} else if ( useCache && (cache = (elem[ expando ] || (elem[ expando ] = {}))[ type ]) && cache[0] === dirruns ) {
							diff = cache[1];

						// xml :nth-child(...) or :nth-last-child(...) or :nth(-last)?-of-type(...)
						} else {
							// Use the same loop as above to seek `elem` from the start
							while ( (node = ++nodeIndex && node && node[ dir ] ||
								(diff = nodeIndex = 0) || start.pop()) ) {

								if ( ( ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1 ) && ++diff ) {
									// Cache the index of each encountered element
									if ( useCache ) {
										(node[ expando ] || (node[ expando ] = {}))[ type ] = [ dirruns, diff ];
									}

									if ( node === elem ) {
										break;
									}
								}
							}
						}

						// Incorporate the offset, then check against cycle size
						diff -= last;
						return diff === first || ( diff % first === 0 && diff / first >= 0 );
					}
				};
		},

		"PSEUDO": function( pseudo, argument ) {
			// pseudo-class names are case-insensitive
			// http://www.w3.org/TR/selectors/#pseudo-classes
			// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
			// Remember that setFilters inherits from pseudos
			var args,
				fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
					Sizzle.error( "unsupported pseudo: " + pseudo );

			// The user may use createPseudo to indicate that
			// arguments are needed to create the filter function
			// just as Sizzle does
			if ( fn[ expando ] ) {
				return fn( argument );
			}

			// But maintain support for old signatures
			if ( fn.length > 1 ) {
				args = [ pseudo, pseudo, "", argument ];
				return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
					markFunction(function( seed, matches ) {
						var idx,
							matched = fn( seed, argument ),
							i = matched.length;
						while ( i-- ) {
							idx = indexOf( seed, matched[i] );
							seed[ idx ] = !( matches[ idx ] = matched[i] );
						}
					}) :
					function( elem ) {
						return fn( elem, 0, args );
					};
			}

			return fn;
		}
	},

	pseudos: {
		// Potentially complex pseudos
		"not": markFunction(function( selector ) {
			// Trim the selector passed to compile
			// to avoid treating leading and trailing
			// spaces as combinators
			var input = [],
				results = [],
				matcher = compile( selector.replace( rtrim, "$1" ) );

			return matcher[ expando ] ?
				markFunction(function( seed, matches, context, xml ) {
					var elem,
						unmatched = matcher( seed, null, xml, [] ),
						i = seed.length;

					// Match elements unmatched by `matcher`
					while ( i-- ) {
						if ( (elem = unmatched[i]) ) {
							seed[i] = !(matches[i] = elem);
						}
					}
				}) :
				function( elem, context, xml ) {
					input[0] = elem;
					matcher( input, null, xml, results );
					// Don't keep the element (issue #299)
					input[0] = null;
					return !results.pop();
				};
		}),

		"has": markFunction(function( selector ) {
			return function( elem ) {
				return Sizzle( selector, elem ).length > 0;
			};
		}),

		"contains": markFunction(function( text ) {
			text = text.replace( runescape, funescape );
			return function( elem ) {
				return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;
			};
		}),

		// "Whether an element is represented by a :lang() selector
		// is based solely on the element's language value
		// being equal to the identifier C,
		// or beginning with the identifier C immediately followed by "-".
		// The matching of C against the element's language value is performed case-insensitively.
		// The identifier C does not have to be a valid language name."
		// http://www.w3.org/TR/selectors/#lang-pseudo
		"lang": markFunction( function( lang ) {
			// lang value must be a valid identifier
			if ( !ridentifier.test(lang || "") ) {
				Sizzle.error( "unsupported lang: " + lang );
			}
			lang = lang.replace( runescape, funescape ).toLowerCase();
			return function( elem ) {
				var elemLang;
				do {
					if ( (elemLang = documentIsHTML ?
						elem.lang :
						elem.getAttribute("xml:lang") || elem.getAttribute("lang")) ) {

						elemLang = elemLang.toLowerCase();
						return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
					}
				} while ( (elem = elem.parentNode) && elem.nodeType === 1 );
				return false;
			};
		}),

		// Miscellaneous
		"target": function( elem ) {
			var hash = window.location && window.location.hash;
			return hash && hash.slice( 1 ) === elem.id;
		},

		"root": function( elem ) {
			return elem === docElem;
		},

		"focus": function( elem ) {
			return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
		},

		// Boolean properties
		"enabled": function( elem ) {
			return elem.disabled === false;
		},

		"disabled": function( elem ) {
			return elem.disabled === true;
		},

		"checked": function( elem ) {
			// In CSS3, :checked should return both checked and selected elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			var nodeName = elem.nodeName.toLowerCase();
			return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
		},

		"selected": function( elem ) {
			// Accessing this property makes selected-by-default
			// options in Safari work properly
			if ( elem.parentNode ) {
				elem.parentNode.selectedIndex;
			}

			return elem.selected === true;
		},

		// Contents
		"empty": function( elem ) {
			// http://www.w3.org/TR/selectors/#empty-pseudo
			// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
			//   but not by others (comment: 8; processing instruction: 7; etc.)
			// nodeType < 6 works because attributes (2) do not appear as children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				if ( elem.nodeType < 6 ) {
					return false;
				}
			}
			return true;
		},

		"parent": function( elem ) {
			return !Expr.pseudos["empty"]( elem );
		},

		// Element/input types
		"header": function( elem ) {
			return rheader.test( elem.nodeName );
		},

		"input": function( elem ) {
			return rinputs.test( elem.nodeName );
		},

		"button": function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === "button" || name === "button";
		},

		"text": function( elem ) {
			var attr;
			return elem.nodeName.toLowerCase() === "input" &&
				elem.type === "text" &&

				// Support: IE<8
				// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
				( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text" );
		},

		// Position-in-collection
		"first": createPositionalPseudo(function() {
			return [ 0 ];
		}),

		"last": createPositionalPseudo(function( matchIndexes, length ) {
			return [ length - 1 ];
		}),

		"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
			return [ argument < 0 ? argument + length : argument ];
		}),

		"even": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 0;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"odd": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 1;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; --i >= 0; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; ++i < length; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		})
	}
};

Expr.pseudos["nth"] = Expr.pseudos["eq"];

// Add button/input type pseudos
for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
	Expr.pseudos[ i ] = createInputPseudo( i );
}
for ( i in { submit: true, reset: true } ) {
	Expr.pseudos[ i ] = createButtonPseudo( i );
}

// Easy API for creating new setFilters
function setFilters() {}
setFilters.prototype = Expr.filters = Expr.pseudos;
Expr.setFilters = new setFilters();

tokenize = Sizzle.tokenize = function( selector, parseOnly ) {
	var matched, match, tokens, type,
		soFar, groups, preFilters,
		cached = tokenCache[ selector + " " ];

	if ( cached ) {
		return parseOnly ? 0 : cached.slice( 0 );
	}

	soFar = selector;
	groups = [];
	preFilters = Expr.preFilter;

	while ( soFar ) {

		// Comma and first run
		if ( !matched || (match = rcomma.exec( soFar )) ) {
			if ( match ) {
				// Don't consume trailing commas as valid
				soFar = soFar.slice( match[0].length ) || soFar;
			}
			groups.push( (tokens = []) );
		}

		matched = false;

		// Combinators
		if ( (match = rcombinators.exec( soFar )) ) {
			matched = match.shift();
			tokens.push({
				value: matched,
				// Cast descendant combinators to space
				type: match[0].replace( rtrim, " " )
			});
			soFar = soFar.slice( matched.length );
		}

		// Filters
		for ( type in Expr.filter ) {
			if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
				(match = preFilters[ type ]( match ))) ) {
				matched = match.shift();
				tokens.push({
					value: matched,
					type: type,
					matches: match
				});
				soFar = soFar.slice( matched.length );
			}
		}

		if ( !matched ) {
			break;
		}
	}

	// Return the length of the invalid excess
	// if we're just parsing
	// Otherwise, throw an error or return tokens
	return parseOnly ?
		soFar.length :
		soFar ?
			Sizzle.error( selector ) :
			// Cache the tokens
			tokenCache( selector, groups ).slice( 0 );
};

function toSelector( tokens ) {
	var i = 0,
		len = tokens.length,
		selector = "";
	for ( ; i < len; i++ ) {
		selector += tokens[i].value;
	}
	return selector;
}

function addCombinator( matcher, combinator, base ) {
	var dir = combinator.dir,
		checkNonElements = base && dir === "parentNode",
		doneName = done++;

	return combinator.first ?
		// Check against closest ancestor/preceding element
		function( elem, context, xml ) {
			while ( (elem = elem[ dir ]) ) {
				if ( elem.nodeType === 1 || checkNonElements ) {
					return matcher( elem, context, xml );
				}
			}
		} :

		// Check against all ancestor/preceding elements
		function( elem, context, xml ) {
			var oldCache, outerCache,
				newCache = [ dirruns, doneName ];

			// We can't set arbitrary data on XML nodes, so they don't benefit from dir caching
			if ( xml ) {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						if ( matcher( elem, context, xml ) ) {
							return true;
						}
					}
				}
			} else {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						outerCache = elem[ expando ] || (elem[ expando ] = {});
						if ( (oldCache = outerCache[ dir ]) &&
							oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {

							// Assign to newCache so results back-propagate to previous elements
							return (newCache[ 2 ] = oldCache[ 2 ]);
						} else {
							// Reuse newcache so results back-propagate to previous elements
							outerCache[ dir ] = newCache;

							// A match means we're done; a fail means we have to keep checking
							if ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {
								return true;
							}
						}
					}
				}
			}
		};
}

function elementMatcher( matchers ) {
	return matchers.length > 1 ?
		function( elem, context, xml ) {
			var i = matchers.length;
			while ( i-- ) {
				if ( !matchers[i]( elem, context, xml ) ) {
					return false;
				}
			}
			return true;
		} :
		matchers[0];
}

function multipleContexts( selector, contexts, results ) {
	var i = 0,
		len = contexts.length;
	for ( ; i < len; i++ ) {
		Sizzle( selector, contexts[i], results );
	}
	return results;
}

function condense( unmatched, map, filter, context, xml ) {
	var elem,
		newUnmatched = [],
		i = 0,
		len = unmatched.length,
		mapped = map != null;

	for ( ; i < len; i++ ) {
		if ( (elem = unmatched[i]) ) {
			if ( !filter || filter( elem, context, xml ) ) {
				newUnmatched.push( elem );
				if ( mapped ) {
					map.push( i );
				}
			}
		}
	}

	return newUnmatched;
}

function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
	if ( postFilter && !postFilter[ expando ] ) {
		postFilter = setMatcher( postFilter );
	}
	if ( postFinder && !postFinder[ expando ] ) {
		postFinder = setMatcher( postFinder, postSelector );
	}
	return markFunction(function( seed, results, context, xml ) {
		var temp, i, elem,
			preMap = [],
			postMap = [],
			preexisting = results.length,

			// Get initial elements from seed or context
			elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),

			// Prefilter to get matcher input, preserving a map for seed-results synchronization
			matcherIn = preFilter && ( seed || !selector ) ?
				condense( elems, preMap, preFilter, context, xml ) :
				elems,

			matcherOut = matcher ?
				// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
				postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

					// ...intermediate processing is necessary
					[] :

					// ...otherwise use results directly
					results :
				matcherIn;

		// Find primary matches
		if ( matcher ) {
			matcher( matcherIn, matcherOut, context, xml );
		}

		// Apply postFilter
		if ( postFilter ) {
			temp = condense( matcherOut, postMap );
			postFilter( temp, [], context, xml );

			// Un-match failing elements by moving them back to matcherIn
			i = temp.length;
			while ( i-- ) {
				if ( (elem = temp[i]) ) {
					matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
				}
			}
		}

		if ( seed ) {
			if ( postFinder || preFilter ) {
				if ( postFinder ) {
					// Get the final matcherOut by condensing this intermediate into postFinder contexts
					temp = [];
					i = matcherOut.length;
					while ( i-- ) {
						if ( (elem = matcherOut[i]) ) {
							// Restore matcherIn since elem is not yet a final match
							temp.push( (matcherIn[i] = elem) );
						}
					}
					postFinder( null, (matcherOut = []), temp, xml );
				}

				// Move matched elements from seed to results to keep them synchronized
				i = matcherOut.length;
				while ( i-- ) {
					if ( (elem = matcherOut[i]) &&
						(temp = postFinder ? indexOf( seed, elem ) : preMap[i]) > -1 ) {

						seed[temp] = !(results[temp] = elem);
					}
				}
			}

		// Add elements to results, through postFinder if defined
		} else {
			matcherOut = condense(
				matcherOut === results ?
					matcherOut.splice( preexisting, matcherOut.length ) :
					matcherOut
			);
			if ( postFinder ) {
				postFinder( null, results, matcherOut, xml );
			} else {
				push.apply( results, matcherOut );
			}
		}
	});
}

function matcherFromTokens( tokens ) {
	var checkContext, matcher, j,
		len = tokens.length,
		leadingRelative = Expr.relative[ tokens[0].type ],
		implicitRelative = leadingRelative || Expr.relative[" "],
		i = leadingRelative ? 1 : 0,

		// The foundational matcher ensures that elements are reachable from top-level context(s)
		matchContext = addCombinator( function( elem ) {
			return elem === checkContext;
		}, implicitRelative, true ),
		matchAnyContext = addCombinator( function( elem ) {
			return indexOf( checkContext, elem ) > -1;
		}, implicitRelative, true ),
		matchers = [ function( elem, context, xml ) {
			var ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
				(checkContext = context).nodeType ?
					matchContext( elem, context, xml ) :
					matchAnyContext( elem, context, xml ) );
			// Avoid hanging onto element (issue #299)
			checkContext = null;
			return ret;
		} ];

	for ( ; i < len; i++ ) {
		if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
			matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];
		} else {
			matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );

			// Return special upon seeing a positional matcher
			if ( matcher[ expando ] ) {
				// Find the next relative operator (if any) for proper handling
				j = ++i;
				for ( ; j < len; j++ ) {
					if ( Expr.relative[ tokens[j].type ] ) {
						break;
					}
				}
				return setMatcher(
					i > 1 && elementMatcher( matchers ),
					i > 1 && toSelector(
						// If the preceding token was a descendant combinator, insert an implicit any-element `*`
						tokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === " " ? "*" : "" })
					).replace( rtrim, "$1" ),
					matcher,
					i < j && matcherFromTokens( tokens.slice( i, j ) ),
					j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
					j < len && toSelector( tokens )
				);
			}
			matchers.push( matcher );
		}
	}

	return elementMatcher( matchers );
}

function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
	var bySet = setMatchers.length > 0,
		byElement = elementMatchers.length > 0,
		superMatcher = function( seed, context, xml, results, outermost ) {
			var elem, j, matcher,
				matchedCount = 0,
				i = "0",
				unmatched = seed && [],
				setMatched = [],
				contextBackup = outermostContext,
				// We must always have either seed elements or outermost context
				elems = seed || byElement && Expr.find["TAG"]( "*", outermost ),
				// Use integer dirruns iff this is the outermost matcher
				dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),
				len = elems.length;

			if ( outermost ) {
				outermostContext = context !== document && context;
			}

			// Add elements passing elementMatchers directly to results
			// Keep `i` a string if there are no elements so `matchedCount` will be "00" below
			// Support: IE<9, Safari
			// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
			for ( ; i !== len && (elem = elems[i]) != null; i++ ) {
				if ( byElement && elem ) {
					j = 0;
					while ( (matcher = elementMatchers[j++]) ) {
						if ( matcher( elem, context, xml ) ) {
							results.push( elem );
							break;
						}
					}
					if ( outermost ) {
						dirruns = dirrunsUnique;
					}
				}

				// Track unmatched elements for set filters
				if ( bySet ) {
					// They will have gone through all possible matchers
					if ( (elem = !matcher && elem) ) {
						matchedCount--;
					}

					// Lengthen the array for every element, matched or not
					if ( seed ) {
						unmatched.push( elem );
					}
				}
			}

			// Apply set filters to unmatched elements
			matchedCount += i;
			if ( bySet && i !== matchedCount ) {
				j = 0;
				while ( (matcher = setMatchers[j++]) ) {
					matcher( unmatched, setMatched, context, xml );
				}

				if ( seed ) {
					// Reintegrate element matches to eliminate the need for sorting
					if ( matchedCount > 0 ) {
						while ( i-- ) {
							if ( !(unmatched[i] || setMatched[i]) ) {
								setMatched[i] = pop.call( results );
							}
						}
					}

					// Discard index placeholder values to get only actual matches
					setMatched = condense( setMatched );
				}

				// Add matches to results
				push.apply( results, setMatched );

				// Seedless set matches succeeding multiple successful matchers stipulate sorting
				if ( outermost && !seed && setMatched.length > 0 &&
					( matchedCount + setMatchers.length ) > 1 ) {

					Sizzle.uniqueSort( results );
				}
			}

			// Override manipulation of globals by nested matchers
			if ( outermost ) {
				dirruns = dirrunsUnique;
				outermostContext = contextBackup;
			}

			return unmatched;
		};

	return bySet ?
		markFunction( superMatcher ) :
		superMatcher;
}

compile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {
	var i,
		setMatchers = [],
		elementMatchers = [],
		cached = compilerCache[ selector + " " ];

	if ( !cached ) {
		// Generate a function of recursive functions that can be used to check each element
		if ( !match ) {
			match = tokenize( selector );
		}
		i = match.length;
		while ( i-- ) {
			cached = matcherFromTokens( match[i] );
			if ( cached[ expando ] ) {
				setMatchers.push( cached );
			} else {
				elementMatchers.push( cached );
			}
		}

		// Cache the compiled function
		cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );

		// Save selector and tokenization
		cached.selector = selector;
	}
	return cached;
};

/**
 * A low-level selection function that works with Sizzle's compiled
 *  selector functions
 * @param {String|Function} selector A selector or a pre-compiled
 *  selector function built with Sizzle.compile
 * @param {Element} context
 * @param {Array} [results]
 * @param {Array} [seed] A set of elements to match against
 */
select = Sizzle.select = function( selector, context, results, seed ) {
	var i, tokens, token, type, find,
		compiled = typeof selector === "function" && selector,
		match = !seed && tokenize( (selector = compiled.selector || selector) );

	results = results || [];

	// Try to minimize operations if there is no seed and only one group
	if ( match.length === 1 ) {

		// Take a shortcut and set the context if the root selector is an ID
		tokens = match[0] = match[0].slice( 0 );
		if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
				support.getById && context.nodeType === 9 && documentIsHTML &&
				Expr.relative[ tokens[1].type ] ) {

			context = ( Expr.find["ID"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];
			if ( !context ) {
				return results;

			// Precompiled matchers will still verify ancestry, so step up a level
			} else if ( compiled ) {
				context = context.parentNode;
			}

			selector = selector.slice( tokens.shift().value.length );
		}

		// Fetch a seed set for right-to-left matching
		i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;
		while ( i-- ) {
			token = tokens[i];

			// Abort if we hit a combinator
			if ( Expr.relative[ (type = token.type) ] ) {
				break;
			}
			if ( (find = Expr.find[ type ]) ) {
				// Search, expanding context for leading sibling combinators
				if ( (seed = find(
					token.matches[0].replace( runescape, funescape ),
					rsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context
				)) ) {

					// If seed is empty or no tokens remain, we can return early
					tokens.splice( i, 1 );
					selector = seed.length && toSelector( tokens );
					if ( !selector ) {
						push.apply( results, seed );
						return results;
					}

					break;
				}
			}
		}
	}

	// Compile and execute a filtering function if one is not provided
	// Provide `match` to avoid retokenization if we modified the selector above
	( compiled || compile( selector, match ) )(
		seed,
		context,
		!documentIsHTML,
		results,
		rsibling.test( selector ) && testContext( context.parentNode ) || context
	);
	return results;
};

// One-time assignments

// Sort stability
support.sortStable = expando.split("").sort( sortOrder ).join("") === expando;

// Support: Chrome 14-35+
// Always assume duplicates if they aren't passed to the comparison function
support.detectDuplicates = !!hasDuplicate;

// Initialize against the default document
setDocument();

// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
// Detached nodes confoundingly follow *each other*
support.sortDetached = assert(function( div1 ) {
	// Should return 1, but returns 4 (following)
	return div1.compareDocumentPosition( document.createElement("div") ) & 1;
});

// Support: IE<8
// Prevent attribute/property "interpolation"
// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
if ( !assert(function( div ) {
	div.innerHTML = "<a href='#'></a>";
	return div.firstChild.getAttribute("href") === "#" ;
}) ) {
	addHandle( "type|href|height|width", function( elem, name, isXML ) {
		if ( !isXML ) {
			return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
		}
	});
}

// Support: IE<9
// Use defaultValue in place of getAttribute("value")
if ( !support.attributes || !assert(function( div ) {
	div.innerHTML = "<input/>";
	div.firstChild.setAttribute( "value", "" );
	return div.firstChild.getAttribute( "value" ) === "";
}) ) {
	addHandle( "value", function( elem, name, isXML ) {
		if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
			return elem.defaultValue;
		}
	});
}

// Support: IE<9
// Use getAttributeNode to fetch booleans when getAttribute lies
if ( !assert(function( div ) {
	return div.getAttribute("disabled") == null;
}) ) {
	addHandle( booleans, function( elem, name, isXML ) {
		var val;
		if ( !isXML ) {
			return elem[ name ] === true ? name.toLowerCase() :
					(val = elem.getAttributeNode( name )) && val.specified ?
					val.value :
				null;
		}
	});
}

return Sizzle;

})( window );



jQuery.find = Sizzle;
jQuery.expr = Sizzle.selectors;
jQuery.expr[":"] = jQuery.expr.pseudos;
jQuery.unique = Sizzle.uniqueSort;
jQuery.text = Sizzle.getText;
jQuery.isXMLDoc = Sizzle.isXML;
jQuery.contains = Sizzle.contains;



var rneedsContext = jQuery.expr.match.needsContext;

var rsingleTag = (/^<(\w+)\s*\/?>(?:<\/\1>|)$/);



var risSimple = /^.[^:#\[\.,]*$/;

// Implement the identical functionality for filter and not
function winnow( elements, qualifier, not ) {
	if ( jQuery.isFunction( qualifier ) ) {
		return jQuery.grep( elements, function( elem, i ) {
			/* jshint -W018 */
			return !!qualifier.call( elem, i, elem ) !== not;
		});

	}

	if ( qualifier.nodeType ) {
		return jQuery.grep( elements, function( elem ) {
			return ( elem === qualifier ) !== not;
		});

	}

	if ( typeof qualifier === "string" ) {
		if ( risSimple.test( qualifier ) ) {
			return jQuery.filter( qualifier, elements, not );
		}

		qualifier = jQuery.filter( qualifier, elements );
	}

	return jQuery.grep( elements, function( elem ) {
		return ( indexOf.call( qualifier, elem ) >= 0 ) !== not;
	});
}

jQuery.filter = function( expr, elems, not ) {
	var elem = elems[ 0 ];

	if ( not ) {
		expr = ":not(" + expr + ")";
	}

	return elems.length === 1 && elem.nodeType === 1 ?
		jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [] :
		jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
			return elem.nodeType === 1;
		}));
};

jQuery.fn.extend({
	find: function( selector ) {
		var i,
			len = this.length,
			ret = [],
			self = this;

		if ( typeof selector !== "string" ) {
			return this.pushStack( jQuery( selector ).filter(function() {
				for ( i = 0; i < len; i++ ) {
					if ( jQuery.contains( self[ i ], this ) ) {
						return true;
					}
				}
			}) );
		}

		for ( i = 0; i < len; i++ ) {
			jQuery.find( selector, self[ i ], ret );
		}

		// Needed because $( selector, context ) becomes $( context ).find( selector )
		ret = this.pushStack( len > 1 ? jQuery.unique( ret ) : ret );
		ret.selector = this.selector ? this.selector + " " + selector : selector;
		return ret;
	},
	filter: function( selector ) {
		return this.pushStack( winnow(this, selector || [], false) );
	},
	not: function( selector ) {
		return this.pushStack( winnow(this, selector || [], true) );
	},
	is: function( selector ) {
		return !!winnow(
			this,

			// If this is a positional/relative selector, check membership in the returned set
			// so $("p:first").is("p:last") won't return true for a doc with two "p".
			typeof selector === "string" && rneedsContext.test( selector ) ?
				jQuery( selector ) :
				selector || [],
			false
		).length;
	}
});


// Initialize a jQuery object


// A central reference to the root jQuery(document)
var rootjQuery,

	// A simple way to check for HTML strings
	// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
	// Strict HTML recognition (#11290: must start with <)
	rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,

	init = jQuery.fn.init = function( selector, context ) {
		var match, elem;

		// HANDLE: $(""), $(null), $(undefined), $(false)
		if ( !selector ) {
			return this;
		}

		// Handle HTML strings
		if ( typeof selector === "string" ) {
			if ( selector[0] === "<" && selector[ selector.length - 1 ] === ">" && selector.length >= 3 ) {
				// Assume that strings that start and end with <> are HTML and skip the regex check
				match = [ null, selector, null ];

			} else {
				match = rquickExpr.exec( selector );
			}

			// Match html or make sure no context is specified for #id
			if ( match && (match[1] || !context) ) {

				// HANDLE: $(html) -> $(array)
				if ( match[1] ) {
					context = context instanceof jQuery ? context[0] : context;

					// Option to run scripts is true for back-compat
					// Intentionally let the error be thrown if parseHTML is not present
					jQuery.merge( this, jQuery.parseHTML(
						match[1],
						context && context.nodeType ? context.ownerDocument || context : document,
						true
					) );

					// HANDLE: $(html, props)
					if ( rsingleTag.test( match[1] ) && jQuery.isPlainObject( context ) ) {
						for ( match in context ) {
							// Properties of context are called as methods if possible
							if ( jQuery.isFunction( this[ match ] ) ) {
								this[ match ]( context[ match ] );

							// ...and otherwise set as attributes
							} else {
								this.attr( match, context[ match ] );
							}
						}
					}

					return this;

				// HANDLE: $(#id)
				} else {
					elem = document.getElementById( match[2] );

					// Support: Blackberry 4.6
					// gEBID returns nodes no longer in the document (#6963)
					if ( elem && elem.parentNode ) {
						// Inject the element directly into the jQuery object
						this.length = 1;
						this[0] = elem;
					}

					this.context = document;
					this.selector = selector;
					return this;
				}

			// HANDLE: $(expr, $(...))
			} else if ( !context || context.jquery ) {
				return ( context || rootjQuery ).find( selector );

			// HANDLE: $(expr, context)
			// (which is just equivalent to: $(context).find(expr)
			} else {
				return this.constructor( context ).find( selector );
			}

		// HANDLE: $(DOMElement)
		} else if ( selector.nodeType ) {
			this.context = this[0] = selector;
			this.length = 1;
			return this;

		// HANDLE: $(function)
		// Shortcut for document ready
		} else if ( jQuery.isFunction( selector ) ) {
			return typeof rootjQuery.ready !== "undefined" ?
				rootjQuery.ready( selector ) :
				// Execute immediately if ready is not present
				selector( jQuery );
		}

		if ( selector.selector !== undefined ) {
			this.selector = selector.selector;
			this.context = selector.context;
		}

		return jQuery.makeArray( selector, this );
	};

// Give the init function the jQuery prototype for later instantiation
init.prototype = jQuery.fn;

// Initialize central reference
rootjQuery = jQuery( document );


var rparentsprev = /^(?:parents|prev(?:Until|All))/,
	// Methods guaranteed to produce a unique set when starting from a unique set
	guaranteedUnique = {
		children: true,
		contents: true,
		next: true,
		prev: true
	};

jQuery.extend({
	dir: function( elem, dir, until ) {
		var matched = [],
			truncate = until !== undefined;

		while ( (elem = elem[ dir ]) && elem.nodeType !== 9 ) {
			if ( elem.nodeType === 1 ) {
				if ( truncate && jQuery( elem ).is( until ) ) {
					break;
				}
				matched.push( elem );
			}
		}
		return matched;
	},

	sibling: function( n, elem ) {
		var matched = [];

		for ( ; n; n = n.nextSibling ) {
			if ( n.nodeType === 1 && n !== elem ) {
				matched.push( n );
			}
		}

		return matched;
	}
});

jQuery.fn.extend({
	has: function( target ) {
		var targets = jQuery( target, this ),
			l = targets.length;

		return this.filter(function() {
			var i = 0;
			for ( ; i < l; i++ ) {
				if ( jQuery.contains( this, targets[i] ) ) {
					return true;
				}
			}
		});
	},

	closest: function( selectors, context ) {
		var cur,
			i = 0,
			l = this.length,
			matched = [],
			pos = rneedsContext.test( selectors ) || typeof selectors !== "string" ?
				jQuery( selectors, context || this.context ) :
				0;

		for ( ; i < l; i++ ) {
			for ( cur = this[i]; cur && cur !== context; cur = cur.parentNode ) {
				// Always skip document fragments
				if ( cur.nodeType < 11 && (pos ?
					pos.index(cur) > -1 :

					// Don't pass non-elements to Sizzle
					cur.nodeType === 1 &&
						jQuery.find.matchesSelector(cur, selectors)) ) {

					matched.push( cur );
					break;
				}
			}
		}

		return this.pushStack( matched.length > 1 ? jQuery.unique( matched ) : matched );
	},

	// Determine the position of an element within the set
	index: function( elem ) {

		// No argument, return index in parent
		if ( !elem ) {
			return ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;
		}

		// Index in selector
		if ( typeof elem === "string" ) {
			return indexOf.call( jQuery( elem ), this[ 0 ] );
		}

		// Locate the position of the desired element
		return indexOf.call( this,

			// If it receives a jQuery object, the first element is used
			elem.jquery ? elem[ 0 ] : elem
		);
	},

	add: function( selector, context ) {
		return this.pushStack(
			jQuery.unique(
				jQuery.merge( this.get(), jQuery( selector, context ) )
			)
		);
	},

	addBack: function( selector ) {
		return this.add( selector == null ?
			this.prevObject : this.prevObject.filter(selector)
		);
	}
});

function sibling( cur, dir ) {
	while ( (cur = cur[dir]) && cur.nodeType !== 1 ) {}
	return cur;
}

jQuery.each({
	parent: function( elem ) {
		var parent = elem.parentNode;
		return parent && parent.nodeType !== 11 ? parent : null;
	},
	parents: function( elem ) {
		return jQuery.dir( elem, "parentNode" );
	},
	parentsUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "parentNode", until );
	},
	next: function( elem ) {
		return sibling( elem, "nextSibling" );
	},
	prev: function( elem ) {
		return sibling( elem, "previousSibling" );
	},
	nextAll: function( elem ) {
		return jQuery.dir( elem, "nextSibling" );
	},
	prevAll: function( elem ) {
		return jQuery.dir( elem, "previousSibling" );
	},
	nextUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "nextSibling", until );
	},
	prevUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "previousSibling", until );
	},
	siblings: function( elem ) {
		return jQuery.sibling( ( elem.parentNode || {} ).firstChild, elem );
	},
	children: function( elem ) {
		return jQuery.sibling( elem.firstChild );
	},
	contents: function( elem ) {
		return elem.contentDocument || jQuery.merge( [], elem.childNodes );
	}
}, function( name, fn ) {
	jQuery.fn[ name ] = function( until, selector ) {
		var matched = jQuery.map( this, fn, until );

		if ( name.slice( -5 ) !== "Until" ) {
			selector = until;
		}

		if ( selector && typeof selector === "string" ) {
			matched = jQuery.filter( selector, matched );
		}

		if ( this.length > 1 ) {
			// Remove duplicates
			if ( !guaranteedUnique[ name ] ) {
				jQuery.unique( matched );
			}

			// Reverse order for parents* and prev-derivatives
			if ( rparentsprev.test( name ) ) {
				matched.reverse();
			}
		}

		return this.pushStack( matched );
	};
});
var rnotwhite = (/\S+/g);



// String to Object options format cache
var optionsCache = {};

// Convert String-formatted options into Object-formatted ones and store in cache
function createOptions( options ) {
	var object = optionsCache[ options ] = {};
	jQuery.each( options.match( rnotwhite ) || [], function( _, flag ) {
		object[ flag ] = true;
	});
	return object;
}

/*
 * Create a callback list using the following parameters:
 *
 *	options: an optional list of space-separated options that will change how
 *			the callback list behaves or a more traditional option object
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible options:
 *
 *	once:			will ensure the callback list can only be fired once (like a Deferred)
 *
 *	memory:			will keep track of previous values and will call any callback added
 *					after the list has been fired right away with the latest "memorized"
 *					values (like a Deferred)
 *
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
 *
 *	stopOnFalse:	interrupt callings when a callback returns false
 *
 */
jQuery.Callbacks = function( options ) {

	// Convert options from String-formatted to Object-formatted if needed
	// (we check in cache first)
	options = typeof options === "string" ?
		( optionsCache[ options ] || createOptions( options ) ) :
		jQuery.extend( {}, options );

	var // Last fire value (for non-forgettable lists)
		memory,
		// Flag to know if list was already fired
		fired,
		// Flag to know if list is currently firing
		firing,
		// First callback to fire (used internally by add and fireWith)
		firingStart,
		// End of the loop when firing
		firingLength,
		// Index of currently firing callback (modified by remove if needed)
		firingIndex,
		// Actual callback list
		list = [],
		// Stack of fire calls for repeatable lists
		stack = !options.once && [],
		// Fire callbacks
		fire = function( data ) {
			memory = options.memory && data;
			fired = true;
			firingIndex = firingStart || 0;
			firingStart = 0;
			firingLength = list.length;
			firing = true;
			for ( ; list && firingIndex < firingLength; firingIndex++ ) {
				if ( list[ firingIndex ].apply( data[ 0 ], data[ 1 ] ) === false && options.stopOnFalse ) {
					memory = false; // To prevent further calls using add
					break;
				}
			}
			firing = false;
			if ( list ) {
				if ( stack ) {
					if ( stack.length ) {
						fire( stack.shift() );
					}
				} else if ( memory ) {
					list = [];
				} else {
					self.disable();
				}
			}
		},
		// Actual Callbacks object
		self = {
			// Add a callback or a collection of callbacks to the list
			add: function() {
				if ( list ) {
					// First, we save the current length
					var start = list.length;
					(function add( args ) {
						jQuery.each( args, function( _, arg ) {
							var type = jQuery.type( arg );
							if ( type === "function" ) {
								if ( !options.unique || !self.has( arg ) ) {
									list.push( arg );
								}
							} else if ( arg && arg.length && type !== "string" ) {
								// Inspect recursively
								add( arg );
							}
						});
					})( arguments );
					// Do we need to add the callbacks to the
					// current firing batch?
					if ( firing ) {
						firingLength = list.length;
					// With memory, if we're not firing then
					// we should call right away
					} else if ( memory ) {
						firingStart = start;
						fire( memory );
					}
				}
				return this;
			},
			// Remove a callback from the list
			remove: function() {
				if ( list ) {
					jQuery.each( arguments, function( _, arg ) {
						var index;
						while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
							list.splice( index, 1 );
							// Handle firing indexes
							if ( firing ) {
								if ( index <= firingLength ) {
									firingLength--;
								}
								if ( index <= firingIndex ) {
									firingIndex--;
								}
							}
						}
					});
				}
				return this;
			},
			// Check if a given callback is in the list.
			// If no argument is given, return whether or not list has callbacks attached.
			has: function( fn ) {
				return fn ? jQuery.inArray( fn, list ) > -1 : !!( list && list.length );
			},
			// Remove all callbacks from the list
			empty: function() {
				list = [];
				firingLength = 0;
				return this;
			},
			// Have the list do nothing anymore
			disable: function() {
				list = stack = memory = undefined;
				return this;
			},
			// Is it disabled?
			disabled: function() {
				return !list;
			},
			// Lock the list in its current state
			lock: function() {
				stack = undefined;
				if ( !memory ) {
					self.disable();
				}
				return this;
			},
			// Is it locked?
			locked: function() {
				return !stack;
			},
			// Call all callbacks with the given context and arguments
			fireWith: function( context, args ) {
				if ( list && ( !fired || stack ) ) {
					args = args || [];
					args = [ context, args.slice ? args.slice() : args ];
					if ( firing ) {
						stack.push( args );
					} else {
						fire( args );
					}
				}
				return this;
			},
			// Call all the callbacks with the given arguments
			fire: function() {
				self.fireWith( this, arguments );
				return this;
			},
			// To know if the callbacks have already been called at least once
			fired: function() {
				return !!fired;
			}
		};

	return self;
};


jQuery.extend({

	Deferred: function( func ) {
		var tuples = [
				// action, add listener, listener list, final state
				[ "resolve", "done", jQuery.Callbacks("once memory"), "resolved" ],
				[ "reject", "fail", jQuery.Callbacks("once memory"), "rejected" ],
				[ "notify", "progress", jQuery.Callbacks("memory") ]
			],
			state = "pending",
			promise = {
				state: function() {
					return state;
				},
				always: function() {
					deferred.done( arguments ).fail( arguments );
					return this;
				},
				then: function( /* fnDone, fnFail, fnProgress */ ) {
					var fns = arguments;
					return jQuery.Deferred(function( newDefer ) {
						jQuery.each( tuples, function( i, tuple ) {
							var fn = jQuery.isFunction( fns[ i ] ) && fns[ i ];
							// deferred[ done | fail | progress ] for forwarding actions to newDefer
							deferred[ tuple[1] ](function() {
								var returned = fn && fn.apply( this, arguments );
								if ( returned && jQuery.isFunction( returned.promise ) ) {
									returned.promise()
										.done( newDefer.resolve )
										.fail( newDefer.reject )
										.progress( newDefer.notify );
								} else {
									newDefer[ tuple[ 0 ] + "With" ]( this === promise ? newDefer.promise() : this, fn ? [ returned ] : arguments );
								}
							});
						});
						fns = null;
					}).promise();
				},
				// Get a promise for this deferred
				// If obj is provided, the promise aspect is added to the object
				promise: function( obj ) {
					return obj != null ? jQuery.extend( obj, promise ) : promise;
				}
			},
			deferred = {};

		// Keep pipe for back-compat
		promise.pipe = promise.then;

		// Add list-specific methods
		jQuery.each( tuples, function( i, tuple ) {
			var list = tuple[ 2 ],
				stateString = tuple[ 3 ];

			// promise[ done | fail | progress ] = list.add
			promise[ tuple[1] ] = list.add;

			// Handle state
			if ( stateString ) {
				list.add(function() {
					// state = [ resolved | rejected ]
					state = stateString;

				// [ reject_list | resolve_list ].disable; progress_list.lock
				}, tuples[ i ^ 1 ][ 2 ].disable, tuples[ 2 ][ 2 ].lock );
			}

			// deferred[ resolve | reject | notify ]
			deferred[ tuple[0] ] = function() {
				deferred[ tuple[0] + "With" ]( this === deferred ? promise : this, arguments );
				return this;
			};
			deferred[ tuple[0] + "With" ] = list.fireWith;
		});

		// Make the deferred a promise
		promise.promise( deferred );

		// Call given func if any
		if ( func ) {
			func.call( deferred, deferred );
		}

		// All done!
		return deferred;
	},

	// Deferred helper
	when: function( subordinate /* , ..., subordinateN */ ) {
		var i = 0,
			resolveValues = slice.call( arguments ),
			length = resolveValues.length,

			// the count of uncompleted subordinates
			remaining = length !== 1 || ( subordinate && jQuery.isFunction( subordinate.promise ) ) ? length : 0,

			// the master Deferred. If resolveValues consist of only a single Deferred, just use that.
			deferred = remaining === 1 ? subordinate : jQuery.Deferred(),

			// Update function for both resolve and progress values
			updateFunc = function( i, contexts, values ) {
				return function( value ) {
					contexts[ i ] = this;
					values[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
					if ( values === progressValues ) {
						deferred.notifyWith( contexts, values );
					} else if ( !( --remaining ) ) {
						deferred.resolveWith( contexts, values );
					}
				};
			},

			progressValues, progressContexts, resolveContexts;

		// Add listeners to Deferred subordinates; treat others as resolved
		if ( length > 1 ) {
			progressValues = new Array( length );
			progressContexts = new Array( length );
			resolveContexts = new Array( length );
			for ( ; i < length; i++ ) {
				if ( resolveValues[ i ] && jQuery.isFunction( resolveValues[ i ].promise ) ) {
					resolveValues[ i ].promise()
						.done( updateFunc( i, resolveContexts, resolveValues ) )
						.fail( deferred.reject )
						.progress( updateFunc( i, progressContexts, progressValues ) );
				} else {
					--remaining;
				}
			}
		}

		// If we're not waiting on anything, resolve the master
		if ( !remaining ) {
			deferred.resolveWith( resolveContexts, resolveValues );
		}

		return deferred.promise();
	}
});


// The deferred used on DOM ready
var readyList;

jQuery.fn.ready = function( fn ) {
	// Add the callback
	jQuery.ready.promise().done( fn );

	return this;
};

jQuery.extend({
	// Is the DOM ready to be used? Set to true once it occurs.
	isReady: false,

	// A counter to track how many items to wait for before
	// the ready event fires. See #6781
	readyWait: 1,

	// Hold (or release) the ready event
	holdReady: function( hold ) {
		if ( hold ) {
			jQuery.readyWait++;
		} else {
			jQuery.ready( true );
		}
	},

	// Handle when the DOM is ready
	ready: function( wait ) {

		// Abort if there are pending holds or we're already ready
		if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
			return;
		}

		// Remember that the DOM is ready
		jQuery.isReady = true;

		// If a normal DOM Ready event fired, decrement, and wait if need be
		if ( wait !== true && --jQuery.readyWait > 0 ) {
			return;
		}

		// If there are functions bound, to execute
		readyList.resolveWith( document, [ jQuery ] );

		// Trigger any bound ready events
		if ( jQuery.fn.triggerHandler ) {
			jQuery( document ).triggerHandler( "ready" );
			jQuery( document ).off( "ready" );
		}
	}
});

/**
 * The ready event handler and self cleanup method
 */
function completed() {
	document.removeEventListener( "DOMContentLoaded", completed, false );
	window.removeEventListener( "load", completed, false );
	jQuery.ready();
}

jQuery.ready.promise = function( obj ) {
	if ( !readyList ) {

		readyList = jQuery.Deferred();

		// Catch cases where $(document).ready() is called after the browser event has already occurred.
		// We once tried to use readyState "interactive" here, but it caused issues like the one
		// discovered by ChrisS here: http://bugs.jquery.com/ticket/12282#comment:15
		if ( document.readyState === "complete" ) {
			// Handle it asynchronously to allow scripts the opportunity to delay ready
			setTimeout( jQuery.ready );

		} else {

			// Use the handy event callback
			document.addEventListener( "DOMContentLoaded", completed, false );

			// A fallback to window.onload, that will always work
			window.addEventListener( "load", completed, false );
		}
	}
	return readyList.promise( obj );
};

// Kick off the DOM ready check even if the user does not
jQuery.ready.promise();




// Multifunctional method to get and set values of a collection
// The value/s can optionally be executed if it's a function
var access = jQuery.access = function( elems, fn, key, value, chainable, emptyGet, raw ) {
	var i = 0,
		len = elems.length,
		bulk = key == null;

	// Sets many values
	if ( jQuery.type( key ) === "object" ) {
		chainable = true;
		for ( i in key ) {
			jQuery.access( elems, fn, i, key[i], true, emptyGet, raw );
		}

	// Sets one value
	} else if ( value !== undefined ) {
		chainable = true;

		if ( !jQuery.isFunction( value ) ) {
			raw = true;
		}

		if ( bulk ) {
			// Bulk operations run against the entire set
			if ( raw ) {
				fn.call( elems, value );
				fn = null;

			// ...except when executing function values
			} else {
				bulk = fn;
				fn = function( elem, key, value ) {
					return bulk.call( jQuery( elem ), value );
				};
			}
		}

		if ( fn ) {
			for ( ; i < len; i++ ) {
				fn( elems[i], key, raw ? value : value.call( elems[i], i, fn( elems[i], key ) ) );
			}
		}
	}

	return chainable ?
		elems :

		// Gets
		bulk ?
			fn.call( elems ) :
			len ? fn( elems[0], key ) : emptyGet;
};


/**
 * Determines whether an object can have data
 */
jQuery.acceptData = function( owner ) {
	// Accepts only:
	//  - Node
	//    - Node.ELEMENT_NODE
	//    - Node.DOCUMENT_NODE
	//  - Object
	//    - Any
	/* jshint -W018 */
	return owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );
};


function Data() {
	// Support: Android<4,
	// Old WebKit does not have Object.preventExtensions/freeze method,
	// return new empty object instead with no [[set]] accessor
	Object.defineProperty( this.cache = {}, 0, {
		get: function() {
			return {};
		}
	});

	this.expando = jQuery.expando + Data.uid++;
}

Data.uid = 1;
Data.accepts = jQuery.acceptData;

Data.prototype = {
	key: function( owner ) {
		// We can accept data for non-element nodes in modern browsers,
		// but we should not, see #8335.
		// Always return the key for a frozen object.
		if ( !Data.accepts( owner ) ) {
			return 0;
		}

		var descriptor = {},
			// Check if the owner object already has a cache key
			unlock = owner[ this.expando ];

		// If not, create one
		if ( !unlock ) {
			unlock = Data.uid++;

			// Secure it in a non-enumerable, non-writable property
			try {
				descriptor[ this.expando ] = { value: unlock };
				Object.defineProperties( owner, descriptor );

			// Support: Android<4
			// Fallback to a less secure definition
			} catch ( e ) {
				descriptor[ this.expando ] = unlock;
				jQuery.extend( owner, descriptor );
			}
		}

		// Ensure the cache object
		if ( !this.cache[ unlock ] ) {
			this.cache[ unlock ] = {};
		}

		return unlock;
	},
	set: function( owner, data, value ) {
		var prop,
			// There may be an unlock assigned to this node,
			// if there is no entry for this "owner", create one inline
			// and set the unlock as though an owner entry had always existed
			unlock = this.key( owner ),
			cache = this.cache[ unlock ];

		// Handle: [ owner, key, value ] args
		if ( typeof data === "string" ) {
			cache[ data ] = value;

		// Handle: [ owner, { properties } ] args
		} else {
			// Fresh assignments by object are shallow copied
			if ( jQuery.isEmptyObject( cache ) ) {
				jQuery.extend( this.cache[ unlock ], data );
			// Otherwise, copy the properties one-by-one to the cache object
			} else {
				for ( prop in data ) {
					cache[ prop ] = data[ prop ];
				}
			}
		}
		return cache;
	},
	get: function( owner, key ) {
		// Either a valid cache is found, or will be created.
		// New caches will be created and the unlock returned,
		// allowing direct access to the newly created
		// empty data object. A valid owner object must be provided.
		var cache = this.cache[ this.key( owner ) ];

		return key === undefined ?
			cache : cache[ key ];
	},
	access: function( owner, key, value ) {
		var stored;
		// In cases where either:
		//
		//   1. No key was specified
		//   2. A string key was specified, but no value provided
		//
		// Take the "read" path and allow the get method to determine
		// which value to return, respectively either:
		//
		//   1. The entire cache object
		//   2. The data stored at the key
		//
		if ( key === undefined ||
				((key && typeof key === "string") && value === undefined) ) {

			stored = this.get( owner, key );

			return stored !== undefined ?
				stored : this.get( owner, jQuery.camelCase(key) );
		}

		// [*]When the key is not a string, or both a key and value
		// are specified, set or extend (existing objects) with either:
		//
		//   1. An object of properties
		//   2. A key and value
		//
		this.set( owner, key, value );

		// Since the "set" path can have two possible entry points
		// return the expected data based on which path was taken[*]
		return value !== undefined ? value : key;
	},
	remove: function( owner, key ) {
		var i, name, camel,
			unlock = this.key( owner ),
			cache = this.cache[ unlock ];

		if ( key === undefined ) {
			this.cache[ unlock ] = {};

		} else {
			// Support array or space separated string of keys
			if ( jQuery.isArray( key ) ) {
				// If "name" is an array of keys...
				// When data is initially created, via ("key", "val") signature,
				// keys will be converted to camelCase.
				// Since there is no way to tell _how_ a key was added, remove
				// both plain key and camelCase key. #12786
				// This will only penalize the array argument path.
				name = key.concat( key.map( jQuery.camelCase ) );
			} else {
				camel = jQuery.camelCase( key );
				// Try the string as a key before any manipulation
				if ( key in cache ) {
					name = [ key, camel ];
				} else {
					// If a key with the spaces exists, use it.
					// Otherwise, create an array by matching non-whitespace
					name = camel;
					name = name in cache ?
						[ name ] : ( name.match( rnotwhite ) || [] );
				}
			}

			i = name.length;
			while ( i-- ) {
				delete cache[ name[ i ] ];
			}
		}
	},
	hasData: function( owner ) {
		return !jQuery.isEmptyObject(
			this.cache[ owner[ this.expando ] ] || {}
		);
	},
	discard: function( owner ) {
		if ( owner[ this.expando ] ) {
			delete this.cache[ owner[ this.expando ] ];
		}
	}
};
var data_priv = new Data();

var data_user = new Data();



//	Implementation Summary
//
//	1. Enforce API surface and semantic compatibility with 1.9.x branch
//	2. Improve the module's maintainability by reducing the storage
//		paths to a single mechanism.
//	3. Use the same single mechanism to support "private" and "user" data.
//	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
//	5. Avoid exposing implementation details on user objects (eg. expando properties)
//	6. Provide a clear path for implementation upgrade to WeakMap in 2014

var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
	rmultiDash = /([A-Z])/g;

function dataAttr( elem, key, data ) {
	var name;

	// If nothing was found internally, try to fetch any
	// data from the HTML5 data-* attribute
	if ( data === undefined && elem.nodeType === 1 ) {
		name = "data-" + key.replace( rmultiDash, "-$1" ).toLowerCase();
		data = elem.getAttribute( name );

		if ( typeof data === "string" ) {
			try {
				data = data === "true" ? true :
					data === "false" ? false :
					data === "null" ? null :
					// Only convert to a number if it doesn't change the string
					+data + "" === data ? +data :
					rbrace.test( data ) ? jQuery.parseJSON( data ) :
					data;
			} catch( e ) {}

			// Make sure we set the data so it isn't changed later
			data_user.set( elem, key, data );
		} else {
			data = undefined;
		}
	}
	return data;
}

jQuery.extend({
	hasData: function( elem ) {
		return data_user.hasData( elem ) || data_priv.hasData( elem );
	},

	data: function( elem, name, data ) {
		return data_user.access( elem, name, data );
	},

	removeData: function( elem, name ) {
		data_user.remove( elem, name );
	},

	// TODO: Now that all calls to _data and _removeData have been replaced
	// with direct calls to data_priv methods, these can be deprecated.
	_data: function( elem, name, data ) {
		return data_priv.access( elem, name, data );
	},

	_removeData: function( elem, name ) {
		data_priv.remove( elem, name );
	}
});

jQuery.fn.extend({
	data: function( key, value ) {
		var i, name, data,
			elem = this[ 0 ],
			attrs = elem && elem.attributes;

		// Gets all values
		if ( key === undefined ) {
			if ( this.length ) {
				data = data_user.get( elem );

				if ( elem.nodeType === 1 && !data_priv.get( elem, "hasDataAttrs" ) ) {
					i = attrs.length;
					while ( i-- ) {

						// Support: IE11+
						// The attrs elements can be null (#14894)
						if ( attrs[ i ] ) {
							name = attrs[ i ].name;
							if ( name.indexOf( "data-" ) === 0 ) {
								name = jQuery.camelCase( name.slice(5) );
								dataAttr( elem, name, data[ name ] );
							}
						}
					}
					data_priv.set( elem, "hasDataAttrs", true );
				}
			}

			return data;
		}

		// Sets multiple values
		if ( typeof key === "object" ) {
			return this.each(function() {
				data_user.set( this, key );
			});
		}

		return access( this, function( value ) {
			var data,
				camelKey = jQuery.camelCase( key );

			// The calling jQuery object (element matches) is not empty
			// (and therefore has an element appears at this[ 0 ]) and the
			// `value` parameter was not undefined. An empty jQuery object
			// will result in `undefined` for elem = this[ 0 ] which will
			// throw an exception if an attempt to read a data cache is made.
			if ( elem && value === undefined ) {
				// Attempt to get data from the cache
				// with the key as-is
				data = data_user.get( elem, key );
				if ( data !== undefined ) {
					return data;
				}

				// Attempt to get data from the cache
				// with the key camelized
				data = data_user.get( elem, camelKey );
				if ( data !== undefined ) {
					return data;
				}

				// Attempt to "discover" the data in
				// HTML5 custom data-* attrs
				data = dataAttr( elem, camelKey, undefined );
				if ( data !== undefined ) {
					return data;
				}

				// We tried really hard, but the data doesn't exist.
				return;
			}

			// Set the data...
			this.each(function() {
				// First, attempt to store a copy or reference of any
				// data that might've been store with a camelCased key.
				var data = data_user.get( this, camelKey );

				// For HTML5 data-* attribute interop, we have to
				// store property names with dashes in a camelCase form.
				// This might not apply to all properties...*
				data_user.set( this, camelKey, value );

				// *... In the case of properties that might _actually_
				// have dashes, we need to also store a copy of that
				// unchanged property.
				if ( key.indexOf("-") !== -1 && data !== undefined ) {
					data_user.set( this, key, value );
				}
			});
		}, null, value, arguments.length > 1, null, true );
	},

	removeData: function( key ) {
		return this.each(function() {
			data_user.remove( this, key );
		});
	}
});


jQuery.extend({
	queue: function( elem, type, data ) {
		var queue;

		if ( elem ) {
			type = ( type || "fx" ) + "queue";
			queue = data_priv.get( elem, type );

			// Speed up dequeue by getting out quickly if this is just a lookup
			if ( data ) {
				if ( !queue || jQuery.isArray( data ) ) {
					queue = data_priv.access( elem, type, jQuery.makeArray(data) );
				} else {
					queue.push( data );
				}
			}
			return queue || [];
		}
	},

	dequeue: function( elem, type ) {
		type = type || "fx";

		var queue = jQuery.queue( elem, type ),
			startLength = queue.length,
			fn = queue.shift(),
			hooks = jQuery._queueHooks( elem, type ),
			next = function() {
				jQuery.dequeue( elem, type );
			};

		// If the fx queue is dequeued, always remove the progress sentinel
		if ( fn === "inprogress" ) {
			fn = queue.shift();
			startLength--;
		}

		if ( fn ) {

			// Add a progress sentinel to prevent the fx queue from being
			// automatically dequeued
			if ( type === "fx" ) {
				queue.unshift( "inprogress" );
			}

			// Clear up the last queue stop function
			delete hooks.stop;
			fn.call( elem, next, hooks );
		}

		if ( !startLength && hooks ) {
			hooks.empty.fire();
		}
	},

	// Not public - generate a queueHooks object, or return the current one
	_queueHooks: function( elem, type ) {
		var key = type + "queueHooks";
		return data_priv.get( elem, key ) || data_priv.access( elem, key, {
			empty: jQuery.Callbacks("once memory").add(function() {
				data_priv.remove( elem, [ type + "queue", key ] );
			})
		});
	}
});

jQuery.fn.extend({
	queue: function( type, data ) {
		var setter = 2;

		if ( typeof type !== "string" ) {
			data = type;
			type = "fx";
			setter--;
		}

		if ( arguments.length < setter ) {
			return jQuery.queue( this[0], type );
		}

		return data === undefined ?
			this :
			this.each(function() {
				var queue = jQuery.queue( this, type, data );

				// Ensure a hooks for this queue
				jQuery._queueHooks( this, type );

				if ( type === "fx" && queue[0] !== "inprogress" ) {
					jQuery.dequeue( this, type );
				}
			});
	},
	dequeue: function( type ) {
		return this.each(function() {
			jQuery.dequeue( this, type );
		});
	},
	clearQueue: function( type ) {
		return this.queue( type || "fx", [] );
	},
	// Get a promise resolved when queues of a certain type
	// are emptied (fx is the type by default)
	promise: function( type, obj ) {
		var tmp,
			count = 1,
			defer = jQuery.Deferred(),
			elements = this,
			i = this.length,
			resolve = function() {
				if ( !( --count ) ) {
					defer.resolveWith( elements, [ elements ] );
				}
			};

		if ( typeof type !== "string" ) {
			obj = type;
			type = undefined;
		}
		type = type || "fx";

		while ( i-- ) {
			tmp = data_priv.get( elements[ i ], type + "queueHooks" );
			if ( tmp && tmp.empty ) {
				count++;
				tmp.empty.add( resolve );
			}
		}
		resolve();
		return defer.promise( obj );
	}
});
var pnum = (/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/).source;

var cssExpand = [ "Top", "Right", "Bottom", "Left" ];

var isHidden = function( elem, el ) {
		// isHidden might be called from jQuery#filter function;
		// in that case, element will be second argument
		elem = el || elem;
		return jQuery.css( elem, "display" ) === "none" || !jQuery.contains( elem.ownerDocument, elem );
	};

var rcheckableType = (/^(?:checkbox|radio)$/i);



(function() {
	var fragment = document.createDocumentFragment(),
		div = fragment.appendChild( document.createElement( "div" ) ),
		input = document.createElement( "input" );

	// Support: Safari<=5.1
	// Check state lost if the name is set (#11217)
	// Support: Windows Web Apps (WWA)
	// `name` and `type` must use .setAttribute for WWA (#14901)
	input.setAttribute( "type", "radio" );
	input.setAttribute( "checked", "checked" );
	input.setAttribute( "name", "t" );

	div.appendChild( input );

	// Support: Safari<=5.1, Android<4.2
	// Older WebKit doesn't clone checked state correctly in fragments
	support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;

	// Support: IE<=11+
	// Make sure textarea (and checkbox) defaultValue is properly cloned
	div.innerHTML = "<textarea>x</textarea>";
	support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;
})();
var strundefined = typeof undefined;



support.focusinBubbles = "onfocusin" in window;


var
	rkeyEvent = /^key/,
	rmouseEvent = /^(?:mouse|pointer|contextmenu)|click/,
	rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
	rtypenamespace = /^([^.]*)(?:\.(.+)|)$/;

function returnTrue() {
	return true;
}

function returnFalse() {
	return false;
}

function safeActiveElement() {
	try {
		return document.activeElement;
	} catch ( err ) { }
}

/*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */
jQuery.event = {

	global: {},

	add: function( elem, types, handler, data, selector ) {

		var handleObjIn, eventHandle, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = data_priv.get( elem );

		// Don't attach events to noData or text/comment nodes (but allow plain objects)
		if ( !elemData ) {
			return;
		}

		// Caller can pass in an object of custom data in lieu of the handler
		if ( handler.handler ) {
			handleObjIn = handler;
			handler = handleObjIn.handler;
			selector = handleObjIn.selector;
		}

		// Make sure that the handler has a unique ID, used to find/remove it later
		if ( !handler.guid ) {
			handler.guid = jQuery.guid++;
		}

		// Init the element's event structure and main handler, if this is the first
		if ( !(events = elemData.events) ) {
			events = elemData.events = {};
		}
		if ( !(eventHandle = elemData.handle) ) {
			eventHandle = elemData.handle = function( e ) {
				// Discard the second event of a jQuery.event.trigger() and
				// when an event is called after a page has unloaded
				return typeof jQuery !== strundefined && jQuery.event.triggered !== e.type ?
					jQuery.event.dispatch.apply( elem, arguments ) : undefined;
			};
		}

		// Handle multiple events separated by a space
		types = ( types || "" ).match( rnotwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[t] ) || [];
			type = origType = tmp[1];
			namespaces = ( tmp[2] || "" ).split( "." ).sort();

			// There *must* be a type, no attaching namespace-only handlers
			if ( !type ) {
				continue;
			}

			// If event changes its type, use the special event handlers for the changed type
			special = jQuery.event.special[ type ] || {};

			// If selector defined, determine special event api type, otherwise given type
			type = ( selector ? special.delegateType : special.bindType ) || type;

			// Update special based on newly reset type
			special = jQuery.event.special[ type ] || {};

			// handleObj is passed to all event handlers
			handleObj = jQuery.extend({
				type: type,
				origType: origType,
				data: data,
				handler: handler,
				guid: handler.guid,
				selector: selector,
				needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
				namespace: namespaces.join(".")
			}, handleObjIn );

			// Init the event handler queue if we're the first
			if ( !(handlers = events[ type ]) ) {
				handlers = events[ type ] = [];
				handlers.delegateCount = 0;

				// Only use addEventListener if the special events handler returns false
				if ( !special.setup || special.setup.call( elem, data, namespaces, eventHandle ) === false ) {
					if ( elem.addEventListener ) {
						elem.addEventListener( type, eventHandle, false );
					}
				}
			}

			if ( special.add ) {
				special.add.call( elem, handleObj );

				if ( !handleObj.handler.guid ) {
					handleObj.handler.guid = handler.guid;
				}
			}

			// Add to the element's handler list, delegates in front
			if ( selector ) {
				handlers.splice( handlers.delegateCount++, 0, handleObj );
			} else {
				handlers.push( handleObj );
			}

			// Keep track of which events have ever been used, for event optimization
			jQuery.event.global[ type ] = true;
		}

	},

	// Detach an event or set of events from an element
	remove: function( elem, types, handler, selector, mappedTypes ) {

		var j, origCount, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = data_priv.hasData( elem ) && data_priv.get( elem );

		if ( !elemData || !(events = elemData.events) ) {
			return;
		}

		// Once for each type.namespace in types; type may be omitted
		types = ( types || "" ).match( rnotwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[t] ) || [];
			type = origType = tmp[1];
			namespaces = ( tmp[2] || "" ).split( "." ).sort();

			// Unbind all events (on this namespace, if provided) for the element
			if ( !type ) {
				for ( type in events ) {
					jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
				}
				continue;
			}

			special = jQuery.event.special[ type ] || {};
			type = ( selector ? special.delegateType : special.bindType ) || type;
			handlers = events[ type ] || [];
			tmp = tmp[2] && new RegExp( "(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)" );

			// Remove matching events
			origCount = j = handlers.length;
			while ( j-- ) {
				handleObj = handlers[ j ];

				if ( ( mappedTypes || origType === handleObj.origType ) &&
					( !handler || handler.guid === handleObj.guid ) &&
					( !tmp || tmp.test( handleObj.namespace ) ) &&
					( !selector || selector === handleObj.selector || selector === "**" && handleObj.selector ) ) {
					handlers.splice( j, 1 );

					if ( handleObj.selector ) {
						handlers.delegateCount--;
					}
					if ( special.remove ) {
						special.remove.call( elem, handleObj );
					}
				}
			}

			// Remove generic event handler if we removed something and no more handlers exist
			// (avoids potential for endless recursion during removal of special event handlers)
			if ( origCount && !handlers.length ) {
				if ( !special.teardown || special.teardown.call( elem, namespaces, elemData.handle ) === false ) {
					jQuery.removeEvent( elem, type, elemData.handle );
				}

				delete events[ type ];
			}
		}

		// Remove the expando if it's no longer used
		if ( jQuery.isEmptyObject( events ) ) {
			delete elemData.handle;
			data_priv.remove( elem, "events" );
		}
	},

	trigger: function( event, data, elem, onlyHandlers ) {

		var i, cur, tmp, bubbleType, ontype, handle, special,
			eventPath = [ elem || document ],
			type = hasOwn.call( event, "type" ) ? event.type : event,
			namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split(".") : [];

		cur = tmp = elem = elem || document;

		// Don't do events on text and comment nodes
		if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
			return;
		}

		// focus/blur morphs to focusin/out; ensure we're not firing them right now
		if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
			return;
		}

		if ( type.indexOf(".") >= 0 ) {
			// Namespaced trigger; create a regexp to match event type in handle()
			namespaces = type.split(".");
			type = namespaces.shift();
			namespaces.sort();
		}
		ontype = type.indexOf(":") < 0 && "on" + type;

		// Caller can pass in a jQuery.Event object, Object, or just an event type string
		event = event[ jQuery.expando ] ?
			event :
			new jQuery.Event( type, typeof event === "object" && event );

		// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
		event.isTrigger = onlyHandlers ? 2 : 3;
		event.namespace = namespaces.join(".");
		event.namespace_re = event.namespace ?
			new RegExp( "(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)" ) :
			null;

		// Clean up the event in case it is being reused
		event.result = undefined;
		if ( !event.target ) {
			event.target = elem;
		}

		// Clone any incoming data and prepend the event, creating the handler arg list
		data = data == null ?
			[ event ] :
			jQuery.makeArray( data, [ event ] );

		// Allow special events to draw outside the lines
		special = jQuery.event.special[ type ] || {};
		if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
			return;
		}

		// Determine event propagation path in advance, per W3C events spec (#9951)
		// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
		if ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {

			bubbleType = special.delegateType || type;
			if ( !rfocusMorph.test( bubbleType + type ) ) {
				cur = cur.parentNode;
			}
			for ( ; cur; cur = cur.parentNode ) {
				eventPath.push( cur );
				tmp = cur;
			}

			// Only add window if we got to document (e.g., not plain obj or detached DOM)
			if ( tmp === (elem.ownerDocument || document) ) {
				eventPath.push( tmp.defaultView || tmp.parentWindow || window );
			}
		}

		// Fire handlers on the event path
		i = 0;
		while ( (cur = eventPath[i++]) && !event.isPropagationStopped() ) {

			event.type = i > 1 ?
				bubbleType :
				special.bindType || type;

			// jQuery handler
			handle = ( data_priv.get( cur, "events" ) || {} )[ event.type ] && data_priv.get( cur, "handle" );
			if ( handle ) {
				handle.apply( cur, data );
			}

			// Native handler
			handle = ontype && cur[ ontype ];
			if ( handle && handle.apply && jQuery.acceptData( cur ) ) {
				event.result = handle.apply( cur, data );
				if ( event.result === false ) {
					event.preventDefault();
				}
			}
		}
		event.type = type;

		// If nobody prevented the default action, do it now
		if ( !onlyHandlers && !event.isDefaultPrevented() ) {

			if ( (!special._default || special._default.apply( eventPath.pop(), data ) === false) &&
				jQuery.acceptData( elem ) ) {

				// Call a native DOM method on the target with the same name name as the event.
				// Don't do default actions on window, that's where global variables be (#6170)
				if ( ontype && jQuery.isFunction( elem[ type ] ) && !jQuery.isWindow( elem ) ) {

					// Don't re-trigger an onFOO event when we call its FOO() method
					tmp = elem[ ontype ];

					if ( tmp ) {
						elem[ ontype ] = null;
					}

					// Prevent re-triggering of the same event, since we already bubbled it above
					jQuery.event.triggered = type;
					elem[ type ]();
					jQuery.event.triggered = undefined;

					if ( tmp ) {
						elem[ ontype ] = tmp;
					}
				}
			}
		}

		return event.result;
	},

	dispatch: function( event ) {

		// Make a writable jQuery.Event from the native event object
		event = jQuery.event.fix( event );

		var i, j, ret, matched, handleObj,
			handlerQueue = [],
			args = slice.call( arguments ),
			handlers = ( data_priv.get( this, "events" ) || {} )[ event.type ] || [],
			special = jQuery.event.special[ event.type ] || {};

		// Use the fix-ed jQuery.Event rather than the (read-only) native event
		args[0] = event;
		event.delegateTarget = this;

		// Call the preDispatch hook for the mapped type, and let it bail if desired
		if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
			return;
		}

		// Determine handlers
		handlerQueue = jQuery.event.handlers.call( this, event, handlers );

		// Run delegates first; they may want to stop propagation beneath us
		i = 0;
		while ( (matched = handlerQueue[ i++ ]) && !event.isPropagationStopped() ) {
			event.currentTarget = matched.elem;

			j = 0;
			while ( (handleObj = matched.handlers[ j++ ]) && !event.isImmediatePropagationStopped() ) {

				// Triggered event must either 1) have no namespace, or 2) have namespace(s)
				// a subset or equal to those in the bound event (both can have no namespace).
				if ( !event.namespace_re || event.namespace_re.test( handleObj.namespace ) ) {

					event.handleObj = handleObj;
					event.data = handleObj.data;

					ret = ( (jQuery.event.special[ handleObj.origType ] || {}).handle || handleObj.handler )
							.apply( matched.elem, args );

					if ( ret !== undefined ) {
						if ( (event.result = ret) === false ) {
							event.preventDefault();
							event.stopPropagation();
						}
					}
				}
			}
		}

		// Call the postDispatch hook for the mapped type
		if ( special.postDispatch ) {
			special.postDispatch.call( this, event );
		}

		return event.result;
	},

	handlers: function( event, handlers ) {
		var i, matches, sel, handleObj,
			handlerQueue = [],
			delegateCount = handlers.delegateCount,
			cur = event.target;

		// Find delegate handlers
		// Black-hole SVG <use> instance trees (#13180)
		// Avoid non-left-click bubbling in Firefox (#3861)
		if ( delegateCount && cur.nodeType && (!event.button || event.type !== "click") ) {

			for ( ; cur !== this; cur = cur.parentNode || this ) {

				// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
				if ( cur.disabled !== true || event.type !== "click" ) {
					matches = [];
					for ( i = 0; i < delegateCount; i++ ) {
						handleObj = handlers[ i ];

						// Don't conflict with Object.prototype properties (#13203)
						sel = handleObj.selector + " ";

						if ( matches[ sel ] === undefined ) {
							matches[ sel ] = handleObj.needsContext ?
								jQuery( sel, this ).index( cur ) >= 0 :
								jQuery.find( sel, this, null, [ cur ] ).length;
						}
						if ( matches[ sel ] ) {
							matches.push( handleObj );
						}
					}
					if ( matches.length ) {
						handlerQueue.push({ elem: cur, handlers: matches });
					}
				}
			}
		}

		// Add the remaining (directly-bound) handlers
		if ( delegateCount < handlers.length ) {
			handlerQueue.push({ elem: this, handlers: handlers.slice( delegateCount ) });
		}

		return handlerQueue;
	},

	// Includes some event props shared by KeyEvent and MouseEvent
	props: "altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),

	fixHooks: {},

	keyHooks: {
		props: "char charCode key keyCode".split(" "),
		filter: function( event, original ) {

			// Add which for key events
			if ( event.which == null ) {
				event.which = original.charCode != null ? original.charCode : original.keyCode;
			}

			return event;
		}
	},

	mouseHooks: {
		props: "button buttons clientX clientY offsetX offsetY pageX pageY screenX screenY toElement".split(" "),
		filter: function( event, original ) {
			var eventDoc, doc, body,
				button = original.button;

			// Calculate pageX/Y if missing and clientX/Y available
			if ( event.pageX == null && original.clientX != null ) {
				eventDoc = event.target.ownerDocument || document;
				doc = eventDoc.documentElement;
				body = eventDoc.body;

				event.pageX = original.clientX + ( doc && doc.scrollLeft || body && body.scrollLeft || 0 ) - ( doc && doc.clientLeft || body && body.clientLeft || 0 );
				event.pageY = original.clientY + ( doc && doc.scrollTop  || body && body.scrollTop  || 0 ) - ( doc && doc.clientTop  || body && body.clientTop  || 0 );
			}

			// Add which for click: 1 === left; 2 === middle; 3 === right
			// Note: button is not normalized, so don't use it
			if ( !event.which && button !== undefined ) {
				event.which = ( button & 1 ? 1 : ( button & 2 ? 3 : ( button & 4 ? 2 : 0 ) ) );
			}

			return event;
		}
	},

	fix: function( event ) {
		if ( event[ jQuery.expando ] ) {
			return event;
		}

		// Create a writable copy of the event object and normalize some properties
		var i, prop, copy,
			type = event.type,
			originalEvent = event,
			fixHook = this.fixHooks[ type ];

		if ( !fixHook ) {
			this.fixHooks[ type ] = fixHook =
				rmouseEvent.test( type ) ? this.mouseHooks :
				rkeyEvent.test( type ) ? this.keyHooks :
				{};
		}
		copy = fixHook.props ? this.props.concat( fixHook.props ) : this.props;

		event = new jQuery.Event( originalEvent );

		i = copy.length;
		while ( i-- ) {
			prop = copy[ i ];
			event[ prop ] = originalEvent[ prop ];
		}

		// Support: Cordova 2.5 (WebKit) (#13255)
		// All events should have a target; Cordova deviceready doesn't
		if ( !event.target ) {
			event.target = document;
		}

		// Support: Safari 6.0+, Chrome<28
		// Target should not be a text node (#504, #13143)
		if ( event.target.nodeType === 3 ) {
			event.target = event.target.parentNode;
		}

		return fixHook.filter ? fixHook.filter( event, originalEvent ) : event;
	},

	special: {
		load: {
			// Prevent triggered image.load events from bubbling to window.load
			noBubble: true
		},
		focus: {
			// Fire native event if possible so blur/focus sequence is correct
			trigger: function() {
				if ( this !== safeActiveElement() && this.focus ) {
					this.focus();
					return false;
				}
			},
			delegateType: "focusin"
		},
		blur: {
			trigger: function() {
				if ( this === safeActiveElement() && this.blur ) {
					this.blur();
					return false;
				}
			},
			delegateType: "focusout"
		},
		click: {
			// For checkbox, fire native event so checked state will be right
			trigger: function() {
				if ( this.type === "checkbox" && this.click && jQuery.nodeName( this, "input" ) ) {
					this.click();
					return false;
				}
			},

			// For cross-browser consistency, don't fire native .click() on links
			_default: function( event ) {
				return jQuery.nodeName( event.target, "a" );
			}
		},

		beforeunload: {
			postDispatch: function( event ) {

				// Support: Firefox 20+
				// Firefox doesn't alert if the returnValue field is not set.
				if ( event.result !== undefined && event.originalEvent ) {
					event.originalEvent.returnValue = event.result;
				}
			}
		}
	},

	simulate: function( type, elem, event, bubble ) {
		// Piggyback on a donor event to simulate a different one.
		// Fake originalEvent to avoid donor's stopPropagation, but if the
		// simulated event prevents default then we do the same on the donor.
		var e = jQuery.extend(
			new jQuery.Event(),
			event,
			{
				type: type,
				isSimulated: true,
				originalEvent: {}
			}
		);
		if ( bubble ) {
			jQuery.event.trigger( e, null, elem );
		} else {
			jQuery.event.dispatch.call( elem, e );
		}
		if ( e.isDefaultPrevented() ) {
			event.preventDefault();
		}
	}
};

jQuery.removeEvent = function( elem, type, handle ) {
	if ( elem.removeEventListener ) {
		elem.removeEventListener( type, handle, false );
	}
};

jQuery.Event = function( src, props ) {
	// Allow instantiation without the 'new' keyword
	if ( !(this instanceof jQuery.Event) ) {
		return new jQuery.Event( src, props );
	}

	// Event object
	if ( src && src.type ) {
		this.originalEvent = src;
		this.type = src.type;

		// Events bubbling up the document may have been marked as prevented
		// by a handler lower down the tree; reflect the correct value.
		this.isDefaultPrevented = src.defaultPrevented ||
				src.defaultPrevented === undefined &&
				// Support: Android<4.0
				src.returnValue === false ?
			returnTrue :
			returnFalse;

	// Event type
	} else {
		this.type = src;
	}

	// Put explicitly provided properties onto the event object
	if ( props ) {
		jQuery.extend( this, props );
	}

	// Create a timestamp if incoming event doesn't have one
	this.timeStamp = src && src.timeStamp || jQuery.now();

	// Mark it as fixed
	this[ jQuery.expando ] = true;
};

// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
// http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
jQuery.Event.prototype = {
	isDefaultPrevented: returnFalse,
	isPropagationStopped: returnFalse,
	isImmediatePropagationStopped: returnFalse,

	preventDefault: function() {
		var e = this.originalEvent;

		this.isDefaultPrevented = returnTrue;

		if ( e && e.preventDefault ) {
			e.preventDefault();
		}
	},
	stopPropagation: function() {
		var e = this.originalEvent;

		this.isPropagationStopped = returnTrue;

		if ( e && e.stopPropagation ) {
			e.stopPropagation();
		}
	},
	stopImmediatePropagation: function() {
		var e = this.originalEvent;

		this.isImmediatePropagationStopped = returnTrue;

		if ( e && e.stopImmediatePropagation ) {
			e.stopImmediatePropagation();
		}

		this.stopPropagation();
	}
};

// Create mouseenter/leave events using mouseover/out and event-time checks
// Support: Chrome 15+
jQuery.each({
	mouseenter: "mouseover",
	mouseleave: "mouseout",
	pointerenter: "pointerover",
	pointerleave: "pointerout"
}, function( orig, fix ) {
	jQuery.event.special[ orig ] = {
		delegateType: fix,
		bindType: fix,

		handle: function( event ) {
			var ret,
				target = this,
				related = event.relatedTarget,
				handleObj = event.handleObj;

			// For mousenter/leave call the handler if related is outside the target.
			// NB: No relatedTarget if the mouse left/entered the browser window
			if ( !related || (related !== target && !jQuery.contains( target, related )) ) {
				event.type = handleObj.origType;
				ret = handleObj.handler.apply( this, arguments );
				event.type = fix;
			}
			return ret;
		}
	};
});

// Support: Firefox, Chrome, Safari
// Create "bubbling" focus and blur events
if ( !support.focusinBubbles ) {
	jQuery.each({ focus: "focusin", blur: "focusout" }, function( orig, fix ) {

		// Attach a single capturing handler on the document while someone wants focusin/focusout
		var handler = function( event ) {
				jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ), true );
			};

		jQuery.event.special[ fix ] = {
			setup: function() {
				var doc = this.ownerDocument || this,
					attaches = data_priv.access( doc, fix );

				if ( !attaches ) {
					doc.addEventListener( orig, handler, true );
				}
				data_priv.access( doc, fix, ( attaches || 0 ) + 1 );
			},
			teardown: function() {
				var doc = this.ownerDocument || this,
					attaches = data_priv.access( doc, fix ) - 1;

				if ( !attaches ) {
					doc.removeEventListener( orig, handler, true );
					data_priv.remove( doc, fix );

				} else {
					data_priv.access( doc, fix, attaches );
				}
			}
		};
	});
}

jQuery.fn.extend({

	on: function( types, selector, data, fn, /*INTERNAL*/ one ) {
		var origFn, type;

		// Types can be a map of types/handlers
		if ( typeof types === "object" ) {
			// ( types-Object, selector, data )
			if ( typeof selector !== "string" ) {
				// ( types-Object, data )
				data = data || selector;
				selector = undefined;
			}
			for ( type in types ) {
				this.on( type, selector, data, types[ type ], one );
			}
			return this;
		}

		if ( data == null && fn == null ) {
			// ( types, fn )
			fn = selector;
			data = selector = undefined;
		} else if ( fn == null ) {
			if ( typeof selector === "string" ) {
				// ( types, selector, fn )
				fn = data;
				data = undefined;
			} else {
				// ( types, data, fn )
				fn = data;
				data = selector;
				selector = undefined;
			}
		}
		if ( fn === false ) {
			fn = returnFalse;
		} else if ( !fn ) {
			return this;
		}

		if ( one === 1 ) {
			origFn = fn;
			fn = function( event ) {
				// Can use an empty set, since event contains the info
				jQuery().off( event );
				return origFn.apply( this, arguments );
			};
			// Use same guid so caller can remove using origFn
			fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
		}
		return this.each( function() {
			jQuery.event.add( this, types, fn, data, selector );
		});
	},
	one: function( types, selector, data, fn ) {
		return this.on( types, selector, data, fn, 1 );
	},
	off: function( types, selector, fn ) {
		var handleObj, type;
		if ( types && types.preventDefault && types.handleObj ) {
			// ( event )  dispatched jQuery.Event
			handleObj = types.handleObj;
			jQuery( types.delegateTarget ).off(
				handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType,
				handleObj.selector,
				handleObj.handler
			);
			return this;
		}
		if ( typeof types === "object" ) {
			// ( types-object [, selector] )
			for ( type in types ) {
				this.off( type, selector, types[ type ] );
			}
			return this;
		}
		if ( selector === false || typeof selector === "function" ) {
			// ( types [, fn] )
			fn = selector;
			selector = undefined;
		}
		if ( fn === false ) {
			fn = returnFalse;
		}
		return this.each(function() {
			jQuery.event.remove( this, types, fn, selector );
		});
	},

	trigger: function( type, data ) {
		return this.each(function() {
			jQuery.event.trigger( type, data, this );
		});
	},
	triggerHandler: function( type, data ) {
		var elem = this[0];
		if ( elem ) {
			return jQuery.event.trigger( type, data, elem, true );
		}
	}
});


var
	rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,
	rtagName = /<([\w:]+)/,
	rhtml = /<|&#?\w+;/,
	rnoInnerhtml = /<(?:script|style|link)/i,
	// checked="checked" or checked
	rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
	rscriptType = /^$|\/(?:java|ecma)script/i,
	rscriptTypeMasked = /^true\/(.*)/,
	rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,

	// We have to close these tags to support XHTML (#13200)
	wrapMap = {

		// Support: IE9
		option: [ 1, "<select multiple='multiple'>", "</select>" ],

		thead: [ 1, "<table>", "</table>" ],
		col: [ 2, "<table><colgroup>", "</colgroup></table>" ],
		tr: [ 2, "<table><tbody>", "</tbody></table>" ],
		td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

		_default: [ 0, "", "" ]
	};

// Support: IE9
wrapMap.optgroup = wrapMap.option;

wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
wrapMap.th = wrapMap.td;

// Support: 1.x compatibility
// Manipulating tables requires a tbody
function manipulationTarget( elem, content ) {
	return jQuery.nodeName( elem, "table" ) &&
		jQuery.nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ?

		elem.getElementsByTagName("tbody")[0] ||
			elem.appendChild( elem.ownerDocument.createElement("tbody") ) :
		elem;
}

// Replace/restore the type attribute of script elements for safe DOM manipulation
function disableScript( elem ) {
	elem.type = (elem.getAttribute("type") !== null) + "/" + elem.type;
	return elem;
}
function restoreScript( elem ) {
	var match = rscriptTypeMasked.exec( elem.type );

	if ( match ) {
		elem.type = match[ 1 ];
	} else {
		elem.removeAttribute("type");
	}

	return elem;
}

// Mark scripts as having already been evaluated
function setGlobalEval( elems, refElements ) {
	var i = 0,
		l = elems.length;

	for ( ; i < l; i++ ) {
		data_priv.set(
			elems[ i ], "globalEval", !refElements || data_priv.get( refElements[ i ], "globalEval" )
		);
	}
}

function cloneCopyEvent( src, dest ) {
	var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;

	if ( dest.nodeType !== 1 ) {
		return;
	}

	// 1. Copy private data: events, handlers, etc.
	if ( data_priv.hasData( src ) ) {
		pdataOld = data_priv.access( src );
		pdataCur = data_priv.set( dest, pdataOld );
		events = pdataOld.events;

		if ( events ) {
			delete pdataCur.handle;
			pdataCur.events = {};

			for ( type in events ) {
				for ( i = 0, l = events[ type ].length; i < l; i++ ) {
					jQuery.event.add( dest, type, events[ type ][ i ] );
				}
			}
		}
	}

	// 2. Copy user data
	if ( data_user.hasData( src ) ) {
		udataOld = data_user.access( src );
		udataCur = jQuery.extend( {}, udataOld );

		data_user.set( dest, udataCur );
	}
}

function getAll( context, tag ) {
	var ret = context.getElementsByTagName ? context.getElementsByTagName( tag || "*" ) :
			context.querySelectorAll ? context.querySelectorAll( tag || "*" ) :
			[];

	return tag === undefined || tag && jQuery.nodeName( context, tag ) ?
		jQuery.merge( [ context ], ret ) :
		ret;
}

// Fix IE bugs, see support tests
function fixInput( src, dest ) {
	var nodeName = dest.nodeName.toLowerCase();

	// Fails to persist the checked state of a cloned checkbox or radio button.
	if ( nodeName === "input" && rcheckableType.test( src.type ) ) {
		dest.checked = src.checked;

	// Fails to return the selected option to the default selected state when cloning options
	} else if ( nodeName === "input" || nodeName === "textarea" ) {
		dest.defaultValue = src.defaultValue;
	}
}

jQuery.extend({
	clone: function( elem, dataAndEvents, deepDataAndEvents ) {
		var i, l, srcElements, destElements,
			clone = elem.cloneNode( true ),
			inPage = jQuery.contains( elem.ownerDocument, elem );

		// Fix IE cloning issues
		if ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&
				!jQuery.isXMLDoc( elem ) ) {

			// We eschew Sizzle here for performance reasons: http://jsperf.com/getall-vs-sizzle/2
			destElements = getAll( clone );
			srcElements = getAll( elem );

			for ( i = 0, l = srcElements.length; i < l; i++ ) {
				fixInput( srcElements[ i ], destElements[ i ] );
			}
		}

		// Copy the events from the original to the clone
		if ( dataAndEvents ) {
			if ( deepDataAndEvents ) {
				srcElements = srcElements || getAll( elem );
				destElements = destElements || getAll( clone );

				for ( i = 0, l = srcElements.length; i < l; i++ ) {
					cloneCopyEvent( srcElements[ i ], destElements[ i ] );
				}
			} else {
				cloneCopyEvent( elem, clone );
			}
		}

		// Preserve script evaluation history
		destElements = getAll( clone, "script" );
		if ( destElements.length > 0 ) {
			setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
		}

		// Return the cloned set
		return clone;
	},

	buildFragment: function( elems, context, scripts, selection ) {
		var elem, tmp, tag, wrap, contains, j,
			fragment = context.createDocumentFragment(),
			nodes = [],
			i = 0,
			l = elems.length;

		for ( ; i < l; i++ ) {
			elem = elems[ i ];

			if ( elem || elem === 0 ) {

				// Add nodes directly
				if ( jQuery.type( elem ) === "object" ) {
					// Support: QtWebKit, PhantomJS
					// push.apply(_, arraylike) throws on ancient WebKit
					jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

				// Convert non-html into a text node
				} else if ( !rhtml.test( elem ) ) {
					nodes.push( context.createTextNode( elem ) );

				// Convert html into DOM nodes
				} else {
					tmp = tmp || fragment.appendChild( context.createElement("div") );

					// Deserialize a standard representation
					tag = ( rtagName.exec( elem ) || [ "", "" ] )[ 1 ].toLowerCase();
					wrap = wrapMap[ tag ] || wrapMap._default;
					tmp.innerHTML = wrap[ 1 ] + elem.replace( rxhtmlTag, "<$1></$2>" ) + wrap[ 2 ];

					// Descend through wrappers to the right content
					j = wrap[ 0 ];
					while ( j-- ) {
						tmp = tmp.lastChild;
					}

					// Support: QtWebKit, PhantomJS
					// push.apply(_, arraylike) throws on ancient WebKit
					jQuery.merge( nodes, tmp.childNodes );

					// Remember the top-level container
					tmp = fragment.firstChild;

					// Ensure the created nodes are orphaned (#12392)
					tmp.textContent = "";
				}
			}
		}

		// Remove wrapper from fragment
		fragment.textContent = "";

		i = 0;
		while ( (elem = nodes[ i++ ]) ) {

			// #4087 - If origin and destination elements are the same, and this is
			// that element, do not do anything
			if ( selection && jQuery.inArray( elem, selection ) !== -1 ) {
				continue;
			}

			contains = jQuery.contains( elem.ownerDocument, elem );

			// Append to fragment
			tmp = getAll( fragment.appendChild( elem ), "script" );

			// Preserve script evaluation history
			if ( contains ) {
				setGlobalEval( tmp );
			}

			// Capture executables
			if ( scripts ) {
				j = 0;
				while ( (elem = tmp[ j++ ]) ) {
					if ( rscriptType.test( elem.type || "" ) ) {
						scripts.push( elem );
					}
				}
			}
		}

		return fragment;
	},

	cleanData: function( elems ) {
		var data, elem, type, key,
			special = jQuery.event.special,
			i = 0;

		for ( ; (elem = elems[ i ]) !== undefined; i++ ) {
			if ( jQuery.acceptData( elem ) ) {
				key = elem[ data_priv.expando ];

				if ( key && (data = data_priv.cache[ key ]) ) {
					if ( data.events ) {
						for ( type in data.events ) {
							if ( special[ type ] ) {
								jQuery.event.remove( elem, type );

							// This is a shortcut to avoid jQuery.event.remove's overhead
							} else {
								jQuery.removeEvent( elem, type, data.handle );
							}
						}
					}
					if ( data_priv.cache[ key ] ) {
						// Discard any remaining `private` data
						delete data_priv.cache[ key ];
					}
				}
			}
			// Discard any remaining `user` data
			delete data_user.cache[ elem[ data_user.expando ] ];
		}
	}
});

jQuery.fn.extend({
	text: function( value ) {
		return access( this, function( value ) {
			return value === undefined ?
				jQuery.text( this ) :
				this.empty().each(function() {
					if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
						this.textContent = value;
					}
				});
		}, null, value, arguments.length );
	},

	append: function() {
		return this.domManip( arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.appendChild( elem );
			}
		});
	},

	prepend: function() {
		return this.domManip( arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.insertBefore( elem, target.firstChild );
			}
		});
	},

	before: function() {
		return this.domManip( arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this );
			}
		});
	},

	after: function() {
		return this.domManip( arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this.nextSibling );
			}
		});
	},

	remove: function( selector, keepData /* Internal Use Only */ ) {
		var elem,
			elems = selector ? jQuery.filter( selector, this ) : this,
			i = 0;

		for ( ; (elem = elems[i]) != null; i++ ) {
			if ( !keepData && elem.nodeType === 1 ) {
				jQuery.cleanData( getAll( elem ) );
			}

			if ( elem.parentNode ) {
				if ( keepData && jQuery.contains( elem.ownerDocument, elem ) ) {
					setGlobalEval( getAll( elem, "script" ) );
				}
				elem.parentNode.removeChild( elem );
			}
		}

		return this;
	},

	empty: function() {
		var elem,
			i = 0;

		for ( ; (elem = this[i]) != null; i++ ) {
			if ( elem.nodeType === 1 ) {

				// Prevent memory leaks
				jQuery.cleanData( getAll( elem, false ) );

				// Remove any remaining nodes
				elem.textContent = "";
			}
		}

		return this;
	},

	clone: function( dataAndEvents, deepDataAndEvents ) {
		dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
		deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

		return this.map(function() {
			return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
		});
	},

	html: function( value ) {
		return access( this, function( value ) {
			var elem = this[ 0 ] || {},
				i = 0,
				l = this.length;

			if ( value === undefined && elem.nodeType === 1 ) {
				return elem.innerHTML;
			}

			// See if we can take a shortcut and just use innerHTML
			if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
				!wrapMap[ ( rtagName.exec( value ) || [ "", "" ] )[ 1 ].toLowerCase() ] ) {

				value = value.replace( rxhtmlTag, "<$1></$2>" );

				try {
					for ( ; i < l; i++ ) {
						elem = this[ i ] || {};

						// Remove element nodes and prevent memory leaks
						if ( elem.nodeType === 1 ) {
							jQuery.cleanData( getAll( elem, false ) );
							elem.innerHTML = value;
						}
					}

					elem = 0;

				// If using innerHTML throws an exception, use the fallback method
				} catch( e ) {}
			}

			if ( elem ) {
				this.empty().append( value );
			}
		}, null, value, arguments.length );
	},

	replaceWith: function() {
		var arg = arguments[ 0 ];

		// Make the changes, replacing each context element with the new content
		this.domManip( arguments, function( elem ) {
			arg = this.parentNode;

			jQuery.cleanData( getAll( this ) );

			if ( arg ) {
				arg.replaceChild( elem, this );
			}
		});

		// Force removal if there was no new content (e.g., from empty arguments)
		return arg && (arg.length || arg.nodeType) ? this : this.remove();
	},

	detach: function( selector ) {
		return this.remove( selector, true );
	},

	domManip: function( args, callback ) {

		// Flatten any nested arrays
		args = concat.apply( [], args );

		var fragment, first, scripts, hasScripts, node, doc,
			i = 0,
			l = this.length,
			set = this,
			iNoClone = l - 1,
			value = args[ 0 ],
			isFunction = jQuery.isFunction( value );

		// We can't cloneNode fragments that contain checked, in WebKit
		if ( isFunction ||
				( l > 1 && typeof value === "string" &&
					!support.checkClone && rchecked.test( value ) ) ) {
			return this.each(function( index ) {
				var self = set.eq( index );
				if ( isFunction ) {
					args[ 0 ] = value.call( this, index, self.html() );
				}
				self.domManip( args, callback );
			});
		}

		if ( l ) {
			fragment = jQuery.buildFragment( args, this[ 0 ].ownerDocument, false, this );
			first = fragment.firstChild;

			if ( fragment.childNodes.length === 1 ) {
				fragment = first;
			}

			if ( first ) {
				scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
				hasScripts = scripts.length;

				// Use the original fragment for the last item instead of the first because it can end up
				// being emptied incorrectly in certain situations (#8070).
				for ( ; i < l; i++ ) {
					node = fragment;

					if ( i !== iNoClone ) {
						node = jQuery.clone( node, true, true );

						// Keep references to cloned scripts for later restoration
						if ( hasScripts ) {
							// Support: QtWebKit
							// jQuery.merge because push.apply(_, arraylike) throws
							jQuery.merge( scripts, getAll( node, "script" ) );
						}
					}

					callback.call( this[ i ], node, i );
				}

				if ( hasScripts ) {
					doc = scripts[ scripts.length - 1 ].ownerDocument;

					// Reenable scripts
					jQuery.map( scripts, restoreScript );

					// Evaluate executable scripts on first document insertion
					for ( i = 0; i < hasScripts; i++ ) {
						node = scripts[ i ];
						if ( rscriptType.test( node.type || "" ) &&
							!data_priv.access( node, "globalEval" ) && jQuery.contains( doc, node ) ) {

							if ( node.src ) {
								// Optional AJAX dependency, but won't run scripts if not present
								if ( jQuery._evalUrl ) {
									jQuery._evalUrl( node.src );
								}
							} else {
								jQuery.globalEval( node.textContent.replace( rcleanScript, "" ) );
							}
						}
					}
				}
			}
		}

		return this;
	}
});

jQuery.each({
	appendTo: "append",
	prependTo: "prepend",
	insertBefore: "before",
	insertAfter: "after",
	replaceAll: "replaceWith"
}, function( name, original ) {
	jQuery.fn[ name ] = function( selector ) {
		var elems,
			ret = [],
			insert = jQuery( selector ),
			last = insert.length - 1,
			i = 0;

		for ( ; i <= last; i++ ) {
			elems = i === last ? this : this.clone( true );
			jQuery( insert[ i ] )[ original ]( elems );

			// Support: QtWebKit
			// .get() because push.apply(_, arraylike) throws
			push.apply( ret, elems.get() );
		}

		return this.pushStack( ret );
	};
});


var iframe,
	elemdisplay = {};

/**
 * Retrieve the actual display of a element
 * @param {String} name nodeName of the element
 * @param {Object} doc Document object
 */
// Called only from within defaultDisplay
function actualDisplay( name, doc ) {
	var style,
		elem = jQuery( doc.createElement( name ) ).appendTo( doc.body ),

		// getDefaultComputedStyle might be reliably used only on attached element
		display = window.getDefaultComputedStyle && ( style = window.getDefaultComputedStyle( elem[ 0 ] ) ) ?

			// Use of this method is a temporary fix (more like optimization) until something better comes along,
			// since it was removed from specification and supported only in FF
			style.display : jQuery.css( elem[ 0 ], "display" );

	// We don't have any data stored on the element,
	// so use "detach" method as fast way to get rid of the element
	elem.detach();

	return display;
}

/**
 * Try to determine the default display value of an element
 * @param {String} nodeName
 */
function defaultDisplay( nodeName ) {
	var doc = document,
		display = elemdisplay[ nodeName ];

	if ( !display ) {
		display = actualDisplay( nodeName, doc );

		// If the simple way fails, read from inside an iframe
		if ( display === "none" || !display ) {

			// Use the already-created iframe if possible
			iframe = (iframe || jQuery( "<iframe frameborder='0' width='0' height='0'/>" )).appendTo( doc.documentElement );

			// Always write a new HTML skeleton so Webkit and Firefox don't choke on reuse
			doc = iframe[ 0 ].contentDocument;

			// Support: IE
			doc.write();
			doc.close();

			display = actualDisplay( nodeName, doc );
			iframe.detach();
		}

		// Store the correct default display
		elemdisplay[ nodeName ] = display;
	}

	return display;
}
var rmargin = (/^margin/);

var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );

var getStyles = function( elem ) {
		// Support: IE<=11+, Firefox<=30+ (#15098, #14150)
		// IE throws on elements created in popups
		// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
		if ( elem.ownerDocument.defaultView.opener ) {
			return elem.ownerDocument.defaultView.getComputedStyle( elem, null );
		}

		return window.getComputedStyle( elem, null );
	};



function curCSS( elem, name, computed ) {
	var width, minWidth, maxWidth, ret,
		style = elem.style;

	computed = computed || getStyles( elem );

	// Support: IE9
	// getPropertyValue is only needed for .css('filter') (#12537)
	if ( computed ) {
		ret = computed.getPropertyValue( name ) || computed[ name ];
	}

	if ( computed ) {

		if ( ret === "" && !jQuery.contains( elem.ownerDocument, elem ) ) {
			ret = jQuery.style( elem, name );
		}

		// Support: iOS < 6
		// A tribute to the "awesome hack by Dean Edwards"
		// iOS < 6 (at least) returns percentage for a larger set of values, but width seems to be reliably pixels
		// this is against the CSSOM draft spec: http://dev.w3.org/csswg/cssom/#resolved-values
		if ( rnumnonpx.test( ret ) && rmargin.test( name ) ) {

			// Remember the original values
			width = style.width;
			minWidth = style.minWidth;
			maxWidth = style.maxWidth;

			// Put in the new values to get a computed value out
			style.minWidth = style.maxWidth = style.width = ret;
			ret = computed.width;

			// Revert the changed values
			style.width = width;
			style.minWidth = minWidth;
			style.maxWidth = maxWidth;
		}
	}

	return ret !== undefined ?
		// Support: IE
		// IE returns zIndex value as an integer.
		ret + "" :
		ret;
}


function addGetHookIf( conditionFn, hookFn ) {
	// Define the hook, we'll check on the first run if it's really needed.
	return {
		get: function() {
			if ( conditionFn() ) {
				// Hook not needed (or it's not possible to use it due
				// to missing dependency), remove it.
				delete this.get;
				return;
			}

			// Hook needed; redefine it so that the support test is not executed again.
			return (this.get = hookFn).apply( this, arguments );
		}
	};
}


(function() {
	var pixelPositionVal, boxSizingReliableVal,
		docElem = document.documentElement,
		container = document.createElement( "div" ),
		div = document.createElement( "div" );

	if ( !div.style ) {
		return;
	}

	// Support: IE9-11+
	// Style of cloned element affects source element cloned (#8908)
	div.style.backgroundClip = "content-box";
	div.cloneNode( true ).style.backgroundClip = "";
	support.clearCloneStyle = div.style.backgroundClip === "content-box";

	container.style.cssText = "border:0;width:0;height:0;top:0;left:-9999px;margin-top:1px;" +
		"position:absolute";
	container.appendChild( div );

	// Executing both pixelPosition & boxSizingReliable tests require only one layout
	// so they're executed at the same time to save the second computation.
	function computePixelPositionAndBoxSizingReliable() {
		div.style.cssText =
			// Support: Firefox<29, Android 2.3
			// Vendor-prefix box-sizing
			"-webkit-box-sizing:border-box;-moz-box-sizing:border-box;" +
			"box-sizing:border-box;display:block;margin-top:1%;top:1%;" +
			"border:1px;padding:1px;width:4px;position:absolute";
		div.innerHTML = "";
		docElem.appendChild( container );

		var divStyle = window.getComputedStyle( div, null );
		pixelPositionVal = divStyle.top !== "1%";
		boxSizingReliableVal = divStyle.width === "4px";

		docElem.removeChild( container );
	}

	// Support: node.js jsdom
	// Don't assume that getComputedStyle is a property of the global object
	if ( window.getComputedStyle ) {
		jQuery.extend( support, {
			pixelPosition: function() {

				// This test is executed only once but we still do memoizing
				// since we can use the boxSizingReliable pre-computing.
				// No need to check if the test was already performed, though.
				computePixelPositionAndBoxSizingReliable();
				return pixelPositionVal;
			},
			boxSizingReliable: function() {
				if ( boxSizingReliableVal == null ) {
					computePixelPositionAndBoxSizingReliable();
				}
				return boxSizingReliableVal;
			},
			reliableMarginRight: function() {

				// Support: Android 2.3
				// Check if div with explicit width and no margin-right incorrectly
				// gets computed margin-right based on width of container. (#3333)
				// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
				// This support function is only executed once so no memoizing is needed.
				var ret,
					marginDiv = div.appendChild( document.createElement( "div" ) );

				// Reset CSS: box-sizing; display; margin; border; padding
				marginDiv.style.cssText = div.style.cssText =
					// Support: Firefox<29, Android 2.3
					// Vendor-prefix box-sizing
					"-webkit-box-sizing:content-box;-moz-box-sizing:content-box;" +
					"box-sizing:content-box;display:block;margin:0;border:0;padding:0";
				marginDiv.style.marginRight = marginDiv.style.width = "0";
				div.style.width = "1px";
				docElem.appendChild( container );

				ret = !parseFloat( window.getComputedStyle( marginDiv, null ).marginRight );

				docElem.removeChild( container );
				div.removeChild( marginDiv );

				return ret;
			}
		});
	}
})();


// A method for quickly swapping in/out CSS properties to get correct calculations.
jQuery.swap = function( elem, options, callback, args ) {
	var ret, name,
		old = {};

	// Remember the old values, and insert the new ones
	for ( name in options ) {
		old[ name ] = elem.style[ name ];
		elem.style[ name ] = options[ name ];
	}

	ret = callback.apply( elem, args || [] );

	// Revert the old values
	for ( name in options ) {
		elem.style[ name ] = old[ name ];
	}

	return ret;
};


var
	// Swappable if display is none or starts with table except "table", "table-cell", or "table-caption"
	// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
	rdisplayswap = /^(none|table(?!-c[ea]).+)/,
	rnumsplit = new RegExp( "^(" + pnum + ")(.*)$", "i" ),
	rrelNum = new RegExp( "^([+-])=(" + pnum + ")", "i" ),

	cssShow = { position: "absolute", visibility: "hidden", display: "block" },
	cssNormalTransform = {
		letterSpacing: "0",
		fontWeight: "400"
	},

	cssPrefixes = [ "Webkit", "O", "Moz", "ms" ];

// Return a css property mapped to a potentially vendor prefixed property
function vendorPropName( style, name ) {

	// Shortcut for names that are not vendor prefixed
	if ( name in style ) {
		return name;
	}

	// Check for vendor prefixed names
	var capName = name[0].toUpperCase() + name.slice(1),
		origName = name,
		i = cssPrefixes.length;

	while ( i-- ) {
		name = cssPrefixes[ i ] + capName;
		if ( name in style ) {
			return name;
		}
	}

	return origName;
}

function setPositiveNumber( elem, value, subtract ) {
	var matches = rnumsplit.exec( value );
	return matches ?
		// Guard against undefined "subtract", e.g., when used as in cssHooks
		Math.max( 0, matches[ 1 ] - ( subtract || 0 ) ) + ( matches[ 2 ] || "px" ) :
		value;
}

function augmentWidthOrHeight( elem, name, extra, isBorderBox, styles ) {
	var i = extra === ( isBorderBox ? "border" : "content" ) ?
		// If we already have the right measurement, avoid augmentation
		4 :
		// Otherwise initialize for horizontal or vertical properties
		name === "width" ? 1 : 0,

		val = 0;

	for ( ; i < 4; i += 2 ) {
		// Both box models exclude margin, so add it if we want it
		if ( extra === "margin" ) {
			val += jQuery.css( elem, extra + cssExpand[ i ], true, styles );
		}

		if ( isBorderBox ) {
			// border-box includes padding, so remove it if we want content
			if ( extra === "content" ) {
				val -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
			}

			// At this point, extra isn't border nor margin, so remove border
			if ( extra !== "margin" ) {
				val -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		} else {
			// At this point, extra isn't content, so add padding
			val += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

			// At this point, extra isn't content nor padding, so add border
			if ( extra !== "padding" ) {
				val += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		}
	}

	return val;
}

function getWidthOrHeight( elem, name, extra ) {

	// Start with offset property, which is equivalent to the border-box value
	var valueIsBorderBox = true,
		val = name === "width" ? elem.offsetWidth : elem.offsetHeight,
		styles = getStyles( elem ),
		isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box";

	// Some non-html elements return undefined for offsetWidth, so check for null/undefined
	// svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285
	// MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668
	if ( val <= 0 || val == null ) {
		// Fall back to computed then uncomputed css if necessary
		val = curCSS( elem, name, styles );
		if ( val < 0 || val == null ) {
			val = elem.style[ name ];
		}

		// Computed unit is not pixels. Stop here and return.
		if ( rnumnonpx.test(val) ) {
			return val;
		}

		// Check for style in case a browser which returns unreliable values
		// for getComputedStyle silently falls back to the reliable elem.style
		valueIsBorderBox = isBorderBox &&
			( support.boxSizingReliable() || val === elem.style[ name ] );

		// Normalize "", auto, and prepare for extra
		val = parseFloat( val ) || 0;
	}

	// Use the active box-sizing model to add/subtract irrelevant styles
	return ( val +
		augmentWidthOrHeight(
			elem,
			name,
			extra || ( isBorderBox ? "border" : "content" ),
			valueIsBorderBox,
			styles
		)
	) + "px";
}

function showHide( elements, show ) {
	var display, elem, hidden,
		values = [],
		index = 0,
		length = elements.length;

	for ( ; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}

		values[ index ] = data_priv.get( elem, "olddisplay" );
		display = elem.style.display;
		if ( show ) {
			// Reset the inline display of this element to learn if it is
			// being hidden by cascaded rules or not
			if ( !values[ index ] && display === "none" ) {
				elem.style.display = "";
			}

			// Set elements which have been overridden with display: none
			// in a stylesheet to whatever the default browser style is
			// for such an element
			if ( elem.style.display === "" && isHidden( elem ) ) {
				values[ index ] = data_priv.access( elem, "olddisplay", defaultDisplay(elem.nodeName) );
			}
		} else {
			hidden = isHidden( elem );

			if ( display !== "none" || !hidden ) {
				data_priv.set( elem, "olddisplay", hidden ? display : jQuery.css( elem, "display" ) );
			}
		}
	}

	// Set the display of most of the elements in a second loop
	// to avoid the constant reflow
	for ( index = 0; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}
		if ( !show || elem.style.display === "none" || elem.style.display === "" ) {
			elem.style.display = show ? values[ index ] || "" : "none";
		}
	}

	return elements;
}

jQuery.extend({

	// Add in style property hooks for overriding the default
	// behavior of getting and setting a style property
	cssHooks: {
		opacity: {
			get: function( elem, computed ) {
				if ( computed ) {

					// We should always get a number back from opacity
					var ret = curCSS( elem, "opacity" );
					return ret === "" ? "1" : ret;
				}
			}
		}
	},

	// Don't automatically add "px" to these possibly-unitless properties
	cssNumber: {
		"columnCount": true,
		"fillOpacity": true,
		"flexGrow": true,
		"flexShrink": true,
		"fontWeight": true,
		"lineHeight": true,
		"opacity": true,
		"order": true,
		"orphans": true,
		"widows": true,
		"zIndex": true,
		"zoom": true
	},

	// Add in properties whose names you wish to fix before
	// setting or getting the value
	cssProps: {
		"float": "cssFloat"
	},

	// Get and set the style property on a DOM Node
	style: function( elem, name, value, extra ) {

		// Don't set styles on text and comment nodes
		if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
			return;
		}

		// Make sure that we're working with the right name
		var ret, type, hooks,
			origName = jQuery.camelCase( name ),
			style = elem.style;

		name = jQuery.cssProps[ origName ] || ( jQuery.cssProps[ origName ] = vendorPropName( style, origName ) );

		// Gets hook for the prefixed version, then unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// Check if we're setting a value
		if ( value !== undefined ) {
			type = typeof value;

			// Convert "+=" or "-=" to relative numbers (#7345)
			if ( type === "string" && (ret = rrelNum.exec( value )) ) {
				value = ( ret[1] + 1 ) * ret[2] + parseFloat( jQuery.css( elem, name ) );
				// Fixes bug #9237
				type = "number";
			}

			// Make sure that null and NaN values aren't set (#7116)
			if ( value == null || value !== value ) {
				return;
			}

			// If a number, add 'px' to the (except for certain CSS properties)
			if ( type === "number" && !jQuery.cssNumber[ origName ] ) {
				value += "px";
			}

			// Support: IE9-11+
			// background-* props affect original clone's values
			if ( !support.clearCloneStyle && value === "" && name.indexOf( "background" ) === 0 ) {
				style[ name ] = "inherit";
			}

			// If a hook was provided, use that value, otherwise just set the specified value
			if ( !hooks || !("set" in hooks) || (value = hooks.set( elem, value, extra )) !== undefined ) {
				style[ name ] = value;
			}

		} else {
			// If a hook was provided get the non-computed value from there
			if ( hooks && "get" in hooks && (ret = hooks.get( elem, false, extra )) !== undefined ) {
				return ret;
			}

			// Otherwise just get the value from the style object
			return style[ name ];
		}
	},

	css: function( elem, name, extra, styles ) {
		var val, num, hooks,
			origName = jQuery.camelCase( name );

		// Make sure that we're working with the right name
		name = jQuery.cssProps[ origName ] || ( jQuery.cssProps[ origName ] = vendorPropName( elem.style, origName ) );

		// Try prefixed name followed by the unprefixed name
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// If a hook was provided get the computed value from there
		if ( hooks && "get" in hooks ) {
			val = hooks.get( elem, true, extra );
		}

		// Otherwise, if a way to get the computed value exists, use that
		if ( val === undefined ) {
			val = curCSS( elem, name, styles );
		}

		// Convert "normal" to computed value
		if ( val === "normal" && name in cssNormalTransform ) {
			val = cssNormalTransform[ name ];
		}

		// Make numeric if forced or a qualifier was provided and val looks numeric
		if ( extra === "" || extra ) {
			num = parseFloat( val );
			return extra === true || jQuery.isNumeric( num ) ? num || 0 : val;
		}
		return val;
	}
});

jQuery.each([ "height", "width" ], function( i, name ) {
	jQuery.cssHooks[ name ] = {
		get: function( elem, computed, extra ) {
			if ( computed ) {

				// Certain elements can have dimension info if we invisibly show them
				// but it must have a current display style that would benefit
				return rdisplayswap.test( jQuery.css( elem, "display" ) ) && elem.offsetWidth === 0 ?
					jQuery.swap( elem, cssShow, function() {
						return getWidthOrHeight( elem, name, extra );
					}) :
					getWidthOrHeight( elem, name, extra );
			}
		},

		set: function( elem, value, extra ) {
			var styles = extra && getStyles( elem );
			return setPositiveNumber( elem, value, extra ?
				augmentWidthOrHeight(
					elem,
					name,
					extra,
					jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
					styles
				) : 0
			);
		}
	};
});

// Support: Android 2.3
jQuery.cssHooks.marginRight = addGetHookIf( support.reliableMarginRight,
	function( elem, computed ) {
		if ( computed ) {
			return jQuery.swap( elem, { "display": "inline-block" },
				curCSS, [ elem, "marginRight" ] );
		}
	}
);

// These hooks are used by animate to expand properties
jQuery.each({
	margin: "",
	padding: "",
	border: "Width"
}, function( prefix, suffix ) {
	jQuery.cssHooks[ prefix + suffix ] = {
		expand: function( value ) {
			var i = 0,
				expanded = {},

				// Assumes a single number if not a string
				parts = typeof value === "string" ? value.split(" ") : [ value ];

			for ( ; i < 4; i++ ) {
				expanded[ prefix + cssExpand[ i ] + suffix ] =
					parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
			}

			return expanded;
		}
	};

	if ( !rmargin.test( prefix ) ) {
		jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
	}
});

jQuery.fn.extend({
	css: function( name, value ) {
		return access( this, function( elem, name, value ) {
			var styles, len,
				map = {},
				i = 0;

			if ( jQuery.isArray( name ) ) {
				styles = getStyles( elem );
				len = name.length;

				for ( ; i < len; i++ ) {
					map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
				}

				return map;
			}

			return value !== undefined ?
				jQuery.style( elem, name, value ) :
				jQuery.css( elem, name );
		}, name, value, arguments.length > 1 );
	},
	show: function() {
		return showHide( this, true );
	},
	hide: function() {
		return showHide( this );
	},
	toggle: function( state ) {
		if ( typeof state === "boolean" ) {
			return state ? this.show() : this.hide();
		}

		return this.each(function() {
			if ( isHidden( this ) ) {
				jQuery( this ).show();
			} else {
				jQuery( this ).hide();
			}
		});
	}
});


function Tween( elem, options, prop, end, easing ) {
	return new Tween.prototype.init( elem, options, prop, end, easing );
}
jQuery.Tween = Tween;

Tween.prototype = {
	constructor: Tween,
	init: function( elem, options, prop, end, easing, unit ) {
		this.elem = elem;
		this.prop = prop;
		this.easing = easing || "swing";
		this.options = options;
		this.start = this.now = this.cur();
		this.end = end;
		this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
	},
	cur: function() {
		var hooks = Tween.propHooks[ this.prop ];

		return hooks && hooks.get ?
			hooks.get( this ) :
			Tween.propHooks._default.get( this );
	},
	run: function( percent ) {
		var eased,
			hooks = Tween.propHooks[ this.prop ];

		if ( this.options.duration ) {
			this.pos = eased = jQuery.easing[ this.easing ](
				percent, this.options.duration * percent, 0, 1, this.options.duration
			);
		} else {
			this.pos = eased = percent;
		}
		this.now = ( this.end - this.start ) * eased + this.start;

		if ( this.options.step ) {
			this.options.step.call( this.elem, this.now, this );
		}

		if ( hooks && hooks.set ) {
			hooks.set( this );
		} else {
			Tween.propHooks._default.set( this );
		}
		return this;
	}
};

Tween.prototype.init.prototype = Tween.prototype;

Tween.propHooks = {
	_default: {
		get: function( tween ) {
			var result;

			if ( tween.elem[ tween.prop ] != null &&
				(!tween.elem.style || tween.elem.style[ tween.prop ] == null) ) {
				return tween.elem[ tween.prop ];
			}

			// Passing an empty string as a 3rd parameter to .css will automatically
			// attempt a parseFloat and fallback to a string if the parse fails.
			// Simple values such as "10px" are parsed to Float;
			// complex values such as "rotate(1rad)" are returned as-is.
			result = jQuery.css( tween.elem, tween.prop, "" );
			// Empty strings, null, undefined and "auto" are converted to 0.
			return !result || result === "auto" ? 0 : result;
		},
		set: function( tween ) {
			// Use step hook for back compat.
			// Use cssHook if its there.
			// Use .style if available and use plain properties where available.
			if ( jQuery.fx.step[ tween.prop ] ) {
				jQuery.fx.step[ tween.prop ]( tween );
			} else if ( tween.elem.style && ( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null || jQuery.cssHooks[ tween.prop ] ) ) {
				jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
			} else {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	}
};

// Support: IE9
// Panic based approach to setting things on disconnected nodes
Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
	set: function( tween ) {
		if ( tween.elem.nodeType && tween.elem.parentNode ) {
			tween.elem[ tween.prop ] = tween.now;
		}
	}
};

jQuery.easing = {
	linear: function( p ) {
		return p;
	},
	swing: function( p ) {
		return 0.5 - Math.cos( p * Math.PI ) / 2;
	}
};

jQuery.fx = Tween.prototype.init;

// Back Compat <1.8 extension point
jQuery.fx.step = {};




var
	fxNow, timerId,
	rfxtypes = /^(?:toggle|show|hide)$/,
	rfxnum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" ),
	rrun = /queueHooks$/,
	animationPrefilters = [ defaultPrefilter ],
	tweeners = {
		"*": [ function( prop, value ) {
			var tween = this.createTween( prop, value ),
				target = tween.cur(),
				parts = rfxnum.exec( value ),
				unit = parts && parts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),

				// Starting value computation is required for potential unit mismatches
				start = ( jQuery.cssNumber[ prop ] || unit !== "px" && +target ) &&
					rfxnum.exec( jQuery.css( tween.elem, prop ) ),
				scale = 1,
				maxIterations = 20;

			if ( start && start[ 3 ] !== unit ) {
				// Trust units reported by jQuery.css
				unit = unit || start[ 3 ];

				// Make sure we update the tween properties later on
				parts = parts || [];

				// Iteratively approximate from a nonzero starting point
				start = +target || 1;

				do {
					// If previous iteration zeroed out, double until we get *something*.
					// Use string for doubling so we don't accidentally see scale as unchanged below
					scale = scale || ".5";

					// Adjust and apply
					start = start / scale;
					jQuery.style( tween.elem, prop, start + unit );

				// Update scale, tolerating zero or NaN from tween.cur(),
				// break the loop if scale is unchanged or perfect, or if we've just had enough
				} while ( scale !== (scale = tween.cur() / target) && scale !== 1 && --maxIterations );
			}

			// Update tween properties
			if ( parts ) {
				start = tween.start = +start || +target || 0;
				tween.unit = unit;
				// If a +=/-= token was provided, we're doing a relative animation
				tween.end = parts[ 1 ] ?
					start + ( parts[ 1 ] + 1 ) * parts[ 2 ] :
					+parts[ 2 ];
			}

			return tween;
		} ]
	};

// Animations created synchronously will run synchronously
function createFxNow() {
	setTimeout(function() {
		fxNow = undefined;
	});
	return ( fxNow = jQuery.now() );
}

// Generate parameters to create a standard animation
function genFx( type, includeWidth ) {
	var which,
		i = 0,
		attrs = { height: type };

	// If we include width, step value is 1 to do all cssExpand values,
	// otherwise step value is 2 to skip over Left and Right
	includeWidth = includeWidth ? 1 : 0;
	for ( ; i < 4 ; i += 2 - includeWidth ) {
		which = cssExpand[ i ];
		attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
	}

	if ( includeWidth ) {
		attrs.opacity = attrs.width = type;
	}

	return attrs;
}

function createTween( value, prop, animation ) {
	var tween,
		collection = ( tweeners[ prop ] || [] ).concat( tweeners[ "*" ] ),
		index = 0,
		length = collection.length;
	for ( ; index < length; index++ ) {
		if ( (tween = collection[ index ].call( animation, prop, value )) ) {

			// We're done with this property
			return tween;
		}
	}
}

function defaultPrefilter( elem, props, opts ) {
	/* jshint validthis: true */
	var prop, value, toggle, tween, hooks, oldfire, display, checkDisplay,
		anim = this,
		orig = {},
		style = elem.style,
		hidden = elem.nodeType && isHidden( elem ),
		dataShow = data_priv.get( elem, "fxshow" );

	// Handle queue: false promises
	if ( !opts.queue ) {
		hooks = jQuery._queueHooks( elem, "fx" );
		if ( hooks.unqueued == null ) {
			hooks.unqueued = 0;
			oldfire = hooks.empty.fire;
			hooks.empty.fire = function() {
				if ( !hooks.unqueued ) {
					oldfire();
				}
			};
		}
		hooks.unqueued++;

		anim.always(function() {
			// Ensure the complete handler is called before this completes
			anim.always(function() {
				hooks.unqueued--;
				if ( !jQuery.queue( elem, "fx" ).length ) {
					hooks.empty.fire();
				}
			});
		});
	}

	// Height/width overflow pass
	if ( elem.nodeType === 1 && ( "height" in props || "width" in props ) ) {
		// Make sure that nothing sneaks out
		// Record all 3 overflow attributes because IE9-10 do not
		// change the overflow attribute when overflowX and
		// overflowY are set to the same value
		opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

		// Set display property to inline-block for height/width
		// animations on inline elements that are having width/height animated
		display = jQuery.css( elem, "display" );

		// Test default display if display is currently "none"
		checkDisplay = display === "none" ?
			data_priv.get( elem, "olddisplay" ) || defaultDisplay( elem.nodeName ) : display;

		if ( checkDisplay === "inline" && jQuery.css( elem, "float" ) === "none" ) {
			style.display = "inline-block";
		}
	}

	if ( opts.overflow ) {
		style.overflow = "hidden";
		anim.always(function() {
			style.overflow = opts.overflow[ 0 ];
			style.overflowX = opts.overflow[ 1 ];
			style.overflowY = opts.overflow[ 2 ];
		});
	}

	// show/hide pass
	for ( prop in props ) {
		value = props[ prop ];
		if ( rfxtypes.exec( value ) ) {
			delete props[ prop ];
			toggle = toggle || value === "toggle";
			if ( value === ( hidden ? "hide" : "show" ) ) {

				// If there is dataShow left over from a stopped hide or show and we are going to proceed with show, we should pretend to be hidden
				if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
					hidden = true;
				} else {
					continue;
				}
			}
			orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );

		// Any non-fx value stops us from restoring the original display value
		} else {
			display = undefined;
		}
	}

	if ( !jQuery.isEmptyObject( orig ) ) {
		if ( dataShow ) {
			if ( "hidden" in dataShow ) {
				hidden = dataShow.hidden;
			}
		} else {
			dataShow = data_priv.access( elem, "fxshow", {} );
		}

		// Store state if its toggle - enables .stop().toggle() to "reverse"
		if ( toggle ) {
			dataShow.hidden = !hidden;
		}
		if ( hidden ) {
			jQuery( elem ).show();
		} else {
			anim.done(function() {
				jQuery( elem ).hide();
			});
		}
		anim.done(function() {
			var prop;

			data_priv.remove( elem, "fxshow" );
			for ( prop in orig ) {
				jQuery.style( elem, prop, orig[ prop ] );
			}
		});
		for ( prop in orig ) {
			tween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );

			if ( !( prop in dataShow ) ) {
				dataShow[ prop ] = tween.start;
				if ( hidden ) {
					tween.end = tween.start;
					tween.start = prop === "width" || prop === "height" ? 1 : 0;
				}
			}
		}

	// If this is a noop like .hide().hide(), restore an overwritten display value
	} else if ( (display === "none" ? defaultDisplay( elem.nodeName ) : display) === "inline" ) {
		style.display = display;
	}
}

function propFilter( props, specialEasing ) {
	var index, name, easing, value, hooks;

	// camelCase, specialEasing and expand cssHook pass
	for ( index in props ) {
		name = jQuery.camelCase( index );
		easing = specialEasing[ name ];
		value = props[ index ];
		if ( jQuery.isArray( value ) ) {
			easing = value[ 1 ];
			value = props[ index ] = value[ 0 ];
		}

		if ( index !== name ) {
			props[ name ] = value;
			delete props[ index ];
		}

		hooks = jQuery.cssHooks[ name ];
		if ( hooks && "expand" in hooks ) {
			value = hooks.expand( value );
			delete props[ name ];

			// Not quite $.extend, this won't overwrite existing keys.
			// Reusing 'index' because we have the correct "name"
			for ( index in value ) {
				if ( !( index in props ) ) {
					props[ index ] = value[ index ];
					specialEasing[ index ] = easing;
				}
			}
		} else {
			specialEasing[ name ] = easing;
		}
	}
}

function Animation( elem, properties, options ) {
	var result,
		stopped,
		index = 0,
		length = animationPrefilters.length,
		deferred = jQuery.Deferred().always( function() {
			// Don't match elem in the :animated selector
			delete tick.elem;
		}),
		tick = function() {
			if ( stopped ) {
				return false;
			}
			var currentTime = fxNow || createFxNow(),
				remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),
				// Support: Android 2.3
				// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
				temp = remaining / animation.duration || 0,
				percent = 1 - temp,
				index = 0,
				length = animation.tweens.length;

			for ( ; index < length ; index++ ) {
				animation.tweens[ index ].run( percent );
			}

			deferred.notifyWith( elem, [ animation, percent, remaining ]);

			if ( percent < 1 && length ) {
				return remaining;
			} else {
				deferred.resolveWith( elem, [ animation ] );
				return false;
			}
		},
		animation = deferred.promise({
			elem: elem,
			props: jQuery.extend( {}, properties ),
			opts: jQuery.extend( true, { specialEasing: {} }, options ),
			originalProperties: properties,
			originalOptions: options,
			startTime: fxNow || createFxNow(),
			duration: options.duration,
			tweens: [],
			createTween: function( prop, end ) {
				var tween = jQuery.Tween( elem, animation.opts, prop, end,
						animation.opts.specialEasing[ prop ] || animation.opts.easing );
				animation.tweens.push( tween );
				return tween;
			},
			stop: function( gotoEnd ) {
				var index = 0,
					// If we are going to the end, we want to run all the tweens
					// otherwise we skip this part
					length = gotoEnd ? animation.tweens.length : 0;
				if ( stopped ) {
					return this;
				}
				stopped = true;
				for ( ; index < length ; index++ ) {
					animation.tweens[ index ].run( 1 );
				}

				// Resolve when we played the last frame; otherwise, reject
				if ( gotoEnd ) {
					deferred.resolveWith( elem, [ animation, gotoEnd ] );
				} else {
					deferred.rejectWith( elem, [ animation, gotoEnd ] );
				}
				return this;
			}
		}),
		props = animation.props;

	propFilter( props, animation.opts.specialEasing );

	for ( ; index < length ; index++ ) {
		result = animationPrefilters[ index ].call( animation, elem, props, animation.opts );
		if ( result ) {
			return result;
		}
	}

	jQuery.map( props, createTween, animation );

	if ( jQuery.isFunction( animation.opts.start ) ) {
		animation.opts.start.call( elem, animation );
	}

	jQuery.fx.timer(
		jQuery.extend( tick, {
			elem: elem,
			anim: animation,
			queue: animation.opts.queue
		})
	);

	// attach callbacks from options
	return animation.progress( animation.opts.progress )
		.done( animation.opts.done, animation.opts.complete )
		.fail( animation.opts.fail )
		.always( animation.opts.always );
}

jQuery.Animation = jQuery.extend( Animation, {

	tweener: function( props, callback ) {
		if ( jQuery.isFunction( props ) ) {
			callback = props;
			props = [ "*" ];
		} else {
			props = props.split(" ");
		}

		var prop,
			index = 0,
			length = props.length;

		for ( ; index < length ; index++ ) {
			prop = props[ index ];
			tweeners[ prop ] = tweeners[ prop ] || [];
			tweeners[ prop ].unshift( callback );
		}
	},

	prefilter: function( callback, prepend ) {
		if ( prepend ) {
			animationPrefilters.unshift( callback );
		} else {
			animationPrefilters.push( callback );
		}
	}
});

jQuery.speed = function( speed, easing, fn ) {
	var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
		complete: fn || !fn && easing ||
			jQuery.isFunction( speed ) && speed,
		duration: speed,
		easing: fn && easing || easing && !jQuery.isFunction( easing ) && easing
	};

	opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ? opt.duration :
		opt.duration in jQuery.fx.speeds ? jQuery.fx.speeds[ opt.duration ] : jQuery.fx.speeds._default;

	// Normalize opt.queue - true/undefined/null -> "fx"
	if ( opt.queue == null || opt.queue === true ) {
		opt.queue = "fx";
	}

	// Queueing
	opt.old = opt.complete;

	opt.complete = function() {
		if ( jQuery.isFunction( opt.old ) ) {
			opt.old.call( this );
		}

		if ( opt.queue ) {
			jQuery.dequeue( this, opt.queue );
		}
	};

	return opt;
};

jQuery.fn.extend({
	fadeTo: function( speed, to, easing, callback ) {

		// Show any hidden elements after setting opacity to 0
		return this.filter( isHidden ).css( "opacity", 0 ).show()

			// Animate to the value specified
			.end().animate({ opacity: to }, speed, easing, callback );
	},
	animate: function( prop, speed, easing, callback ) {
		var empty = jQuery.isEmptyObject( prop ),
			optall = jQuery.speed( speed, easing, callback ),
			doAnimation = function() {
				// Operate on a copy of prop so per-property easing won't be lost
				var anim = Animation( this, jQuery.extend( {}, prop ), optall );

				// Empty animations, or finishing resolves immediately
				if ( empty || data_priv.get( this, "finish" ) ) {
					anim.stop( true );
				}
			};
			doAnimation.finish = doAnimation;

		return empty || optall.queue === false ?
			this.each( doAnimation ) :
			this.queue( optall.queue, doAnimation );
	},
	stop: function( type, clearQueue, gotoEnd ) {
		var stopQueue = function( hooks ) {
			var stop = hooks.stop;
			delete hooks.stop;
			stop( gotoEnd );
		};

		if ( typeof type !== "string" ) {
			gotoEnd = clearQueue;
			clearQueue = type;
			type = undefined;
		}
		if ( clearQueue && type !== false ) {
			this.queue( type || "fx", [] );
		}

		return this.each(function() {
			var dequeue = true,
				index = type != null && type + "queueHooks",
				timers = jQuery.timers,
				data = data_priv.get( this );

			if ( index ) {
				if ( data[ index ] && data[ index ].stop ) {
					stopQueue( data[ index ] );
				}
			} else {
				for ( index in data ) {
					if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
						stopQueue( data[ index ] );
					}
				}
			}

			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && (type == null || timers[ index ].queue === type) ) {
					timers[ index ].anim.stop( gotoEnd );
					dequeue = false;
					timers.splice( index, 1 );
				}
			}

			// Start the next in the queue if the last step wasn't forced.
			// Timers currently will call their complete callbacks, which
			// will dequeue but only if they were gotoEnd.
			if ( dequeue || !gotoEnd ) {
				jQuery.dequeue( this, type );
			}
		});
	},
	finish: function( type ) {
		if ( type !== false ) {
			type = type || "fx";
		}
		return this.each(function() {
			var index,
				data = data_priv.get( this ),
				queue = data[ type + "queue" ],
				hooks = data[ type + "queueHooks" ],
				timers = jQuery.timers,
				length = queue ? queue.length : 0;

			// Enable finishing flag on private data
			data.finish = true;

			// Empty the queue first
			jQuery.queue( this, type, [] );

			if ( hooks && hooks.stop ) {
				hooks.stop.call( this, true );
			}

			// Look for any active animations, and finish them
			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
					timers[ index ].anim.stop( true );
					timers.splice( index, 1 );
				}
			}

			// Look for any animations in the old queue and finish them
			for ( index = 0; index < length; index++ ) {
				if ( queue[ index ] && queue[ index ].finish ) {
					queue[ index ].finish.call( this );
				}
			}

			// Turn off finishing flag
			delete data.finish;
		});
	}
});

jQuery.each([ "toggle", "show", "hide" ], function( i, name ) {
	var cssFn = jQuery.fn[ name ];
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return speed == null || typeof speed === "boolean" ?
			cssFn.apply( this, arguments ) :
			this.animate( genFx( name, true ), speed, easing, callback );
	};
});

// Generate shortcuts for custom animations
jQuery.each({
	slideDown: genFx("show"),
	slideUp: genFx("hide"),
	slideToggle: genFx("toggle"),
	fadeIn: { opacity: "show" },
	fadeOut: { opacity: "hide" },
	fadeToggle: { opacity: "toggle" }
}, function( name, props ) {
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return this.animate( props, speed, easing, callback );
	};
});

jQuery.timers = [];
jQuery.fx.tick = function() {
	var timer,
		i = 0,
		timers = jQuery.timers;

	fxNow = jQuery.now();

	for ( ; i < timers.length; i++ ) {
		timer = timers[ i ];
		// Checks the timer has not already been removed
		if ( !timer() && timers[ i ] === timer ) {
			timers.splice( i--, 1 );
		}
	}

	if ( !timers.length ) {
		jQuery.fx.stop();
	}
	fxNow = undefined;
};

jQuery.fx.timer = function( timer ) {
	jQuery.timers.push( timer );
	if ( timer() ) {
		jQuery.fx.start();
	} else {
		jQuery.timers.pop();
	}
};

jQuery.fx.interval = 13;

jQuery.fx.start = function() {
	if ( !timerId ) {
		timerId = setInterval( jQuery.fx.tick, jQuery.fx.interval );
	}
};

jQuery.fx.stop = function() {
	clearInterval( timerId );
	timerId = null;
};

jQuery.fx.speeds = {
	slow: 600,
	fast: 200,
	// Default speed
	_default: 400
};


// Based off of the plugin by Clint Helfers, with permission.
// http://blindsignals.com/index.php/2009/07/jquery-delay/
jQuery.fn.delay = function( time, type ) {
	time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
	type = type || "fx";

	return this.queue( type, function( next, hooks ) {
		var timeout = setTimeout( next, time );
		hooks.stop = function() {
			clearTimeout( timeout );
		};
	});
};


(function() {
	var input = document.createElement( "input" ),
		select = document.createElement( "select" ),
		opt = select.appendChild( document.createElement( "option" ) );

	input.type = "checkbox";

	// Support: iOS<=5.1, Android<=4.2+
	// Default value for a checkbox should be "on"
	support.checkOn = input.value !== "";

	// Support: IE<=11+
	// Must access selectedIndex to make default options select
	support.optSelected = opt.selected;

	// Support: Android<=2.3
	// Options inside disabled selects are incorrectly marked as disabled
	select.disabled = true;
	support.optDisabled = !opt.disabled;

	// Support: IE<=11+
	// An input loses its value after becoming a radio
	input = document.createElement( "input" );
	input.value = "t";
	input.type = "radio";
	support.radioValue = input.value === "t";
})();


var nodeHook, boolHook,
	attrHandle = jQuery.expr.attrHandle;

jQuery.fn.extend({
	attr: function( name, value ) {
		return access( this, jQuery.attr, name, value, arguments.length > 1 );
	},

	removeAttr: function( name ) {
		return this.each(function() {
			jQuery.removeAttr( this, name );
		});
	}
});

jQuery.extend({
	attr: function( elem, name, value ) {
		var hooks, ret,
			nType = elem.nodeType;

		// don't get/set attributes on text, comment and attribute nodes
		if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		// Fallback to prop when attributes are not supported
		if ( typeof elem.getAttribute === strundefined ) {
			return jQuery.prop( elem, name, value );
		}

		// All attributes are lowercase
		// Grab necessary hook if one is defined
		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
			name = name.toLowerCase();
			hooks = jQuery.attrHooks[ name ] ||
				( jQuery.expr.match.bool.test( name ) ? boolHook : nodeHook );
		}

		if ( value !== undefined ) {

			if ( value === null ) {
				jQuery.removeAttr( elem, name );

			} else if ( hooks && "set" in hooks && (ret = hooks.set( elem, value, name )) !== undefined ) {
				return ret;

			} else {
				elem.setAttribute( name, value + "" );
				return value;
			}

		} else if ( hooks && "get" in hooks && (ret = hooks.get( elem, name )) !== null ) {
			return ret;

		} else {
			ret = jQuery.find.attr( elem, name );

			// Non-existent attributes return null, we normalize to undefined
			return ret == null ?
				undefined :
				ret;
		}
	},

	removeAttr: function( elem, value ) {
		var name, propName,
			i = 0,
			attrNames = value && value.match( rnotwhite );

		if ( attrNames && elem.nodeType === 1 ) {
			while ( (name = attrNames[i++]) ) {
				propName = jQuery.propFix[ name ] || name;

				// Boolean attributes get special treatment (#10870)
				if ( jQuery.expr.match.bool.test( name ) ) {
					// Set corresponding property to false
					elem[ propName ] = false;
				}

				elem.removeAttribute( name );
			}
		}
	},

	attrHooks: {
		type: {
			set: function( elem, value ) {
				if ( !support.radioValue && value === "radio" &&
					jQuery.nodeName( elem, "input" ) ) {
					var val = elem.value;
					elem.setAttribute( "type", value );
					if ( val ) {
						elem.value = val;
					}
					return value;
				}
			}
		}
	}
});

// Hooks for boolean attributes
boolHook = {
	set: function( elem, value, name ) {
		if ( value === false ) {
			// Remove boolean attributes when set to false
			jQuery.removeAttr( elem, name );
		} else {
			elem.setAttribute( name, name );
		}
		return name;
	}
};
jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( i, name ) {
	var getter = attrHandle[ name ] || jQuery.find.attr;

	attrHandle[ name ] = function( elem, name, isXML ) {
		var ret, handle;
		if ( !isXML ) {
			// Avoid an infinite loop by temporarily removing this function from the getter
			handle = attrHandle[ name ];
			attrHandle[ name ] = ret;
			ret = getter( elem, name, isXML ) != null ?
				name.toLowerCase() :
				null;
			attrHandle[ name ] = handle;
		}
		return ret;
	};
});




var rfocusable = /^(?:input|select|textarea|button)$/i;

jQuery.fn.extend({
	prop: function( name, value ) {
		return access( this, jQuery.prop, name, value, arguments.length > 1 );
	},

	removeProp: function( name ) {
		return this.each(function() {
			delete this[ jQuery.propFix[ name ] || name ];
		});
	}
});

jQuery.extend({
	propFix: {
		"for": "htmlFor",
		"class": "className"
	},

	prop: function( elem, name, value ) {
		var ret, hooks, notxml,
			nType = elem.nodeType;

		// Don't get/set properties on text, comment and attribute nodes
		if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		notxml = nType !== 1 || !jQuery.isXMLDoc( elem );

		if ( notxml ) {
			// Fix name and attach hooks
			name = jQuery.propFix[ name ] || name;
			hooks = jQuery.propHooks[ name ];
		}

		if ( value !== undefined ) {
			return hooks && "set" in hooks && (ret = hooks.set( elem, value, name )) !== undefined ?
				ret :
				( elem[ name ] = value );

		} else {
			return hooks && "get" in hooks && (ret = hooks.get( elem, name )) !== null ?
				ret :
				elem[ name ];
		}
	},

	propHooks: {
		tabIndex: {
			get: function( elem ) {
				return elem.hasAttribute( "tabindex" ) || rfocusable.test( elem.nodeName ) || elem.href ?
					elem.tabIndex :
					-1;
			}
		}
	}
});

if ( !support.optSelected ) {
	jQuery.propHooks.selected = {
		get: function( elem ) {
			var parent = elem.parentNode;
			if ( parent && parent.parentNode ) {
				parent.parentNode.selectedIndex;
			}
			return null;
		}
	};
}

jQuery.each([
	"tabIndex",
	"readOnly",
	"maxLength",
	"cellSpacing",
	"cellPadding",
	"rowSpan",
	"colSpan",
	"useMap",
	"frameBorder",
	"contentEditable"
], function() {
	jQuery.propFix[ this.toLowerCase() ] = this;
});




var rclass = /[\t\r\n\f]/g;

jQuery.fn.extend({
	addClass: function( value ) {
		var classes, elem, cur, clazz, j, finalValue,
			proceed = typeof value === "string" && value,
			i = 0,
			len = this.length;

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( j ) {
				jQuery( this ).addClass( value.call( this, j, this.className ) );
			});
		}

		if ( proceed ) {
			// The disjunction here is for better compressibility (see removeClass)
			classes = ( value || "" ).match( rnotwhite ) || [];

			for ( ; i < len; i++ ) {
				elem = this[ i ];
				cur = elem.nodeType === 1 && ( elem.className ?
					( " " + elem.className + " " ).replace( rclass, " " ) :
					" "
				);

				if ( cur ) {
					j = 0;
					while ( (clazz = classes[j++]) ) {
						if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
							cur += clazz + " ";
						}
					}

					// only assign if different to avoid unneeded rendering.
					finalValue = jQuery.trim( cur );
					if ( elem.className !== finalValue ) {
						elem.className = finalValue;
					}
				}
			}
		}

		return this;
	},

	removeClass: function( value ) {
		var classes, elem, cur, clazz, j, finalValue,
			proceed = arguments.length === 0 || typeof value === "string" && value,
			i = 0,
			len = this.length;

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( j ) {
				jQuery( this ).removeClass( value.call( this, j, this.className ) );
			});
		}
		if ( proceed ) {
			classes = ( value || "" ).match( rnotwhite ) || [];

			for ( ; i < len; i++ ) {
				elem = this[ i ];
				// This expression is here for better compressibility (see addClass)
				cur = elem.nodeType === 1 && ( elem.className ?
					( " " + elem.className + " " ).replace( rclass, " " ) :
					""
				);

				if ( cur ) {
					j = 0;
					while ( (clazz = classes[j++]) ) {
						// Remove *all* instances
						while ( cur.indexOf( " " + clazz + " " ) >= 0 ) {
							cur = cur.replace( " " + clazz + " ", " " );
						}
					}

					// Only assign if different to avoid unneeded rendering.
					finalValue = value ? jQuery.trim( cur ) : "";
					if ( elem.className !== finalValue ) {
						elem.className = finalValue;
					}
				}
			}
		}

		return this;
	},

	toggleClass: function( value, stateVal ) {
		var type = typeof value;

		if ( typeof stateVal === "boolean" && type === "string" ) {
			return stateVal ? this.addClass( value ) : this.removeClass( value );
		}

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( i ) {
				jQuery( this ).toggleClass( value.call(this, i, this.className, stateVal), stateVal );
			});
		}

		return this.each(function() {
			if ( type === "string" ) {
				// Toggle individual class names
				var className,
					i = 0,
					self = jQuery( this ),
					classNames = value.match( rnotwhite ) || [];

				while ( (className = classNames[ i++ ]) ) {
					// Check each className given, space separated list
					if ( self.hasClass( className ) ) {
						self.removeClass( className );
					} else {
						self.addClass( className );
					}
				}

			// Toggle whole class name
			} else if ( type === strundefined || type === "boolean" ) {
				if ( this.className ) {
					// store className if set
					data_priv.set( this, "__className__", this.className );
				}

				// If the element has a class name or if we're passed `false`,
				// then remove the whole classname (if there was one, the above saved it).
				// Otherwise bring back whatever was previously saved (if anything),
				// falling back to the empty string if nothing was stored.
				this.className = this.className || value === false ? "" : data_priv.get( this, "__className__" ) || "";
			}
		});
	},

	hasClass: function( selector ) {
		var className = " " + selector + " ",
			i = 0,
			l = this.length;
		for ( ; i < l; i++ ) {
			if ( this[i].nodeType === 1 && (" " + this[i].className + " ").replace(rclass, " ").indexOf( className ) >= 0 ) {
				return true;
			}
		}

		return false;
	}
});




var rreturn = /\r/g;

jQuery.fn.extend({
	val: function( value ) {
		var hooks, ret, isFunction,
			elem = this[0];

		if ( !arguments.length ) {
			if ( elem ) {
				hooks = jQuery.valHooks[ elem.type ] || jQuery.valHooks[ elem.nodeName.toLowerCase() ];

				if ( hooks && "get" in hooks && (ret = hooks.get( elem, "value" )) !== undefined ) {
					return ret;
				}

				ret = elem.value;

				return typeof ret === "string" ?
					// Handle most common string cases
					ret.replace(rreturn, "") :
					// Handle cases where value is null/undef or number
					ret == null ? "" : ret;
			}

			return;
		}

		isFunction = jQuery.isFunction( value );

		return this.each(function( i ) {
			var val;

			if ( this.nodeType !== 1 ) {
				return;
			}

			if ( isFunction ) {
				val = value.call( this, i, jQuery( this ).val() );
			} else {
				val = value;
			}

			// Treat null/undefined as ""; convert numbers to string
			if ( val == null ) {
				val = "";

			} else if ( typeof val === "number" ) {
				val += "";

			} else if ( jQuery.isArray( val ) ) {
				val = jQuery.map( val, function( value ) {
					return value == null ? "" : value + "";
				});
			}

			hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

			// If set returns undefined, fall back to normal setting
			if ( !hooks || !("set" in hooks) || hooks.set( this, val, "value" ) === undefined ) {
				this.value = val;
			}
		});
	}
});

jQuery.extend({
	valHooks: {
		option: {
			get: function( elem ) {
				var val = jQuery.find.attr( elem, "value" );
				return val != null ?
					val :
					// Support: IE10-11+
					// option.text throws exceptions (#14686, #14858)
					jQuery.trim( jQuery.text( elem ) );
			}
		},
		select: {
			get: function( elem ) {
				var value, option,
					options = elem.options,
					index = elem.selectedIndex,
					one = elem.type === "select-one" || index < 0,
					values = one ? null : [],
					max = one ? index + 1 : options.length,
					i = index < 0 ?
						max :
						one ? index : 0;

				// Loop through all the selected options
				for ( ; i < max; i++ ) {
					option = options[ i ];

					// IE6-9 doesn't update selected after form reset (#2551)
					if ( ( option.selected || i === index ) &&
							// Don't return options that are disabled or in a disabled optgroup
							( support.optDisabled ? !option.disabled : option.getAttribute( "disabled" ) === null ) &&
							( !option.parentNode.disabled || !jQuery.nodeName( option.parentNode, "optgroup" ) ) ) {

						// Get the specific value for the option
						value = jQuery( option ).val();

						// We don't need an array for one selects
						if ( one ) {
							return value;
						}

						// Multi-Selects return an array
						values.push( value );
					}
				}

				return values;
			},

			set: function( elem, value ) {
				var optionSet, option,
					options = elem.options,
					values = jQuery.makeArray( value ),
					i = options.length;

				while ( i-- ) {
					option = options[ i ];
					if ( (option.selected = jQuery.inArray( option.value, values ) >= 0) ) {
						optionSet = true;
					}
				}

				// Force browsers to behave consistently when non-matching value is set
				if ( !optionSet ) {
					elem.selectedIndex = -1;
				}
				return values;
			}
		}
	}
});

// Radios and checkboxes getter/setter
jQuery.each([ "radio", "checkbox" ], function() {
	jQuery.valHooks[ this ] = {
		set: function( elem, value ) {
			if ( jQuery.isArray( value ) ) {
				return ( elem.checked = jQuery.inArray( jQuery(elem).val(), value ) >= 0 );
			}
		}
	};
	if ( !support.checkOn ) {
		jQuery.valHooks[ this ].get = function( elem ) {
			return elem.getAttribute("value") === null ? "on" : elem.value;
		};
	}
});




// Return jQuery for attributes-only inclusion


jQuery.each( ("blur focus focusin focusout load resize scroll unload click dblclick " +
	"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
	"change select submit keydown keypress keyup error contextmenu").split(" "), function( i, name ) {

	// Handle event binding
	jQuery.fn[ name ] = function( data, fn ) {
		return arguments.length > 0 ?
			this.on( name, null, data, fn ) :
			this.trigger( name );
	};
});

jQuery.fn.extend({
	hover: function( fnOver, fnOut ) {
		return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
	},

	bind: function( types, data, fn ) {
		return this.on( types, null, data, fn );
	},
	unbind: function( types, fn ) {
		return this.off( types, null, fn );
	},

	delegate: function( selector, types, data, fn ) {
		return this.on( types, selector, data, fn );
	},
	undelegate: function( selector, types, fn ) {
		// ( namespace ) or ( selector, types [, fn] )
		return arguments.length === 1 ? this.off( selector, "**" ) : this.off( types, selector || "**", fn );
	}
});


var nonce = jQuery.now();

var rquery = (/\?/);



// Support: Android 2.3
// Workaround failure to string-cast null input
jQuery.parseJSON = function( data ) {
	return JSON.parse( data + "" );
};


// Cross-browser xml parsing
jQuery.parseXML = function( data ) {
	var xml, tmp;
	if ( !data || typeof data !== "string" ) {
		return null;
	}

	// Support: IE9
	try {
		tmp = new DOMParser();
		xml = tmp.parseFromString( data, "text/xml" );
	} catch ( e ) {
		xml = undefined;
	}

	if ( !xml || xml.getElementsByTagName( "parsererror" ).length ) {
		jQuery.error( "Invalid XML: " + data );
	}
	return xml;
};


var
	rhash = /#.*$/,
	rts = /([?&])_=[^&]*/,
	rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,
	// #7653, #8125, #8152: local protocol detection
	rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
	rnoContent = /^(?:GET|HEAD)$/,
	rprotocol = /^\/\//,
	rurl = /^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/,

	/* Prefilters
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	 * 2) These are called:
	 *    - BEFORE asking for a transport
	 *    - AFTER param serialization (s.data is a string if s.processData is true)
	 * 3) key is the dataType
	 * 4) the catchall symbol "*" can be used
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	 */
	prefilters = {},

	/* Transports bindings
	 * 1) key is the dataType
	 * 2) the catchall symbol "*" can be used
	 * 3) selection will start with transport dataType and THEN go to "*" if needed
	 */
	transports = {},

	// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
	allTypes = "*/".concat( "*" ),

	// Document location
	ajaxLocation = window.location.href,

	// Segment location into parts
	ajaxLocParts = rurl.exec( ajaxLocation.toLowerCase() ) || [];

// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
function addToPrefiltersOrTransports( structure ) {

	// dataTypeExpression is optional and defaults to "*"
	return function( dataTypeExpression, func ) {

		if ( typeof dataTypeExpression !== "string" ) {
			func = dataTypeExpression;
			dataTypeExpression = "*";
		}

		var dataType,
			i = 0,
			dataTypes = dataTypeExpression.toLowerCase().match( rnotwhite ) || [];

		if ( jQuery.isFunction( func ) ) {
			// For each dataType in the dataTypeExpression
			while ( (dataType = dataTypes[i++]) ) {
				// Prepend if requested
				if ( dataType[0] === "+" ) {
					dataType = dataType.slice( 1 ) || "*";
					(structure[ dataType ] = structure[ dataType ] || []).unshift( func );

				// Otherwise append
				} else {
					(structure[ dataType ] = structure[ dataType ] || []).push( func );
				}
			}
		}
	};
}

// Base inspection function for prefilters and transports
function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

	var inspected = {},
		seekingTransport = ( structure === transports );

	function inspect( dataType ) {
		var selected;
		inspected[ dataType ] = true;
		jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
			var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
			if ( typeof dataTypeOrTransport === "string" && !seekingTransport && !inspected[ dataTypeOrTransport ] ) {
				options.dataTypes.unshift( dataTypeOrTransport );
				inspect( dataTypeOrTransport );
				return false;
			} else if ( seekingTransport ) {
				return !( selected = dataTypeOrTransport );
			}
		});
		return selected;
	}

	return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
}

// A special extend for ajax options
// that takes "flat" options (not to be deep extended)
// Fixes #9887
function ajaxExtend( target, src ) {
	var key, deep,
		flatOptions = jQuery.ajaxSettings.flatOptions || {};

	for ( key in src ) {
		if ( src[ key ] !== undefined ) {
			( flatOptions[ key ] ? target : ( deep || (deep = {}) ) )[ key ] = src[ key ];
		}
	}
	if ( deep ) {
		jQuery.extend( true, target, deep );
	}

	return target;
}

/* Handles responses to an ajax request:
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */
function ajaxHandleResponses( s, jqXHR, responses ) {

	var ct, type, finalDataType, firstDataType,
		contents = s.contents,
		dataTypes = s.dataTypes;

	// Remove auto dataType and get content-type in the process
	while ( dataTypes[ 0 ] === "*" ) {
		dataTypes.shift();
		if ( ct === undefined ) {
			ct = s.mimeType || jqXHR.getResponseHeader("Content-Type");
		}
	}

	// Check if we're dealing with a known content-type
	if ( ct ) {
		for ( type in contents ) {
			if ( contents[ type ] && contents[ type ].test( ct ) ) {
				dataTypes.unshift( type );
				break;
			}
		}
	}

	// Check to see if we have a response for the expected dataType
	if ( dataTypes[ 0 ] in responses ) {
		finalDataType = dataTypes[ 0 ];
	} else {
		// Try convertible dataTypes
		for ( type in responses ) {
			if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[0] ] ) {
				finalDataType = type;
				break;
			}
			if ( !firstDataType ) {
				firstDataType = type;
			}
		}
		// Or just use first one
		finalDataType = finalDataType || firstDataType;
	}

	// If we found a dataType
	// We add the dataType to the list if needed
	// and return the corresponding response
	if ( finalDataType ) {
		if ( finalDataType !== dataTypes[ 0 ] ) {
			dataTypes.unshift( finalDataType );
		}
		return responses[ finalDataType ];
	}
}

/* Chain conversions given the request and the original response
 * Also sets the responseXXX fields on the jqXHR instance
 */
function ajaxConvert( s, response, jqXHR, isSuccess ) {
	var conv2, current, conv, tmp, prev,
		converters = {},
		// Work with a copy of dataTypes in case we need to modify it for conversion
		dataTypes = s.dataTypes.slice();

	// Create converters map with lowercased keys
	if ( dataTypes[ 1 ] ) {
		for ( conv in s.converters ) {
			converters[ conv.toLowerCase() ] = s.converters[ conv ];
		}
	}

	current = dataTypes.shift();

	// Convert to each sequential dataType
	while ( current ) {

		if ( s.responseFields[ current ] ) {
			jqXHR[ s.responseFields[ current ] ] = response;
		}

		// Apply the dataFilter if provided
		if ( !prev && isSuccess && s.dataFilter ) {
			response = s.dataFilter( response, s.dataType );
		}

		prev = current;
		current = dataTypes.shift();

		if ( current ) {

		// There's only work to do if current dataType is non-auto
			if ( current === "*" ) {

				current = prev;

			// Convert response if prev dataType is non-auto and differs from current
			} else if ( prev !== "*" && prev !== current ) {

				// Seek a direct converter
				conv = converters[ prev + " " + current ] || converters[ "* " + current ];

				// If none found, seek a pair
				if ( !conv ) {
					for ( conv2 in converters ) {

						// If conv2 outputs current
						tmp = conv2.split( " " );
						if ( tmp[ 1 ] === current ) {

							// If prev can be converted to accepted input
							conv = converters[ prev + " " + tmp[ 0 ] ] ||
								converters[ "* " + tmp[ 0 ] ];
							if ( conv ) {
								// Condense equivalence converters
								if ( conv === true ) {
									conv = converters[ conv2 ];

								// Otherwise, insert the intermediate dataType
								} else if ( converters[ conv2 ] !== true ) {
									current = tmp[ 0 ];
									dataTypes.unshift( tmp[ 1 ] );
								}
								break;
							}
						}
					}
				}

				// Apply converter (if not an equivalence)
				if ( conv !== true ) {

					// Unless errors are allowed to bubble, catch and return them
					if ( conv && s[ "throws" ] ) {
						response = conv( response );
					} else {
						try {
							response = conv( response );
						} catch ( e ) {
							return { state: "parsererror", error: conv ? e : "No conversion from " + prev + " to " + current };
						}
					}
				}
			}
		}
	}

	return { state: "success", data: response };
}

jQuery.extend({

	// Counter for holding the number of active queries
	active: 0,

	// Last-Modified header cache for next request
	lastModified: {},
	etag: {},

	ajaxSettings: {
		url: ajaxLocation,
		type: "GET",
		isLocal: rlocalProtocol.test( ajaxLocParts[ 1 ] ),
		global: true,
		processData: true,
		async: true,
		contentType: "application/x-www-form-urlencoded; charset=UTF-8",
		/*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		throws: false,
		traditional: false,
		headers: {},
		*/

		accepts: {
			"*": allTypes,
			text: "text/plain",
			html: "text/html",
			xml: "application/xml, text/xml",
			json: "application/json, text/javascript"
		},

		contents: {
			xml: /xml/,
			html: /html/,
			json: /json/
		},

		responseFields: {
			xml: "responseXML",
			text: "responseText",
			json: "responseJSON"
		},

		// Data converters
		// Keys separate source (or catchall "*") and destination types with a single space
		converters: {

			// Convert anything to text
			"* text": String,

			// Text to html (true = no transformation)
			"text html": true,

			// Evaluate text as a json expression
			"text json": jQuery.parseJSON,

			// Parse text as xml
			"text xml": jQuery.parseXML
		},

		// For options that shouldn't be deep extended:
		// you can add your own custom options here if
		// and when you create one that shouldn't be
		// deep extended (see ajaxExtend)
		flatOptions: {
			url: true,
			context: true
		}
	},

	// Creates a full fledged settings object into target
	// with both ajaxSettings and settings fields.
	// If target is omitted, writes into ajaxSettings.
	ajaxSetup: function( target, settings ) {
		return settings ?

			// Building a settings object
			ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

			// Extending ajaxSettings
			ajaxExtend( jQuery.ajaxSettings, target );
	},

	ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
	ajaxTransport: addToPrefiltersOrTransports( transports ),

	// Main method
	ajax: function( url, options ) {

		// If url is an object, simulate pre-1.5 signature
		if ( typeof url === "object" ) {
			options = url;
			url = undefined;
		}

		// Force options to be an object
		options = options || {};

		var transport,
			// URL without anti-cache param
			cacheURL,
			// Response headers
			responseHeadersString,
			responseHeaders,
			// timeout handle
			timeoutTimer,
			// Cross-domain detection vars
			parts,
			// To know if global events are to be dispatched
			fireGlobals,
			// Loop variable
			i,
			// Create the final options object
			s = jQuery.ajaxSetup( {}, options ),
			// Callbacks context
			callbackContext = s.context || s,
			// Context for global events is callbackContext if it is a DOM node or jQuery collection
			globalEventContext = s.context && ( callbackContext.nodeType || callbackContext.jquery ) ?
				jQuery( callbackContext ) :
				jQuery.event,
			// Deferreds
			deferred = jQuery.Deferred(),
			completeDeferred = jQuery.Callbacks("once memory"),
			// Status-dependent callbacks
			statusCode = s.statusCode || {},
			// Headers (they are sent all at once)
			requestHeaders = {},
			requestHeadersNames = {},
			// The jqXHR state
			state = 0,
			// Default abort message
			strAbort = "canceled",
			// Fake xhr
			jqXHR = {
				readyState: 0,

				// Builds headers hashtable if needed
				getResponseHeader: function( key ) {
					var match;
					if ( state === 2 ) {
						if ( !responseHeaders ) {
							responseHeaders = {};
							while ( (match = rheaders.exec( responseHeadersString )) ) {
								responseHeaders[ match[1].toLowerCase() ] = match[ 2 ];
							}
						}
						match = responseHeaders[ key.toLowerCase() ];
					}
					return match == null ? null : match;
				},

				// Raw string
				getAllResponseHeaders: function() {
					return state === 2 ? responseHeadersString : null;
				},

				// Caches the header
				setRequestHeader: function( name, value ) {
					var lname = name.toLowerCase();
					if ( !state ) {
						name = requestHeadersNames[ lname ] = requestHeadersNames[ lname ] || name;
						requestHeaders[ name ] = value;
					}
					return this;
				},

				// Overrides response content-type header
				overrideMimeType: function( type ) {
					if ( !state ) {
						s.mimeType = type;
					}
					return this;
				},

				// Status-dependent callbacks
				statusCode: function( map ) {
					var code;
					if ( map ) {
						if ( state < 2 ) {
							for ( code in map ) {
								// Lazy-add the new callback in a way that preserves old ones
								statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
							}
						} else {
							// Execute the appropriate callbacks
							jqXHR.always( map[ jqXHR.status ] );
						}
					}
					return this;
				},

				// Cancel the request
				abort: function( statusText ) {
					var finalText = statusText || strAbort;
					if ( transport ) {
						transport.abort( finalText );
					}
					done( 0, finalText );
					return this;
				}
			};

		// Attach deferreds
		deferred.promise( jqXHR ).complete = completeDeferred.add;
		jqXHR.success = jqXHR.done;
		jqXHR.error = jqXHR.fail;

		// Remove hash character (#7531: and string promotion)
		// Add protocol if not provided (prefilters might expect it)
		// Handle falsy url in the settings object (#10093: consistency with old signature)
		// We also use the url parameter if available
		s.url = ( ( url || s.url || ajaxLocation ) + "" ).replace( rhash, "" )
			.replace( rprotocol, ajaxLocParts[ 1 ] + "//" );

		// Alias method option to type as per ticket #12004
		s.type = options.method || options.type || s.method || s.type;

		// Extract dataTypes list
		s.dataTypes = jQuery.trim( s.dataType || "*" ).toLowerCase().match( rnotwhite ) || [ "" ];

		// A cross-domain request is in order when we have a protocol:host:port mismatch
		if ( s.crossDomain == null ) {
			parts = rurl.exec( s.url.toLowerCase() );
			s.crossDomain = !!( parts &&
				( parts[ 1 ] !== ajaxLocParts[ 1 ] || parts[ 2 ] !== ajaxLocParts[ 2 ] ||
					( parts[ 3 ] || ( parts[ 1 ] === "http:" ? "80" : "443" ) ) !==
						( ajaxLocParts[ 3 ] || ( ajaxLocParts[ 1 ] === "http:" ? "80" : "443" ) ) )
			);
		}

		// Convert data if not already a string
		if ( s.data && s.processData && typeof s.data !== "string" ) {
			s.data = jQuery.param( s.data, s.traditional );
		}

		// Apply prefilters
		inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

		// If request was aborted inside a prefilter, stop there
		if ( state === 2 ) {
			return jqXHR;
		}

		// We can fire global events as of now if asked to
		// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
		fireGlobals = jQuery.event && s.global;

		// Watch for a new set of requests
		if ( fireGlobals && jQuery.active++ === 0 ) {
			jQuery.event.trigger("ajaxStart");
		}

		// Uppercase the type
		s.type = s.type.toUpperCase();

		// Determine if request has content
		s.hasContent = !rnoContent.test( s.type );

		// Save the URL in case we're toying with the If-Modified-Since
		// and/or If-None-Match header later on
		cacheURL = s.url;

		// More options handling for requests with no content
		if ( !s.hasContent ) {

			// If data is available, append data to url
			if ( s.data ) {
				cacheURL = ( s.url += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data );
				// #9682: remove data so that it's not used in an eventual retry
				delete s.data;
			}

			// Add anti-cache in url if needed
			if ( s.cache === false ) {
				s.url = rts.test( cacheURL ) ?

					// If there is already a '_' parameter, set its value
					cacheURL.replace( rts, "$1_=" + nonce++ ) :

					// Otherwise add one to the end
					cacheURL + ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + nonce++;
			}
		}

		// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
		if ( s.ifModified ) {
			if ( jQuery.lastModified[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
			}
			if ( jQuery.etag[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
			}
		}

		// Set the correct header, if data is being sent
		if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
			jqXHR.setRequestHeader( "Content-Type", s.contentType );
		}

		// Set the Accepts header for the server, depending on the dataType
		jqXHR.setRequestHeader(
			"Accept",
			s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[0] ] ?
				s.accepts[ s.dataTypes[0] ] + ( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
				s.accepts[ "*" ]
		);

		// Check for headers option
		for ( i in s.headers ) {
			jqXHR.setRequestHeader( i, s.headers[ i ] );
		}

		// Allow custom headers/mimetypes and early abort
		if ( s.beforeSend && ( s.beforeSend.call( callbackContext, jqXHR, s ) === false || state === 2 ) ) {
			// Abort if not done already and return
			return jqXHR.abort();
		}

		// Aborting is no longer a cancellation
		strAbort = "abort";

		// Install callbacks on deferreds
		for ( i in { success: 1, error: 1, complete: 1 } ) {
			jqXHR[ i ]( s[ i ] );
		}

		// Get transport
		transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

		// If no transport, we auto-abort
		if ( !transport ) {
			done( -1, "No Transport" );
		} else {
			jqXHR.readyState = 1;

			// Send global event
			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
			}
			// Timeout
			if ( s.async && s.timeout > 0 ) {
				timeoutTimer = setTimeout(function() {
					jqXHR.abort("timeout");
				}, s.timeout );
			}

			try {
				state = 1;
				transport.send( requestHeaders, done );
			} catch ( e ) {
				// Propagate exception as error if not done
				if ( state < 2 ) {
					done( -1, e );
				// Simply rethrow otherwise
				} else {
					throw e;
				}
			}
		}

		// Callback for when everything is done
		function done( status, nativeStatusText, responses, headers ) {
			var isSuccess, success, error, response, modified,
				statusText = nativeStatusText;

			// Called once
			if ( state === 2 ) {
				return;
			}

			// State is "done" now
			state = 2;

			// Clear timeout if it exists
			if ( timeoutTimer ) {
				clearTimeout( timeoutTimer );
			}

			// Dereference transport for early garbage collection
			// (no matter how long the jqXHR object will be used)
			transport = undefined;

			// Cache response headers
			responseHeadersString = headers || "";

			// Set readyState
			jqXHR.readyState = status > 0 ? 4 : 0;

			// Determine if successful
			isSuccess = status >= 200 && status < 300 || status === 304;

			// Get response data
			if ( responses ) {
				response = ajaxHandleResponses( s, jqXHR, responses );
			}

			// Convert no matter what (that way responseXXX fields are always set)
			response = ajaxConvert( s, response, jqXHR, isSuccess );

			// If successful, handle type chaining
			if ( isSuccess ) {

				// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
				if ( s.ifModified ) {
					modified = jqXHR.getResponseHeader("Last-Modified");
					if ( modified ) {
						jQuery.lastModified[ cacheURL ] = modified;
					}
					modified = jqXHR.getResponseHeader("etag");
					if ( modified ) {
						jQuery.etag[ cacheURL ] = modified;
					}
				}

				// if no content
				if ( status === 204 || s.type === "HEAD" ) {
					statusText = "nocontent";

				// if not modified
				} else if ( status === 304 ) {
					statusText = "notmodified";

				// If we have data, let's convert it
				} else {
					statusText = response.state;
					success = response.data;
					error = response.error;
					isSuccess = !error;
				}
			} else {
				// Extract error from statusText and normalize for non-aborts
				error = statusText;
				if ( status || !statusText ) {
					statusText = "error";
					if ( status < 0 ) {
						status = 0;
					}
				}
			}

			// Set data for the fake xhr object
			jqXHR.status = status;
			jqXHR.statusText = ( nativeStatusText || statusText ) + "";

			// Success/Error
			if ( isSuccess ) {
				deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
			} else {
				deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
			}

			// Status-dependent callbacks
			jqXHR.statusCode( statusCode );
			statusCode = undefined;

			if ( fireGlobals ) {
				globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
					[ jqXHR, s, isSuccess ? success : error ] );
			}

			// Complete
			completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );
				// Handle the global AJAX counter
				if ( !( --jQuery.active ) ) {
					jQuery.event.trigger("ajaxStop");
				}
			}
		}

		return jqXHR;
	},

	getJSON: function( url, data, callback ) {
		return jQuery.get( url, data, callback, "json" );
	},

	getScript: function( url, callback ) {
		return jQuery.get( url, undefined, callback, "script" );
	}
});

jQuery.each( [ "get", "post" ], function( i, method ) {
	jQuery[ method ] = function( url, data, callback, type ) {
		// Shift arguments if data argument was omitted
		if ( jQuery.isFunction( data ) ) {
			type = type || callback;
			callback = data;
			data = undefined;
		}

		return jQuery.ajax({
			url: url,
			type: method,
			dataType: type,
			data: data,
			success: callback
		});
	};
});


jQuery._evalUrl = function( url ) {
	return jQuery.ajax({
		url: url,
		type: "GET",
		dataType: "script",
		async: false,
		global: false,
		"throws": true
	});
};


jQuery.fn.extend({
	wrapAll: function( html ) {
		var wrap;

		if ( jQuery.isFunction( html ) ) {
			return this.each(function( i ) {
				jQuery( this ).wrapAll( html.call(this, i) );
			});
		}

		if ( this[ 0 ] ) {

			// The elements to wrap the target around
			wrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );

			if ( this[ 0 ].parentNode ) {
				wrap.insertBefore( this[ 0 ] );
			}

			wrap.map(function() {
				var elem = this;

				while ( elem.firstElementChild ) {
					elem = elem.firstElementChild;
				}

				return elem;
			}).append( this );
		}

		return this;
	},

	wrapInner: function( html ) {
		if ( jQuery.isFunction( html ) ) {
			return this.each(function( i ) {
				jQuery( this ).wrapInner( html.call(this, i) );
			});
		}

		return this.each(function() {
			var self = jQuery( this ),
				contents = self.contents();

			if ( contents.length ) {
				contents.wrapAll( html );

			} else {
				self.append( html );
			}
		});
	},

	wrap: function( html ) {
		var isFunction = jQuery.isFunction( html );

		return this.each(function( i ) {
			jQuery( this ).wrapAll( isFunction ? html.call(this, i) : html );
		});
	},

	unwrap: function() {
		return this.parent().each(function() {
			if ( !jQuery.nodeName( this, "body" ) ) {
				jQuery( this ).replaceWith( this.childNodes );
			}
		}).end();
	}
});


jQuery.expr.filters.hidden = function( elem ) {
	// Support: Opera <= 12.12
	// Opera reports offsetWidths and offsetHeights less than zero on some elements
	return elem.offsetWidth <= 0 && elem.offsetHeight <= 0;
};
jQuery.expr.filters.visible = function( elem ) {
	return !jQuery.expr.filters.hidden( elem );
};




var r20 = /%20/g,
	rbracket = /\[\]$/,
	rCRLF = /\r?\n/g,
	rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
	rsubmittable = /^(?:input|select|textarea|keygen)/i;

function buildParams( prefix, obj, traditional, add ) {
	var name;

	if ( jQuery.isArray( obj ) ) {
		// Serialize array item.
		jQuery.each( obj, function( i, v ) {
			if ( traditional || rbracket.test( prefix ) ) {
				// Treat each array item as a scalar.
				add( prefix, v );

			} else {
				// Item is non-scalar (array or object), encode its numeric index.
				buildParams( prefix + "[" + ( typeof v === "object" ? i : "" ) + "]", v, traditional, add );
			}
		});

	} else if ( !traditional && jQuery.type( obj ) === "object" ) {
		// Serialize object item.
		for ( name in obj ) {
			buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
		}

	} else {
		// Serialize scalar item.
		add( prefix, obj );
	}
}

// Serialize an array of form elements or a set of
// key/values into a query string
jQuery.param = function( a, traditional ) {
	var prefix,
		s = [],
		add = function( key, value ) {
			// If value is a function, invoke it and return its value
			value = jQuery.isFunction( value ) ? value() : ( value == null ? "" : value );
			s[ s.length ] = encodeURIComponent( key ) + "=" + encodeURIComponent( value );
		};

	// Set traditional to true for jQuery <= 1.3.2 behavior.
	if ( traditional === undefined ) {
		traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;
	}

	// If an array was passed in, assume that it is an array of form elements.
	if ( jQuery.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {
		// Serialize the form elements
		jQuery.each( a, function() {
			add( this.name, this.value );
		});

	} else {
		// If traditional, encode the "old" way (the way 1.3.2 or older
		// did it), otherwise encode params recursively.
		for ( prefix in a ) {
			buildParams( prefix, a[ prefix ], traditional, add );
		}
	}

	// Return the resulting serialization
	return s.join( "&" ).replace( r20, "+" );
};

jQuery.fn.extend({
	serialize: function() {
		return jQuery.param( this.serializeArray() );
	},
	serializeArray: function() {
		return this.map(function() {
			// Can add propHook for "elements" to filter or add form elements
			var elements = jQuery.prop( this, "elements" );
			return elements ? jQuery.makeArray( elements ) : this;
		})
		.filter(function() {
			var type = this.type;

			// Use .is( ":disabled" ) so that fieldset[disabled] works
			return this.name && !jQuery( this ).is( ":disabled" ) &&
				rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
				( this.checked || !rcheckableType.test( type ) );
		})
		.map(function( i, elem ) {
			var val = jQuery( this ).val();

			return val == null ?
				null :
				jQuery.isArray( val ) ?
					jQuery.map( val, function( val ) {
						return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
					}) :
					{ name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
		}).get();
	}
});


jQuery.ajaxSettings.xhr = function() {
	try {
		return new XMLHttpRequest();
	} catch( e ) {}
};

var xhrId = 0,
	xhrCallbacks = {},
	xhrSuccessStatus = {
		// file protocol always yields status code 0, assume 200
		0: 200,
		// Support: IE9
		// #1450: sometimes IE returns 1223 when it should be 204
		1223: 204
	},
	xhrSupported = jQuery.ajaxSettings.xhr();

// Support: IE9
// Open requests must be manually aborted on unload (#5280)
// See https://support.microsoft.com/kb/2856746 for more info
if ( window.attachEvent ) {
	window.attachEvent( "onunload", function() {
		for ( var key in xhrCallbacks ) {
			xhrCallbacks[ key ]();
		}
	});
}

support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
support.ajax = xhrSupported = !!xhrSupported;

jQuery.ajaxTransport(function( options ) {
	var callback;

	// Cross domain only allowed if supported through XMLHttpRequest
	if ( support.cors || xhrSupported && !options.crossDomain ) {
		return {
			send: function( headers, complete ) {
				var i,
					xhr = options.xhr(),
					id = ++xhrId;

				xhr.open( options.type, options.url, options.async, options.username, options.password );

				// Apply custom fields if provided
				if ( options.xhrFields ) {
					for ( i in options.xhrFields ) {
						xhr[ i ] = options.xhrFields[ i ];
					}
				}

				// Override mime type if needed
				if ( options.mimeType && xhr.overrideMimeType ) {
					xhr.overrideMimeType( options.mimeType );
				}

				// X-Requested-With header
				// For cross-domain requests, seeing as conditions for a preflight are
				// akin to a jigsaw puzzle, we simply never set it to be sure.
				// (it can always be set on a per-request basis or even using ajaxSetup)
				// For same-domain requests, won't change header if already provided.
				if ( !options.crossDomain && !headers["X-Requested-With"] ) {
					headers["X-Requested-With"] = "XMLHttpRequest";
				}

				// Set headers
				for ( i in headers ) {
					xhr.setRequestHeader( i, headers[ i ] );
				}

				// Callback
				callback = function( type ) {
					return function() {
						if ( callback ) {
							delete xhrCallbacks[ id ];
							callback = xhr.onload = xhr.onerror = null;

							if ( type === "abort" ) {
								xhr.abort();
							} else if ( type === "error" ) {
								complete(
									// file: protocol always yields status 0; see #8605, #14207
									xhr.status,
									xhr.statusText
								);
							} else {
								complete(
									xhrSuccessStatus[ xhr.status ] || xhr.status,
									xhr.statusText,
									// Support: IE9
									// Accessing binary-data responseText throws an exception
									// (#11426)
									typeof xhr.responseText === "string" ? {
										text: xhr.responseText
									} : undefined,
									xhr.getAllResponseHeaders()
								);
							}
						}
					};
				};

				// Listen to events
				xhr.onload = callback();
				xhr.onerror = callback("error");

				// Create the abort callback
				callback = xhrCallbacks[ id ] = callback("abort");

				try {
					// Do send the request (this may raise an exception)
					xhr.send( options.hasContent && options.data || null );
				} catch ( e ) {
					// #14683: Only rethrow if this hasn't been notified as an error yet
					if ( callback ) {
						throw e;
					}
				}
			},

			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
});




// Install script dataType
jQuery.ajaxSetup({
	accepts: {
		script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
	},
	contents: {
		script: /(?:java|ecma)script/
	},
	converters: {
		"text script": function( text ) {
			jQuery.globalEval( text );
			return text;
		}
	}
});

// Handle cache's special case and crossDomain
jQuery.ajaxPrefilter( "script", function( s ) {
	if ( s.cache === undefined ) {
		s.cache = false;
	}
	if ( s.crossDomain ) {
		s.type = "GET";
	}
});

// Bind script tag hack transport
jQuery.ajaxTransport( "script", function( s ) {
	// This transport only deals with cross domain requests
	if ( s.crossDomain ) {
		var script, callback;
		return {
			send: function( _, complete ) {
				script = jQuery("<script>").prop({
					async: true,
					charset: s.scriptCharset,
					src: s.url
				}).on(
					"load error",
					callback = function( evt ) {
						script.remove();
						callback = null;
						if ( evt ) {
							complete( evt.type === "error" ? 404 : 200, evt.type );
						}
					}
				);
				document.head.appendChild( script[ 0 ] );
			},
			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
});




var oldCallbacks = [],
	rjsonp = /(=)\?(?=&|$)|\?\?/;

// Default jsonp settings
jQuery.ajaxSetup({
	jsonp: "callback",
	jsonpCallback: function() {
		var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce++ ) );
		this[ callback ] = true;
		return callback;
	}
});

// Detect, normalize options and install callbacks for jsonp requests
jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

	var callbackName, overwritten, responseContainer,
		jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
			"url" :
			typeof s.data === "string" && !( s.contentType || "" ).indexOf("application/x-www-form-urlencoded") && rjsonp.test( s.data ) && "data"
		);

	// Handle iff the expected data type is "jsonp" or we have a parameter to set
	if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

		// Get callback name, remembering preexisting value associated with it
		callbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?
			s.jsonpCallback() :
			s.jsonpCallback;

		// Insert callback into url or form data
		if ( jsonProp ) {
			s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
		} else if ( s.jsonp !== false ) {
			s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
		}

		// Use data converter to retrieve json after script execution
		s.converters["script json"] = function() {
			if ( !responseContainer ) {
				jQuery.error( callbackName + " was not called" );
			}
			return responseContainer[ 0 ];
		};

		// force json dataType
		s.dataTypes[ 0 ] = "json";

		// Install callback
		overwritten = window[ callbackName ];
		window[ callbackName ] = function() {
			responseContainer = arguments;
		};

		// Clean-up function (fires after converters)
		jqXHR.always(function() {
			// Restore preexisting value
			window[ callbackName ] = overwritten;

			// Save back as free
			if ( s[ callbackName ] ) {
				// make sure that re-using the options doesn't screw things around
				s.jsonpCallback = originalSettings.jsonpCallback;

				// save the callback name for future use
				oldCallbacks.push( callbackName );
			}

			// Call if it was a function and we have a response
			if ( responseContainer && jQuery.isFunction( overwritten ) ) {
				overwritten( responseContainer[ 0 ] );
			}

			responseContainer = overwritten = undefined;
		});

		// Delegate to script
		return "script";
	}
});




// data: string of html
// context (optional): If specified, the fragment will be created in this context, defaults to document
// keepScripts (optional): If true, will include scripts passed in the html string
jQuery.parseHTML = function( data, context, keepScripts ) {
	if ( !data || typeof data !== "string" ) {
		return null;
	}
	if ( typeof context === "boolean" ) {
		keepScripts = context;
		context = false;
	}
	context = context || document;

	var parsed = rsingleTag.exec( data ),
		scripts = !keepScripts && [];

	// Single tag
	if ( parsed ) {
		return [ context.createElement( parsed[1] ) ];
	}

	parsed = jQuery.buildFragment( [ data ], context, scripts );

	if ( scripts && scripts.length ) {
		jQuery( scripts ).remove();
	}

	return jQuery.merge( [], parsed.childNodes );
};


// Keep a copy of the old load method
var _load = jQuery.fn.load;

/**
 * Load a url into a page
 */
jQuery.fn.load = function( url, params, callback ) {
	if ( typeof url !== "string" && _load ) {
		return _load.apply( this, arguments );
	}

	var selector, type, response,
		self = this,
		off = url.indexOf(" ");

	if ( off >= 0 ) {
		selector = jQuery.trim( url.slice( off ) );
		url = url.slice( 0, off );
	}

	// If it's a function
	if ( jQuery.isFunction( params ) ) {

		// We assume that it's the callback
		callback = params;
		params = undefined;

	// Otherwise, build a param string
	} else if ( params && typeof params === "object" ) {
		type = "POST";
	}

	// If we have elements to modify, make the request
	if ( self.length > 0 ) {
		jQuery.ajax({
			url: url,

			// if "type" variable is undefined, then "GET" method will be used
			type: type,
			dataType: "html",
			data: params
		}).done(function( responseText ) {

			// Save response for use in complete callback
			response = arguments;

			self.html( selector ?

				// If a selector was specified, locate the right elements in a dummy div
				// Exclude scripts to avoid IE 'Permission Denied' errors
				jQuery("<div>").append( jQuery.parseHTML( responseText ) ).find( selector ) :

				// Otherwise use the full result
				responseText );

		}).complete( callback && function( jqXHR, status ) {
			self.each( callback, response || [ jqXHR.responseText, status, jqXHR ] );
		});
	}

	return this;
};




// Attach a bunch of functions for handling common AJAX events
jQuery.each( [ "ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend" ], function( i, type ) {
	jQuery.fn[ type ] = function( fn ) {
		return this.on( type, fn );
	};
});




jQuery.expr.filters.animated = function( elem ) {
	return jQuery.grep(jQuery.timers, function( fn ) {
		return elem === fn.elem;
	}).length;
};




var docElem = window.document.documentElement;

/**
 * Gets a window from an element
 */
function getWindow( elem ) {
	return jQuery.isWindow( elem ) ? elem : elem.nodeType === 9 && elem.defaultView;
}

jQuery.offset = {
	setOffset: function( elem, options, i ) {
		var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
			position = jQuery.css( elem, "position" ),
			curElem = jQuery( elem ),
			props = {};

		// Set position first, in-case top/left are set even on static elem
		if ( position === "static" ) {
			elem.style.position = "relative";
		}

		curOffset = curElem.offset();
		curCSSTop = jQuery.css( elem, "top" );
		curCSSLeft = jQuery.css( elem, "left" );
		calculatePosition = ( position === "absolute" || position === "fixed" ) &&
			( curCSSTop + curCSSLeft ).indexOf("auto") > -1;

		// Need to be able to calculate position if either
		// top or left is auto and position is either absolute or fixed
		if ( calculatePosition ) {
			curPosition = curElem.position();
			curTop = curPosition.top;
			curLeft = curPosition.left;

		} else {
			curTop = parseFloat( curCSSTop ) || 0;
			curLeft = parseFloat( curCSSLeft ) || 0;
		}

		if ( jQuery.isFunction( options ) ) {
			options = options.call( elem, i, curOffset );
		}

		if ( options.top != null ) {
			props.top = ( options.top - curOffset.top ) + curTop;
		}
		if ( options.left != null ) {
			props.left = ( options.left - curOffset.left ) + curLeft;
		}

		if ( "using" in options ) {
			options.using.call( elem, props );

		} else {
			curElem.css( props );
		}
	}
};

jQuery.fn.extend({
	offset: function( options ) {
		if ( arguments.length ) {
			return options === undefined ?
				this :
				this.each(function( i ) {
					jQuery.offset.setOffset( this, options, i );
				});
		}

		var docElem, win,
			elem = this[ 0 ],
			box = { top: 0, left: 0 },
			doc = elem && elem.ownerDocument;

		if ( !doc ) {
			return;
		}

		docElem = doc.documentElement;

		// Make sure it's not a disconnected DOM node
		if ( !jQuery.contains( docElem, elem ) ) {
			return box;
		}

		// Support: BlackBerry 5, iOS 3 (original iPhone)
		// If we don't have gBCR, just use 0,0 rather than error
		if ( typeof elem.getBoundingClientRect !== strundefined ) {
			box = elem.getBoundingClientRect();
		}
		win = getWindow( doc );
		return {
			top: box.top + win.pageYOffset - docElem.clientTop,
			left: box.left + win.pageXOffset - docElem.clientLeft
		};
	},

	position: function() {
		if ( !this[ 0 ] ) {
			return;
		}

		var offsetParent, offset,
			elem = this[ 0 ],
			parentOffset = { top: 0, left: 0 };

		// Fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is its only offset parent
		if ( jQuery.css( elem, "position" ) === "fixed" ) {
			// Assume getBoundingClientRect is there when computed position is fixed
			offset = elem.getBoundingClientRect();

		} else {
			// Get *real* offsetParent
			offsetParent = this.offsetParent();

			// Get correct offsets
			offset = this.offset();
			if ( !jQuery.nodeName( offsetParent[ 0 ], "html" ) ) {
				parentOffset = offsetParent.offset();
			}

			// Add offsetParent borders
			parentOffset.top += jQuery.css( offsetParent[ 0 ], "borderTopWidth", true );
			parentOffset.left += jQuery.css( offsetParent[ 0 ], "borderLeftWidth", true );
		}

		// Subtract parent offsets and element margins
		return {
			top: offset.top - parentOffset.top - jQuery.css( elem, "marginTop", true ),
			left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true )
		};
	},

	offsetParent: function() {
		return this.map(function() {
			var offsetParent = this.offsetParent || docElem;

			while ( offsetParent && ( !jQuery.nodeName( offsetParent, "html" ) && jQuery.css( offsetParent, "position" ) === "static" ) ) {
				offsetParent = offsetParent.offsetParent;
			}

			return offsetParent || docElem;
		});
	}
});

// Create scrollLeft and scrollTop methods
jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
	var top = "pageYOffset" === prop;

	jQuery.fn[ method ] = function( val ) {
		return access( this, function( elem, method, val ) {
			var win = getWindow( elem );

			if ( val === undefined ) {
				return win ? win[ prop ] : elem[ method ];
			}

			if ( win ) {
				win.scrollTo(
					!top ? val : window.pageXOffset,
					top ? val : window.pageYOffset
				);

			} else {
				elem[ method ] = val;
			}
		}, method, val, arguments.length, null );
	};
});

// Support: Safari<7+, Chrome<37+
// Add the top/left cssHooks using jQuery.fn.position
// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
// Blink bug: https://code.google.com/p/chromium/issues/detail?id=229280
// getComputedStyle returns percent when specified for top/left/bottom/right;
// rather than make the css module depend on the offset module, just check for it here
jQuery.each( [ "top", "left" ], function( i, prop ) {
	jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
		function( elem, computed ) {
			if ( computed ) {
				computed = curCSS( elem, prop );
				// If curCSS returns percentage, fallback to offset
				return rnumnonpx.test( computed ) ?
					jQuery( elem ).position()[ prop ] + "px" :
					computed;
			}
		}
	);
});


// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
	jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name }, function( defaultExtra, funcName ) {
		// Margin is only for outerHeight, outerWidth
		jQuery.fn[ funcName ] = function( margin, value ) {
			var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
				extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

			return access( this, function( elem, type, value ) {
				var doc;

				if ( jQuery.isWindow( elem ) ) {
					// As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there
					// isn't a whole lot we can do. See pull request at this URL for discussion:
					// https://github.com/jquery/jquery/pull/764
					return elem.document.documentElement[ "client" + name ];
				}

				// Get document width or height
				if ( elem.nodeType === 9 ) {
					doc = elem.documentElement;

					// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
					// whichever is greatest
					return Math.max(
						elem.body[ "scroll" + name ], doc[ "scroll" + name ],
						elem.body[ "offset" + name ], doc[ "offset" + name ],
						doc[ "client" + name ]
					);
				}

				return value === undefined ?
					// Get width or height on the element, requesting but not forcing parseFloat
					jQuery.css( elem, type, extra ) :

					// Set width or height on the element
					jQuery.style( elem, type, value, extra );
			}, type, chainable ? margin : undefined, chainable, null );
		};
	});
});


// The number of elements contained in the matched element set
jQuery.fn.size = function() {
	return this.length;
};

jQuery.fn.andSelf = jQuery.fn.addBack;




// Register as a named AMD module, since jQuery can be concatenated with other
// files that may use define, but not via a proper concatenation script that
// understands anonymous AMD modules. A named AMD is safest and most robust
// way to register. Lowercase jquery is used because AMD module names are
// derived from file names, and jQuery is normally delivered in a lowercase
// file name. Do this after creating the global so that if an AMD module wants
// to call noConflict to hide this version of jQuery, it will work.

// Note that for maximum portability, libraries that are not jQuery should
// declare themselves as anonymous modules, and avoid setting a global if an
// AMD loader is present. jQuery is a special case. For more information, see
// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

if ( typeof define === "function" && define.amd ) {
	define( "jquery", [], function() {
		return jQuery;
	});
}




var
	// Map over jQuery in case of overwrite
	_jQuery = window.jQuery,

	// Map over the $ in case of overwrite
	_$ = window.$;

jQuery.noConflict = function( deep ) {
	if ( window.$ === jQuery ) {
		window.$ = _$;
	}

	if ( deep && window.jQuery === jQuery ) {
		window.jQuery = _jQuery;
	}

	return jQuery;
};

// Expose jQuery and $ identifiers, even in AMD
// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
// and CommonJS for browser emulators (#13566)
if ( typeof noGlobal === strundefined ) {
	window.jQuery = window.$ = jQuery;
}




return jQuery;

}));

},{}],189:[function(require,module,exports){
'use strict';

var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
  return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
} : function (obj) {
  return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
};
/* globals d3 */
/* eslint no-shadow: "off" */

exports.default = function (d3) {
  d3.jsonldVis = jsonldVis;
};

var _d = require('d3');

var _d2 = _interopRequireDefault(_d);

var _d3Tip = require('d3-tip');

var _d3Tip2 = _interopRequireDefault(_d3Tip);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

(0, _d3Tip2.default)(_d2.default);

function jsonldVis(jsonld, selector) {
  var config = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

  if (!jsonld && !selector) return jsonldVis;

  var h = config.h || 600,
      w = config.w || 800,
      maxLabelWidth = config.maxLabelWidth || 250,
      transitionDuration = config.transitionDuration || 750,
      transitionEase = config.transitionEase || 'cubic-in-out',
      minRadius = config.minRadius || 5,
      scalingFactor = config.scalingFactor || 2,
      i = 0,
      tree = _d2.default.layout.tree().size([h, w]),
      diagonal = _d2.default.svg.diagonal().projection(function (d) {
    return [d.y, d.x];
  }),
      svg = _d2.default.select(selector).append('svg').attr('width', w).attr('height', h).append('g').attr('transform', 'translate(' + maxLabelWidth + ',0)'),
      tip = _d2.default.tip().direction(function (d) {
    return d.children || d._children ? 'w' : 'e';
  }).offset(function (d) {
    return d.children || d._children ? [0, -3] : [0, 3];
  }).attr('class', 'd3-tip').html(function (d) {
    return '<span>' + d.valueExtended + '</span>';
  });
  svg.call(tip);

  var root = jsonldTree(jsonld);
  root.x0 = h / 2;
  root.y0 = 0;
  root.children.forEach(collapse);

  function changeSVGWidth(newWidth) {
    if (w !== newWidth) _d2.default.select(selector + ' > svg').attr('width', newWidth);
  }

  function jsonldTree(source) {
    var tree = {};
    if ('@id' in source) {
      tree.isIdNode = true;
      tree.name = source['@id'];
      if (tree.name.length > maxLabelWidth / 9) {
        tree.valueExtended = tree.name;
        tree.name = '…' + tree.valueExtended.slice(-Math.floor(maxLabelWidth / 9));
      }
    } else {
      tree.isIdNode = true;
      tree.isBlankNode = true;
      // random id, can replace with actual uuid generator if needed
      tree.name = '_:b' + Math.random().toString(10).slice(-7);
    }

    var children = [];
    Object.keys(source).forEach(function (key) {
      if (key === '@id' || key === '@context' || source[key] === null) return;
      var valueExtended = void 0,
          value = void 0;
      if (_typeof(source[key]) === 'object' && !Array.isArray(source[key])) {
        children.push({
          name: key,
          children: [jsonldTree(source[key])]
        });
      } else if (Array.isArray(source[key])) {
        children.push({
          name: key,
          children: source[key].map(function (item) {
            if ((typeof item === 'undefined' ? 'undefined' : _typeof(item)) === 'object') return jsonldTree(item);
            return { name: item };
          })
        });
      } else {
        valueExtended = source[key];
        value = valueExtended;
        if (value.length > maxLabelWidth / 9) {
          value = value.slice(0, Math.floor(maxLabelWidth / 9)) + '…';
          children.push({
            name: key,
            value: value,
            valueExtended: valueExtended
          });
        } else {
          children.push({
            name: key,
            value: value
          });
        }
      }
    });

    if (children.length) tree.children = children;
    return tree;
  }

  function update(source) {
    var nodes = tree.nodes(root).reverse(),
        links = tree.links(nodes);
    nodes.forEach(function (d) {
      return d.y = d.depth * maxLabelWidth;
    });
    var node = svg.selectAll('g.node').data(nodes, function (d) {
      return d.id || (d.id = ++i);
    }),
        nodeEnter = node.enter().append('g').attr('class', 'node').attr('transform', function () {
      return 'translate(' + source.y0 + ',' + source.x0 + ')';
    }).on('click', click);
    nodeEnter.append('circle').attr('r', 0).style('stroke-width', function (d) {
      return d.isIdNode ? '2px' : '1px';
    }).style('stroke', function (d) {
      return d.isIdNode ? '#F7CA18' : '#4ECDC4';
    }).style('fill', function (d) {
      if (d.isIdNode) return d._children ? '#F5D76E' : 'white';
      return d._children ? '#86E2D5' : 'white';
    }).on('mouseover', function (d) {
      if (d.valueExtended) tip.show(d);
    }).on('mouseout', tip.hide);
    nodeEnter.append('text').attr('x', function (d) {
      var spacing = computeRadius(d) + 5;
      return d.children || d._children ? -spacing : spacing;
    }).attr('dy', '4').attr('text-anchor', function (d) {
      return d.children || d._children ? 'end' : 'start';
    }).text(function (d) {
      return d.name + (d.value ? ': ' + d.value : '');
    }).style('fill-opacity', 0).on('mouseover', function (d) {
      if (d.valueExtended) tip.show(d);
    }).on('mouseout', tip.hide);
    var maxSpan = Math.max.apply(Math, nodes.map(function (d) {
      return d.y + maxLabelWidth;
    }));
    if (maxSpan + maxLabelWidth + 20 > w) {
      changeSVGWidth(maxSpan + maxLabelWidth);
      _d2.default.select(selector).node().scrollLeft = source.y0;
    }

    var nodeUpdate = node.transition().duration(transitionDuration).ease(transitionEase).attr('transform', function (d) {
      return 'translate(' + d.y + ',' + d.x + ')';
    });
    nodeUpdate.select('circle').attr('r', function (d) {
      return computeRadius(d);
    }).style('stroke-width', function (d) {
      return d.isIdNode ? '2px' : '1px';
    }).style('stroke', function (d) {
      return d.isIdNode ? '#F7CA18' : '#4ECDC4';
    }).style('fill', function (d) {
      if (d.isIdNode) return d._children ? '#F5D76E' : 'white';
      return d._children ? '#86E2D5' : 'white';
    });
    nodeUpdate.select('text').style('fill-opacity', 1);

    var nodeExit = node.exit().transition().duration(transitionDuration).ease(transitionEase).attr('transform', function () {
      return 'translate(' + source.y + ',' + source.x + ')';
    }).remove();
    nodeExit.select('circle').attr('r', 0);
    nodeExit.select('text').style('fill-opacity', 0);

    var link = svg.selectAll('path.link').data(links, function (d) {
      return d.target.id;
    });
    link.enter().insert('path', 'g').attr('class', 'link').attr('d', function () {
      var o = { x: source.x0, y: source.y0 };
      return diagonal({ source: o, target: o });
    });
    link.transition().duration(transitionDuration).ease(transitionEase).attr('d', diagonal);
    link.exit().transition().duration(transitionDuration).ease(transitionEase).attr('d', function () {
      var o = { x: source.x, y: source.y };
      return diagonal({ source: o, target: o });
    }).remove();

    nodes.forEach(function (d) {
      d.x0 = d.x;
      d.y0 = d.y;
    });
  }

  function computeRadius(d) {
    if (d.children || d._children) return minRadius + numEndNodes(d) / scalingFactor;
    return minRadius;
  }

  function numEndNodes(n) {
    var num = 0;
    if (n.children) n.children.forEach(function (c) {
      return num += numEndNodes(c);
    });else if (n._children) n._children.forEach(function (c) {
      return num += numEndNodes(c);
    });else num++;
    return num;
  }

  function click(d) {
    if (d.children) {
      d._children = d.children;
      d.children = null;
    } else {
      d.children = d._children;
      d._children = null;
    }
    update(d);

    // fast-forward blank nodes
    if (d.children) {
      d.children.forEach(function (child) {
        if (child.isBlankNode && child._children) click(child);
      });
    }
  }

  function collapse(d) {
    if (d.children) {
      d._children = d.children;
      d._children.forEach(collapse);
      d.children = null;
    }
  }
  update(root);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
},{"d3":190,"d3-tip":154}],190:[function(require,module,exports){
!function() {
  var d3 = {
    version: "3.5.17"
  };
  var d3_arraySlice = [].slice, d3_array = function(list) {
    return d3_arraySlice.call(list);
  };
  var d3_document = this.document;
  function d3_documentElement(node) {
    return node && (node.ownerDocument || node.document || node).documentElement;
  }
  function d3_window(node) {
    return node && (node.ownerDocument && node.ownerDocument.defaultView || node.document && node || node.defaultView);
  }
  if (d3_document) {
    try {
      d3_array(d3_document.documentElement.childNodes)[0].nodeType;
    } catch (e) {
      d3_array = function(list) {
        var i = list.length, array = new Array(i);
        while (i--) array[i] = list[i];
        return array;
      };
    }
  }
  if (!Date.now) Date.now = function() {
    return +new Date();
  };
  if (d3_document) {
    try {
      d3_document.createElement("DIV").style.setProperty("opacity", 0, "");
    } catch (error) {
      var d3_element_prototype = this.Element.prototype, d3_element_setAttribute = d3_element_prototype.setAttribute, d3_element_setAttributeNS = d3_element_prototype.setAttributeNS, d3_style_prototype = this.CSSStyleDeclaration.prototype, d3_style_setProperty = d3_style_prototype.setProperty;
      d3_element_prototype.setAttribute = function(name, value) {
        d3_element_setAttribute.call(this, name, value + "");
      };
      d3_element_prototype.setAttributeNS = function(space, local, value) {
        d3_element_setAttributeNS.call(this, space, local, value + "");
      };
      d3_style_prototype.setProperty = function(name, value, priority) {
        d3_style_setProperty.call(this, name, value + "", priority);
      };
    }
  }
  d3.ascending = d3_ascending;
  function d3_ascending(a, b) {
    return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
  }
  d3.descending = function(a, b) {
    return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;
  };
  d3.min = function(array, f) {
    var i = -1, n = array.length, a, b;
    if (arguments.length === 1) {
      while (++i < n) if ((b = array[i]) != null && b >= b) {
        a = b;
        break;
      }
      while (++i < n) if ((b = array[i]) != null && a > b) a = b;
    } else {
      while (++i < n) if ((b = f.call(array, array[i], i)) != null && b >= b) {
        a = b;
        break;
      }
      while (++i < n) if ((b = f.call(array, array[i], i)) != null && a > b) a = b;
    }
    return a;
  };
  d3.max = function(array, f) {
    var i = -1, n = array.length, a, b;
    if (arguments.length === 1) {
      while (++i < n) if ((b = array[i]) != null && b >= b) {
        a = b;
        break;
      }
      while (++i < n) if ((b = array[i]) != null && b > a) a = b;
    } else {
      while (++i < n) if ((b = f.call(array, array[i], i)) != null && b >= b) {
        a = b;
        break;
      }
      while (++i < n) if ((b = f.call(array, array[i], i)) != null && b > a) a = b;
    }
    return a;
  };
  d3.extent = function(array, f) {
    var i = -1, n = array.length, a, b, c;
    if (arguments.length === 1) {
      while (++i < n) if ((b = array[i]) != null && b >= b) {
        a = c = b;
        break;
      }
      while (++i < n) if ((b = array[i]) != null) {
        if (a > b) a = b;
        if (c < b) c = b;
      }
    } else {
      while (++i < n) if ((b = f.call(array, array[i], i)) != null && b >= b) {
        a = c = b;
        break;
      }
      while (++i < n) if ((b = f.call(array, array[i], i)) != null) {
        if (a > b) a = b;
        if (c < b) c = b;
      }
    }
    return [ a, c ];
  };
  function d3_number(x) {
    return x === null ? NaN : +x;
  }
  function d3_numeric(x) {
    return !isNaN(x);
  }
  d3.sum = function(array, f) {
    var s = 0, n = array.length, a, i = -1;
    if (arguments.length === 1) {
      while (++i < n) if (d3_numeric(a = +array[i])) s += a;
    } else {
      while (++i < n) if (d3_numeric(a = +f.call(array, array[i], i))) s += a;
    }
    return s;
  };
  d3.mean = function(array, f) {
    var s = 0, n = array.length, a, i = -1, j = n;
    if (arguments.length === 1) {
      while (++i < n) if (d3_numeric(a = d3_number(array[i]))) s += a; else --j;
    } else {
      while (++i < n) if (d3_numeric(a = d3_number(f.call(array, array[i], i)))) s += a; else --j;
    }
    if (j) return s / j;
  };
  d3.quantile = function(values, p) {
    var H = (values.length - 1) * p + 1, h = Math.floor(H), v = +values[h - 1], e = H - h;
    return e ? v + e * (values[h] - v) : v;
  };
  d3.median = function(array, f) {
    var numbers = [], n = array.length, a, i = -1;
    if (arguments.length === 1) {
      while (++i < n) if (d3_numeric(a = d3_number(array[i]))) numbers.push(a);
    } else {
      while (++i < n) if (d3_numeric(a = d3_number(f.call(array, array[i], i)))) numbers.push(a);
    }
    if (numbers.length) return d3.quantile(numbers.sort(d3_ascending), .5);
  };
  d3.variance = function(array, f) {
    var n = array.length, m = 0, a, d, s = 0, i = -1, j = 0;
    if (arguments.length === 1) {
      while (++i < n) {
        if (d3_numeric(a = d3_number(array[i]))) {
          d = a - m;
          m += d / ++j;
          s += d * (a - m);
        }
      }
    } else {
      while (++i < n) {
        if (d3_numeric(a = d3_number(f.call(array, array[i], i)))) {
          d = a - m;
          m += d / ++j;
          s += d * (a - m);
        }
      }
    }
    if (j > 1) return s / (j - 1);
  };
  d3.deviation = function() {
    var v = d3.variance.apply(this, arguments);
    return v ? Math.sqrt(v) : v;
  };
  function d3_bisector(compare) {
    return {
      left: function(a, x, lo, hi) {
        if (arguments.length < 3) lo = 0;
        if (arguments.length < 4) hi = a.length;
        while (lo < hi) {
          var mid = lo + hi >>> 1;
          if (compare(a[mid], x) < 0) lo = mid + 1; else hi = mid;
        }
        return lo;
      },
      right: function(a, x, lo, hi) {
        if (arguments.length < 3) lo = 0;
        if (arguments.length < 4) hi = a.length;
        while (lo < hi) {
          var mid = lo + hi >>> 1;
          if (compare(a[mid], x) > 0) hi = mid; else lo = mid + 1;
        }
        return lo;
      }
    };
  }
  var d3_bisect = d3_bisector(d3_ascending);
  d3.bisectLeft = d3_bisect.left;
  d3.bisect = d3.bisectRight = d3_bisect.right;
  d3.bisector = function(f) {
    return d3_bisector(f.length === 1 ? function(d, x) {
      return d3_ascending(f(d), x);
    } : f);
  };
  d3.shuffle = function(array, i0, i1) {
    if ((m = arguments.length) < 3) {
      i1 = array.length;
      if (m < 2) i0 = 0;
    }
    var m = i1 - i0, t, i;
    while (m) {
      i = Math.random() * m-- | 0;
      t = array[m + i0], array[m + i0] = array[i + i0], array[i + i0] = t;
    }
    return array;
  };
  d3.permute = function(array, indexes) {
    var i = indexes.length, permutes = new Array(i);
    while (i--) permutes[i] = array[indexes[i]];
    return permutes;
  };
  d3.pairs = function(array) {
    var i = 0, n = array.length - 1, p0, p1 = array[0], pairs = new Array(n < 0 ? 0 : n);
    while (i < n) pairs[i] = [ p0 = p1, p1 = array[++i] ];
    return pairs;
  };
  d3.transpose = function(matrix) {
    if (!(n = matrix.length)) return [];
    for (var i = -1, m = d3.min(matrix, d3_transposeLength), transpose = new Array(m); ++i < m; ) {
      for (var j = -1, n, row = transpose[i] = new Array(n); ++j < n; ) {
        row[j] = matrix[j][i];
      }
    }
    return transpose;
  };
  function d3_transposeLength(d) {
    return d.length;
  }
  d3.zip = function() {
    return d3.transpose(arguments);
  };
  d3.keys = function(map) {
    var keys = [];
    for (var key in map) keys.push(key);
    return keys;
  };
  d3.values = function(map) {
    var values = [];
    for (var key in map) values.push(map[key]);
    return values;
  };
  d3.entries = function(map) {
    var entries = [];
    for (var key in map) entries.push({
      key: key,
      value: map[key]
    });
    return entries;
  };
  d3.merge = function(arrays) {
    var n = arrays.length, m, i = -1, j = 0, merged, array;
    while (++i < n) j += arrays[i].length;
    merged = new Array(j);
    while (--n >= 0) {
      array = arrays[n];
      m = array.length;
      while (--m >= 0) {
        merged[--j] = array[m];
      }
    }
    return merged;
  };
  var abs = Math.abs;
  d3.range = function(start, stop, step) {
    if (arguments.length < 3) {
      step = 1;
      if (arguments.length < 2) {
        stop = start;
        start = 0;
      }
    }
    if ((stop - start) / step === Infinity) throw new Error("infinite range");
    var range = [], k = d3_range_integerScale(abs(step)), i = -1, j;
    start *= k, stop *= k, step *= k;
    if (step < 0) while ((j = start + step * ++i) > stop) range.push(j / k); else while ((j = start + step * ++i) < stop) range.push(j / k);
    return range;
  };
  function d3_range_integerScale(x) {
    var k = 1;
    while (x * k % 1) k *= 10;
    return k;
  }
  function d3_class(ctor, properties) {
    for (var key in properties) {
      Object.defineProperty(ctor.prototype, key, {
        value: properties[key],
        enumerable: false
      });
    }
  }
  d3.map = function(object, f) {
    var map = new d3_Map();
    if (object instanceof d3_Map) {
      object.forEach(function(key, value) {
        map.set(key, value);
      });
    } else if (Array.isArray(object)) {
      var i = -1, n = object.length, o;
      if (arguments.length === 1) while (++i < n) map.set(i, object[i]); else while (++i < n) map.set(f.call(object, o = object[i], i), o);
    } else {
      for (var key in object) map.set(key, object[key]);
    }
    return map;
  };
  function d3_Map() {
    this._ = Object.create(null);
  }
  var d3_map_proto = "__proto__", d3_map_zero = "\x00";
  d3_class(d3_Map, {
    has: d3_map_has,
    get: function(key) {
      return this._[d3_map_escape(key)];
    },
    set: function(key, value) {
      return this._[d3_map_escape(key)] = value;
    },
    remove: d3_map_remove,
    keys: d3_map_keys,
    values: function() {
      var values = [];
      for (var key in this._) values.push(this._[key]);
      return values;
    },
    entries: function() {
      var entries = [];
      for (var key in this._) entries.push({
        key: d3_map_unescape(key),
        value: this._[key]
      });
      return entries;
    },
    size: d3_map_size,
    empty: d3_map_empty,
    forEach: function(f) {
      for (var key in this._) f.call(this, d3_map_unescape(key), this._[key]);
    }
  });
  function d3_map_escape(key) {
    return (key += "") === d3_map_proto || key[0] === d3_map_zero ? d3_map_zero + key : key;
  }
  function d3_map_unescape(key) {
    return (key += "")[0] === d3_map_zero ? key.slice(1) : key;
  }
  function d3_map_has(key) {
    return d3_map_escape(key) in this._;
  }
  function d3_map_remove(key) {
    return (key = d3_map_escape(key)) in this._ && delete this._[key];
  }
  function d3_map_keys() {
    var keys = [];
    for (var key in this._) keys.push(d3_map_unescape(key));
    return keys;
  }
  function d3_map_size() {
    var size = 0;
    for (var key in this._) ++size;
    return size;
  }
  function d3_map_empty() {
    for (var key in this._) return false;
    return true;
  }
  d3.nest = function() {
    var nest = {}, keys = [], sortKeys = [], sortValues, rollup;
    function map(mapType, array, depth) {
      if (depth >= keys.length) return rollup ? rollup.call(nest, array) : sortValues ? array.sort(sortValues) : array;
      var i = -1, n = array.length, key = keys[depth++], keyValue, object, setter, valuesByKey = new d3_Map(), values;
      while (++i < n) {
        if (values = valuesByKey.get(keyValue = key(object = array[i]))) {
          values.push(object);
        } else {
          valuesByKey.set(keyValue, [ object ]);
        }
      }
      if (mapType) {
        object = mapType();
        setter = function(keyValue, values) {
          object.set(keyValue, map(mapType, values, depth));
        };
      } else {
        object = {};
        setter = function(keyValue, values) {
          object[keyValue] = map(mapType, values, depth);
        };
      }
      valuesByKey.forEach(setter);
      return object;
    }
    function entries(map, depth) {
      if (depth >= keys.length) return map;
      var array = [], sortKey = sortKeys[depth++];
      map.forEach(function(key, keyMap) {
        array.push({
          key: key,
          values: entries(keyMap, depth)
        });
      });
      return sortKey ? array.sort(function(a, b) {
        return sortKey(a.key, b.key);
      }) : array;
    }
    nest.map = function(array, mapType) {
      return map(mapType, array, 0);
    };
    nest.entries = function(array) {
      return entries(map(d3.map, array, 0), 0);
    };
    nest.key = function(d) {
      keys.push(d);
      return nest;
    };
    nest.sortKeys = function(order) {
      sortKeys[keys.length - 1] = order;
      return nest;
    };
    nest.sortValues = function(order) {
      sortValues = order;
      return nest;
    };
    nest.rollup = function(f) {
      rollup = f;
      return nest;
    };
    return nest;
  };
  d3.set = function(array) {
    var set = new d3_Set();
    if (array) for (var i = 0, n = array.length; i < n; ++i) set.add(array[i]);
    return set;
  };
  function d3_Set() {
    this._ = Object.create(null);
  }
  d3_class(d3_Set, {
    has: d3_map_has,
    add: function(key) {
      this._[d3_map_escape(key += "")] = true;
      return key;
    },
    remove: d3_map_remove,
    values: d3_map_keys,
    size: d3_map_size,
    empty: d3_map_empty,
    forEach: function(f) {
      for (var key in this._) f.call(this, d3_map_unescape(key));
    }
  });
  d3.behavior = {};
  function d3_identity(d) {
    return d;
  }
  d3.rebind = function(target, source) {
    var i = 1, n = arguments.length, method;
    while (++i < n) target[method = arguments[i]] = d3_rebind(target, source, source[method]);
    return target;
  };
  function d3_rebind(target, source, method) {
    return function() {
      var value = method.apply(source, arguments);
      return value === source ? target : value;
    };
  }
  function d3_vendorSymbol(object, name) {
    if (name in object) return name;
    name = name.charAt(0).toUpperCase() + name.slice(1);
    for (var i = 0, n = d3_vendorPrefixes.length; i < n; ++i) {
      var prefixName = d3_vendorPrefixes[i] + name;
      if (prefixName in object) return prefixName;
    }
  }
  var d3_vendorPrefixes = [ "webkit", "ms", "moz", "Moz", "o", "O" ];
  function d3_noop() {}
  d3.dispatch = function() {
    var dispatch = new d3_dispatch(), i = -1, n = arguments.length;
    while (++i < n) dispatch[arguments[i]] = d3_dispatch_event(dispatch);
    return dispatch;
  };
  function d3_dispatch() {}
  d3_dispatch.prototype.on = function(type, listener) {
    var i = type.indexOf("."), name = "";
    if (i >= 0) {
      name = type.slice(i + 1);
      type = type.slice(0, i);
    }
    if (type) return arguments.length < 2 ? this[type].on(name) : this[type].on(name, listener);
    if (arguments.length === 2) {
      if (listener == null) for (type in this) {
        if (this.hasOwnProperty(type)) this[type].on(name, null);
      }
      return this;
    }
  };
  function d3_dispatch_event(dispatch) {
    var listeners = [], listenerByName = new d3_Map();
    function event() {
      var z = listeners, i = -1, n = z.length, l;
      while (++i < n) if (l = z[i].on) l.apply(this, arguments);
      return dispatch;
    }
    event.on = function(name, listener) {
      var l = listenerByName.get(name), i;
      if (arguments.length < 2) return l && l.on;
      if (l) {
        l.on = null;
        listeners = listeners.slice(0, i = listeners.indexOf(l)).concat(listeners.slice(i + 1));
        listenerByName.remove(name);
      }
      if (listener) listeners.push(listenerByName.set(name, {
        on: listener
      }));
      return dispatch;
    };
    return event;
  }
  d3.event = null;
  function d3_eventPreventDefault() {
    d3.event.preventDefault();
  }
  function d3_eventSource() {
    var e = d3.event, s;
    while (s = e.sourceEvent) e = s;
    return e;
  }
  function d3_eventDispatch(target) {
    var dispatch = new d3_dispatch(), i = 0, n = arguments.length;
    while (++i < n) dispatch[arguments[i]] = d3_dispatch_event(dispatch);
    dispatch.of = function(thiz, argumentz) {
      return function(e1) {
        try {
          var e0 = e1.sourceEvent = d3.event;
          e1.target = target;
          d3.event = e1;
          dispatch[e1.type].apply(thiz, argumentz);
        } finally {
          d3.event = e0;
        }
      };
    };
    return dispatch;
  }
  d3.requote = function(s) {
    return s.replace(d3_requote_re, "\\$&");
  };
  var d3_requote_re = /[\\\^\$\*\+\?\|\[\]\(\)\.\{\}]/g;
  var d3_subclass = {}.__proto__ ? function(object, prototype) {
    object.__proto__ = prototype;
  } : function(object, prototype) {
    for (var property in prototype) object[property] = prototype[property];
  };
  function d3_selection(groups) {
    d3_subclass(groups, d3_selectionPrototype);
    return groups;
  }
  var d3_select = function(s, n) {
    return n.querySelector(s);
  }, d3_selectAll = function(s, n) {
    return n.querySelectorAll(s);
  }, d3_selectMatches = function(n, s) {
    var d3_selectMatcher = n.matches || n[d3_vendorSymbol(n, "matchesSelector")];
    d3_selectMatches = function(n, s) {
      return d3_selectMatcher.call(n, s);
    };
    return d3_selectMatches(n, s);
  };
  if (typeof Sizzle === "function") {
    d3_select = function(s, n) {
      return Sizzle(s, n)[0] || null;
    };
    d3_selectAll = Sizzle;
    d3_selectMatches = Sizzle.matchesSelector;
  }
  d3.selection = function() {
    return d3.select(d3_document.documentElement);
  };
  var d3_selectionPrototype = d3.selection.prototype = [];
  d3_selectionPrototype.select = function(selector) {
    var subgroups = [], subgroup, subnode, group, node;
    selector = d3_selection_selector(selector);
    for (var j = -1, m = this.length; ++j < m; ) {
      subgroups.push(subgroup = []);
      subgroup.parentNode = (group = this[j]).parentNode;
      for (var i = -1, n = group.length; ++i < n; ) {
        if (node = group[i]) {
          subgroup.push(subnode = selector.call(node, node.__data__, i, j));
          if (subnode && "__data__" in node) subnode.__data__ = node.__data__;
        } else {
          subgroup.push(null);
        }
      }
    }
    return d3_selection(subgroups);
  };
  function d3_selection_selector(selector) {
    return typeof selector === "function" ? selector : function() {
      return d3_select(selector, this);
    };
  }
  d3_selectionPrototype.selectAll = function(selector) {
    var subgroups = [], subgroup, node;
    selector = d3_selection_selectorAll(selector);
    for (var j = -1, m = this.length; ++j < m; ) {
      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {
        if (node = group[i]) {
          subgroups.push(subgroup = d3_array(selector.call(node, node.__data__, i, j)));
          subgroup.parentNode = node;
        }
      }
    }
    return d3_selection(subgroups);
  };
  function d3_selection_selectorAll(selector) {
    return typeof selector === "function" ? selector : function() {
      return d3_selectAll(selector, this);
    };
  }
  var d3_nsXhtml = "http://www.w3.org/1999/xhtml";
  var d3_nsPrefix = {
    svg: "http://www.w3.org/2000/svg",
    xhtml: d3_nsXhtml,
    xlink: "http://www.w3.org/1999/xlink",
    xml: "http://www.w3.org/XML/1998/namespace",
    xmlns: "http://www.w3.org/2000/xmlns/"
  };
  d3.ns = {
    prefix: d3_nsPrefix,
    qualify: function(name) {
      var i = name.indexOf(":"), prefix = name;
      if (i >= 0 && (prefix = name.slice(0, i)) !== "xmlns") name = name.slice(i + 1);
      return d3_nsPrefix.hasOwnProperty(prefix) ? {
        space: d3_nsPrefix[prefix],
        local: name
      } : name;
    }
  };
  d3_selectionPrototype.attr = function(name, value) {
    if (arguments.length < 2) {
      if (typeof name === "string") {
        var node = this.node();
        name = d3.ns.qualify(name);
        return name.local ? node.getAttributeNS(name.space, name.local) : node.getAttribute(name);
      }
      for (value in name) this.each(d3_selection_attr(value, name[value]));
      return this;
    }
    return this.each(d3_selection_attr(name, value));
  };
  function d3_selection_attr(name, value) {
    name = d3.ns.qualify(name);
    function attrNull() {
      this.removeAttribute(name);
    }
    function attrNullNS() {
      this.removeAttributeNS(name.space, name.local);
    }
    function attrConstant() {
      this.setAttribute(name, value);
    }
    function attrConstantNS() {
      this.setAttributeNS(name.space, name.local, value);
    }
    function attrFunction() {
      var x = value.apply(this, arguments);
      if (x == null) this.removeAttribute(name); else this.setAttribute(name, x);
    }
    function attrFunctionNS() {
      var x = value.apply(this, arguments);
      if (x == null) this.removeAttributeNS(name.space, name.local); else this.setAttributeNS(name.space, name.local, x);
    }
    return value == null ? name.local ? attrNullNS : attrNull : typeof value === "function" ? name.local ? attrFunctionNS : attrFunction : name.local ? attrConstantNS : attrConstant;
  }
  function d3_collapse(s) {
    return s.trim().replace(/\s+/g, " ");
  }
  d3_selectionPrototype.classed = function(name, value) {
    if (arguments.length < 2) {
      if (typeof name === "string") {
        var node = this.node(), n = (name = d3_selection_classes(name)).length, i = -1;
        if (value = node.classList) {
          while (++i < n) if (!value.contains(name[i])) return false;
        } else {
          value = node.getAttribute("class");
          while (++i < n) if (!d3_selection_classedRe(name[i]).test(value)) return false;
        }
        return true;
      }
      for (value in name) this.each(d3_selection_classed(value, name[value]));
      return this;
    }
    return this.each(d3_selection_classed(name, value));
  };
  function d3_selection_classedRe(name) {
    return new RegExp("(?:^|\\s+)" + d3.requote(name) + "(?:\\s+|$)", "g");
  }
  function d3_selection_classes(name) {
    return (name + "").trim().split(/^|\s+/);
  }
  function d3_selection_classed(name, value) {
    name = d3_selection_classes(name).map(d3_selection_classedName);
    var n = name.length;
    function classedConstant() {
      var i = -1;
      while (++i < n) name[i](this, value);
    }
    function classedFunction() {
      var i = -1, x = value.apply(this, arguments);
      while (++i < n) name[i](this, x);
    }
    return typeof value === "function" ? classedFunction : classedConstant;
  }
  function d3_selection_classedName(name) {
    var re = d3_selection_classedRe(name);
    return function(node, value) {
      if (c = node.classList) return value ? c.add(name) : c.remove(name);
      var c = node.getAttribute("class") || "";
      if (value) {
        re.lastIndex = 0;
        if (!re.test(c)) node.setAttribute("class", d3_collapse(c + " " + name));
      } else {
        node.setAttribute("class", d3_collapse(c.replace(re, " ")));
      }
    };
  }
  d3_selectionPrototype.style = function(name, value, priority) {
    var n = arguments.length;
    if (n < 3) {
      if (typeof name !== "string") {
        if (n < 2) value = "";
        for (priority in name) this.each(d3_selection_style(priority, name[priority], value));
        return this;
      }
      if (n < 2) {
        var node = this.node();
        return d3_window(node).getComputedStyle(node, null).getPropertyValue(name);
      }
      priority = "";
    }
    return this.each(d3_selection_style(name, value, priority));
  };
  function d3_selection_style(name, value, priority) {
    function styleNull() {
      this.style.removeProperty(name);
    }
    function styleConstant() {
      this.style.setProperty(name, value, priority);
    }
    function styleFunction() {
      var x = value.apply(this, arguments);
      if (x == null) this.style.removeProperty(name); else this.style.setProperty(name, x, priority);
    }
    return value == null ? styleNull : typeof value === "function" ? styleFunction : styleConstant;
  }
  d3_selectionPrototype.property = function(name, value) {
    if (arguments.length < 2) {
      if (typeof name === "string") return this.node()[name];
      for (value in name) this.each(d3_selection_property(value, name[value]));
      return this;
    }
    return this.each(d3_selection_property(name, value));
  };
  function d3_selection_property(name, value) {
    function propertyNull() {
      delete this[name];
    }
    function propertyConstant() {
      this[name] = value;
    }
    function propertyFunction() {
      var x = value.apply(this, arguments);
      if (x == null) delete this[name]; else this[name] = x;
    }
    return value == null ? propertyNull : typeof value === "function" ? propertyFunction : propertyConstant;
  }
  d3_selectionPrototype.text = function(value) {
    return arguments.length ? this.each(typeof value === "function" ? function() {
      var v = value.apply(this, arguments);
      this.textContent = v == null ? "" : v;
    } : value == null ? function() {
      this.textContent = "";
    } : function() {
      this.textContent = value;
    }) : this.node().textContent;
  };
  d3_selectionPrototype.html = function(value) {
    return arguments.length ? this.each(typeof value === "function" ? function() {
      var v = value.apply(this, arguments);
      this.innerHTML = v == null ? "" : v;
    } : value == null ? function() {
      this.innerHTML = "";
    } : function() {
      this.innerHTML = value;
    }) : this.node().innerHTML;
  };
  d3_selectionPrototype.append = function(name) {
    name = d3_selection_creator(name);
    return this.select(function() {
      return this.appendChild(name.apply(this, arguments));
    });
  };
  function d3_selection_creator(name) {
    function create() {
      var document = this.ownerDocument, namespace = this.namespaceURI;
      return namespace === d3_nsXhtml && document.documentElement.namespaceURI === d3_nsXhtml ? document.createElement(name) : document.createElementNS(namespace, name);
    }
    function createNS() {
      return this.ownerDocument.createElementNS(name.space, name.local);
    }
    return typeof name === "function" ? name : (name = d3.ns.qualify(name)).local ? createNS : create;
  }
  d3_selectionPrototype.insert = function(name, before) {
    name = d3_selection_creator(name);
    before = d3_selection_selector(before);
    return this.select(function() {
      return this.insertBefore(name.apply(this, arguments), before.apply(this, arguments) || null);
    });
  };
  d3_selectionPrototype.remove = function() {
    return this.each(d3_selectionRemove);
  };
  function d3_selectionRemove() {
    var parent = this.parentNode;
    if (parent) parent.removeChild(this);
  }
  d3_selectionPrototype.data = function(value, key) {
    var i = -1, n = this.length, group, node;
    if (!arguments.length) {
      value = new Array(n = (group = this[0]).length);
      while (++i < n) {
        if (node = group[i]) {
          value[i] = node.__data__;
        }
      }
      return value;
    }
    function bind(group, groupData) {
      var i, n = group.length, m = groupData.length, n0 = Math.min(n, m), updateNodes = new Array(m), enterNodes = new Array(m), exitNodes = new Array(n), node, nodeData;
      if (key) {
        var nodeByKeyValue = new d3_Map(), keyValues = new Array(n), keyValue;
        for (i = -1; ++i < n; ) {
          if (node = group[i]) {
            if (nodeByKeyValue.has(keyValue = key.call(node, node.__data__, i))) {
              exitNodes[i] = node;
            } else {
              nodeByKeyValue.set(keyValue, node);
            }
            keyValues[i] = keyValue;
          }
        }
        for (i = -1; ++i < m; ) {
          if (!(node = nodeByKeyValue.get(keyValue = key.call(groupData, nodeData = groupData[i], i)))) {
            enterNodes[i] = d3_selection_dataNode(nodeData);
          } else if (node !== true) {
            updateNodes[i] = node;
            node.__data__ = nodeData;
          }
          nodeByKeyValue.set(keyValue, true);
        }
        for (i = -1; ++i < n; ) {
          if (i in keyValues && nodeByKeyValue.get(keyValues[i]) !== true) {
            exitNodes[i] = group[i];
          }
        }
      } else {
        for (i = -1; ++i < n0; ) {
          node = group[i];
          nodeData = groupData[i];
          if (node) {
            node.__data__ = nodeData;
            updateNodes[i] = node;
          } else {
            enterNodes[i] = d3_selection_dataNode(nodeData);
          }
        }
        for (;i < m; ++i) {
          enterNodes[i] = d3_selection_dataNode(groupData[i]);
        }
        for (;i < n; ++i) {
          exitNodes[i] = group[i];
        }
      }
      enterNodes.update = updateNodes;
      enterNodes.parentNode = updateNodes.parentNode = exitNodes.parentNode = group.parentNode;
      enter.push(enterNodes);
      update.push(updateNodes);
      exit.push(exitNodes);
    }
    var enter = d3_selection_enter([]), update = d3_selection([]), exit = d3_selection([]);
    if (typeof value === "function") {
      while (++i < n) {
        bind(group = this[i], value.call(group, group.parentNode.__data__, i));
      }
    } else {
      while (++i < n) {
        bind(group = this[i], value);
      }
    }
    update.enter = function() {
      return enter;
    };
    update.exit = function() {
      return exit;
    };
    return update;
  };
  function d3_selection_dataNode(data) {
    return {
      __data__: data
    };
  }
  d3_selectionPrototype.datum = function(value) {
    return arguments.length ? this.property("__data__", value) : this.property("__data__");
  };
  d3_selectionPrototype.filter = function(filter) {
    var subgroups = [], subgroup, group, node;
    if (typeof filter !== "function") filter = d3_selection_filter(filter);
    for (var j = 0, m = this.length; j < m; j++) {
      subgroups.push(subgroup = []);
      subgroup.parentNode = (group = this[j]).parentNode;
      for (var i = 0, n = group.length; i < n; i++) {
        if ((node = group[i]) && filter.call(node, node.__data__, i, j)) {
          subgroup.push(node);
        }
      }
    }
    return d3_selection(subgroups);
  };
  function d3_selection_filter(selector) {
    return function() {
      return d3_selectMatches(this, selector);
    };
  }
  d3_selectionPrototype.order = function() {
    for (var j = -1, m = this.length; ++j < m; ) {
      for (var group = this[j], i = group.length - 1, next = group[i], node; --i >= 0; ) {
        if (node = group[i]) {
          if (next && next !== node.nextSibling) next.parentNode.insertBefore(node, next);
          next = node;
        }
      }
    }
    return this;
  };
  d3_selectionPrototype.sort = function(comparator) {
    comparator = d3_selection_sortComparator.apply(this, arguments);
    for (var j = -1, m = this.length; ++j < m; ) this[j].sort(comparator);
    return this.order();
  };
  function d3_selection_sortComparator(comparator) {
    if (!arguments.length) comparator = d3_ascending;
    return function(a, b) {
      return a && b ? comparator(a.__data__, b.__data__) : !a - !b;
    };
  }
  d3_selectionPrototype.each = function(callback) {
    return d3_selection_each(this, function(node, i, j) {
      callback.call(node, node.__data__, i, j);
    });
  };
  function d3_selection_each(groups, callback) {
    for (var j = 0, m = groups.length; j < m; j++) {
      for (var group = groups[j], i = 0, n = group.length, node; i < n; i++) {
        if (node = group[i]) callback(node, i, j);
      }
    }
    return groups;
  }
  d3_selectionPrototype.call = function(callback) {
    var args = d3_array(arguments);
    callback.apply(args[0] = this, args);
    return this;
  };
  d3_selectionPrototype.empty = function() {
    return !this.node();
  };
  d3_selectionPrototype.node = function() {
    for (var j = 0, m = this.length; j < m; j++) {
      for (var group = this[j], i = 0, n = group.length; i < n; i++) {
        var node = group[i];
        if (node) return node;
      }
    }
    return null;
  };
  d3_selectionPrototype.size = function() {
    var n = 0;
    d3_selection_each(this, function() {
      ++n;
    });
    return n;
  };
  function d3_selection_enter(selection) {
    d3_subclass(selection, d3_selection_enterPrototype);
    return selection;
  }
  var d3_selection_enterPrototype = [];
  d3.selection.enter = d3_selection_enter;
  d3.selection.enter.prototype = d3_selection_enterPrototype;
  d3_selection_enterPrototype.append = d3_selectionPrototype.append;
  d3_selection_enterPrototype.empty = d3_selectionPrototype.empty;
  d3_selection_enterPrototype.node = d3_selectionPrototype.node;
  d3_selection_enterPrototype.call = d3_selectionPrototype.call;
  d3_selection_enterPrototype.size = d3_selectionPrototype.size;
  d3_selection_enterPrototype.select = function(selector) {
    var subgroups = [], subgroup, subnode, upgroup, group, node;
    for (var j = -1, m = this.length; ++j < m; ) {
      upgroup = (group = this[j]).update;
      subgroups.push(subgroup = []);
      subgroup.parentNode = group.parentNode;
      for (var i = -1, n = group.length; ++i < n; ) {
        if (node = group[i]) {
          subgroup.push(upgroup[i] = subnode = selector.call(group.parentNode, node.__data__, i, j));
          subnode.__data__ = node.__data__;
        } else {
          subgroup.push(null);
        }
      }
    }
    return d3_selection(subgroups);
  };
  d3_selection_enterPrototype.insert = function(name, before) {
    if (arguments.length < 2) before = d3_selection_enterInsertBefore(this);
    return d3_selectionPrototype.insert.call(this, name, before);
  };
  function d3_selection_enterInsertBefore(enter) {
    var i0, j0;
    return function(d, i, j) {
      var group = enter[j].update, n = group.length, node;
      if (j != j0) j0 = j, i0 = 0;
      if (i >= i0) i0 = i + 1;
      while (!(node = group[i0]) && ++i0 < n) ;
      return node;
    };
  }
  d3.select = function(node) {
    var group;
    if (typeof node === "string") {
      group = [ d3_select(node, d3_document) ];
      group.parentNode = d3_document.documentElement;
    } else {
      group = [ node ];
      group.parentNode = d3_documentElement(node);
    }
    return d3_selection([ group ]);
  };
  d3.selectAll = function(nodes) {
    var group;
    if (typeof nodes === "string") {
      group = d3_array(d3_selectAll(nodes, d3_document));
      group.parentNode = d3_document.documentElement;
    } else {
      group = d3_array(nodes);
      group.parentNode = null;
    }
    return d3_selection([ group ]);
  };
  d3_selectionPrototype.on = function(type, listener, capture) {
    var n = arguments.length;
    if (n < 3) {
      if (typeof type !== "string") {
        if (n < 2) listener = false;
        for (capture in type) this.each(d3_selection_on(capture, type[capture], listener));
        return this;
      }
      if (n < 2) return (n = this.node()["__on" + type]) && n._;
      capture = false;
    }
    return this.each(d3_selection_on(type, listener, capture));
  };
  function d3_selection_on(type, listener, capture) {
    var name = "__on" + type, i = type.indexOf("."), wrap = d3_selection_onListener;
    if (i > 0) type = type.slice(0, i);
    var filter = d3_selection_onFilters.get(type);
    if (filter) type = filter, wrap = d3_selection_onFilter;
    function onRemove() {
      var l = this[name];
      if (l) {
        this.removeEventListener(type, l, l.$);
        delete this[name];
      }
    }
    function onAdd() {
      var l = wrap(listener, d3_array(arguments));
      onRemove.call(this);
      this.addEventListener(type, this[name] = l, l.$ = capture);
      l._ = listener;
    }
    function removeAll() {
      var re = new RegExp("^__on([^.]+)" + d3.requote(type) + "$"), match;
      for (var name in this) {
        if (match = name.match(re)) {
          var l = this[name];
          this.removeEventListener(match[1], l, l.$);
          delete this[name];
        }
      }
    }
    return i ? listener ? onAdd : onRemove : listener ? d3_noop : removeAll;
  }
  var d3_selection_onFilters = d3.map({
    mouseenter: "mouseover",
    mouseleave: "mouseout"
  });
  if (d3_document) {
    d3_selection_onFilters.forEach(function(k) {
      if ("on" + k in d3_document) d3_selection_onFilters.remove(k);
    });
  }
  function d3_selection_onListener(listener, argumentz) {
    return function(e) {
      var o = d3.event;
      d3.event = e;
      argumentz[0] = this.__data__;
      try {
        listener.apply(this, argumentz);
      } finally {
        d3.event = o;
      }
    };
  }
  function d3_selection_onFilter(listener, argumentz) {
    var l = d3_selection_onListener(listener, argumentz);
    return function(e) {
      var target = this, related = e.relatedTarget;
      if (!related || related !== target && !(related.compareDocumentPosition(target) & 8)) {
        l.call(target, e);
      }
    };
  }
  var d3_event_dragSelect, d3_event_dragId = 0;
  function d3_event_dragSuppress(node) {
    var name = ".dragsuppress-" + ++d3_event_dragId, click = "click" + name, w = d3.select(d3_window(node)).on("touchmove" + name, d3_eventPreventDefault).on("dragstart" + name, d3_eventPreventDefault).on("selectstart" + name, d3_eventPreventDefault);
    if (d3_event_dragSelect == null) {
      d3_event_dragSelect = "onselectstart" in node ? false : d3_vendorSymbol(node.style, "userSelect");
    }
    if (d3_event_dragSelect) {
      var style = d3_documentElement(node).style, select = style[d3_event_dragSelect];
      style[d3_event_dragSelect] = "none";
    }
    return function(suppressClick) {
      w.on(name, null);
      if (d3_event_dragSelect) style[d3_event_dragSelect] = select;
      if (suppressClick) {
        var off = function() {
          w.on(click, null);
        };
        w.on(click, function() {
          d3_eventPreventDefault();
          off();
        }, true);
        setTimeout(off, 0);
      }
    };
  }
  d3.mouse = function(container) {
    return d3_mousePoint(container, d3_eventSource());
  };
  var d3_mouse_bug44083 = this.navigator && /WebKit/.test(this.navigator.userAgent) ? -1 : 0;
  function d3_mousePoint(container, e) {
    if (e.changedTouches) e = e.changedTouches[0];
    var svg = container.ownerSVGElement || container;
    if (svg.createSVGPoint) {
      var point = svg.createSVGPoint();
      if (d3_mouse_bug44083 < 0) {
        var window = d3_window(container);
        if (window.scrollX || window.scrollY) {
          svg = d3.select("body").append("svg").style({
            position: "absolute",
            top: 0,
            left: 0,
            margin: 0,
            padding: 0,
            border: "none"
          }, "important");
          var ctm = svg[0][0].getScreenCTM();
          d3_mouse_bug44083 = !(ctm.f || ctm.e);
          svg.remove();
        }
      }
      if (d3_mouse_bug44083) point.x = e.pageX, point.y = e.pageY; else point.x = e.clientX, 
      point.y = e.clientY;
      point = point.matrixTransform(container.getScreenCTM().inverse());
      return [ point.x, point.y ];
    }
    var rect = container.getBoundingClientRect();
    return [ e.clientX - rect.left - container.clientLeft, e.clientY - rect.top - container.clientTop ];
  }
  d3.touch = function(container, touches, identifier) {
    if (arguments.length < 3) identifier = touches, touches = d3_eventSource().changedTouches;
    if (touches) for (var i = 0, n = touches.length, touch; i < n; ++i) {
      if ((touch = touches[i]).identifier === identifier) {
        return d3_mousePoint(container, touch);
      }
    }
  };
  d3.behavior.drag = function() {
    var event = d3_eventDispatch(drag, "drag", "dragstart", "dragend"), origin = null, mousedown = dragstart(d3_noop, d3.mouse, d3_window, "mousemove", "mouseup"), touchstart = dragstart(d3_behavior_dragTouchId, d3.touch, d3_identity, "touchmove", "touchend");
    function drag() {
      this.on("mousedown.drag", mousedown).on("touchstart.drag", touchstart);
    }
    function dragstart(id, position, subject, move, end) {
      return function() {
        var that = this, target = d3.event.target.correspondingElement || d3.event.target, parent = that.parentNode, dispatch = event.of(that, arguments), dragged = 0, dragId = id(), dragName = ".drag" + (dragId == null ? "" : "-" + dragId), dragOffset, dragSubject = d3.select(subject(target)).on(move + dragName, moved).on(end + dragName, ended), dragRestore = d3_event_dragSuppress(target), position0 = position(parent, dragId);
        if (origin) {
          dragOffset = origin.apply(that, arguments);
          dragOffset = [ dragOffset.x - position0[0], dragOffset.y - position0[1] ];
        } else {
          dragOffset = [ 0, 0 ];
        }
        dispatch({
          type: "dragstart"
        });
        function moved() {
          var position1 = position(parent, dragId), dx, dy;
          if (!position1) return;
          dx = position1[0] - position0[0];
          dy = position1[1] - position0[1];
          dragged |= dx | dy;
          position0 = position1;
          dispatch({
            type: "drag",
            x: position1[0] + dragOffset[0],
            y: position1[1] + dragOffset[1],
            dx: dx,
            dy: dy
          });
        }
        function ended() {
          if (!position(parent, dragId)) return;
          dragSubject.on(move + dragName, null).on(end + dragName, null);
          dragRestore(dragged);
          dispatch({
            type: "dragend"
          });
        }
      };
    }
    drag.origin = function(x) {
      if (!arguments.length) return origin;
      origin = x;
      return drag;
    };
    return d3.rebind(drag, event, "on");
  };
  function d3_behavior_dragTouchId() {
    return d3.event.changedTouches[0].identifier;
  }
  d3.touches = function(container, touches) {
    if (arguments.length < 2) touches = d3_eventSource().touches;
    return touches ? d3_array(touches).map(function(touch) {
      var point = d3_mousePoint(container, touch);
      point.identifier = touch.identifier;
      return point;
    }) : [];
  };
  var ε = 1e-6, ε2 = ε * ε, π = Math.PI, τ = 2 * π, τε = τ - ε, halfπ = π / 2, d3_radians = π / 180, d3_degrees = 180 / π;
  function d3_sgn(x) {
    return x > 0 ? 1 : x < 0 ? -1 : 0;
  }
  function d3_cross2d(a, b, c) {
    return (b[0] - a[0]) * (c[1] - a[1]) - (b[1] - a[1]) * (c[0] - a[0]);
  }
  function d3_acos(x) {
    return x > 1 ? 0 : x < -1 ? π : Math.acos(x);
  }
  function d3_asin(x) {
    return x > 1 ? halfπ : x < -1 ? -halfπ : Math.asin(x);
  }
  function d3_sinh(x) {
    return ((x = Math.exp(x)) - 1 / x) / 2;
  }
  function d3_cosh(x) {
    return ((x = Math.exp(x)) + 1 / x) / 2;
  }
  function d3_tanh(x) {
    return ((x = Math.exp(2 * x)) - 1) / (x + 1);
  }
  function d3_haversin(x) {
    return (x = Math.sin(x / 2)) * x;
  }
  var ρ = Math.SQRT2, ρ2 = 2, ρ4 = 4;
  d3.interpolateZoom = function(p0, p1) {
    var ux0 = p0[0], uy0 = p0[1], w0 = p0[2], ux1 = p1[0], uy1 = p1[1], w1 = p1[2], dx = ux1 - ux0, dy = uy1 - uy0, d2 = dx * dx + dy * dy, i, S;
    if (d2 < ε2) {
      S = Math.log(w1 / w0) / ρ;
      i = function(t) {
        return [ ux0 + t * dx, uy0 + t * dy, w0 * Math.exp(ρ * t * S) ];
      };
    } else {
      var d1 = Math.sqrt(d2), b0 = (w1 * w1 - w0 * w0 + ρ4 * d2) / (2 * w0 * ρ2 * d1), b1 = (w1 * w1 - w0 * w0 - ρ4 * d2) / (2 * w1 * ρ2 * d1), r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0), r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1);
      S = (r1 - r0) / ρ;
      i = function(t) {
        var s = t * S, coshr0 = d3_cosh(r0), u = w0 / (ρ2 * d1) * (coshr0 * d3_tanh(ρ * s + r0) - d3_sinh(r0));
        return [ ux0 + u * dx, uy0 + u * dy, w0 * coshr0 / d3_cosh(ρ * s + r0) ];
      };
    }
    i.duration = S * 1e3;
    return i;
  };
  d3.behavior.zoom = function() {
    var view = {
      x: 0,
      y: 0,
      k: 1
    }, translate0, center0, center, size = [ 960, 500 ], scaleExtent = d3_behavior_zoomInfinity, duration = 250, zooming = 0, mousedown = "mousedown.zoom", mousemove = "mousemove.zoom", mouseup = "mouseup.zoom", mousewheelTimer, touchstart = "touchstart.zoom", touchtime, event = d3_eventDispatch(zoom, "zoomstart", "zoom", "zoomend"), x0, x1, y0, y1;
    if (!d3_behavior_zoomWheel) {
      d3_behavior_zoomWheel = "onwheel" in d3_document ? (d3_behavior_zoomDelta = function() {
        return -d3.event.deltaY * (d3.event.deltaMode ? 120 : 1);
      }, "wheel") : "onmousewheel" in d3_document ? (d3_behavior_zoomDelta = function() {
        return d3.event.wheelDelta;
      }, "mousewheel") : (d3_behavior_zoomDelta = function() {
        return -d3.event.detail;
      }, "MozMousePixelScroll");
    }
    function zoom(g) {
      g.on(mousedown, mousedowned).on(d3_behavior_zoomWheel + ".zoom", mousewheeled).on("dblclick.zoom", dblclicked).on(touchstart, touchstarted);
    }
    zoom.event = function(g) {
      g.each(function() {
        var dispatch = event.of(this, arguments), view1 = view;
        if (d3_transitionInheritId) {
          d3.select(this).transition().each("start.zoom", function() {
            view = this.__chart__ || {
              x: 0,
              y: 0,
              k: 1
            };
            zoomstarted(dispatch);
          }).tween("zoom:zoom", function() {
            var dx = size[0], dy = size[1], cx = center0 ? center0[0] : dx / 2, cy = center0 ? center0[1] : dy / 2, i = d3.interpolateZoom([ (cx - view.x) / view.k, (cy - view.y) / view.k, dx / view.k ], [ (cx - view1.x) / view1.k, (cy - view1.y) / view1.k, dx / view1.k ]);
            return function(t) {
              var l = i(t), k = dx / l[2];
              this.__chart__ = view = {
                x: cx - l[0] * k,
                y: cy - l[1] * k,
                k: k
              };
              zoomed(dispatch);
            };
          }).each("interrupt.zoom", function() {
            zoomended(dispatch);
          }).each("end.zoom", function() {
            zoomended(dispatch);
          });
        } else {
          this.__chart__ = view;
          zoomstarted(dispatch);
          zoomed(dispatch);
          zoomended(dispatch);
        }
      });
    };
    zoom.translate = function(_) {
      if (!arguments.length) return [ view.x, view.y ];
      view = {
        x: +_[0],
        y: +_[1],
        k: view.k
      };
      rescale();
      return zoom;
    };
    zoom.scale = function(_) {
      if (!arguments.length) return view.k;
      view = {
        x: view.x,
        y: view.y,
        k: null
      };
      scaleTo(+_);
      rescale();
      return zoom;
    };
    zoom.scaleExtent = function(_) {
      if (!arguments.length) return scaleExtent;
      scaleExtent = _ == null ? d3_behavior_zoomInfinity : [ +_[0], +_[1] ];
      return zoom;
    };
    zoom.center = function(_) {
      if (!arguments.length) return center;
      center = _ && [ +_[0], +_[1] ];
      return zoom;
    };
    zoom.size = function(_) {
      if (!arguments.length) return size;
      size = _ && [ +_[0], +_[1] ];
      return zoom;
    };
    zoom.duration = function(_) {
      if (!arguments.length) return duration;
      duration = +_;
      return zoom;
    };
    zoom.x = function(z) {
      if (!arguments.length) return x1;
      x1 = z;
      x0 = z.copy();
      view = {
        x: 0,
        y: 0,
        k: 1
      };
      return zoom;
    };
    zoom.y = function(z) {
      if (!arguments.length) return y1;
      y1 = z;
      y0 = z.copy();
      view = {
        x: 0,
        y: 0,
        k: 1
      };
      return zoom;
    };
    function location(p) {
      return [ (p[0] - view.x) / view.k, (p[1] - view.y) / view.k ];
    }
    function point(l) {
      return [ l[0] * view.k + view.x, l[1] * view.k + view.y ];
    }
    function scaleTo(s) {
      view.k = Math.max(scaleExtent[0], Math.min(scaleExtent[1], s));
    }
    function translateTo(p, l) {
      l = point(l);
      view.x += p[0] - l[0];
      view.y += p[1] - l[1];
    }
    function zoomTo(that, p, l, k) {
      that.__chart__ = {
        x: view.x,
        y: view.y,
        k: view.k
      };
      scaleTo(Math.pow(2, k));
      translateTo(center0 = p, l);
      that = d3.select(that);
      if (duration > 0) that = that.transition().duration(duration);
      that.call(zoom.event);
    }
    function rescale() {
      if (x1) x1.domain(x0.range().map(function(x) {
        return (x - view.x) / view.k;
      }).map(x0.invert));
      if (y1) y1.domain(y0.range().map(function(y) {
        return (y - view.y) / view.k;
      }).map(y0.invert));
    }
    function zoomstarted(dispatch) {
      if (!zooming++) dispatch({
        type: "zoomstart"
      });
    }
    function zoomed(dispatch) {
      rescale();
      dispatch({
        type: "zoom",
        scale: view.k,
        translate: [ view.x, view.y ]
      });
    }
    function zoomended(dispatch) {
      if (!--zooming) dispatch({
        type: "zoomend"
      }), center0 = null;
    }
    function mousedowned() {
      var that = this, dispatch = event.of(that, arguments), dragged = 0, subject = d3.select(d3_window(that)).on(mousemove, moved).on(mouseup, ended), location0 = location(d3.mouse(that)), dragRestore = d3_event_dragSuppress(that);
      d3_selection_interrupt.call(that);
      zoomstarted(dispatch);
      function moved() {
        dragged = 1;
        translateTo(d3.mouse(that), location0);
        zoomed(dispatch);
      }
      function ended() {
        subject.on(mousemove, null).on(mouseup, null);
        dragRestore(dragged);
        zoomended(dispatch);
      }
    }
    function touchstarted() {
      var that = this, dispatch = event.of(that, arguments), locations0 = {}, distance0 = 0, scale0, zoomName = ".zoom-" + d3.event.changedTouches[0].identifier, touchmove = "touchmove" + zoomName, touchend = "touchend" + zoomName, targets = [], subject = d3.select(that), dragRestore = d3_event_dragSuppress(that);
      started();
      zoomstarted(dispatch);
      subject.on(mousedown, null).on(touchstart, started);
      function relocate() {
        var touches = d3.touches(that);
        scale0 = view.k;
        touches.forEach(function(t) {
          if (t.identifier in locations0) locations0[t.identifier] = location(t);
        });
        return touches;
      }
      function started() {
        var target = d3.event.target;
        d3.select(target).on(touchmove, moved).on(touchend, ended);
        targets.push(target);
        var changed = d3.event.changedTouches;
        for (var i = 0, n = changed.length; i < n; ++i) {
          locations0[changed[i].identifier] = null;
        }
        var touches = relocate(), now = Date.now();
        if (touches.length === 1) {
          if (now - touchtime < 500) {
            var p = touches[0];
            zoomTo(that, p, locations0[p.identifier], Math.floor(Math.log(view.k) / Math.LN2) + 1);
            d3_eventPreventDefault();
          }
          touchtime = now;
        } else if (touches.length > 1) {
          var p = touches[0], q = touches[1], dx = p[0] - q[0], dy = p[1] - q[1];
          distance0 = dx * dx + dy * dy;
        }
      }
      function moved() {
        var touches = d3.touches(that), p0, l0, p1, l1;
        d3_selection_interrupt.call(that);
        for (var i = 0, n = touches.length; i < n; ++i, l1 = null) {
          p1 = touches[i];
          if (l1 = locations0[p1.identifier]) {
            if (l0) break;
            p0 = p1, l0 = l1;
          }
        }
        if (l1) {
          var distance1 = (distance1 = p1[0] - p0[0]) * distance1 + (distance1 = p1[1] - p0[1]) * distance1, scale1 = distance0 && Math.sqrt(distance1 / distance0);
          p0 = [ (p0[0] + p1[0]) / 2, (p0[1] + p1[1]) / 2 ];
          l0 = [ (l0[0] + l1[0]) / 2, (l0[1] + l1[1]) / 2 ];
          scaleTo(scale1 * scale0);
        }
        touchtime = null;
        translateTo(p0, l0);
        zoomed(dispatch);
      }
      function ended() {
        if (d3.event.touches.length) {
          var changed = d3.event.changedTouches;
          for (var i = 0, n = changed.length; i < n; ++i) {
            delete locations0[changed[i].identifier];
          }
          for (var identifier in locations0) {
            return void relocate();
          }
        }
        d3.selectAll(targets).on(zoomName, null);
        subject.on(mousedown, mousedowned).on(touchstart, touchstarted);
        dragRestore();
        zoomended(dispatch);
      }
    }
    function mousewheeled() {
      var dispatch = event.of(this, arguments);
      if (mousewheelTimer) clearTimeout(mousewheelTimer); else d3_selection_interrupt.call(this), 
      translate0 = location(center0 = center || d3.mouse(this)), zoomstarted(dispatch);
      mousewheelTimer = setTimeout(function() {
        mousewheelTimer = null;
        zoomended(dispatch);
      }, 50);
      d3_eventPreventDefault();
      scaleTo(Math.pow(2, d3_behavior_zoomDelta() * .002) * view.k);
      translateTo(center0, translate0);
      zoomed(dispatch);
    }
    function dblclicked() {
      var p = d3.mouse(this), k = Math.log(view.k) / Math.LN2;
      zoomTo(this, p, location(p), d3.event.shiftKey ? Math.ceil(k) - 1 : Math.floor(k) + 1);
    }
    return d3.rebind(zoom, event, "on");
  };
  var d3_behavior_zoomInfinity = [ 0, Infinity ], d3_behavior_zoomDelta, d3_behavior_zoomWheel;
  d3.color = d3_color;
  function d3_color() {}
  d3_color.prototype.toString = function() {
    return this.rgb() + "";
  };
  d3.hsl = d3_hsl;
  function d3_hsl(h, s, l) {
    return this instanceof d3_hsl ? void (this.h = +h, this.s = +s, this.l = +l) : arguments.length < 2 ? h instanceof d3_hsl ? new d3_hsl(h.h, h.s, h.l) : d3_rgb_parse("" + h, d3_rgb_hsl, d3_hsl) : new d3_hsl(h, s, l);
  }
  var d3_hslPrototype = d3_hsl.prototype = new d3_color();
  d3_hslPrototype.brighter = function(k) {
    k = Math.pow(.7, arguments.length ? k : 1);
    return new d3_hsl(this.h, this.s, this.l / k);
  };
  d3_hslPrototype.darker = function(k) {
    k = Math.pow(.7, arguments.length ? k : 1);
    return new d3_hsl(this.h, this.s, k * this.l);
  };
  d3_hslPrototype.rgb = function() {
    return d3_hsl_rgb(this.h, this.s, this.l);
  };
  function d3_hsl_rgb(h, s, l) {
    var m1, m2;
    h = isNaN(h) ? 0 : (h %= 360) < 0 ? h + 360 : h;
    s = isNaN(s) ? 0 : s < 0 ? 0 : s > 1 ? 1 : s;
    l = l < 0 ? 0 : l > 1 ? 1 : l;
    m2 = l <= .5 ? l * (1 + s) : l + s - l * s;
    m1 = 2 * l - m2;
    function v(h) {
      if (h > 360) h -= 360; else if (h < 0) h += 360;
      if (h < 60) return m1 + (m2 - m1) * h / 60;
      if (h < 180) return m2;
      if (h < 240) return m1 + (m2 - m1) * (240 - h) / 60;
      return m1;
    }
    function vv(h) {
      return Math.round(v(h) * 255);
    }
    return new d3_rgb(vv(h + 120), vv(h), vv(h - 120));
  }
  d3.hcl = d3_hcl;
  function d3_hcl(h, c, l) {
    return this instanceof d3_hcl ? void (this.h = +h, this.c = +c, this.l = +l) : arguments.length < 2 ? h instanceof d3_hcl ? new d3_hcl(h.h, h.c, h.l) : h instanceof d3_lab ? d3_lab_hcl(h.l, h.a, h.b) : d3_lab_hcl((h = d3_rgb_lab((h = d3.rgb(h)).r, h.g, h.b)).l, h.a, h.b) : new d3_hcl(h, c, l);
  }
  var d3_hclPrototype = d3_hcl.prototype = new d3_color();
  d3_hclPrototype.brighter = function(k) {
    return new d3_hcl(this.h, this.c, Math.min(100, this.l + d3_lab_K * (arguments.length ? k : 1)));
  };
  d3_hclPrototype.darker = function(k) {
    return new d3_hcl(this.h, this.c, Math.max(0, this.l - d3_lab_K * (arguments.length ? k : 1)));
  };
  d3_hclPrototype.rgb = function() {
    return d3_hcl_lab(this.h, this.c, this.l).rgb();
  };
  function d3_hcl_lab(h, c, l) {
    if (isNaN(h)) h = 0;
    if (isNaN(c)) c = 0;
    return new d3_lab(l, Math.cos(h *= d3_radians) * c, Math.sin(h) * c);
  }
  d3.lab = d3_lab;
  function d3_lab(l, a, b) {
    return this instanceof d3_lab ? void (this.l = +l, this.a = +a, this.b = +b) : arguments.length < 2 ? l instanceof d3_lab ? new d3_lab(l.l, l.a, l.b) : l instanceof d3_hcl ? d3_hcl_lab(l.h, l.c, l.l) : d3_rgb_lab((l = d3_rgb(l)).r, l.g, l.b) : new d3_lab(l, a, b);
  }
  var d3_lab_K = 18;
  var d3_lab_X = .95047, d3_lab_Y = 1, d3_lab_Z = 1.08883;
  var d3_labPrototype = d3_lab.prototype = new d3_color();
  d3_labPrototype.brighter = function(k) {
    return new d3_lab(Math.min(100, this.l + d3_lab_K * (arguments.length ? k : 1)), this.a, this.b);
  };
  d3_labPrototype.darker = function(k) {
    return new d3_lab(Math.max(0, this.l - d3_lab_K * (arguments.length ? k : 1)), this.a, this.b);
  };
  d3_labPrototype.rgb = function() {
    return d3_lab_rgb(this.l, this.a, this.b);
  };
  function d3_lab_rgb(l, a, b) {
    var y = (l + 16) / 116, x = y + a / 500, z = y - b / 200;
    x = d3_lab_xyz(x) * d3_lab_X;
    y = d3_lab_xyz(y) * d3_lab_Y;
    z = d3_lab_xyz(z) * d3_lab_Z;
    return new d3_rgb(d3_xyz_rgb(3.2404542 * x - 1.5371385 * y - .4985314 * z), d3_xyz_rgb(-.969266 * x + 1.8760108 * y + .041556 * z), d3_xyz_rgb(.0556434 * x - .2040259 * y + 1.0572252 * z));
  }
  function d3_lab_hcl(l, a, b) {
    return l > 0 ? new d3_hcl(Math.atan2(b, a) * d3_degrees, Math.sqrt(a * a + b * b), l) : new d3_hcl(NaN, NaN, l);
  }
  function d3_lab_xyz(x) {
    return x > .206893034 ? x * x * x : (x - 4 / 29) / 7.787037;
  }
  function d3_xyz_lab(x) {
    return x > .008856 ? Math.pow(x, 1 / 3) : 7.787037 * x + 4 / 29;
  }
  function d3_xyz_rgb(r) {
    return Math.round(255 * (r <= .00304 ? 12.92 * r : 1.055 * Math.pow(r, 1 / 2.4) - .055));
  }
  d3.rgb = d3_rgb;
  function d3_rgb(r, g, b) {
    return this instanceof d3_rgb ? void (this.r = ~~r, this.g = ~~g, this.b = ~~b) : arguments.length < 2 ? r instanceof d3_rgb ? new d3_rgb(r.r, r.g, r.b) : d3_rgb_parse("" + r, d3_rgb, d3_hsl_rgb) : new d3_rgb(r, g, b);
  }
  function d3_rgbNumber(value) {
    return new d3_rgb(value >> 16, value >> 8 & 255, value & 255);
  }
  function d3_rgbString(value) {
    return d3_rgbNumber(value) + "";
  }
  var d3_rgbPrototype = d3_rgb.prototype = new d3_color();
  d3_rgbPrototype.brighter = function(k) {
    k = Math.pow(.7, arguments.length ? k : 1);
    var r = this.r, g = this.g, b = this.b, i = 30;
    if (!r && !g && !b) return new d3_rgb(i, i, i);
    if (r && r < i) r = i;
    if (g && g < i) g = i;
    if (b && b < i) b = i;
    return new d3_rgb(Math.min(255, r / k), Math.min(255, g / k), Math.min(255, b / k));
  };
  d3_rgbPrototype.darker = function(k) {
    k = Math.pow(.7, arguments.length ? k : 1);
    return new d3_rgb(k * this.r, k * this.g, k * this.b);
  };
  d3_rgbPrototype.hsl = function() {
    return d3_rgb_hsl(this.r, this.g, this.b);
  };
  d3_rgbPrototype.toString = function() {
    return "#" + d3_rgb_hex(this.r) + d3_rgb_hex(this.g) + d3_rgb_hex(this.b);
  };
  function d3_rgb_hex(v) {
    return v < 16 ? "0" + Math.max(0, v).toString(16) : Math.min(255, v).toString(16);
  }
  function d3_rgb_parse(format, rgb, hsl) {
    var r = 0, g = 0, b = 0, m1, m2, color;
    m1 = /([a-z]+)\((.*)\)/.exec(format = format.toLowerCase());
    if (m1) {
      m2 = m1[2].split(",");
      switch (m1[1]) {
       case "hsl":
        {
          return hsl(parseFloat(m2[0]), parseFloat(m2[1]) / 100, parseFloat(m2[2]) / 100);
        }

       case "rgb":
        {
          return rgb(d3_rgb_parseNumber(m2[0]), d3_rgb_parseNumber(m2[1]), d3_rgb_parseNumber(m2[2]));
        }
      }
    }
    if (color = d3_rgb_names.get(format)) {
      return rgb(color.r, color.g, color.b);
    }
    if (format != null && format.charAt(0) === "#" && !isNaN(color = parseInt(format.slice(1), 16))) {
      if (format.length === 4) {
        r = (color & 3840) >> 4;
        r = r >> 4 | r;
        g = color & 240;
        g = g >> 4 | g;
        b = color & 15;
        b = b << 4 | b;
      } else if (format.length === 7) {
        r = (color & 16711680) >> 16;
        g = (color & 65280) >> 8;
        b = color & 255;
      }
    }
    return rgb(r, g, b);
  }
  function d3_rgb_hsl(r, g, b) {
    var min = Math.min(r /= 255, g /= 255, b /= 255), max = Math.max(r, g, b), d = max - min, h, s, l = (max + min) / 2;
    if (d) {
      s = l < .5 ? d / (max + min) : d / (2 - max - min);
      if (r == max) h = (g - b) / d + (g < b ? 6 : 0); else if (g == max) h = (b - r) / d + 2; else h = (r - g) / d + 4;
      h *= 60;
    } else {
      h = NaN;
      s = l > 0 && l < 1 ? 0 : h;
    }
    return new d3_hsl(h, s, l);
  }
  function d3_rgb_lab(r, g, b) {
    r = d3_rgb_xyz(r);
    g = d3_rgb_xyz(g);
    b = d3_rgb_xyz(b);
    var x = d3_xyz_lab((.4124564 * r + .3575761 * g + .1804375 * b) / d3_lab_X), y = d3_xyz_lab((.2126729 * r + .7151522 * g + .072175 * b) / d3_lab_Y), z = d3_xyz_lab((.0193339 * r + .119192 * g + .9503041 * b) / d3_lab_Z);
    return d3_lab(116 * y - 16, 500 * (x - y), 200 * (y - z));
  }
  function d3_rgb_xyz(r) {
    return (r /= 255) <= .04045 ? r / 12.92 : Math.pow((r + .055) / 1.055, 2.4);
  }
  function d3_rgb_parseNumber(c) {
    var f = parseFloat(c);
    return c.charAt(c.length - 1) === "%" ? Math.round(f * 2.55) : f;
  }
  var d3_rgb_names = d3.map({
    aliceblue: 15792383,
    antiquewhite: 16444375,
    aqua: 65535,
    aquamarine: 8388564,
    azure: 15794175,
    beige: 16119260,
    bisque: 16770244,
    black: 0,
    blanchedalmond: 16772045,
    blue: 255,
    blueviolet: 9055202,
    brown: 10824234,
    burlywood: 14596231,
    cadetblue: 6266528,
    chartreuse: 8388352,
    chocolate: 13789470,
    coral: 16744272,
    cornflowerblue: 6591981,
    cornsilk: 16775388,
    crimson: 14423100,
    cyan: 65535,
    darkblue: 139,
    darkcyan: 35723,
    darkgoldenrod: 12092939,
    darkgray: 11119017,
    darkgreen: 25600,
    darkgrey: 11119017,
    darkkhaki: 12433259,
    darkmagenta: 9109643,
    darkolivegreen: 5597999,
    darkorange: 16747520,
    darkorchid: 10040012,
    darkred: 9109504,
    darksalmon: 15308410,
    darkseagreen: 9419919,
    darkslateblue: 4734347,
    darkslategray: 3100495,
    darkslategrey: 3100495,
    darkturquoise: 52945,
    darkviolet: 9699539,
    deeppink: 16716947,
    deepskyblue: 49151,
    dimgray: 6908265,
    dimgrey: 6908265,
    dodgerblue: 2003199,
    firebrick: 11674146,
    floralwhite: 16775920,
    forestgreen: 2263842,
    fuchsia: 16711935,
    gainsboro: 14474460,
    ghostwhite: 16316671,
    gold: 16766720,
    goldenrod: 14329120,
    gray: 8421504,
    green: 32768,
    greenyellow: 11403055,
    grey: 8421504,
    honeydew: 15794160,
    hotpink: 16738740,
    indianred: 13458524,
    indigo: 4915330,
    ivory: 16777200,
    khaki: 15787660,
    lavender: 15132410,
    lavenderblush: 16773365,
    lawngreen: 8190976,
    lemonchiffon: 16775885,
    lightblue: 11393254,
    lightcoral: 15761536,
    lightcyan: 14745599,
    lightgoldenrodyellow: 16448210,
    lightgray: 13882323,
    lightgreen: 9498256,
    lightgrey: 13882323,
    lightpink: 16758465,
    lightsalmon: 16752762,
    lightseagreen: 2142890,
    lightskyblue: 8900346,
    lightslategray: 7833753,
    lightslategrey: 7833753,
    lightsteelblue: 11584734,
    lightyellow: 16777184,
    lime: 65280,
    limegreen: 3329330,
    linen: 16445670,
    magenta: 16711935,
    maroon: 8388608,
    mediumaquamarine: 6737322,
    mediumblue: 205,
    mediumorchid: 12211667,
    mediumpurple: 9662683,
    mediumseagreen: 3978097,
    mediumslateblue: 8087790,
    mediumspringgreen: 64154,
    mediumturquoise: 4772300,
    mediumvioletred: 13047173,
    midnightblue: 1644912,
    mintcream: 16121850,
    mistyrose: 16770273,
    moccasin: 16770229,
    navajowhite: 16768685,
    navy: 128,
    oldlace: 16643558,
    olive: 8421376,
    olivedrab: 7048739,
    orange: 16753920,
    orangered: 16729344,
    orchid: 14315734,
    palegoldenrod: 15657130,
    palegreen: 10025880,
    paleturquoise: 11529966,
    palevioletred: 14381203,
    papayawhip: 16773077,
    peachpuff: 16767673,
    peru: 13468991,
    pink: 16761035,
    plum: 14524637,
    powderblue: 11591910,
    purple: 8388736,
    rebeccapurple: 6697881,
    red: 16711680,
    rosybrown: 12357519,
    royalblue: 4286945,
    saddlebrown: 9127187,
    salmon: 16416882,
    sandybrown: 16032864,
    seagreen: 3050327,
    seashell: 16774638,
    sienna: 10506797,
    silver: 12632256,
    skyblue: 8900331,
    slateblue: 6970061,
    slategray: 7372944,
    slategrey: 7372944,
    snow: 16775930,
    springgreen: 65407,
    steelblue: 4620980,
    tan: 13808780,
    teal: 32896,
    thistle: 14204888,
    tomato: 16737095,
    turquoise: 4251856,
    violet: 15631086,
    wheat: 16113331,
    white: 16777215,
    whitesmoke: 16119285,
    yellow: 16776960,
    yellowgreen: 10145074
  });
  d3_rgb_names.forEach(function(key, value) {
    d3_rgb_names.set(key, d3_rgbNumber(value));
  });
  function d3_functor(v) {
    return typeof v === "function" ? v : function() {
      return v;
    };
  }
  d3.functor = d3_functor;
  d3.xhr = d3_xhrType(d3_identity);
  function d3_xhrType(response) {
    return function(url, mimeType, callback) {
      if (arguments.length === 2 && typeof mimeType === "function") callback = mimeType, 
      mimeType = null;
      return d3_xhr(url, mimeType, response, callback);
    };
  }
  function d3_xhr(url, mimeType, response, callback) {
    var xhr = {}, dispatch = d3.dispatch("beforesend", "progress", "load", "error"), headers = {}, request = new XMLHttpRequest(), responseType = null;
    if (this.XDomainRequest && !("withCredentials" in request) && /^(http(s)?:)?\/\//.test(url)) request = new XDomainRequest();
    "onload" in request ? request.onload = request.onerror = respond : request.onreadystatechange = function() {
      request.readyState > 3 && respond();
    };
    function respond() {
      var status = request.status, result;
      if (!status && d3_xhrHasResponse(request) || status >= 200 && status < 300 || status === 304) {
        try {
          result = response.call(xhr, request);
        } catch (e) {
          dispatch.error.call(xhr, e);
          return;
        }
        dispatch.load.call(xhr, result);
      } else {
        dispatch.error.call(xhr, request);
      }
    }
    request.onprogress = function(event) {
      var o = d3.event;
      d3.event = event;
      try {
        dispatch.progress.call(xhr, request);
      } finally {
        d3.event = o;
      }
    };
    xhr.header = function(name, value) {
      name = (name + "").toLowerCase();
      if (arguments.length < 2) return headers[name];
      if (value == null) delete headers[name]; else headers[name] = value + "";
      return xhr;
    };
    xhr.mimeType = function(value) {
      if (!arguments.length) return mimeType;
      mimeType = value == null ? null : value + "";
      return xhr;
    };
    xhr.responseType = function(value) {
      if (!arguments.length) return responseType;
      responseType = value;
      return xhr;
    };
    xhr.response = function(value) {
      response = value;
      return xhr;
    };
    [ "get", "post" ].forEach(function(method) {
      xhr[method] = function() {
        return xhr.send.apply(xhr, [ method ].concat(d3_array(arguments)));
      };
    });
    xhr.send = function(method, data, callback) {
      if (arguments.length === 2 && typeof data === "function") callback = data, data = null;
      request.open(method, url, true);
      if (mimeType != null && !("accept" in headers)) headers["accept"] = mimeType + ",*/*";
      if (request.setRequestHeader) for (var name in headers) request.setRequestHeader(name, headers[name]);
      if (mimeType != null && request.overrideMimeType) request.overrideMimeType(mimeType);
      if (responseType != null) request.responseType = responseType;
      if (callback != null) xhr.on("error", callback).on("load", function(request) {
        callback(null, request);
      });
      dispatch.beforesend.call(xhr, request);
      request.send(data == null ? null : data);
      return xhr;
    };
    xhr.abort = function() {
      request.abort();
      return xhr;
    };
    d3.rebind(xhr, dispatch, "on");
    return callback == null ? xhr : xhr.get(d3_xhr_fixCallback(callback));
  }
  function d3_xhr_fixCallback(callback) {
    return callback.length === 1 ? function(error, request) {
      callback(error == null ? request : null);
    } : callback;
  }
  function d3_xhrHasResponse(request) {
    var type = request.responseType;
    return type && type !== "text" ? request.response : request.responseText;
  }
  d3.dsv = function(delimiter, mimeType) {
    var reFormat = new RegExp('["' + delimiter + "\n]"), delimiterCode = delimiter.charCodeAt(0);
    function dsv(url, row, callback) {
      if (arguments.length < 3) callback = row, row = null;
      var xhr = d3_xhr(url, mimeType, row == null ? response : typedResponse(row), callback);
      xhr.row = function(_) {
        return arguments.length ? xhr.response((row = _) == null ? response : typedResponse(_)) : row;
      };
      return xhr;
    }
    function response(request) {
      return dsv.parse(request.responseText);
    }
    function typedResponse(f) {
      return function(request) {
        return dsv.parse(request.responseText, f);
      };
    }
    dsv.parse = function(text, f) {
      var o;
      return dsv.parseRows(text, function(row, i) {
        if (o) return o(row, i - 1);
        var a = new Function("d", "return {" + row.map(function(name, i) {
          return JSON.stringify(name) + ": d[" + i + "]";
        }).join(",") + "}");
        o = f ? function(row, i) {
          return f(a(row), i);
        } : a;
      });
    };
    dsv.parseRows = function(text, f) {
      var EOL = {}, EOF = {}, rows = [], N = text.length, I = 0, n = 0, t, eol;
      function token() {
        if (I >= N) return EOF;
        if (eol) return eol = false, EOL;
        var j = I;
        if (text.charCodeAt(j) === 34) {
          var i = j;
          while (i++ < N) {
            if (text.charCodeAt(i) === 34) {
              if (text.charCodeAt(i + 1) !== 34) break;
              ++i;
            }
          }
          I = i + 2;
          var c = text.charCodeAt(i + 1);
          if (c === 13) {
            eol = true;
            if (text.charCodeAt(i + 2) === 10) ++I;
          } else if (c === 10) {
            eol = true;
          }
          return text.slice(j + 1, i).replace(/""/g, '"');
        }
        while (I < N) {
          var c = text.charCodeAt(I++), k = 1;
          if (c === 10) eol = true; else if (c === 13) {
            eol = true;
            if (text.charCodeAt(I) === 10) ++I, ++k;
          } else if (c !== delimiterCode) continue;
          return text.slice(j, I - k);
        }
        return text.slice(j);
      }
      while ((t = token()) !== EOF) {
        var a = [];
        while (t !== EOL && t !== EOF) {
          a.push(t);
          t = token();
        }
        if (f && (a = f(a, n++)) == null) continue;
        rows.push(a);
      }
      return rows;
    };
    dsv.format = function(rows) {
      if (Array.isArray(rows[0])) return dsv.formatRows(rows);
      var fieldSet = new d3_Set(), fields = [];
      rows.forEach(function(row) {
        for (var field in row) {
          if (!fieldSet.has(field)) {
            fields.push(fieldSet.add(field));
          }
        }
      });
      return [ fields.map(formatValue).join(delimiter) ].concat(rows.map(function(row) {
        return fields.map(function(field) {
          return formatValue(row[field]);
        }).join(delimiter);
      })).join("\n");
    };
    dsv.formatRows = function(rows) {
      return rows.map(formatRow).join("\n");
    };
    function formatRow(row) {
      return row.map(formatValue).join(delimiter);
    }
    function formatValue(text) {
      return reFormat.test(text) ? '"' + text.replace(/\"/g, '""') + '"' : text;
    }
    return dsv;
  };
  d3.csv = d3.dsv(",", "text/csv");
  d3.tsv = d3.dsv("	", "text/tab-separated-values");
  var d3_timer_queueHead, d3_timer_queueTail, d3_timer_interval, d3_timer_timeout, d3_timer_frame = this[d3_vendorSymbol(this, "requestAnimationFrame")] || function(callback) {
    setTimeout(callback, 17);
  };
  d3.timer = function() {
    d3_timer.apply(this, arguments);
  };
  function d3_timer(callback, delay, then) {
    var n = arguments.length;
    if (n < 2) delay = 0;
    if (n < 3) then = Date.now();
    var time = then + delay, timer = {
      c: callback,
      t: time,
      n: null
    };
    if (d3_timer_queueTail) d3_timer_queueTail.n = timer; else d3_timer_queueHead = timer;
    d3_timer_queueTail = timer;
    if (!d3_timer_interval) {
      d3_timer_timeout = clearTimeout(d3_timer_timeout);
      d3_timer_interval = 1;
      d3_timer_frame(d3_timer_step);
    }
    return timer;
  }
  function d3_timer_step() {
    var now = d3_timer_mark(), delay = d3_timer_sweep() - now;
    if (delay > 24) {
      if (isFinite(delay)) {
        clearTimeout(d3_timer_timeout);
        d3_timer_timeout = setTimeout(d3_timer_step, delay);
      }
      d3_timer_interval = 0;
    } else {
      d3_timer_interval = 1;
      d3_timer_frame(d3_timer_step);
    }
  }
  d3.timer.flush = function() {
    d3_timer_mark();
    d3_timer_sweep();
  };
  function d3_timer_mark() {
    var now = Date.now(), timer = d3_timer_queueHead;
    while (timer) {
      if (now >= timer.t && timer.c(now - timer.t)) timer.c = null;
      timer = timer.n;
    }
    return now;
  }
  function d3_timer_sweep() {
    var t0, t1 = d3_timer_queueHead, time = Infinity;
    while (t1) {
      if (t1.c) {
        if (t1.t < time) time = t1.t;
        t1 = (t0 = t1).n;
      } else {
        t1 = t0 ? t0.n = t1.n : d3_timer_queueHead = t1.n;
      }
    }
    d3_timer_queueTail = t0;
    return time;
  }
  function d3_format_precision(x, p) {
    return p - (x ? Math.ceil(Math.log(x) / Math.LN10) : 1);
  }
  d3.round = function(x, n) {
    return n ? Math.round(x * (n = Math.pow(10, n))) / n : Math.round(x);
  };
  var d3_formatPrefixes = [ "y", "z", "a", "f", "p", "n", "µ", "m", "", "k", "M", "G", "T", "P", "E", "Z", "Y" ].map(d3_formatPrefix);
  d3.formatPrefix = function(value, precision) {
    var i = 0;
    if (value = +value) {
      if (value < 0) value *= -1;
      if (precision) value = d3.round(value, d3_format_precision(value, precision));
      i = 1 + Math.floor(1e-12 + Math.log(value) / Math.LN10);
      i = Math.max(-24, Math.min(24, Math.floor((i - 1) / 3) * 3));
    }
    return d3_formatPrefixes[8 + i / 3];
  };
  function d3_formatPrefix(d, i) {
    var k = Math.pow(10, abs(8 - i) * 3);
    return {
      scale: i > 8 ? function(d) {
        return d / k;
      } : function(d) {
        return d * k;
      },
      symbol: d
    };
  }
  function d3_locale_numberFormat(locale) {
    var locale_decimal = locale.decimal, locale_thousands = locale.thousands, locale_grouping = locale.grouping, locale_currency = locale.currency, formatGroup = locale_grouping && locale_thousands ? function(value, width) {
      var i = value.length, t = [], j = 0, g = locale_grouping[0], length = 0;
      while (i > 0 && g > 0) {
        if (length + g + 1 > width) g = Math.max(1, width - length);
        t.push(value.substring(i -= g, i + g));
        if ((length += g + 1) > width) break;
        g = locale_grouping[j = (j + 1) % locale_grouping.length];
      }
      return t.reverse().join(locale_thousands);
    } : d3_identity;
    return function(specifier) {
      var match = d3_format_re.exec(specifier), fill = match[1] || " ", align = match[2] || ">", sign = match[3] || "-", symbol = match[4] || "", zfill = match[5], width = +match[6], comma = match[7], precision = match[8], type = match[9], scale = 1, prefix = "", suffix = "", integer = false, exponent = true;
      if (precision) precision = +precision.substring(1);
      if (zfill || fill === "0" && align === "=") {
        zfill = fill = "0";
        align = "=";
      }
      switch (type) {
       case "n":
        comma = true;
        type = "g";
        break;

       case "%":
        scale = 100;
        suffix = "%";
        type = "f";
        break;

       case "p":
        scale = 100;
        suffix = "%";
        type = "r";
        break;

       case "b":
       case "o":
       case "x":
       case "X":
        if (symbol === "#") prefix = "0" + type.toLowerCase();

       case "c":
        exponent = false;

       case "d":
        integer = true;
        precision = 0;
        break;

       case "s":
        scale = -1;
        type = "r";
        break;
      }
      if (symbol === "$") prefix = locale_currency[0], suffix = locale_currency[1];
      if (type == "r" && !precision) type = "g";
      if (precision != null) {
        if (type == "g") precision = Math.max(1, Math.min(21, precision)); else if (type == "e" || type == "f") precision = Math.max(0, Math.min(20, precision));
      }
      type = d3_format_types.get(type) || d3_format_typeDefault;
      var zcomma = zfill && comma;
      return function(value) {
        var fullSuffix = suffix;
        if (integer && value % 1) return "";
        var negative = value < 0 || value === 0 && 1 / value < 0 ? (value = -value, "-") : sign === "-" ? "" : sign;
        if (scale < 0) {
          var unit = d3.formatPrefix(value, precision);
          value = unit.scale(value);
          fullSuffix = unit.symbol + suffix;
        } else {
          value *= scale;
        }
        value = type(value, precision);
        var i = value.lastIndexOf("."), before, after;
        if (i < 0) {
          var j = exponent ? value.lastIndexOf("e") : -1;
          if (j < 0) before = value, after = ""; else before = value.substring(0, j), after = value.substring(j);
        } else {
          before = value.substring(0, i);
          after = locale_decimal + value.substring(i + 1);
        }
        if (!zfill && comma) before = formatGroup(before, Infinity);
        var length = prefix.length + before.length + after.length + (zcomma ? 0 : negative.length), padding = length < width ? new Array(length = width - length + 1).join(fill) : "";
        if (zcomma) before = formatGroup(padding + before, padding.length ? width - after.length : Infinity);
        negative += prefix;
        value = before + after;
        return (align === "<" ? negative + value + padding : align === ">" ? padding + negative + value : align === "^" ? padding.substring(0, length >>= 1) + negative + value + padding.substring(length) : negative + (zcomma ? value : padding + value)) + fullSuffix;
      };
    };
  }
  var d3_format_re = /(?:([^{])?([<>=^]))?([+\- ])?([$#])?(0)?(\d+)?(,)?(\.-?\d+)?([a-z%])?/i;
  var d3_format_types = d3.map({
    b: function(x) {
      return x.toString(2);
    },
    c: function(x) {
      return String.fromCharCode(x);
    },
    o: function(x) {
      return x.toString(8);
    },
    x: function(x) {
      return x.toString(16);
    },
    X: function(x) {
      return x.toString(16).toUpperCase();
    },
    g: function(x, p) {
      return x.toPrecision(p);
    },
    e: function(x, p) {
      return x.toExponential(p);
    },
    f: function(x, p) {
      return x.toFixed(p);
    },
    r: function(x, p) {
      return (x = d3.round(x, d3_format_precision(x, p))).toFixed(Math.max(0, Math.min(20, d3_format_precision(x * (1 + 1e-15), p))));
    }
  });
  function d3_format_typeDefault(x) {
    return x + "";
  }
  var d3_time = d3.time = {}, d3_date = Date;
  function d3_date_utc() {
    this._ = new Date(arguments.length > 1 ? Date.UTC.apply(this, arguments) : arguments[0]);
  }
  d3_date_utc.prototype = {
    getDate: function() {
      return this._.getUTCDate();
    },
    getDay: function() {
      return this._.getUTCDay();
    },
    getFullYear: function() {
      return this._.getUTCFullYear();
    },
    getHours: function() {
      return this._.getUTCHours();
    },
    getMilliseconds: function() {
      return this._.getUTCMilliseconds();
    },
    getMinutes: function() {
      return this._.getUTCMinutes();
    },
    getMonth: function() {
      return this._.getUTCMonth();
    },
    getSeconds: function() {
      return this._.getUTCSeconds();
    },
    getTime: function() {
      return this._.getTime();
    },
    getTimezoneOffset: function() {
      return 0;
    },
    valueOf: function() {
      return this._.valueOf();
    },
    setDate: function() {
      d3_time_prototype.setUTCDate.apply(this._, arguments);
    },
    setDay: function() {
      d3_time_prototype.setUTCDay.apply(this._, arguments);
    },
    setFullYear: function() {
      d3_time_prototype.setUTCFullYear.apply(this._, arguments);
    },
    setHours: function() {
      d3_time_prototype.setUTCHours.apply(this._, arguments);
    },
    setMilliseconds: function() {
      d3_time_prototype.setUTCMilliseconds.apply(this._, arguments);
    },
    setMinutes: function() {
      d3_time_prototype.setUTCMinutes.apply(this._, arguments);
    },
    setMonth: function() {
      d3_time_prototype.setUTCMonth.apply(this._, arguments);
    },
    setSeconds: function() {
      d3_time_prototype.setUTCSeconds.apply(this._, arguments);
    },
    setTime: function() {
      d3_time_prototype.setTime.apply(this._, arguments);
    }
  };
  var d3_time_prototype = Date.prototype;
  function d3_time_interval(local, step, number) {
    function round(date) {
      var d0 = local(date), d1 = offset(d0, 1);
      return date - d0 < d1 - date ? d0 : d1;
    }
    function ceil(date) {
      step(date = local(new d3_date(date - 1)), 1);
      return date;
    }
    function offset(date, k) {
      step(date = new d3_date(+date), k);
      return date;
    }
    function range(t0, t1, dt) {
      var time = ceil(t0), times = [];
      if (dt > 1) {
        while (time < t1) {
          if (!(number(time) % dt)) times.push(new Date(+time));
          step(time, 1);
        }
      } else {
        while (time < t1) times.push(new Date(+time)), step(time, 1);
      }
      return times;
    }
    function range_utc(t0, t1, dt) {
      try {
        d3_date = d3_date_utc;
        var utc = new d3_date_utc();
        utc._ = t0;
        return range(utc, t1, dt);
      } finally {
        d3_date = Date;
      }
    }
    local.floor = local;
    local.round = round;
    local.ceil = ceil;
    local.offset = offset;
    local.range = range;
    var utc = local.utc = d3_time_interval_utc(local);
    utc.floor = utc;
    utc.round = d3_time_interval_utc(round);
    utc.ceil = d3_time_interval_utc(ceil);
    utc.offset = d3_time_interval_utc(offset);
    utc.range = range_utc;
    return local;
  }
  function d3_time_interval_utc(method) {
    return function(date, k) {
      try {
        d3_date = d3_date_utc;
        var utc = new d3_date_utc();
        utc._ = date;
        return method(utc, k)._;
      } finally {
        d3_date = Date;
      }
    };
  }
  d3_time.year = d3_time_interval(function(date) {
    date = d3_time.day(date);
    date.setMonth(0, 1);
    return date;
  }, function(date, offset) {
    date.setFullYear(date.getFullYear() + offset);
  }, function(date) {
    return date.getFullYear();
  });
  d3_time.years = d3_time.year.range;
  d3_time.years.utc = d3_time.year.utc.range;
  d3_time.day = d3_time_interval(function(date) {
    var day = new d3_date(2e3, 0);
    day.setFullYear(date.getFullYear(), date.getMonth(), date.getDate());
    return day;
  }, function(date, offset) {
    date.setDate(date.getDate() + offset);
  }, function(date) {
    return date.getDate() - 1;
  });
  d3_time.days = d3_time.day.range;
  d3_time.days.utc = d3_time.day.utc.range;
  d3_time.dayOfYear = function(date) {
    var year = d3_time.year(date);
    return Math.floor((date - year - (date.getTimezoneOffset() - year.getTimezoneOffset()) * 6e4) / 864e5);
  };
  [ "sunday", "monday", "tuesday", "wednesday", "thursday", "friday", "saturday" ].forEach(function(day, i) {
    i = 7 - i;
    var interval = d3_time[day] = d3_time_interval(function(date) {
      (date = d3_time.day(date)).setDate(date.getDate() - (date.getDay() + i) % 7);
      return date;
    }, function(date, offset) {
      date.setDate(date.getDate() + Math.floor(offset) * 7);
    }, function(date) {
      var day = d3_time.year(date).getDay();
      return Math.floor((d3_time.dayOfYear(date) + (day + i) % 7) / 7) - (day !== i);
    });
    d3_time[day + "s"] = interval.range;
    d3_time[day + "s"].utc = interval.utc.range;
    d3_time[day + "OfYear"] = function(date) {
      var day = d3_time.year(date).getDay();
      return Math.floor((d3_time.dayOfYear(date) + (day + i) % 7) / 7);
    };
  });
  d3_time.week = d3_time.sunday;
  d3_time.weeks = d3_time.sunday.range;
  d3_time.weeks.utc = d3_time.sunday.utc.range;
  d3_time.weekOfYear = d3_time.sundayOfYear;
  function d3_locale_timeFormat(locale) {
    var locale_dateTime = locale.dateTime, locale_date = locale.date, locale_time = locale.time, locale_periods = locale.periods, locale_days = locale.days, locale_shortDays = locale.shortDays, locale_months = locale.months, locale_shortMonths = locale.shortMonths;
    function d3_time_format(template) {
      var n = template.length;
      function format(date) {
        var string = [], i = -1, j = 0, c, p, f;
        while (++i < n) {
          if (template.charCodeAt(i) === 37) {
            string.push(template.slice(j, i));
            if ((p = d3_time_formatPads[c = template.charAt(++i)]) != null) c = template.charAt(++i);
            if (f = d3_time_formats[c]) c = f(date, p == null ? c === "e" ? " " : "0" : p);
            string.push(c);
            j = i + 1;
          }
        }
        string.push(template.slice(j, i));
        return string.join("");
      }
      format.parse = function(string) {
        var d = {
          y: 1900,
          m: 0,
          d: 1,
          H: 0,
          M: 0,
          S: 0,
          L: 0,
          Z: null
        }, i = d3_time_parse(d, template, string, 0);
        if (i != string.length) return null;
        if ("p" in d) d.H = d.H % 12 + d.p * 12;
        var localZ = d.Z != null && d3_date !== d3_date_utc, date = new (localZ ? d3_date_utc : d3_date)();
        if ("j" in d) date.setFullYear(d.y, 0, d.j); else if ("W" in d || "U" in d) {
          if (!("w" in d)) d.w = "W" in d ? 1 : 0;
          date.setFullYear(d.y, 0, 1);
          date.setFullYear(d.y, 0, "W" in d ? (d.w + 6) % 7 + d.W * 7 - (date.getDay() + 5) % 7 : d.w + d.U * 7 - (date.getDay() + 6) % 7);
        } else date.setFullYear(d.y, d.m, d.d);
        date.setHours(d.H + (d.Z / 100 | 0), d.M + d.Z % 100, d.S, d.L);
        return localZ ? date._ : date;
      };
      format.toString = function() {
        return template;
      };
      return format;
    }
    function d3_time_parse(date, template, string, j) {
      var c, p, t, i = 0, n = template.length, m = string.length;
      while (i < n) {
        if (j >= m) return -1;
        c = template.charCodeAt(i++);
        if (c === 37) {
          t = template.charAt(i++);
          p = d3_time_parsers[t in d3_time_formatPads ? template.charAt(i++) : t];
          if (!p || (j = p(date, string, j)) < 0) return -1;
        } else if (c != string.charCodeAt(j++)) {
          return -1;
        }
      }
      return j;
    }
    d3_time_format.utc = function(template) {
      var local = d3_time_format(template);
      function format(date) {
        try {
          d3_date = d3_date_utc;
          var utc = new d3_date();
          utc._ = date;
          return local(utc);
        } finally {
          d3_date = Date;
        }
      }
      format.parse = function(string) {
        try {
          d3_date = d3_date_utc;
          var date = local.parse(string);
          return date && date._;
        } finally {
          d3_date = Date;
        }
      };
      format.toString = local.toString;
      return format;
    };
    d3_time_format.multi = d3_time_format.utc.multi = d3_time_formatMulti;
    var d3_time_periodLookup = d3.map(), d3_time_dayRe = d3_time_formatRe(locale_days), d3_time_dayLookup = d3_time_formatLookup(locale_days), d3_time_dayAbbrevRe = d3_time_formatRe(locale_shortDays), d3_time_dayAbbrevLookup = d3_time_formatLookup(locale_shortDays), d3_time_monthRe = d3_time_formatRe(locale_months), d3_time_monthLookup = d3_time_formatLookup(locale_months), d3_time_monthAbbrevRe = d3_time_formatRe(locale_shortMonths), d3_time_monthAbbrevLookup = d3_time_formatLookup(locale_shortMonths);
    locale_periods.forEach(function(p, i) {
      d3_time_periodLookup.set(p.toLowerCase(), i);
    });
    var d3_time_formats = {
      a: function(d) {
        return locale_shortDays[d.getDay()];
      },
      A: function(d) {
        return locale_days[d.getDay()];
      },
      b: function(d) {
        return locale_shortMonths[d.getMonth()];
      },
      B: function(d) {
        return locale_months[d.getMonth()];
      },
      c: d3_time_format(locale_dateTime),
      d: function(d, p) {
        return d3_time_formatPad(d.getDate(), p, 2);
      },
      e: function(d, p) {
        return d3_time_formatPad(d.getDate(), p, 2);
      },
      H: function(d, p) {
        return d3_time_formatPad(d.getHours(), p, 2);
      },
      I: function(d, p) {
        return d3_time_formatPad(d.getHours() % 12 || 12, p, 2);
      },
      j: function(d, p) {
        return d3_time_formatPad(1 + d3_time.dayOfYear(d), p, 3);
      },
      L: function(d, p) {
        return d3_time_formatPad(d.getMilliseconds(), p, 3);
      },
      m: function(d, p) {
        return d3_time_formatPad(d.getMonth() + 1, p, 2);
      },
      M: function(d, p) {
        return d3_time_formatPad(d.getMinutes(), p, 2);
      },
      p: function(d) {
        return locale_periods[+(d.getHours() >= 12)];
      },
      S: function(d, p) {
        return d3_time_formatPad(d.getSeconds(), p, 2);
      },
      U: function(d, p) {
        return d3_time_formatPad(d3_time.sundayOfYear(d), p, 2);
      },
      w: function(d) {
        return d.getDay();
      },
      W: function(d, p) {
        return d3_time_formatPad(d3_time.mondayOfYear(d), p, 2);
      },
      x: d3_time_format(locale_date),
      X: d3_time_format(locale_time),
      y: function(d, p) {
        return d3_time_formatPad(d.getFullYear() % 100, p, 2);
      },
      Y: function(d, p) {
        return d3_time_formatPad(d.getFullYear() % 1e4, p, 4);
      },
      Z: d3_time_zone,
      "%": function() {
        return "%";
      }
    };
    var d3_time_parsers = {
      a: d3_time_parseWeekdayAbbrev,
      A: d3_time_parseWeekday,
      b: d3_time_parseMonthAbbrev,
      B: d3_time_parseMonth,
      c: d3_time_parseLocaleFull,
      d: d3_time_parseDay,
      e: d3_time_parseDay,
      H: d3_time_parseHour24,
      I: d3_time_parseHour24,
      j: d3_time_parseDayOfYear,
      L: d3_time_parseMilliseconds,
      m: d3_time_parseMonthNumber,
      M: d3_time_parseMinutes,
      p: d3_time_parseAmPm,
      S: d3_time_parseSeconds,
      U: d3_time_parseWeekNumberSunday,
      w: d3_time_parseWeekdayNumber,
      W: d3_time_parseWeekNumberMonday,
      x: d3_time_parseLocaleDate,
      X: d3_time_parseLocaleTime,
      y: d3_time_parseYear,
      Y: d3_time_parseFullYear,
      Z: d3_time_parseZone,
      "%": d3_time_parseLiteralPercent
    };
    function d3_time_parseWeekdayAbbrev(date, string, i) {
      d3_time_dayAbbrevRe.lastIndex = 0;
      var n = d3_time_dayAbbrevRe.exec(string.slice(i));
      return n ? (date.w = d3_time_dayAbbrevLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
    }
    function d3_time_parseWeekday(date, string, i) {
      d3_time_dayRe.lastIndex = 0;
      var n = d3_time_dayRe.exec(string.slice(i));
      return n ? (date.w = d3_time_dayLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
    }
    function d3_time_parseMonthAbbrev(date, string, i) {
      d3_time_monthAbbrevRe.lastIndex = 0;
      var n = d3_time_monthAbbrevRe.exec(string.slice(i));
      return n ? (date.m = d3_time_monthAbbrevLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
    }
    function d3_time_parseMonth(date, string, i) {
      d3_time_monthRe.lastIndex = 0;
      var n = d3_time_monthRe.exec(string.slice(i));
      return n ? (date.m = d3_time_monthLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
    }
    function d3_time_parseLocaleFull(date, string, i) {
      return d3_time_parse(date, d3_time_formats.c.toString(), string, i);
    }
    function d3_time_parseLocaleDate(date, string, i) {
      return d3_time_parse(date, d3_time_formats.x.toString(), string, i);
    }
    function d3_time_parseLocaleTime(date, string, i) {
      return d3_time_parse(date, d3_time_formats.X.toString(), string, i);
    }
    function d3_time_parseAmPm(date, string, i) {
      var n = d3_time_periodLookup.get(string.slice(i, i += 2).toLowerCase());
      return n == null ? -1 : (date.p = n, i);
    }
    return d3_time_format;
  }
  var d3_time_formatPads = {
    "-": "",
    _: " ",
    "0": "0"
  }, d3_time_numberRe = /^\s*\d+/, d3_time_percentRe = /^%/;
  function d3_time_formatPad(value, fill, width) {
    var sign = value < 0 ? "-" : "", string = (sign ? -value : value) + "", length = string.length;
    return sign + (length < width ? new Array(width - length + 1).join(fill) + string : string);
  }
  function d3_time_formatRe(names) {
    return new RegExp("^(?:" + names.map(d3.requote).join("|") + ")", "i");
  }
  function d3_time_formatLookup(names) {
    var map = new d3_Map(), i = -1, n = names.length;
    while (++i < n) map.set(names[i].toLowerCase(), i);
    return map;
  }
  function d3_time_parseWeekdayNumber(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.slice(i, i + 1));
    return n ? (date.w = +n[0], i + n[0].length) : -1;
  }
  function d3_time_parseWeekNumberSunday(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.slice(i));
    return n ? (date.U = +n[0], i + n[0].length) : -1;
  }
  function d3_time_parseWeekNumberMonday(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.slice(i));
    return n ? (date.W = +n[0], i + n[0].length) : -1;
  }
  function d3_time_parseFullYear(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.slice(i, i + 4));
    return n ? (date.y = +n[0], i + n[0].length) : -1;
  }
  function d3_time_parseYear(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.slice(i, i + 2));
    return n ? (date.y = d3_time_expandYear(+n[0]), i + n[0].length) : -1;
  }
  function d3_time_parseZone(date, string, i) {
    return /^[+-]\d{4}$/.test(string = string.slice(i, i + 5)) ? (date.Z = -string, 
    i + 5) : -1;
  }
  function d3_time_expandYear(d) {
    return d + (d > 68 ? 1900 : 2e3);
  }
  function d3_time_parseMonthNumber(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.slice(i, i + 2));
    return n ? (date.m = n[0] - 1, i + n[0].length) : -1;
  }
  function d3_time_parseDay(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.slice(i, i + 2));
    return n ? (date.d = +n[0], i + n[0].length) : -1;
  }
  function d3_time_parseDayOfYear(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.slice(i, i + 3));
    return n ? (date.j = +n[0], i + n[0].length) : -1;
  }
  function d3_time_parseHour24(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.slice(i, i + 2));
    return n ? (date.H = +n[0], i + n[0].length) : -1;
  }
  function d3_time_parseMinutes(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.slice(i, i + 2));
    return n ? (date.M = +n[0], i + n[0].length) : -1;
  }
  function d3_time_parseSeconds(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.slice(i, i + 2));
    return n ? (date.S = +n[0], i + n[0].length) : -1;
  }
  function d3_time_parseMilliseconds(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.slice(i, i + 3));
    return n ? (date.L = +n[0], i + n[0].length) : -1;
  }
  function d3_time_zone(d) {
    var z = d.getTimezoneOffset(), zs = z > 0 ? "-" : "+", zh = abs(z) / 60 | 0, zm = abs(z) % 60;
    return zs + d3_time_formatPad(zh, "0", 2) + d3_time_formatPad(zm, "0", 2);
  }
  function d3_time_parseLiteralPercent(date, string, i) {
    d3_time_percentRe.lastIndex = 0;
    var n = d3_time_percentRe.exec(string.slice(i, i + 1));
    return n ? i + n[0].length : -1;
  }
  function d3_time_formatMulti(formats) {
    var n = formats.length, i = -1;
    while (++i < n) formats[i][0] = this(formats[i][0]);
    return function(date) {
      var i = 0, f = formats[i];
      while (!f[1](date)) f = formats[++i];
      return f[0](date);
    };
  }
  d3.locale = function(locale) {
    return {
      numberFormat: d3_locale_numberFormat(locale),
      timeFormat: d3_locale_timeFormat(locale)
    };
  };
  var d3_locale_enUS = d3.locale({
    decimal: ".",
    thousands: ",",
    grouping: [ 3 ],
    currency: [ "$", "" ],
    dateTime: "%a %b %e %X %Y",
    date: "%m/%d/%Y",
    time: "%H:%M:%S",
    periods: [ "AM", "PM" ],
    days: [ "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" ],
    shortDays: [ "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" ],
    months: [ "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" ],
    shortMonths: [ "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" ]
  });
  d3.format = d3_locale_enUS.numberFormat;
  d3.geo = {};
  function d3_adder() {}
  d3_adder.prototype = {
    s: 0,
    t: 0,
    add: function(y) {
      d3_adderSum(y, this.t, d3_adderTemp);
      d3_adderSum(d3_adderTemp.s, this.s, this);
      if (this.s) this.t += d3_adderTemp.t; else this.s = d3_adderTemp.t;
    },
    reset: function() {
      this.s = this.t = 0;
    },
    valueOf: function() {
      return this.s;
    }
  };
  var d3_adderTemp = new d3_adder();
  function d3_adderSum(a, b, o) {
    var x = o.s = a + b, bv = x - a, av = x - bv;
    o.t = a - av + (b - bv);
  }
  d3.geo.stream = function(object, listener) {
    if (object && d3_geo_streamObjectType.hasOwnProperty(object.type)) {
      d3_geo_streamObjectType[object.type](object, listener);
    } else {
      d3_geo_streamGeometry(object, listener);
    }
  };
  function d3_geo_streamGeometry(geometry, listener) {
    if (geometry && d3_geo_streamGeometryType.hasOwnProperty(geometry.type)) {
      d3_geo_streamGeometryType[geometry.type](geometry, listener);
    }
  }
  var d3_geo_streamObjectType = {
    Feature: function(feature, listener) {
      d3_geo_streamGeometry(feature.geometry, listener);
    },
    FeatureCollection: function(object, listener) {
      var features = object.features, i = -1, n = features.length;
      while (++i < n) d3_geo_streamGeometry(features[i].geometry, listener);
    }
  };
  var d3_geo_streamGeometryType = {
    Sphere: function(object, listener) {
      listener.sphere();
    },
    Point: function(object, listener) {
      object = object.coordinates;
      listener.point(object[0], object[1], object[2]);
    },
    MultiPoint: function(object, listener) {
      var coordinates = object.coordinates, i = -1, n = coordinates.length;
      while (++i < n) object = coordinates[i], listener.point(object[0], object[1], object[2]);
    },
    LineString: function(object, listener) {
      d3_geo_streamLine(object.coordinates, listener, 0);
    },
    MultiLineString: function(object, listener) {
      var coordinates = object.coordinates, i = -1, n = coordinates.length;
      while (++i < n) d3_geo_streamLine(coordinates[i], listener, 0);
    },
    Polygon: function(object, listener) {
      d3_geo_streamPolygon(object.coordinates, listener);
    },
    MultiPolygon: function(object, listener) {
      var coordinates = object.coordinates, i = -1, n = coordinates.length;
      while (++i < n) d3_geo_streamPolygon(coordinates[i], listener);
    },
    GeometryCollection: function(object, listener) {
      var geometries = object.geometries, i = -1, n = geometries.length;
      while (++i < n) d3_geo_streamGeometry(geometries[i], listener);
    }
  };
  function d3_geo_streamLine(coordinates, listener, closed) {
    var i = -1, n = coordinates.length - closed, coordinate;
    listener.lineStart();
    while (++i < n) coordinate = coordinates[i], listener.point(coordinate[0], coordinate[1], coordinate[2]);
    listener.lineEnd();
  }
  function d3_geo_streamPolygon(coordinates, listener) {
    var i = -1, n = coordinates.length;
    listener.polygonStart();
    while (++i < n) d3_geo_streamLine(coordinates[i], listener, 1);
    listener.polygonEnd();
  }
  d3.geo.area = function(object) {
    d3_geo_areaSum = 0;
    d3.geo.stream(object, d3_geo_area);
    return d3_geo_areaSum;
  };
  var d3_geo_areaSum, d3_geo_areaRingSum = new d3_adder();
  var d3_geo_area = {
    sphere: function() {
      d3_geo_areaSum += 4 * π;
    },
    point: d3_noop,
    lineStart: d3_noop,
    lineEnd: d3_noop,
    polygonStart: function() {
      d3_geo_areaRingSum.reset();
      d3_geo_area.lineStart = d3_geo_areaRingStart;
    },
    polygonEnd: function() {
      var area = 2 * d3_geo_areaRingSum;
      d3_geo_areaSum += area < 0 ? 4 * π + area : area;
      d3_geo_area.lineStart = d3_geo_area.lineEnd = d3_geo_area.point = d3_noop;
    }
  };
  function d3_geo_areaRingStart() {
    var λ00, φ00, λ0, cosφ0, sinφ0;
    d3_geo_area.point = function(λ, φ) {
      d3_geo_area.point = nextPoint;
      λ0 = (λ00 = λ) * d3_radians, cosφ0 = Math.cos(φ = (φ00 = φ) * d3_radians / 2 + π / 4), 
      sinφ0 = Math.sin(φ);
    };
    function nextPoint(λ, φ) {
      λ *= d3_radians;
      φ = φ * d3_radians / 2 + π / 4;
      var dλ = λ - λ0, sdλ = dλ >= 0 ? 1 : -1, adλ = sdλ * dλ, cosφ = Math.cos(φ), sinφ = Math.sin(φ), k = sinφ0 * sinφ, u = cosφ0 * cosφ + k * Math.cos(adλ), v = k * sdλ * Math.sin(adλ);
      d3_geo_areaRingSum.add(Math.atan2(v, u));
      λ0 = λ, cosφ0 = cosφ, sinφ0 = sinφ;
    }
    d3_geo_area.lineEnd = function() {
      nextPoint(λ00, φ00);
    };
  }
  function d3_geo_cartesian(spherical) {
    var λ = spherical[0], φ = spherical[1], cosφ = Math.cos(φ);
    return [ cosφ * Math.cos(λ), cosφ * Math.sin(λ), Math.sin(φ) ];
  }
  function d3_geo_cartesianDot(a, b) {
    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
  }
  function d3_geo_cartesianCross(a, b) {
    return [ a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0] ];
  }
  function d3_geo_cartesianAdd(a, b) {
    a[0] += b[0];
    a[1] += b[1];
    a[2] += b[2];
  }
  function d3_geo_cartesianScale(vector, k) {
    return [ vector[0] * k, vector[1] * k, vector[2] * k ];
  }
  function d3_geo_cartesianNormalize(d) {
    var l = Math.sqrt(d[0] * d[0] + d[1] * d[1] + d[2] * d[2]);
    d[0] /= l;
    d[1] /= l;
    d[2] /= l;
  }
  function d3_geo_spherical(cartesian) {
    return [ Math.atan2(cartesian[1], cartesian[0]), d3_asin(cartesian[2]) ];
  }
  function d3_geo_sphericalEqual(a, b) {
    return abs(a[0] - b[0]) < ε && abs(a[1] - b[1]) < ε;
  }
  d3.geo.bounds = function() {
    var λ0, φ0, λ1, φ1, λ_, λ__, φ__, p0, dλSum, ranges, range;
    var bound = {
      point: point,
      lineStart: lineStart,
      lineEnd: lineEnd,
      polygonStart: function() {
        bound.point = ringPoint;
        bound.lineStart = ringStart;
        bound.lineEnd = ringEnd;
        dλSum = 0;
        d3_geo_area.polygonStart();
      },
      polygonEnd: function() {
        d3_geo_area.polygonEnd();
        bound.point = point;
        bound.lineStart = lineStart;
        bound.lineEnd = lineEnd;
        if (d3_geo_areaRingSum < 0) λ0 = -(λ1 = 180), φ0 = -(φ1 = 90); else if (dλSum > ε) φ1 = 90; else if (dλSum < -ε) φ0 = -90;
        range[0] = λ0, range[1] = λ1;
      }
    };
    function point(λ, φ) {
      ranges.push(range = [ λ0 = λ, λ1 = λ ]);
      if (φ < φ0) φ0 = φ;
      if (φ > φ1) φ1 = φ;
    }
    function linePoint(λ, φ) {
      var p = d3_geo_cartesian([ λ * d3_radians, φ * d3_radians ]);
      if (p0) {
        var normal = d3_geo_cartesianCross(p0, p), equatorial = [ normal[1], -normal[0], 0 ], inflection = d3_geo_cartesianCross(equatorial, normal);
        d3_geo_cartesianNormalize(inflection);
        inflection = d3_geo_spherical(inflection);
        var dλ = λ - λ_, s = dλ > 0 ? 1 : -1, λi = inflection[0] * d3_degrees * s, antimeridian = abs(dλ) > 180;
        if (antimeridian ^ (s * λ_ < λi && λi < s * λ)) {
          var φi = inflection[1] * d3_degrees;
          if (φi > φ1) φ1 = φi;
        } else if (λi = (λi + 360) % 360 - 180, antimeridian ^ (s * λ_ < λi && λi < s * λ)) {
          var φi = -inflection[1] * d3_degrees;
          if (φi < φ0) φ0 = φi;
        } else {
          if (φ < φ0) φ0 = φ;
          if (φ > φ1) φ1 = φ;
        }
        if (antimeridian) {
          if (λ < λ_) {
            if (angle(λ0, λ) > angle(λ0, λ1)) λ1 = λ;
          } else {
            if (angle(λ, λ1) > angle(λ0, λ1)) λ0 = λ;
          }
        } else {
          if (λ1 >= λ0) {
            if (λ < λ0) λ0 = λ;
            if (λ > λ1) λ1 = λ;
          } else {
            if (λ > λ_) {
              if (angle(λ0, λ) > angle(λ0, λ1)) λ1 = λ;
            } else {
              if (angle(λ, λ1) > angle(λ0, λ1)) λ0 = λ;
            }
          }
        }
      } else {
        point(λ, φ);
      }
      p0 = p, λ_ = λ;
    }
    function lineStart() {
      bound.point = linePoint;
    }
    function lineEnd() {
      range[0] = λ0, range[1] = λ1;
      bound.point = point;
      p0 = null;
    }
    function ringPoint(λ, φ) {
      if (p0) {
        var dλ = λ - λ_;
        dλSum += abs(dλ) > 180 ? dλ + (dλ > 0 ? 360 : -360) : dλ;
      } else λ__ = λ, φ__ = φ;
      d3_geo_area.point(λ, φ);
      linePoint(λ, φ);
    }
    function ringStart() {
      d3_geo_area.lineStart();
    }
    function ringEnd() {
      ringPoint(λ__, φ__);
      d3_geo_area.lineEnd();
      if (abs(dλSum) > ε) λ0 = -(λ1 = 180);
      range[0] = λ0, range[1] = λ1;
      p0 = null;
    }
    function angle(λ0, λ1) {
      return (λ1 -= λ0) < 0 ? λ1 + 360 : λ1;
    }
    function compareRanges(a, b) {
      return a[0] - b[0];
    }
    function withinRange(x, range) {
      return range[0] <= range[1] ? range[0] <= x && x <= range[1] : x < range[0] || range[1] < x;
    }
    return function(feature) {
      φ1 = λ1 = -(λ0 = φ0 = Infinity);
      ranges = [];
      d3.geo.stream(feature, bound);
      var n = ranges.length;
      if (n) {
        ranges.sort(compareRanges);
        for (var i = 1, a = ranges[0], b, merged = [ a ]; i < n; ++i) {
          b = ranges[i];
          if (withinRange(b[0], a) || withinRange(b[1], a)) {
            if (angle(a[0], b[1]) > angle(a[0], a[1])) a[1] = b[1];
            if (angle(b[0], a[1]) > angle(a[0], a[1])) a[0] = b[0];
          } else {
            merged.push(a = b);
          }
        }
        var best = -Infinity, dλ;
        for (var n = merged.length - 1, i = 0, a = merged[n], b; i <= n; a = b, ++i) {
          b = merged[i];
          if ((dλ = angle(a[1], b[0])) > best) best = dλ, λ0 = b[0], λ1 = a[1];
        }
      }
      ranges = range = null;
      return λ0 === Infinity || φ0 === Infinity ? [ [ NaN, NaN ], [ NaN, NaN ] ] : [ [ λ0, φ0 ], [ λ1, φ1 ] ];
    };
  }();
  d3.geo.centroid = function(object) {
    d3_geo_centroidW0 = d3_geo_centroidW1 = d3_geo_centroidX0 = d3_geo_centroidY0 = d3_geo_centroidZ0 = d3_geo_centroidX1 = d3_geo_centroidY1 = d3_geo_centroidZ1 = d3_geo_centroidX2 = d3_geo_centroidY2 = d3_geo_centroidZ2 = 0;
    d3.geo.stream(object, d3_geo_centroid);
    var x = d3_geo_centroidX2, y = d3_geo_centroidY2, z = d3_geo_centroidZ2, m = x * x + y * y + z * z;
    if (m < ε2) {
      x = d3_geo_centroidX1, y = d3_geo_centroidY1, z = d3_geo_centroidZ1;
      if (d3_geo_centroidW1 < ε) x = d3_geo_centroidX0, y = d3_geo_centroidY0, z = d3_geo_centroidZ0;
      m = x * x + y * y + z * z;
      if (m < ε2) return [ NaN, NaN ];
    }
    return [ Math.atan2(y, x) * d3_degrees, d3_asin(z / Math.sqrt(m)) * d3_degrees ];
  };
  var d3_geo_centroidW0, d3_geo_centroidW1, d3_geo_centroidX0, d3_geo_centroidY0, d3_geo_centroidZ0, d3_geo_centroidX1, d3_geo_centroidY1, d3_geo_centroidZ1, d3_geo_centroidX2, d3_geo_centroidY2, d3_geo_centroidZ2;
  var d3_geo_centroid = {
    sphere: d3_noop,
    point: d3_geo_centroidPoint,
    lineStart: d3_geo_centroidLineStart,
    lineEnd: d3_geo_centroidLineEnd,
    polygonStart: function() {
      d3_geo_centroid.lineStart = d3_geo_centroidRingStart;
    },
    polygonEnd: function() {
      d3_geo_centroid.lineStart = d3_geo_centroidLineStart;
    }
  };
  function d3_geo_centroidPoint(λ, φ) {
    λ *= d3_radians;
    var cosφ = Math.cos(φ *= d3_radians);
    d3_geo_centroidPointXYZ(cosφ * Math.cos(λ), cosφ * Math.sin(λ), Math.sin(φ));
  }
  function d3_geo_centroidPointXYZ(x, y, z) {
    ++d3_geo_centroidW0;
    d3_geo_centroidX0 += (x - d3_geo_centroidX0) / d3_geo_centroidW0;
    d3_geo_centroidY0 += (y - d3_geo_centroidY0) / d3_geo_centroidW0;
    d3_geo_centroidZ0 += (z - d3_geo_centroidZ0) / d3_geo_centroidW0;
  }
  function d3_geo_centroidLineStart() {
    var x0, y0, z0;
    d3_geo_centroid.point = function(λ, φ) {
      λ *= d3_radians;
      var cosφ = Math.cos(φ *= d3_radians);
      x0 = cosφ * Math.cos(λ);
      y0 = cosφ * Math.sin(λ);
      z0 = Math.sin(φ);
      d3_geo_centroid.point = nextPoint;
      d3_geo_centroidPointXYZ(x0, y0, z0);
    };
    function nextPoint(λ, φ) {
      λ *= d3_radians;
      var cosφ = Math.cos(φ *= d3_radians), x = cosφ * Math.cos(λ), y = cosφ * Math.sin(λ), z = Math.sin(φ), w = Math.atan2(Math.sqrt((w = y0 * z - z0 * y) * w + (w = z0 * x - x0 * z) * w + (w = x0 * y - y0 * x) * w), x0 * x + y0 * y + z0 * z);
      d3_geo_centroidW1 += w;
      d3_geo_centroidX1 += w * (x0 + (x0 = x));
      d3_geo_centroidY1 += w * (y0 + (y0 = y));
      d3_geo_centroidZ1 += w * (z0 + (z0 = z));
      d3_geo_centroidPointXYZ(x0, y0, z0);
    }
  }
  function d3_geo_centroidLineEnd() {
    d3_geo_centroid.point = d3_geo_centroidPoint;
  }
  function d3_geo_centroidRingStart() {
    var λ00, φ00, x0, y0, z0;
    d3_geo_centroid.point = function(λ, φ) {
      λ00 = λ, φ00 = φ;
      d3_geo_centroid.point = nextPoint;
      λ *= d3_radians;
      var cosφ = Math.cos(φ *= d3_radians);
      x0 = cosφ * Math.cos(λ);
      y0 = cosφ * Math.sin(λ);
      z0 = Math.sin(φ);
      d3_geo_centroidPointXYZ(x0, y0, z0);
    };
    d3_geo_centroid.lineEnd = function() {
      nextPoint(λ00, φ00);
      d3_geo_centroid.lineEnd = d3_geo_centroidLineEnd;
      d3_geo_centroid.point = d3_geo_centroidPoint;
    };
    function nextPoint(λ, φ) {
      λ *= d3_radians;
      var cosφ = Math.cos(φ *= d3_radians), x = cosφ * Math.cos(λ), y = cosφ * Math.sin(λ), z = Math.sin(φ), cx = y0 * z - z0 * y, cy = z0 * x - x0 * z, cz = x0 * y - y0 * x, m = Math.sqrt(cx * cx + cy * cy + cz * cz), u = x0 * x + y0 * y + z0 * z, v = m && -d3_acos(u) / m, w = Math.atan2(m, u);
      d3_geo_centroidX2 += v * cx;
      d3_geo_centroidY2 += v * cy;
      d3_geo_centroidZ2 += v * cz;
      d3_geo_centroidW1 += w;
      d3_geo_centroidX1 += w * (x0 + (x0 = x));
      d3_geo_centroidY1 += w * (y0 + (y0 = y));
      d3_geo_centroidZ1 += w * (z0 + (z0 = z));
      d3_geo_centroidPointXYZ(x0, y0, z0);
    }
  }
  function d3_geo_compose(a, b) {
    function compose(x, y) {
      return x = a(x, y), b(x[0], x[1]);
    }
    if (a.invert && b.invert) compose.invert = function(x, y) {
      return x = b.invert(x, y), x && a.invert(x[0], x[1]);
    };
    return compose;
  }
  function d3_true() {
    return true;
  }
  function d3_geo_clipPolygon(segments, compare, clipStartInside, interpolate, listener) {
    var subject = [], clip = [];
    segments.forEach(function(segment) {
      if ((n = segment.length - 1) <= 0) return;
      var n, p0 = segment[0], p1 = segment[n];
      if (d3_geo_sphericalEqual(p0, p1)) {
        listener.lineStart();
        for (var i = 0; i < n; ++i) listener.point((p0 = segment[i])[0], p0[1]);
        listener.lineEnd();
        return;
      }
      var a = new d3_geo_clipPolygonIntersection(p0, segment, null, true), b = new d3_geo_clipPolygonIntersection(p0, null, a, false);
      a.o = b;
      subject.push(a);
      clip.push(b);
      a = new d3_geo_clipPolygonIntersection(p1, segment, null, false);
      b = new d3_geo_clipPolygonIntersection(p1, null, a, true);
      a.o = b;
      subject.push(a);
      clip.push(b);
    });
    clip.sort(compare);
    d3_geo_clipPolygonLinkCircular(subject);
    d3_geo_clipPolygonLinkCircular(clip);
    if (!subject.length) return;
    for (var i = 0, entry = clipStartInside, n = clip.length; i < n; ++i) {
      clip[i].e = entry = !entry;
    }
    var start = subject[0], points, point;
    while (1) {
      var current = start, isSubject = true;
      while (current.v) if ((current = current.n) === start) return;
      points = current.z;
      listener.lineStart();
      do {
        current.v = current.o.v = true;
        if (current.e) {
          if (isSubject) {
            for (var i = 0, n = points.length; i < n; ++i) listener.point((point = points[i])[0], point[1]);
          } else {
            interpolate(current.x, current.n.x, 1, listener);
          }
          current = current.n;
        } else {
          if (isSubject) {
            points = current.p.z;
            for (var i = points.length - 1; i >= 0; --i) listener.point((point = points[i])[0], point[1]);
          } else {
            interpolate(current.x, current.p.x, -1, listener);
          }
          current = current.p;
        }
        current = current.o;
        points = current.z;
        isSubject = !isSubject;
      } while (!current.v);
      listener.lineEnd();
    }
  }
  function d3_geo_clipPolygonLinkCircular(array) {
    if (!(n = array.length)) return;
    var n, i = 0, a = array[0], b;
    while (++i < n) {
      a.n = b = array[i];
      b.p = a;
      a = b;
    }
    a.n = b = array[0];
    b.p = a;
  }
  function d3_geo_clipPolygonIntersection(point, points, other, entry) {
    this.x = point;
    this.z = points;
    this.o = other;
    this.e = entry;
    this.v = false;
    this.n = this.p = null;
  }
  function d3_geo_clip(pointVisible, clipLine, interpolate, clipStart) {
    return function(rotate, listener) {
      var line = clipLine(listener), rotatedClipStart = rotate.invert(clipStart[0], clipStart[1]);
      var clip = {
        point: point,
        lineStart: lineStart,
        lineEnd: lineEnd,
        polygonStart: function() {
          clip.point = pointRing;
          clip.lineStart = ringStart;
          clip.lineEnd = ringEnd;
          segments = [];
          polygon = [];
        },
        polygonEnd: function() {
          clip.point = point;
          clip.lineStart = lineStart;
          clip.lineEnd = lineEnd;
          segments = d3.merge(segments);
          var clipStartInside = d3_geo_pointInPolygon(rotatedClipStart, polygon);
          if (segments.length) {
            if (!polygonStarted) listener.polygonStart(), polygonStarted = true;
            d3_geo_clipPolygon(segments, d3_geo_clipSort, clipStartInside, interpolate, listener);
          } else if (clipStartInside) {
            if (!polygonStarted) listener.polygonStart(), polygonStarted = true;
            listener.lineStart();
            interpolate(null, null, 1, listener);
            listener.lineEnd();
          }
          if (polygonStarted) listener.polygonEnd(), polygonStarted = false;
          segments = polygon = null;
        },
        sphere: function() {
          listener.polygonStart();
          listener.lineStart();
          interpolate(null, null, 1, listener);
          listener.lineEnd();
          listener.polygonEnd();
        }
      };
      function point(λ, φ) {
        var point = rotate(λ, φ);
        if (pointVisible(λ = point[0], φ = point[1])) listener.point(λ, φ);
      }
      function pointLine(λ, φ) {
        var point = rotate(λ, φ);
        line.point(point[0], point[1]);
      }
      function lineStart() {
        clip.point = pointLine;
        line.lineStart();
      }
      function lineEnd() {
        clip.point = point;
        line.lineEnd();
      }
      var segments;
      var buffer = d3_geo_clipBufferListener(), ringListener = clipLine(buffer), polygonStarted = false, polygon, ring;
      function pointRing(λ, φ) {
        ring.push([ λ, φ ]);
        var point = rotate(λ, φ);
        ringListener.point(point[0], point[1]);
      }
      function ringStart() {
        ringListener.lineStart();
        ring = [];
      }
      function ringEnd() {
        pointRing(ring[0][0], ring[0][1]);
        ringListener.lineEnd();
        var clean = ringListener.clean(), ringSegments = buffer.buffer(), segment, n = ringSegments.length;
        ring.pop();
        polygon.push(ring);
        ring = null;
        if (!n) return;
        if (clean & 1) {
          segment = ringSegments[0];
          var n = segment.length - 1, i = -1, point;
          if (n > 0) {
            if (!polygonStarted) listener.polygonStart(), polygonStarted = true;
            listener.lineStart();
            while (++i < n) listener.point((point = segment[i])[0], point[1]);
            listener.lineEnd();
          }
          return;
        }
        if (n > 1 && clean & 2) ringSegments.push(ringSegments.pop().concat(ringSegments.shift()));
        segments.push(ringSegments.filter(d3_geo_clipSegmentLength1));
      }
      return clip;
    };
  }
  function d3_geo_clipSegmentLength1(segment) {
    return segment.length > 1;
  }
  function d3_geo_clipBufferListener() {
    var lines = [], line;
    return {
      lineStart: function() {
        lines.push(line = []);
      },
      point: function(λ, φ) {
        line.push([ λ, φ ]);
      },
      lineEnd: d3_noop,
      buffer: function() {
        var buffer = lines;
        lines = [];
        line = null;
        return buffer;
      },
      rejoin: function() {
        if (lines.length > 1) lines.push(lines.pop().concat(lines.shift()));
      }
    };
  }
  function d3_geo_clipSort(a, b) {
    return ((a = a.x)[0] < 0 ? a[1] - halfπ - ε : halfπ - a[1]) - ((b = b.x)[0] < 0 ? b[1] - halfπ - ε : halfπ - b[1]);
  }
  var d3_geo_clipAntimeridian = d3_geo_clip(d3_true, d3_geo_clipAntimeridianLine, d3_geo_clipAntimeridianInterpolate, [ -π, -π / 2 ]);
  function d3_geo_clipAntimeridianLine(listener) {
    var λ0 = NaN, φ0 = NaN, sλ0 = NaN, clean;
    return {
      lineStart: function() {
        listener.lineStart();
        clean = 1;
      },
      point: function(λ1, φ1) {
        var sλ1 = λ1 > 0 ? π : -π, dλ = abs(λ1 - λ0);
        if (abs(dλ - π) < ε) {
          listener.point(λ0, φ0 = (φ0 + φ1) / 2 > 0 ? halfπ : -halfπ);
          listener.point(sλ0, φ0);
          listener.lineEnd();
          listener.lineStart();
          listener.point(sλ1, φ0);
          listener.point(λ1, φ0);
          clean = 0;
        } else if (sλ0 !== sλ1 && dλ >= π) {
          if (abs(λ0 - sλ0) < ε) λ0 -= sλ0 * ε;
          if (abs(λ1 - sλ1) < ε) λ1 -= sλ1 * ε;
          φ0 = d3_geo_clipAntimeridianIntersect(λ0, φ0, λ1, φ1);
          listener.point(sλ0, φ0);
          listener.lineEnd();
          listener.lineStart();
          listener.point(sλ1, φ0);
          clean = 0;
        }
        listener.point(λ0 = λ1, φ0 = φ1);
        sλ0 = sλ1;
      },
      lineEnd: function() {
        listener.lineEnd();
        λ0 = φ0 = NaN;
      },
      clean: function() {
        return 2 - clean;
      }
    };
  }
  function d3_geo_clipAntimeridianIntersect(λ0, φ0, λ1, φ1) {
    var cosφ0, cosφ1, sinλ0_λ1 = Math.sin(λ0 - λ1);
    return abs(sinλ0_λ1) > ε ? Math.atan((Math.sin(φ0) * (cosφ1 = Math.cos(φ1)) * Math.sin(λ1) - Math.sin(φ1) * (cosφ0 = Math.cos(φ0)) * Math.sin(λ0)) / (cosφ0 * cosφ1 * sinλ0_λ1)) : (φ0 + φ1) / 2;
  }
  function d3_geo_clipAntimeridianInterpolate(from, to, direction, listener) {
    var φ;
    if (from == null) {
      φ = direction * halfπ;
      listener.point(-π, φ);
      listener.point(0, φ);
      listener.point(π, φ);
      listener.point(π, 0);
      listener.point(π, -φ);
      listener.point(0, -φ);
      listener.point(-π, -φ);
      listener.point(-π, 0);
      listener.point(-π, φ);
    } else if (abs(from[0] - to[0]) > ε) {
      var s = from[0] < to[0] ? π : -π;
      φ = direction * s / 2;
      listener.point(-s, φ);
      listener.point(0, φ);
      listener.point(s, φ);
    } else {
      listener.point(to[0], to[1]);
    }
  }
  function d3_geo_pointInPolygon(point, polygon) {
    var meridian = point[0], parallel = point[1], meridianNormal = [ Math.sin(meridian), -Math.cos(meridian), 0 ], polarAngle = 0, winding = 0;
    d3_geo_areaRingSum.reset();
    for (var i = 0, n = polygon.length; i < n; ++i) {
      var ring = polygon[i], m = ring.length;
      if (!m) continue;
      var point0 = ring[0], λ0 = point0[0], φ0 = point0[1] / 2 + π / 4, sinφ0 = Math.sin(φ0), cosφ0 = Math.cos(φ0), j = 1;
      while (true) {
        if (j === m) j = 0;
        point = ring[j];
        var λ = point[0], φ = point[1] / 2 + π / 4, sinφ = Math.sin(φ), cosφ = Math.cos(φ), dλ = λ - λ0, sdλ = dλ >= 0 ? 1 : -1, adλ = sdλ * dλ, antimeridian = adλ > π, k = sinφ0 * sinφ;
        d3_geo_areaRingSum.add(Math.atan2(k * sdλ * Math.sin(adλ), cosφ0 * cosφ + k * Math.cos(adλ)));
        polarAngle += antimeridian ? dλ + sdλ * τ : dλ;
        if (antimeridian ^ λ0 >= meridian ^ λ >= meridian) {
          var arc = d3_geo_cartesianCross(d3_geo_cartesian(point0), d3_geo_cartesian(point));
          d3_geo_cartesianNormalize(arc);
          var intersection = d3_geo_cartesianCross(meridianNormal, arc);
          d3_geo_cartesianNormalize(intersection);
          var φarc = (antimeridian ^ dλ >= 0 ? -1 : 1) * d3_asin(intersection[2]);
          if (parallel > φarc || parallel === φarc && (arc[0] || arc[1])) {
            winding += antimeridian ^ dλ >= 0 ? 1 : -1;
          }
        }
        if (!j++) break;
        λ0 = λ, sinφ0 = sinφ, cosφ0 = cosφ, point0 = point;
      }
    }
    return (polarAngle < -ε || polarAngle < ε && d3_geo_areaRingSum < -ε) ^ winding & 1;
  }
  function d3_geo_clipCircle(radius) {
    var cr = Math.cos(radius), smallRadius = cr > 0, notHemisphere = abs(cr) > ε, interpolate = d3_geo_circleInterpolate(radius, 6 * d3_radians);
    return d3_geo_clip(visible, clipLine, interpolate, smallRadius ? [ 0, -radius ] : [ -π, radius - π ]);
    function visible(λ, φ) {
      return Math.cos(λ) * Math.cos(φ) > cr;
    }
    function clipLine(listener) {
      var point0, c0, v0, v00, clean;
      return {
        lineStart: function() {
          v00 = v0 = false;
          clean = 1;
        },
        point: function(λ, φ) {
          var point1 = [ λ, φ ], point2, v = visible(λ, φ), c = smallRadius ? v ? 0 : code(λ, φ) : v ? code(λ + (λ < 0 ? π : -π), φ) : 0;
          if (!point0 && (v00 = v0 = v)) listener.lineStart();
          if (v !== v0) {
            point2 = intersect(point0, point1);
            if (d3_geo_sphericalEqual(point0, point2) || d3_geo_sphericalEqual(point1, point2)) {
              point1[0] += ε;
              point1[1] += ε;
              v = visible(point1[0], point1[1]);
            }
          }
          if (v !== v0) {
            clean = 0;
            if (v) {
              listener.lineStart();
              point2 = intersect(point1, point0);
              listener.point(point2[0], point2[1]);
            } else {
              point2 = intersect(point0, point1);
              listener.point(point2[0], point2[1]);
              listener.lineEnd();
            }
            point0 = point2;
          } else if (notHemisphere && point0 && smallRadius ^ v) {
            var t;
            if (!(c & c0) && (t = intersect(point1, point0, true))) {
              clean = 0;
              if (smallRadius) {
                listener.lineStart();
                listener.point(t[0][0], t[0][1]);
                listener.point(t[1][0], t[1][1]);
                listener.lineEnd();
              } else {
                listener.point(t[1][0], t[1][1]);
                listener.lineEnd();
                listener.lineStart();
                listener.point(t[0][0], t[0][1]);
              }
            }
          }
          if (v && (!point0 || !d3_geo_sphericalEqual(point0, point1))) {
            listener.point(point1[0], point1[1]);
          }
          point0 = point1, v0 = v, c0 = c;
        },
        lineEnd: function() {
          if (v0) listener.lineEnd();
          point0 = null;
        },
        clean: function() {
          return clean | (v00 && v0) << 1;
        }
      };
    }
    function intersect(a, b, two) {
      var pa = d3_geo_cartesian(a), pb = d3_geo_cartesian(b);
      var n1 = [ 1, 0, 0 ], n2 = d3_geo_cartesianCross(pa, pb), n2n2 = d3_geo_cartesianDot(n2, n2), n1n2 = n2[0], determinant = n2n2 - n1n2 * n1n2;
      if (!determinant) return !two && a;
      var c1 = cr * n2n2 / determinant, c2 = -cr * n1n2 / determinant, n1xn2 = d3_geo_cartesianCross(n1, n2), A = d3_geo_cartesianScale(n1, c1), B = d3_geo_cartesianScale(n2, c2);
      d3_geo_cartesianAdd(A, B);
      var u = n1xn2, w = d3_geo_cartesianDot(A, u), uu = d3_geo_cartesianDot(u, u), t2 = w * w - uu * (d3_geo_cartesianDot(A, A) - 1);
      if (t2 < 0) return;
      var t = Math.sqrt(t2), q = d3_geo_cartesianScale(u, (-w - t) / uu);
      d3_geo_cartesianAdd(q, A);
      q = d3_geo_spherical(q);
      if (!two) return q;
      var λ0 = a[0], λ1 = b[0], φ0 = a[1], φ1 = b[1], z;
      if (λ1 < λ0) z = λ0, λ0 = λ1, λ1 = z;
      var δλ = λ1 - λ0, polar = abs(δλ - π) < ε, meridian = polar || δλ < ε;
      if (!polar && φ1 < φ0) z = φ0, φ0 = φ1, φ1 = z;
      if (meridian ? polar ? φ0 + φ1 > 0 ^ q[1] < (abs(q[0] - λ0) < ε ? φ0 : φ1) : φ0 <= q[1] && q[1] <= φ1 : δλ > π ^ (λ0 <= q[0] && q[0] <= λ1)) {
        var q1 = d3_geo_cartesianScale(u, (-w + t) / uu);
        d3_geo_cartesianAdd(q1, A);
        return [ q, d3_geo_spherical(q1) ];
      }
    }
    function code(λ, φ) {
      var r = smallRadius ? radius : π - radius, code = 0;
      if (λ < -r) code |= 1; else if (λ > r) code |= 2;
      if (φ < -r) code |= 4; else if (φ > r) code |= 8;
      return code;
    }
  }
  function d3_geom_clipLine(x0, y0, x1, y1) {
    return function(line) {
      var a = line.a, b = line.b, ax = a.x, ay = a.y, bx = b.x, by = b.y, t0 = 0, t1 = 1, dx = bx - ax, dy = by - ay, r;
      r = x0 - ax;
      if (!dx && r > 0) return;
      r /= dx;
      if (dx < 0) {
        if (r < t0) return;
        if (r < t1) t1 = r;
      } else if (dx > 0) {
        if (r > t1) return;
        if (r > t0) t0 = r;
      }
      r = x1 - ax;
      if (!dx && r < 0) return;
      r /= dx;
      if (dx < 0) {
        if (r > t1) return;
        if (r > t0) t0 = r;
      } else if (dx > 0) {
        if (r < t0) return;
        if (r < t1) t1 = r;
      }
      r = y0 - ay;
      if (!dy && r > 0) return;
      r /= dy;
      if (dy < 0) {
        if (r < t0) return;
        if (r < t1) t1 = r;
      } else if (dy > 0) {
        if (r > t1) return;
        if (r > t0) t0 = r;
      }
      r = y1 - ay;
      if (!dy && r < 0) return;
      r /= dy;
      if (dy < 0) {
        if (r > t1) return;
        if (r > t0) t0 = r;
      } else if (dy > 0) {
        if (r < t0) return;
        if (r < t1) t1 = r;
      }
      if (t0 > 0) line.a = {
        x: ax + t0 * dx,
        y: ay + t0 * dy
      };
      if (t1 < 1) line.b = {
        x: ax + t1 * dx,
        y: ay + t1 * dy
      };
      return line;
    };
  }
  var d3_geo_clipExtentMAX = 1e9;
  d3.geo.clipExtent = function() {
    var x0, y0, x1, y1, stream, clip, clipExtent = {
      stream: function(output) {
        if (stream) stream.valid = false;
        stream = clip(output);
        stream.valid = true;
        return stream;
      },
      extent: function(_) {
        if (!arguments.length) return [ [ x0, y0 ], [ x1, y1 ] ];
        clip = d3_geo_clipExtent(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]);
        if (stream) stream.valid = false, stream = null;
        return clipExtent;
      }
    };
    return clipExtent.extent([ [ 0, 0 ], [ 960, 500 ] ]);
  };
  function d3_geo_clipExtent(x0, y0, x1, y1) {
    return function(listener) {
      var listener_ = listener, bufferListener = d3_geo_clipBufferListener(), clipLine = d3_geom_clipLine(x0, y0, x1, y1), segments, polygon, ring;
      var clip = {
        point: point,
        lineStart: lineStart,
        lineEnd: lineEnd,
        polygonStart: function() {
          listener = bufferListener;
          segments = [];
          polygon = [];
          clean = true;
        },
        polygonEnd: function() {
          listener = listener_;
          segments = d3.merge(segments);
          var clipStartInside = insidePolygon([ x0, y1 ]), inside = clean && clipStartInside, visible = segments.length;
          if (inside || visible) {
            listener.polygonStart();
            if (inside) {
              listener.lineStart();
              interpolate(null, null, 1, listener);
              listener.lineEnd();
            }
            if (visible) {
              d3_geo_clipPolygon(segments, compare, clipStartInside, interpolate, listener);
            }
            listener.polygonEnd();
          }
          segments = polygon = ring = null;
        }
      };
      function insidePolygon(p) {
        var wn = 0, n = polygon.length, y = p[1];
        for (var i = 0; i < n; ++i) {
          for (var j = 1, v = polygon[i], m = v.length, a = v[0], b; j < m; ++j) {
            b = v[j];
            if (a[1] <= y) {
              if (b[1] > y && d3_cross2d(a, b, p) > 0) ++wn;
            } else {
              if (b[1] <= y && d3_cross2d(a, b, p) < 0) --wn;
            }
            a = b;
          }
        }
        return wn !== 0;
      }
      function interpolate(from, to, direction, listener) {
        var a = 0, a1 = 0;
        if (from == null || (a = corner(from, direction)) !== (a1 = corner(to, direction)) || comparePoints(from, to) < 0 ^ direction > 0) {
          do {
            listener.point(a === 0 || a === 3 ? x0 : x1, a > 1 ? y1 : y0);
          } while ((a = (a + direction + 4) % 4) !== a1);
        } else {
          listener.point(to[0], to[1]);
        }
      }
      function pointVisible(x, y) {
        return x0 <= x && x <= x1 && y0 <= y && y <= y1;
      }
      function point(x, y) {
        if (pointVisible(x, y)) listener.point(x, y);
      }
      var x__, y__, v__, x_, y_, v_, first, clean;
      function lineStart() {
        clip.point = linePoint;
        if (polygon) polygon.push(ring = []);
        first = true;
        v_ = false;
        x_ = y_ = NaN;
      }
      function lineEnd() {
        if (segments) {
          linePoint(x__, y__);
          if (v__ && v_) bufferListener.rejoin();
          segments.push(bufferListener.buffer());
        }
        clip.point = point;
        if (v_) listener.lineEnd();
      }
      function linePoint(x, y) {
        x = Math.max(-d3_geo_clipExtentMAX, Math.min(d3_geo_clipExtentMAX, x));
        y = Math.max(-d3_geo_clipExtentMAX, Math.min(d3_geo_clipExtentMAX, y));
        var v = pointVisible(x, y);
        if (polygon) ring.push([ x, y ]);
        if (first) {
          x__ = x, y__ = y, v__ = v;
          first = false;
          if (v) {
            listener.lineStart();
            listener.point(x, y);
          }
        } else {
          if (v && v_) listener.point(x, y); else {
            var l = {
              a: {
                x: x_,
                y: y_
              },
              b: {
                x: x,
                y: y
              }
            };
            if (clipLine(l)) {
              if (!v_) {
                listener.lineStart();
                listener.point(l.a.x, l.a.y);
              }
              listener.point(l.b.x, l.b.y);
              if (!v) listener.lineEnd();
              clean = false;
            } else if (v) {
              listener.lineStart();
              listener.point(x, y);
              clean = false;
            }
          }
        }
        x_ = x, y_ = y, v_ = v;
      }
      return clip;
    };
    function corner(p, direction) {
      return abs(p[0] - x0) < ε ? direction > 0 ? 0 : 3 : abs(p[0] - x1) < ε ? direction > 0 ? 2 : 1 : abs(p[1] - y0) < ε ? direction > 0 ? 1 : 0 : direction > 0 ? 3 : 2;
    }
    function compare(a, b) {
      return comparePoints(a.x, b.x);
    }
    function comparePoints(a, b) {
      var ca = corner(a, 1), cb = corner(b, 1);
      return ca !== cb ? ca - cb : ca === 0 ? b[1] - a[1] : ca === 1 ? a[0] - b[0] : ca === 2 ? a[1] - b[1] : b[0] - a[0];
    }
  }
  function d3_geo_conic(projectAt) {
    var φ0 = 0, φ1 = π / 3, m = d3_geo_projectionMutator(projectAt), p = m(φ0, φ1);
    p.parallels = function(_) {
      if (!arguments.length) return [ φ0 / π * 180, φ1 / π * 180 ];
      return m(φ0 = _[0] * π / 180, φ1 = _[1] * π / 180);
    };
    return p;
  }
  function d3_geo_conicEqualArea(φ0, φ1) {
    var sinφ0 = Math.sin(φ0), n = (sinφ0 + Math.sin(φ1)) / 2, C = 1 + sinφ0 * (2 * n - sinφ0), ρ0 = Math.sqrt(C) / n;
    function forward(λ, φ) {
      var ρ = Math.sqrt(C - 2 * n * Math.sin(φ)) / n;
      return [ ρ * Math.sin(λ *= n), ρ0 - ρ * Math.cos(λ) ];
    }
    forward.invert = function(x, y) {
      var ρ0_y = ρ0 - y;
      return [ Math.atan2(x, ρ0_y) / n, d3_asin((C - (x * x + ρ0_y * ρ0_y) * n * n) / (2 * n)) ];
    };
    return forward;
  }
  (d3.geo.conicEqualArea = function() {
    return d3_geo_conic(d3_geo_conicEqualArea);
  }).raw = d3_geo_conicEqualArea;
  d3.geo.albers = function() {
    return d3.geo.conicEqualArea().rotate([ 96, 0 ]).center([ -.6, 38.7 ]).parallels([ 29.5, 45.5 ]).scale(1070);
  };
  d3.geo.albersUsa = function() {
    var lower48 = d3.geo.albers();
    var alaska = d3.geo.conicEqualArea().rotate([ 154, 0 ]).center([ -2, 58.5 ]).parallels([ 55, 65 ]);
    var hawaii = d3.geo.conicEqualArea().rotate([ 157, 0 ]).center([ -3, 19.9 ]).parallels([ 8, 18 ]);
    var point, pointStream = {
      point: function(x, y) {
        point = [ x, y ];
      }
    }, lower48Point, alaskaPoint, hawaiiPoint;
    function albersUsa(coordinates) {
      var x = coordinates[0], y = coordinates[1];
      point = null;
      (lower48Point(x, y), point) || (alaskaPoint(x, y), point) || hawaiiPoint(x, y);
      return point;
    }
    albersUsa.invert = function(coordinates) {
      var k = lower48.scale(), t = lower48.translate(), x = (coordinates[0] - t[0]) / k, y = (coordinates[1] - t[1]) / k;
      return (y >= .12 && y < .234 && x >= -.425 && x < -.214 ? alaska : y >= .166 && y < .234 && x >= -.214 && x < -.115 ? hawaii : lower48).invert(coordinates);
    };
    albersUsa.stream = function(stream) {
      var lower48Stream = lower48.stream(stream), alaskaStream = alaska.stream(stream), hawaiiStream = hawaii.stream(stream);
      return {
        point: function(x, y) {
          lower48Stream.point(x, y);
          alaskaStream.point(x, y);
          hawaiiStream.point(x, y);
        },
        sphere: function() {
          lower48Stream.sphere();
          alaskaStream.sphere();
          hawaiiStream.sphere();
        },
        lineStart: function() {
          lower48Stream.lineStart();
          alaskaStream.lineStart();
          hawaiiStream.lineStart();
        },
        lineEnd: function() {
          lower48Stream.lineEnd();
          alaskaStream.lineEnd();
          hawaiiStream.lineEnd();
        },
        polygonStart: function() {
          lower48Stream.polygonStart();
          alaskaStream.polygonStart();
          hawaiiStream.polygonStart();
        },
        polygonEnd: function() {
          lower48Stream.polygonEnd();
          alaskaStream.polygonEnd();
          hawaiiStream.polygonEnd();
        }
      };
    };
    albersUsa.precision = function(_) {
      if (!arguments.length) return lower48.precision();
      lower48.precision(_);
      alaska.precision(_);
      hawaii.precision(_);
      return albersUsa;
    };
    albersUsa.scale = function(_) {
      if (!arguments.length) return lower48.scale();
      lower48.scale(_);
      alaska.scale(_ * .35);
      hawaii.scale(_);
      return albersUsa.translate(lower48.translate());
    };
    albersUsa.translate = function(_) {
      if (!arguments.length) return lower48.translate();
      var k = lower48.scale(), x = +_[0], y = +_[1];
      lower48Point = lower48.translate(_).clipExtent([ [ x - .455 * k, y - .238 * k ], [ x + .455 * k, y + .238 * k ] ]).stream(pointStream).point;
      alaskaPoint = alaska.translate([ x - .307 * k, y + .201 * k ]).clipExtent([ [ x - .425 * k + ε, y + .12 * k + ε ], [ x - .214 * k - ε, y + .234 * k - ε ] ]).stream(pointStream).point;
      hawaiiPoint = hawaii.translate([ x - .205 * k, y + .212 * k ]).clipExtent([ [ x - .214 * k + ε, y + .166 * k + ε ], [ x - .115 * k - ε, y + .234 * k - ε ] ]).stream(pointStream).point;
      return albersUsa;
    };
    return albersUsa.scale(1070);
  };
  var d3_geo_pathAreaSum, d3_geo_pathAreaPolygon, d3_geo_pathArea = {
    point: d3_noop,
    lineStart: d3_noop,
    lineEnd: d3_noop,
    polygonStart: function() {
      d3_geo_pathAreaPolygon = 0;
      d3_geo_pathArea.lineStart = d3_geo_pathAreaRingStart;
    },
    polygonEnd: function() {
      d3_geo_pathArea.lineStart = d3_geo_pathArea.lineEnd = d3_geo_pathArea.point = d3_noop;
      d3_geo_pathAreaSum += abs(d3_geo_pathAreaPolygon / 2);
    }
  };
  function d3_geo_pathAreaRingStart() {
    var x00, y00, x0, y0;
    d3_geo_pathArea.point = function(x, y) {
      d3_geo_pathArea.point = nextPoint;
      x00 = x0 = x, y00 = y0 = y;
    };
    function nextPoint(x, y) {
      d3_geo_pathAreaPolygon += y0 * x - x0 * y;
      x0 = x, y0 = y;
    }
    d3_geo_pathArea.lineEnd = function() {
      nextPoint(x00, y00);
    };
  }
  var d3_geo_pathBoundsX0, d3_geo_pathBoundsY0, d3_geo_pathBoundsX1, d3_geo_pathBoundsY1;
  var d3_geo_pathBounds = {
    point: d3_geo_pathBoundsPoint,
    lineStart: d3_noop,
    lineEnd: d3_noop,
    polygonStart: d3_noop,
    polygonEnd: d3_noop
  };
  function d3_geo_pathBoundsPoint(x, y) {
    if (x < d3_geo_pathBoundsX0) d3_geo_pathBoundsX0 = x;
    if (x > d3_geo_pathBoundsX1) d3_geo_pathBoundsX1 = x;
    if (y < d3_geo_pathBoundsY0) d3_geo_pathBoundsY0 = y;
    if (y > d3_geo_pathBoundsY1) d3_geo_pathBoundsY1 = y;
  }
  function d3_geo_pathBuffer() {
    var pointCircle = d3_geo_pathBufferCircle(4.5), buffer = [];
    var stream = {
      point: point,
      lineStart: function() {
        stream.point = pointLineStart;
      },
      lineEnd: lineEnd,
      polygonStart: function() {
        stream.lineEnd = lineEndPolygon;
      },
      polygonEnd: function() {
        stream.lineEnd = lineEnd;
        stream.point = point;
      },
      pointRadius: function(_) {
        pointCircle = d3_geo_pathBufferCircle(_);
        return stream;
      },
      result: function() {
        if (buffer.length) {
          var result = buffer.join("");
          buffer = [];
          return result;
        }
      }
    };
    function point(x, y) {
      buffer.push("M", x, ",", y, pointCircle);
    }
    function pointLineStart(x, y) {
      buffer.push("M", x, ",", y);
      stream.point = pointLine;
    }
    function pointLine(x, y) {
      buffer.push("L", x, ",", y);
    }
    function lineEnd() {
      stream.point = point;
    }
    function lineEndPolygon() {
      buffer.push("Z");
    }
    return stream;
  }
  function d3_geo_pathBufferCircle(radius) {
    return "m0," + radius + "a" + radius + "," + radius + " 0 1,1 0," + -2 * radius + "a" + radius + "," + radius + " 0 1,1 0," + 2 * radius + "z";
  }
  var d3_geo_pathCentroid = {
    point: d3_geo_pathCentroidPoint,
    lineStart: d3_geo_pathCentroidLineStart,
    lineEnd: d3_geo_pathCentroidLineEnd,
    polygonStart: function() {
      d3_geo_pathCentroid.lineStart = d3_geo_pathCentroidRingStart;
    },
    polygonEnd: function() {
      d3_geo_pathCentroid.point = d3_geo_pathCentroidPoint;
      d3_geo_pathCentroid.lineStart = d3_geo_pathCentroidLineStart;
      d3_geo_pathCentroid.lineEnd = d3_geo_pathCentroidLineEnd;
    }
  };
  function d3_geo_pathCentroidPoint(x, y) {
    d3_geo_centroidX0 += x;
    d3_geo_centroidY0 += y;
    ++d3_geo_centroidZ0;
  }
  function d3_geo_pathCentroidLineStart() {
    var x0, y0;
    d3_geo_pathCentroid.point = function(x, y) {
      d3_geo_pathCentroid.point = nextPoint;
      d3_geo_pathCentroidPoint(x0 = x, y0 = y);
    };
    function nextPoint(x, y) {
      var dx = x - x0, dy = y - y0, z = Math.sqrt(dx * dx + dy * dy);
      d3_geo_centroidX1 += z * (x0 + x) / 2;
      d3_geo_centroidY1 += z * (y0 + y) / 2;
      d3_geo_centroidZ1 += z;
      d3_geo_pathCentroidPoint(x0 = x, y0 = y);
    }
  }
  function d3_geo_pathCentroidLineEnd() {
    d3_geo_pathCentroid.point = d3_geo_pathCentroidPoint;
  }
  function d3_geo_pathCentroidRingStart() {
    var x00, y00, x0, y0;
    d3_geo_pathCentroid.point = function(x, y) {
      d3_geo_pathCentroid.point = nextPoint;
      d3_geo_pathCentroidPoint(x00 = x0 = x, y00 = y0 = y);
    };
    function nextPoint(x, y) {
      var dx = x - x0, dy = y - y0, z = Math.sqrt(dx * dx + dy * dy);
      d3_geo_centroidX1 += z * (x0 + x) / 2;
      d3_geo_centroidY1 += z * (y0 + y) / 2;
      d3_geo_centroidZ1 += z;
      z = y0 * x - x0 * y;
      d3_geo_centroidX2 += z * (x0 + x);
      d3_geo_centroidY2 += z * (y0 + y);
      d3_geo_centroidZ2 += z * 3;
      d3_geo_pathCentroidPoint(x0 = x, y0 = y);
    }
    d3_geo_pathCentroid.lineEnd = function() {
      nextPoint(x00, y00);
    };
  }
  function d3_geo_pathContext(context) {
    var pointRadius = 4.5;
    var stream = {
      point: point,
      lineStart: function() {
        stream.point = pointLineStart;
      },
      lineEnd: lineEnd,
      polygonStart: function() {
        stream.lineEnd = lineEndPolygon;
      },
      polygonEnd: function() {
        stream.lineEnd = lineEnd;
        stream.point = point;
      },
      pointRadius: function(_) {
        pointRadius = _;
        return stream;
      },
      result: d3_noop
    };
    function point(x, y) {
      context.moveTo(x + pointRadius, y);
      context.arc(x, y, pointRadius, 0, τ);
    }
    function pointLineStart(x, y) {
      context.moveTo(x, y);
      stream.point = pointLine;
    }
    function pointLine(x, y) {
      context.lineTo(x, y);
    }
    function lineEnd() {
      stream.point = point;
    }
    function lineEndPolygon() {
      context.closePath();
    }
    return stream;
  }
  function d3_geo_resample(project) {
    var δ2 = .5, cosMinDistance = Math.cos(30 * d3_radians), maxDepth = 16;
    function resample(stream) {
      return (maxDepth ? resampleRecursive : resampleNone)(stream);
    }
    function resampleNone(stream) {
      return d3_geo_transformPoint(stream, function(x, y) {
        x = project(x, y);
        stream.point(x[0], x[1]);
      });
    }
    function resampleRecursive(stream) {
      var λ00, φ00, x00, y00, a00, b00, c00, λ0, x0, y0, a0, b0, c0;
      var resample = {
        point: point,
        lineStart: lineStart,
        lineEnd: lineEnd,
        polygonStart: function() {
          stream.polygonStart();
          resample.lineStart = ringStart;
        },
        polygonEnd: function() {
          stream.polygonEnd();
          resample.lineStart = lineStart;
        }
      };
      function point(x, y) {
        x = project(x, y);
        stream.point(x[0], x[1]);
      }
      function lineStart() {
        x0 = NaN;
        resample.point = linePoint;
        stream.lineStart();
      }
      function linePoint(λ, φ) {
        var c = d3_geo_cartesian([ λ, φ ]), p = project(λ, φ);
        resampleLineTo(x0, y0, λ0, a0, b0, c0, x0 = p[0], y0 = p[1], λ0 = λ, a0 = c[0], b0 = c[1], c0 = c[2], maxDepth, stream);
        stream.point(x0, y0);
      }
      function lineEnd() {
        resample.point = point;
        stream.lineEnd();
      }
      function ringStart() {
        lineStart();
        resample.point = ringPoint;
        resample.lineEnd = ringEnd;
      }
      function ringPoint(λ, φ) {
        linePoint(λ00 = λ, φ00 = φ), x00 = x0, y00 = y0, a00 = a0, b00 = b0, c00 = c0;
        resample.point = linePoint;
      }
      function ringEnd() {
        resampleLineTo(x0, y0, λ0, a0, b0, c0, x00, y00, λ00, a00, b00, c00, maxDepth, stream);
        resample.lineEnd = lineEnd;
        lineEnd();
      }
      return resample;
    }
    function resampleLineTo(x0, y0, λ0, a0, b0, c0, x1, y1, λ1, a1, b1, c1, depth, stream) {
      var dx = x1 - x0, dy = y1 - y0, d2 = dx * dx + dy * dy;
      if (d2 > 4 * δ2 && depth--) {
        var a = a0 + a1, b = b0 + b1, c = c0 + c1, m = Math.sqrt(a * a + b * b + c * c), φ2 = Math.asin(c /= m), λ2 = abs(abs(c) - 1) < ε || abs(λ0 - λ1) < ε ? (λ0 + λ1) / 2 : Math.atan2(b, a), p = project(λ2, φ2), x2 = p[0], y2 = p[1], dx2 = x2 - x0, dy2 = y2 - y0, dz = dy * dx2 - dx * dy2;
        if (dz * dz / d2 > δ2 || abs((dx * dx2 + dy * dy2) / d2 - .5) > .3 || a0 * a1 + b0 * b1 + c0 * c1 < cosMinDistance) {
          resampleLineTo(x0, y0, λ0, a0, b0, c0, x2, y2, λ2, a /= m, b /= m, c, depth, stream);
          stream.point(x2, y2);
          resampleLineTo(x2, y2, λ2, a, b, c, x1, y1, λ1, a1, b1, c1, depth, stream);
        }
      }
    }
    resample.precision = function(_) {
      if (!arguments.length) return Math.sqrt(δ2);
      maxDepth = (δ2 = _ * _) > 0 && 16;
      return resample;
    };
    return resample;
  }
  d3.geo.path = function() {
    var pointRadius = 4.5, projection, context, projectStream, contextStream, cacheStream;
    function path(object) {
      if (object) {
        if (typeof pointRadius === "function") contextStream.pointRadius(+pointRadius.apply(this, arguments));
        if (!cacheStream || !cacheStream.valid) cacheStream = projectStream(contextStream);
        d3.geo.stream(object, cacheStream);
      }
      return contextStream.result();
    }
    path.area = function(object) {
      d3_geo_pathAreaSum = 0;
      d3.geo.stream(object, projectStream(d3_geo_pathArea));
      return d3_geo_pathAreaSum;
    };
    path.centroid = function(object) {
      d3_geo_centroidX0 = d3_geo_centroidY0 = d3_geo_centroidZ0 = d3_geo_centroidX1 = d3_geo_centroidY1 = d3_geo_centroidZ1 = d3_geo_centroidX2 = d3_geo_centroidY2 = d3_geo_centroidZ2 = 0;
      d3.geo.stream(object, projectStream(d3_geo_pathCentroid));
      return d3_geo_centroidZ2 ? [ d3_geo_centroidX2 / d3_geo_centroidZ2, d3_geo_centroidY2 / d3_geo_centroidZ2 ] : d3_geo_centroidZ1 ? [ d3_geo_centroidX1 / d3_geo_centroidZ1, d3_geo_centroidY1 / d3_geo_centroidZ1 ] : d3_geo_centroidZ0 ? [ d3_geo_centroidX0 / d3_geo_centroidZ0, d3_geo_centroidY0 / d3_geo_centroidZ0 ] : [ NaN, NaN ];
    };
    path.bounds = function(object) {
      d3_geo_pathBoundsX1 = d3_geo_pathBoundsY1 = -(d3_geo_pathBoundsX0 = d3_geo_pathBoundsY0 = Infinity);
      d3.geo.stream(object, projectStream(d3_geo_pathBounds));
      return [ [ d3_geo_pathBoundsX0, d3_geo_pathBoundsY0 ], [ d3_geo_pathBoundsX1, d3_geo_pathBoundsY1 ] ];
    };
    path.projection = function(_) {
      if (!arguments.length) return projection;
      projectStream = (projection = _) ? _.stream || d3_geo_pathProjectStream(_) : d3_identity;
      return reset();
    };
    path.context = function(_) {
      if (!arguments.length) return context;
      contextStream = (context = _) == null ? new d3_geo_pathBuffer() : new d3_geo_pathContext(_);
      if (typeof pointRadius !== "function") contextStream.pointRadius(pointRadius);
      return reset();
    };
    path.pointRadius = function(_) {
      if (!arguments.length) return pointRadius;
      pointRadius = typeof _ === "function" ? _ : (contextStream.pointRadius(+_), +_);
      return path;
    };
    function reset() {
      cacheStream = null;
      return path;
    }
    return path.projection(d3.geo.albersUsa()).context(null);
  };
  function d3_geo_pathProjectStream(project) {
    var resample = d3_geo_resample(function(x, y) {
      return project([ x * d3_degrees, y * d3_degrees ]);
    });
    return function(stream) {
      return d3_geo_projectionRadians(resample(stream));
    };
  }
  d3.geo.transform = function(methods) {
    return {
      stream: function(stream) {
        var transform = new d3_geo_transform(stream);
        for (var k in methods) transform[k] = methods[k];
        return transform;
      }
    };
  };
  function d3_geo_transform(stream) {
    this.stream = stream;
  }
  d3_geo_transform.prototype = {
    point: function(x, y) {
      this.stream.point(x, y);
    },
    sphere: function() {
      this.stream.sphere();
    },
    lineStart: function() {
      this.stream.lineStart();
    },
    lineEnd: function() {
      this.stream.lineEnd();
    },
    polygonStart: function() {
      this.stream.polygonStart();
    },
    polygonEnd: function() {
      this.stream.polygonEnd();
    }
  };
  function d3_geo_transformPoint(stream, point) {
    return {
      point: point,
      sphere: function() {
        stream.sphere();
      },
      lineStart: function() {
        stream.lineStart();
      },
      lineEnd: function() {
        stream.lineEnd();
      },
      polygonStart: function() {
        stream.polygonStart();
      },
      polygonEnd: function() {
        stream.polygonEnd();
      }
    };
  }
  d3.geo.projection = d3_geo_projection;
  d3.geo.projectionMutator = d3_geo_projectionMutator;
  function d3_geo_projection(project) {
    return d3_geo_projectionMutator(function() {
      return project;
    })();
  }
  function d3_geo_projectionMutator(projectAt) {
    var project, rotate, projectRotate, projectResample = d3_geo_resample(function(x, y) {
      x = project(x, y);
      return [ x[0] * k + δx, δy - x[1] * k ];
    }), k = 150, x = 480, y = 250, λ = 0, φ = 0, δλ = 0, δφ = 0, δγ = 0, δx, δy, preclip = d3_geo_clipAntimeridian, postclip = d3_identity, clipAngle = null, clipExtent = null, stream;
    function projection(point) {
      point = projectRotate(point[0] * d3_radians, point[1] * d3_radians);
      return [ point[0] * k + δx, δy - point[1] * k ];
    }
    function invert(point) {
      point = projectRotate.invert((point[0] - δx) / k, (δy - point[1]) / k);
      return point && [ point[0] * d3_degrees, point[1] * d3_degrees ];
    }
    projection.stream = function(output) {
      if (stream) stream.valid = false;
      stream = d3_geo_projectionRadians(preclip(rotate, projectResample(postclip(output))));
      stream.valid = true;
      return stream;
    };
    projection.clipAngle = function(_) {
      if (!arguments.length) return clipAngle;
      preclip = _ == null ? (clipAngle = _, d3_geo_clipAntimeridian) : d3_geo_clipCircle((clipAngle = +_) * d3_radians);
      return invalidate();
    };
    projection.clipExtent = function(_) {
      if (!arguments.length) return clipExtent;
      clipExtent = _;
      postclip = _ ? d3_geo_clipExtent(_[0][0], _[0][1], _[1][0], _[1][1]) : d3_identity;
      return invalidate();
    };
    projection.scale = function(_) {
      if (!arguments.length) return k;
      k = +_;
      return reset();
    };
    projection.translate = function(_) {
      if (!arguments.length) return [ x, y ];
      x = +_[0];
      y = +_[1];
      return reset();
    };
    projection.center = function(_) {
      if (!arguments.length) return [ λ * d3_degrees, φ * d3_degrees ];
      λ = _[0] % 360 * d3_radians;
      φ = _[1] % 360 * d3_radians;
      return reset();
    };
    projection.rotate = function(_) {
      if (!arguments.length) return [ δλ * d3_degrees, δφ * d3_degrees, δγ * d3_degrees ];
      δλ = _[0] % 360 * d3_radians;
      δφ = _[1] % 360 * d3_radians;
      δγ = _.length > 2 ? _[2] % 360 * d3_radians : 0;
      return reset();
    };
    d3.rebind(projection, projectResample, "precision");
    function reset() {
      projectRotate = d3_geo_compose(rotate = d3_geo_rotation(δλ, δφ, δγ), project);
      var center = project(λ, φ);
      δx = x - center[0] * k;
      δy = y + center[1] * k;
      return invalidate();
    }
    function invalidate() {
      if (stream) stream.valid = false, stream = null;
      return projection;
    }
    return function() {
      project = projectAt.apply(this, arguments);
      projection.invert = project.invert && invert;
      return reset();
    };
  }
  function d3_geo_projectionRadians(stream) {
    return d3_geo_transformPoint(stream, function(x, y) {
      stream.point(x * d3_radians, y * d3_radians);
    });
  }
  function d3_geo_equirectangular(λ, φ) {
    return [ λ, φ ];
  }
  (d3.geo.equirectangular = function() {
    return d3_geo_projection(d3_geo_equirectangular);
  }).raw = d3_geo_equirectangular.invert = d3_geo_equirectangular;
  d3.geo.rotation = function(rotate) {
    rotate = d3_geo_rotation(rotate[0] % 360 * d3_radians, rotate[1] * d3_radians, rotate.length > 2 ? rotate[2] * d3_radians : 0);
    function forward(coordinates) {
      coordinates = rotate(coordinates[0] * d3_radians, coordinates[1] * d3_radians);
      return coordinates[0] *= d3_degrees, coordinates[1] *= d3_degrees, coordinates;
    }
    forward.invert = function(coordinates) {
      coordinates = rotate.invert(coordinates[0] * d3_radians, coordinates[1] * d3_radians);
      return coordinates[0] *= d3_degrees, coordinates[1] *= d3_degrees, coordinates;
    };
    return forward;
  };
  function d3_geo_identityRotation(λ, φ) {
    return [ λ > π ? λ - τ : λ < -π ? λ + τ : λ, φ ];
  }
  d3_geo_identityRotation.invert = d3_geo_equirectangular;
  function d3_geo_rotation(δλ, δφ, δγ) {
    return δλ ? δφ || δγ ? d3_geo_compose(d3_geo_rotationλ(δλ), d3_geo_rotationφγ(δφ, δγ)) : d3_geo_rotationλ(δλ) : δφ || δγ ? d3_geo_rotationφγ(δφ, δγ) : d3_geo_identityRotation;
  }
  function d3_geo_forwardRotationλ(δλ) {
    return function(λ, φ) {
      return λ += δλ, [ λ > π ? λ - τ : λ < -π ? λ + τ : λ, φ ];
    };
  }
  function d3_geo_rotationλ(δλ) {
    var rotation = d3_geo_forwardRotationλ(δλ);
    rotation.invert = d3_geo_forwardRotationλ(-δλ);
    return rotation;
  }
  function d3_geo_rotationφγ(δφ, δγ) {
    var cosδφ = Math.cos(δφ), sinδφ = Math.sin(δφ), cosδγ = Math.cos(δγ), sinδγ = Math.sin(δγ);
    function rotation(λ, φ) {
      var cosφ = Math.cos(φ), x = Math.cos(λ) * cosφ, y = Math.sin(λ) * cosφ, z = Math.sin(φ), k = z * cosδφ + x * sinδφ;
      return [ Math.atan2(y * cosδγ - k * sinδγ, x * cosδφ - z * sinδφ), d3_asin(k * cosδγ + y * sinδγ) ];
    }
    rotation.invert = function(λ, φ) {
      var cosφ = Math.cos(φ), x = Math.cos(λ) * cosφ, y = Math.sin(λ) * cosφ, z = Math.sin(φ), k = z * cosδγ - y * sinδγ;
      return [ Math.atan2(y * cosδγ + z * sinδγ, x * cosδφ + k * sinδφ), d3_asin(k * cosδφ - x * sinδφ) ];
    };
    return rotation;
  }
  d3.geo.circle = function() {
    var origin = [ 0, 0 ], angle, precision = 6, interpolate;
    function circle() {
      var center = typeof origin === "function" ? origin.apply(this, arguments) : origin, rotate = d3_geo_rotation(-center[0] * d3_radians, -center[1] * d3_radians, 0).invert, ring = [];
      interpolate(null, null, 1, {
        point: function(x, y) {
          ring.push(x = rotate(x, y));
          x[0] *= d3_degrees, x[1] *= d3_degrees;
        }
      });
      return {
        type: "Polygon",
        coordinates: [ ring ]
      };
    }
    circle.origin = function(x) {
      if (!arguments.length) return origin;
      origin = x;
      return circle;
    };
    circle.angle = function(x) {
      if (!arguments.length) return angle;
      interpolate = d3_geo_circleInterpolate((angle = +x) * d3_radians, precision * d3_radians);
      return circle;
    };
    circle.precision = function(_) {
      if (!arguments.length) return precision;
      interpolate = d3_geo_circleInterpolate(angle * d3_radians, (precision = +_) * d3_radians);
      return circle;
    };
    return circle.angle(90);
  };
  function d3_geo_circleInterpolate(radius, precision) {
    var cr = Math.cos(radius), sr = Math.sin(radius);
    return function(from, to, direction, listener) {
      var step = direction * precision;
      if (from != null) {
        from = d3_geo_circleAngle(cr, from);
        to = d3_geo_circleAngle(cr, to);
        if (direction > 0 ? from < to : from > to) from += direction * τ;
      } else {
        from = radius + direction * τ;
        to = radius - .5 * step;
      }
      for (var point, t = from; direction > 0 ? t > to : t < to; t -= step) {
        listener.point((point = d3_geo_spherical([ cr, -sr * Math.cos(t), -sr * Math.sin(t) ]))[0], point[1]);
      }
    };
  }
  function d3_geo_circleAngle(cr, point) {
    var a = d3_geo_cartesian(point);
    a[0] -= cr;
    d3_geo_cartesianNormalize(a);
    var angle = d3_acos(-a[1]);
    return ((-a[2] < 0 ? -angle : angle) + 2 * Math.PI - ε) % (2 * Math.PI);
  }
  d3.geo.distance = function(a, b) {
    var Δλ = (b[0] - a[0]) * d3_radians, φ0 = a[1] * d3_radians, φ1 = b[1] * d3_radians, sinΔλ = Math.sin(Δλ), cosΔλ = Math.cos(Δλ), sinφ0 = Math.sin(φ0), cosφ0 = Math.cos(φ0), sinφ1 = Math.sin(φ1), cosφ1 = Math.cos(φ1), t;
    return Math.atan2(Math.sqrt((t = cosφ1 * sinΔλ) * t + (t = cosφ0 * sinφ1 - sinφ0 * cosφ1 * cosΔλ) * t), sinφ0 * sinφ1 + cosφ0 * cosφ1 * cosΔλ);
  };
  d3.geo.graticule = function() {
    var x1, x0, X1, X0, y1, y0, Y1, Y0, dx = 10, dy = dx, DX = 90, DY = 360, x, y, X, Y, precision = 2.5;
    function graticule() {
      return {
        type: "MultiLineString",
        coordinates: lines()
      };
    }
    function lines() {
      return d3.range(Math.ceil(X0 / DX) * DX, X1, DX).map(X).concat(d3.range(Math.ceil(Y0 / DY) * DY, Y1, DY).map(Y)).concat(d3.range(Math.ceil(x0 / dx) * dx, x1, dx).filter(function(x) {
        return abs(x % DX) > ε;
      }).map(x)).concat(d3.range(Math.ceil(y0 / dy) * dy, y1, dy).filter(function(y) {
        return abs(y % DY) > ε;
      }).map(y));
    }
    graticule.lines = function() {
      return lines().map(function(coordinates) {
        return {
          type: "LineString",
          coordinates: coordinates
        };
      });
    };
    graticule.outline = function() {
      return {
        type: "Polygon",
        coordinates: [ X(X0).concat(Y(Y1).slice(1), X(X1).reverse().slice(1), Y(Y0).reverse().slice(1)) ]
      };
    };
    graticule.extent = function(_) {
      if (!arguments.length) return graticule.minorExtent();
      return graticule.majorExtent(_).minorExtent(_);
    };
    graticule.majorExtent = function(_) {
      if (!arguments.length) return [ [ X0, Y0 ], [ X1, Y1 ] ];
      X0 = +_[0][0], X1 = +_[1][0];
      Y0 = +_[0][1], Y1 = +_[1][1];
      if (X0 > X1) _ = X0, X0 = X1, X1 = _;
      if (Y0 > Y1) _ = Y0, Y0 = Y1, Y1 = _;
      return graticule.precision(precision);
    };
    graticule.minorExtent = function(_) {
      if (!arguments.length) return [ [ x0, y0 ], [ x1, y1 ] ];
      x0 = +_[0][0], x1 = +_[1][0];
      y0 = +_[0][1], y1 = +_[1][1];
      if (x0 > x1) _ = x0, x0 = x1, x1 = _;
      if (y0 > y1) _ = y0, y0 = y1, y1 = _;
      return graticule.precision(precision);
    };
    graticule.step = function(_) {
      if (!arguments.length) return graticule.minorStep();
      return graticule.majorStep(_).minorStep(_);
    };
    graticule.majorStep = function(_) {
      if (!arguments.length) return [ DX, DY ];
      DX = +_[0], DY = +_[1];
      return graticule;
    };
    graticule.minorStep = function(_) {
      if (!arguments.length) return [ dx, dy ];
      dx = +_[0], dy = +_[1];
      return graticule;
    };
    graticule.precision = function(_) {
      if (!arguments.length) return precision;
      precision = +_;
      x = d3_geo_graticuleX(y0, y1, 90);
      y = d3_geo_graticuleY(x0, x1, precision);
      X = d3_geo_graticuleX(Y0, Y1, 90);
      Y = d3_geo_graticuleY(X0, X1, precision);
      return graticule;
    };
    return graticule.majorExtent([ [ -180, -90 + ε ], [ 180, 90 - ε ] ]).minorExtent([ [ -180, -80 - ε ], [ 180, 80 + ε ] ]);
  };
  function d3_geo_graticuleX(y0, y1, dy) {
    var y = d3.range(y0, y1 - ε, dy).concat(y1);
    return function(x) {
      return y.map(function(y) {
        return [ x, y ];
      });
    };
  }
  function d3_geo_graticuleY(x0, x1, dx) {
    var x = d3.range(x0, x1 - ε, dx).concat(x1);
    return function(y) {
      return x.map(function(x) {
        return [ x, y ];
      });
    };
  }
  function d3_source(d) {
    return d.source;
  }
  function d3_target(d) {
    return d.target;
  }
  d3.geo.greatArc = function() {
    var source = d3_source, source_, target = d3_target, target_;
    function greatArc() {
      return {
        type: "LineString",
        coordinates: [ source_ || source.apply(this, arguments), target_ || target.apply(this, arguments) ]
      };
    }
    greatArc.distance = function() {
      return d3.geo.distance(source_ || source.apply(this, arguments), target_ || target.apply(this, arguments));
    };
    greatArc.source = function(_) {
      if (!arguments.length) return source;
      source = _, source_ = typeof _ === "function" ? null : _;
      return greatArc;
    };
    greatArc.target = function(_) {
      if (!arguments.length) return target;
      target = _, target_ = typeof _ === "function" ? null : _;
      return greatArc;
    };
    greatArc.precision = function() {
      return arguments.length ? greatArc : 0;
    };
    return greatArc;
  };
  d3.geo.interpolate = function(source, target) {
    return d3_geo_interpolate(source[0] * d3_radians, source[1] * d3_radians, target[0] * d3_radians, target[1] * d3_radians);
  };
  function d3_geo_interpolate(x0, y0, x1, y1) {
    var cy0 = Math.cos(y0), sy0 = Math.sin(y0), cy1 = Math.cos(y1), sy1 = Math.sin(y1), kx0 = cy0 * Math.cos(x0), ky0 = cy0 * Math.sin(x0), kx1 = cy1 * Math.cos(x1), ky1 = cy1 * Math.sin(x1), d = 2 * Math.asin(Math.sqrt(d3_haversin(y1 - y0) + cy0 * cy1 * d3_haversin(x1 - x0))), k = 1 / Math.sin(d);
    var interpolate = d ? function(t) {
      var B = Math.sin(t *= d) * k, A = Math.sin(d - t) * k, x = A * kx0 + B * kx1, y = A * ky0 + B * ky1, z = A * sy0 + B * sy1;
      return [ Math.atan2(y, x) * d3_degrees, Math.atan2(z, Math.sqrt(x * x + y * y)) * d3_degrees ];
    } : function() {
      return [ x0 * d3_degrees, y0 * d3_degrees ];
    };
    interpolate.distance = d;
    return interpolate;
  }
  d3.geo.length = function(object) {
    d3_geo_lengthSum = 0;
    d3.geo.stream(object, d3_geo_length);
    return d3_geo_lengthSum;
  };
  var d3_geo_lengthSum;
  var d3_geo_length = {
    sphere: d3_noop,
    point: d3_noop,
    lineStart: d3_geo_lengthLineStart,
    lineEnd: d3_noop,
    polygonStart: d3_noop,
    polygonEnd: d3_noop
  };
  function d3_geo_lengthLineStart() {
    var λ0, sinφ0, cosφ0;
    d3_geo_length.point = function(λ, φ) {
      λ0 = λ * d3_radians, sinφ0 = Math.sin(φ *= d3_radians), cosφ0 = Math.cos(φ);
      d3_geo_length.point = nextPoint;
    };
    d3_geo_length.lineEnd = function() {
      d3_geo_length.point = d3_geo_length.lineEnd = d3_noop;
    };
    function nextPoint(λ, φ) {
      var sinφ = Math.sin(φ *= d3_radians), cosφ = Math.cos(φ), t = abs((λ *= d3_radians) - λ0), cosΔλ = Math.cos(t);
      d3_geo_lengthSum += Math.atan2(Math.sqrt((t = cosφ * Math.sin(t)) * t + (t = cosφ0 * sinφ - sinφ0 * cosφ * cosΔλ) * t), sinφ0 * sinφ + cosφ0 * cosφ * cosΔλ);
      λ0 = λ, sinφ0 = sinφ, cosφ0 = cosφ;
    }
  }
  function d3_geo_azimuthal(scale, angle) {
    function azimuthal(λ, φ) {
      var cosλ = Math.cos(λ), cosφ = Math.cos(φ), k = scale(cosλ * cosφ);
      return [ k * cosφ * Math.sin(λ), k * Math.sin(φ) ];
    }
    azimuthal.invert = function(x, y) {
      var ρ = Math.sqrt(x * x + y * y), c = angle(ρ), sinc = Math.sin(c), cosc = Math.cos(c);
      return [ Math.atan2(x * sinc, ρ * cosc), Math.asin(ρ && y * sinc / ρ) ];
    };
    return azimuthal;
  }
  var d3_geo_azimuthalEqualArea = d3_geo_azimuthal(function(cosλcosφ) {
    return Math.sqrt(2 / (1 + cosλcosφ));
  }, function(ρ) {
    return 2 * Math.asin(ρ / 2);
  });
  (d3.geo.azimuthalEqualArea = function() {
    return d3_geo_projection(d3_geo_azimuthalEqualArea);
  }).raw = d3_geo_azimuthalEqualArea;
  var d3_geo_azimuthalEquidistant = d3_geo_azimuthal(function(cosλcosφ) {
    var c = Math.acos(cosλcosφ);
    return c && c / Math.sin(c);
  }, d3_identity);
  (d3.geo.azimuthalEquidistant = function() {
    return d3_geo_projection(d3_geo_azimuthalEquidistant);
  }).raw = d3_geo_azimuthalEquidistant;
  function d3_geo_conicConformal(φ0, φ1) {
    var cosφ0 = Math.cos(φ0), t = function(φ) {
      return Math.tan(π / 4 + φ / 2);
    }, n = φ0 === φ1 ? Math.sin(φ0) : Math.log(cosφ0 / Math.cos(φ1)) / Math.log(t(φ1) / t(φ0)), F = cosφ0 * Math.pow(t(φ0), n) / n;
    if (!n) return d3_geo_mercator;
    function forward(λ, φ) {
      if (F > 0) {
        if (φ < -halfπ + ε) φ = -halfπ + ε;
      } else {
        if (φ > halfπ - ε) φ = halfπ - ε;
      }
      var ρ = F / Math.pow(t(φ), n);
      return [ ρ * Math.sin(n * λ), F - ρ * Math.cos(n * λ) ];
    }
    forward.invert = function(x, y) {
      var ρ0_y = F - y, ρ = d3_sgn(n) * Math.sqrt(x * x + ρ0_y * ρ0_y);
      return [ Math.atan2(x, ρ0_y) / n, 2 * Math.atan(Math.pow(F / ρ, 1 / n)) - halfπ ];
    };
    return forward;
  }
  (d3.geo.conicConformal = function() {
    return d3_geo_conic(d3_geo_conicConformal);
  }).raw = d3_geo_conicConformal;
  function d3_geo_conicEquidistant(φ0, φ1) {
    var cosφ0 = Math.cos(φ0), n = φ0 === φ1 ? Math.sin(φ0) : (cosφ0 - Math.cos(φ1)) / (φ1 - φ0), G = cosφ0 / n + φ0;
    if (abs(n) < ε) return d3_geo_equirectangular;
    function forward(λ, φ) {
      var ρ = G - φ;
      return [ ρ * Math.sin(n * λ), G - ρ * Math.cos(n * λ) ];
    }
    forward.invert = function(x, y) {
      var ρ0_y = G - y;
      return [ Math.atan2(x, ρ0_y) / n, G - d3_sgn(n) * Math.sqrt(x * x + ρ0_y * ρ0_y) ];
    };
    return forward;
  }
  (d3.geo.conicEquidistant = function() {
    return d3_geo_conic(d3_geo_conicEquidistant);
  }).raw = d3_geo_conicEquidistant;
  var d3_geo_gnomonic = d3_geo_azimuthal(function(cosλcosφ) {
    return 1 / cosλcosφ;
  }, Math.atan);
  (d3.geo.gnomonic = function() {
    return d3_geo_projection(d3_geo_gnomonic);
  }).raw = d3_geo_gnomonic;
  function d3_geo_mercator(λ, φ) {
    return [ λ, Math.log(Math.tan(π / 4 + φ / 2)) ];
  }
  d3_geo_mercator.invert = function(x, y) {
    return [ x, 2 * Math.atan(Math.exp(y)) - halfπ ];
  };
  function d3_geo_mercatorProjection(project) {
    var m = d3_geo_projection(project), scale = m.scale, translate = m.translate, clipExtent = m.clipExtent, clipAuto;
    m.scale = function() {
      var v = scale.apply(m, arguments);
      return v === m ? clipAuto ? m.clipExtent(null) : m : v;
    };
    m.translate = function() {
      var v = translate.apply(m, arguments);
      return v === m ? clipAuto ? m.clipExtent(null) : m : v;
    };
    m.clipExtent = function(_) {
      var v = clipExtent.apply(m, arguments);
      if (v === m) {
        if (clipAuto = _ == null) {
          var k = π * scale(), t = translate();
          clipExtent([ [ t[0] - k, t[1] - k ], [ t[0] + k, t[1] + k ] ]);
        }
      } else if (clipAuto) {
        v = null;
      }
      return v;
    };
    return m.clipExtent(null);
  }
  (d3.geo.mercator = function() {
    return d3_geo_mercatorProjection(d3_geo_mercator);
  }).raw = d3_geo_mercator;
  var d3_geo_orthographic = d3_geo_azimuthal(function() {
    return 1;
  }, Math.asin);
  (d3.geo.orthographic = function() {
    return d3_geo_projection(d3_geo_orthographic);
  }).raw = d3_geo_orthographic;
  var d3_geo_stereographic = d3_geo_azimuthal(function(cosλcosφ) {
    return 1 / (1 + cosλcosφ);
  }, function(ρ) {
    return 2 * Math.atan(ρ);
  });
  (d3.geo.stereographic = function() {
    return d3_geo_projection(d3_geo_stereographic);
  }).raw = d3_geo_stereographic;
  function d3_geo_transverseMercator(λ, φ) {
    return [ Math.log(Math.tan(π / 4 + φ / 2)), -λ ];
  }
  d3_geo_transverseMercator.invert = function(x, y) {
    return [ -y, 2 * Math.atan(Math.exp(x)) - halfπ ];
  };
  (d3.geo.transverseMercator = function() {
    var projection = d3_geo_mercatorProjection(d3_geo_transverseMercator), center = projection.center, rotate = projection.rotate;
    projection.center = function(_) {
      return _ ? center([ -_[1], _[0] ]) : (_ = center(), [ _[1], -_[0] ]);
    };
    projection.rotate = function(_) {
      return _ ? rotate([ _[0], _[1], _.length > 2 ? _[2] + 90 : 90 ]) : (_ = rotate(), 
      [ _[0], _[1], _[2] - 90 ]);
    };
    return rotate([ 0, 0, 90 ]);
  }).raw = d3_geo_transverseMercator;
  d3.geom = {};
  function d3_geom_pointX(d) {
    return d[0];
  }
  function d3_geom_pointY(d) {
    return d[1];
  }
  d3.geom.hull = function(vertices) {
    var x = d3_geom_pointX, y = d3_geom_pointY;
    if (arguments.length) return hull(vertices);
    function hull(data) {
      if (data.length < 3) return [];
      var fx = d3_functor(x), fy = d3_functor(y), i, n = data.length, points = [], flippedPoints = [];
      for (i = 0; i < n; i++) {
        points.push([ +fx.call(this, data[i], i), +fy.call(this, data[i], i), i ]);
      }
      points.sort(d3_geom_hullOrder);
      for (i = 0; i < n; i++) flippedPoints.push([ points[i][0], -points[i][1] ]);
      var upper = d3_geom_hullUpper(points), lower = d3_geom_hullUpper(flippedPoints);
      var skipLeft = lower[0] === upper[0], skipRight = lower[lower.length - 1] === upper[upper.length - 1], polygon = [];
      for (i = upper.length - 1; i >= 0; --i) polygon.push(data[points[upper[i]][2]]);
      for (i = +skipLeft; i < lower.length - skipRight; ++i) polygon.push(data[points[lower[i]][2]]);
      return polygon;
    }
    hull.x = function(_) {
      return arguments.length ? (x = _, hull) : x;
    };
    hull.y = function(_) {
      return arguments.length ? (y = _, hull) : y;
    };
    return hull;
  };
  function d3_geom_hullUpper(points) {
    var n = points.length, hull = [ 0, 1 ], hs = 2;
    for (var i = 2; i < n; i++) {
      while (hs > 1 && d3_cross2d(points[hull[hs - 2]], points[hull[hs - 1]], points[i]) <= 0) --hs;
      hull[hs++] = i;
    }
    return hull.slice(0, hs);
  }
  function d3_geom_hullOrder(a, b) {
    return a[0] - b[0] || a[1] - b[1];
  }
  d3.geom.polygon = function(coordinates) {
    d3_subclass(coordinates, d3_geom_polygonPrototype);
    return coordinates;
  };
  var d3_geom_polygonPrototype = d3.geom.polygon.prototype = [];
  d3_geom_polygonPrototype.area = function() {
    var i = -1, n = this.length, a, b = this[n - 1], area = 0;
    while (++i < n) {
      a = b;
      b = this[i];
      area += a[1] * b[0] - a[0] * b[1];
    }
    return area * .5;
  };
  d3_geom_polygonPrototype.centroid = function(k) {
    var i = -1, n = this.length, x = 0, y = 0, a, b = this[n - 1], c;
    if (!arguments.length) k = -1 / (6 * this.area());
    while (++i < n) {
      a = b;
      b = this[i];
      c = a[0] * b[1] - b[0] * a[1];
      x += (a[0] + b[0]) * c;
      y += (a[1] + b[1]) * c;
    }
    return [ x * k, y * k ];
  };
  d3_geom_polygonPrototype.clip = function(subject) {
    var input, closed = d3_geom_polygonClosed(subject), i = -1, n = this.length - d3_geom_polygonClosed(this), j, m, a = this[n - 1], b, c, d;
    while (++i < n) {
      input = subject.slice();
      subject.length = 0;
      b = this[i];
      c = input[(m = input.length - closed) - 1];
      j = -1;
      while (++j < m) {
        d = input[j];
        if (d3_geom_polygonInside(d, a, b)) {
          if (!d3_geom_polygonInside(c, a, b)) {
            subject.push(d3_geom_polygonIntersect(c, d, a, b));
          }
          subject.push(d);
        } else if (d3_geom_polygonInside(c, a, b)) {
          subject.push(d3_geom_polygonIntersect(c, d, a, b));
        }
        c = d;
      }
      if (closed) subject.push(subject[0]);
      a = b;
    }
    return subject;
  };
  function d3_geom_polygonInside(p, a, b) {
    return (b[0] - a[0]) * (p[1] - a[1]) < (b[1] - a[1]) * (p[0] - a[0]);
  }
  function d3_geom_polygonIntersect(c, d, a, b) {
    var x1 = c[0], x3 = a[0], x21 = d[0] - x1, x43 = b[0] - x3, y1 = c[1], y3 = a[1], y21 = d[1] - y1, y43 = b[1] - y3, ua = (x43 * (y1 - y3) - y43 * (x1 - x3)) / (y43 * x21 - x43 * y21);
    return [ x1 + ua * x21, y1 + ua * y21 ];
  }
  function d3_geom_polygonClosed(coordinates) {
    var a = coordinates[0], b = coordinates[coordinates.length - 1];
    return !(a[0] - b[0] || a[1] - b[1]);
  }
  var d3_geom_voronoiEdges, d3_geom_voronoiCells, d3_geom_voronoiBeaches, d3_geom_voronoiBeachPool = [], d3_geom_voronoiFirstCircle, d3_geom_voronoiCircles, d3_geom_voronoiCirclePool = [];
  function d3_geom_voronoiBeach() {
    d3_geom_voronoiRedBlackNode(this);
    this.edge = this.site = this.circle = null;
  }
  function d3_geom_voronoiCreateBeach(site) {
    var beach = d3_geom_voronoiBeachPool.pop() || new d3_geom_voronoiBeach();
    beach.site = site;
    return beach;
  }
  function d3_geom_voronoiDetachBeach(beach) {
    d3_geom_voronoiDetachCircle(beach);
    d3_geom_voronoiBeaches.remove(beach);
    d3_geom_voronoiBeachPool.push(beach);
    d3_geom_voronoiRedBlackNode(beach);
  }
  function d3_geom_voronoiRemoveBeach(beach) {
    var circle = beach.circle, x = circle.x, y = circle.cy, vertex = {
      x: x,
      y: y
    }, previous = beach.P, next = beach.N, disappearing = [ beach ];
    d3_geom_voronoiDetachBeach(beach);
    var lArc = previous;
    while (lArc.circle && abs(x - lArc.circle.x) < ε && abs(y - lArc.circle.cy) < ε) {
      previous = lArc.P;
      disappearing.unshift(lArc);
      d3_geom_voronoiDetachBeach(lArc);
      lArc = previous;
    }
    disappearing.unshift(lArc);
    d3_geom_voronoiDetachCircle(lArc);
    var rArc = next;
    while (rArc.circle && abs(x - rArc.circle.x) < ε && abs(y - rArc.circle.cy) < ε) {
      next = rArc.N;
      disappearing.push(rArc);
      d3_geom_voronoiDetachBeach(rArc);
      rArc = next;
    }
    disappearing.push(rArc);
    d3_geom_voronoiDetachCircle(rArc);
    var nArcs = disappearing.length, iArc;
    for (iArc = 1; iArc < nArcs; ++iArc) {
      rArc = disappearing[iArc];
      lArc = disappearing[iArc - 1];
      d3_geom_voronoiSetEdgeEnd(rArc.edge, lArc.site, rArc.site, vertex);
    }
    lArc = disappearing[0];
    rArc = disappearing[nArcs - 1];
    rArc.edge = d3_geom_voronoiCreateEdge(lArc.site, rArc.site, null, vertex);
    d3_geom_voronoiAttachCircle(lArc);
    d3_geom_voronoiAttachCircle(rArc);
  }
  function d3_geom_voronoiAddBeach(site) {
    var x = site.x, directrix = site.y, lArc, rArc, dxl, dxr, node = d3_geom_voronoiBeaches._;
    while (node) {
      dxl = d3_geom_voronoiLeftBreakPoint(node, directrix) - x;
      if (dxl > ε) node = node.L; else {
        dxr = x - d3_geom_voronoiRightBreakPoint(node, directrix);
        if (dxr > ε) {
          if (!node.R) {
            lArc = node;
            break;
          }
          node = node.R;
        } else {
          if (dxl > -ε) {
            lArc = node.P;
            rArc = node;
          } else if (dxr > -ε) {
            lArc = node;
            rArc = node.N;
          } else {
            lArc = rArc = node;
          }
          break;
        }
      }
    }
    var newArc = d3_geom_voronoiCreateBeach(site);
    d3_geom_voronoiBeaches.insert(lArc, newArc);
    if (!lArc && !rArc) return;
    if (lArc === rArc) {
      d3_geom_voronoiDetachCircle(lArc);
      rArc = d3_geom_voronoiCreateBeach(lArc.site);
      d3_geom_voronoiBeaches.insert(newArc, rArc);
      newArc.edge = rArc.edge = d3_geom_voronoiCreateEdge(lArc.site, newArc.site);
      d3_geom_voronoiAttachCircle(lArc);
      d3_geom_voronoiAttachCircle(rArc);
      return;
    }
    if (!rArc) {
      newArc.edge = d3_geom_voronoiCreateEdge(lArc.site, newArc.site);
      return;
    }
    d3_geom_voronoiDetachCircle(lArc);
    d3_geom_voronoiDetachCircle(rArc);
    var lSite = lArc.site, ax = lSite.x, ay = lSite.y, bx = site.x - ax, by = site.y - ay, rSite = rArc.site, cx = rSite.x - ax, cy = rSite.y - ay, d = 2 * (bx * cy - by * cx), hb = bx * bx + by * by, hc = cx * cx + cy * cy, vertex = {
      x: (cy * hb - by * hc) / d + ax,
      y: (bx * hc - cx * hb) / d + ay
    };
    d3_geom_voronoiSetEdgeEnd(rArc.edge, lSite, rSite, vertex);
    newArc.edge = d3_geom_voronoiCreateEdge(lSite, site, null, vertex);
    rArc.edge = d3_geom_voronoiCreateEdge(site, rSite, null, vertex);
    d3_geom_voronoiAttachCircle(lArc);
    d3_geom_voronoiAttachCircle(rArc);
  }
  function d3_geom_voronoiLeftBreakPoint(arc, directrix) {
    var site = arc.site, rfocx = site.x, rfocy = site.y, pby2 = rfocy - directrix;
    if (!pby2) return rfocx;
    var lArc = arc.P;
    if (!lArc) return -Infinity;
    site = lArc.site;
    var lfocx = site.x, lfocy = site.y, plby2 = lfocy - directrix;
    if (!plby2) return lfocx;
    var hl = lfocx - rfocx, aby2 = 1 / pby2 - 1 / plby2, b = hl / plby2;
    if (aby2) return (-b + Math.sqrt(b * b - 2 * aby2 * (hl * hl / (-2 * plby2) - lfocy + plby2 / 2 + rfocy - pby2 / 2))) / aby2 + rfocx;
    return (rfocx + lfocx) / 2;
  }
  function d3_geom_voronoiRightBreakPoint(arc, directrix) {
    var rArc = arc.N;
    if (rArc) return d3_geom_voronoiLeftBreakPoint(rArc, directrix);
    var site = arc.site;
    return site.y === directrix ? site.x : Infinity;
  }
  function d3_geom_voronoiCell(site) {
    this.site = site;
    this.edges = [];
  }
  d3_geom_voronoiCell.prototype.prepare = function() {
    var halfEdges = this.edges, iHalfEdge = halfEdges.length, edge;
    while (iHalfEdge--) {
      edge = halfEdges[iHalfEdge].edge;
      if (!edge.b || !edge.a) halfEdges.splice(iHalfEdge, 1);
    }
    halfEdges.sort(d3_geom_voronoiHalfEdgeOrder);
    return halfEdges.length;
  };
  function d3_geom_voronoiCloseCells(extent) {
    var x0 = extent[0][0], x1 = extent[1][0], y0 = extent[0][1], y1 = extent[1][1], x2, y2, x3, y3, cells = d3_geom_voronoiCells, iCell = cells.length, cell, iHalfEdge, halfEdges, nHalfEdges, start, end;
    while (iCell--) {
      cell = cells[iCell];
      if (!cell || !cell.prepare()) continue;
      halfEdges = cell.edges;
      nHalfEdges = halfEdges.length;
      iHalfEdge = 0;
      while (iHalfEdge < nHalfEdges) {
        end = halfEdges[iHalfEdge].end(), x3 = end.x, y3 = end.y;
        start = halfEdges[++iHalfEdge % nHalfEdges].start(), x2 = start.x, y2 = start.y;
        if (abs(x3 - x2) > ε || abs(y3 - y2) > ε) {
          halfEdges.splice(iHalfEdge, 0, new d3_geom_voronoiHalfEdge(d3_geom_voronoiCreateBorderEdge(cell.site, end, abs(x3 - x0) < ε && y1 - y3 > ε ? {
            x: x0,
            y: abs(x2 - x0) < ε ? y2 : y1
          } : abs(y3 - y1) < ε && x1 - x3 > ε ? {
            x: abs(y2 - y1) < ε ? x2 : x1,
            y: y1
          } : abs(x3 - x1) < ε && y3 - y0 > ε ? {
            x: x1,
            y: abs(x2 - x1) < ε ? y2 : y0
          } : abs(y3 - y0) < ε && x3 - x0 > ε ? {
            x: abs(y2 - y0) < ε ? x2 : x0,
            y: y0
          } : null), cell.site, null));
          ++nHalfEdges;
        }
      }
    }
  }
  function d3_geom_voronoiHalfEdgeOrder(a, b) {
    return b.angle - a.angle;
  }
  function d3_geom_voronoiCircle() {
    d3_geom_voronoiRedBlackNode(this);
    this.x = this.y = this.arc = this.site = this.cy = null;
  }
  function d3_geom_voronoiAttachCircle(arc) {
    var lArc = arc.P, rArc = arc.N;
    if (!lArc || !rArc) return;
    var lSite = lArc.site, cSite = arc.site, rSite = rArc.site;
    if (lSite === rSite) return;
    var bx = cSite.x, by = cSite.y, ax = lSite.x - bx, ay = lSite.y - by, cx = rSite.x - bx, cy = rSite.y - by;
    var d = 2 * (ax * cy - ay * cx);
    if (d >= -ε2) return;
    var ha = ax * ax + ay * ay, hc = cx * cx + cy * cy, x = (cy * ha - ay * hc) / d, y = (ax * hc - cx * ha) / d, cy = y + by;
    var circle = d3_geom_voronoiCirclePool.pop() || new d3_geom_voronoiCircle();
    circle.arc = arc;
    circle.site = cSite;
    circle.x = x + bx;
    circle.y = cy + Math.sqrt(x * x + y * y);
    circle.cy = cy;
    arc.circle = circle;
    var before = null, node = d3_geom_voronoiCircles._;
    while (node) {
      if (circle.y < node.y || circle.y === node.y && circle.x <= node.x) {
        if (node.L) node = node.L; else {
          before = node.P;
          break;
        }
      } else {
        if (node.R) node = node.R; else {
          before = node;
          break;
        }
      }
    }
    d3_geom_voronoiCircles.insert(before, circle);
    if (!before) d3_geom_voronoiFirstCircle = circle;
  }
  function d3_geom_voronoiDetachCircle(arc) {
    var circle = arc.circle;
    if (circle) {
      if (!circle.P) d3_geom_voronoiFirstCircle = circle.N;
      d3_geom_voronoiCircles.remove(circle);
      d3_geom_voronoiCirclePool.push(circle);
      d3_geom_voronoiRedBlackNode(circle);
      arc.circle = null;
    }
  }
  function d3_geom_voronoiClipEdges(extent) {
    var edges = d3_geom_voronoiEdges, clip = d3_geom_clipLine(extent[0][0], extent[0][1], extent[1][0], extent[1][1]), i = edges.length, e;
    while (i--) {
      e = edges[i];
      if (!d3_geom_voronoiConnectEdge(e, extent) || !clip(e) || abs(e.a.x - e.b.x) < ε && abs(e.a.y - e.b.y) < ε) {
        e.a = e.b = null;
        edges.splice(i, 1);
      }
    }
  }
  function d3_geom_voronoiConnectEdge(edge, extent) {
    var vb = edge.b;
    if (vb) return true;
    var va = edge.a, x0 = extent[0][0], x1 = extent[1][0], y0 = extent[0][1], y1 = extent[1][1], lSite = edge.l, rSite = edge.r, lx = lSite.x, ly = lSite.y, rx = rSite.x, ry = rSite.y, fx = (lx + rx) / 2, fy = (ly + ry) / 2, fm, fb;
    if (ry === ly) {
      if (fx < x0 || fx >= x1) return;
      if (lx > rx) {
        if (!va) va = {
          x: fx,
          y: y0
        }; else if (va.y >= y1) return;
        vb = {
          x: fx,
          y: y1
        };
      } else {
        if (!va) va = {
          x: fx,
          y: y1
        }; else if (va.y < y0) return;
        vb = {
          x: fx,
          y: y0
        };
      }
    } else {
      fm = (lx - rx) / (ry - ly);
      fb = fy - fm * fx;
      if (fm < -1 || fm > 1) {
        if (lx > rx) {
          if (!va) va = {
            x: (y0 - fb) / fm,
            y: y0
          }; else if (va.y >= y1) return;
          vb = {
            x: (y1 - fb) / fm,
            y: y1
          };
        } else {
          if (!va) va = {
            x: (y1 - fb) / fm,
            y: y1
          }; else if (va.y < y0) return;
          vb = {
            x: (y0 - fb) / fm,
            y: y0
          };
        }
      } else {
        if (ly < ry) {
          if (!va) va = {
            x: x0,
            y: fm * x0 + fb
          }; else if (va.x >= x1) return;
          vb = {
            x: x1,
            y: fm * x1 + fb
          };
        } else {
          if (!va) va = {
            x: x1,
            y: fm * x1 + fb
          }; else if (va.x < x0) return;
          vb = {
            x: x0,
            y: fm * x0 + fb
          };
        }
      }
    }
    edge.a = va;
    edge.b = vb;
    return true;
  }
  function d3_geom_voronoiEdge(lSite, rSite) {
    this.l = lSite;
    this.r = rSite;
    this.a = this.b = null;
  }
  function d3_geom_voronoiCreateEdge(lSite, rSite, va, vb) {
    var edge = new d3_geom_voronoiEdge(lSite, rSite);
    d3_geom_voronoiEdges.push(edge);
    if (va) d3_geom_voronoiSetEdgeEnd(edge, lSite, rSite, va);
    if (vb) d3_geom_voronoiSetEdgeEnd(edge, rSite, lSite, vb);
    d3_geom_voronoiCells[lSite.i].edges.push(new d3_geom_voronoiHalfEdge(edge, lSite, rSite));
    d3_geom_voronoiCells[rSite.i].edges.push(new d3_geom_voronoiHalfEdge(edge, rSite, lSite));
    return edge;
  }
  function d3_geom_voronoiCreateBorderEdge(lSite, va, vb) {
    var edge = new d3_geom_voronoiEdge(lSite, null);
    edge.a = va;
    edge.b = vb;
    d3_geom_voronoiEdges.push(edge);
    return edge;
  }
  function d3_geom_voronoiSetEdgeEnd(edge, lSite, rSite, vertex) {
    if (!edge.a && !edge.b) {
      edge.a = vertex;
      edge.l = lSite;
      edge.r = rSite;
    } else if (edge.l === rSite) {
      edge.b = vertex;
    } else {
      edge.a = vertex;
    }
  }
  function d3_geom_voronoiHalfEdge(edge, lSite, rSite) {
    var va = edge.a, vb = edge.b;
    this.edge = edge;
    this.site = lSite;
    this.angle = rSite ? Math.atan2(rSite.y - lSite.y, rSite.x - lSite.x) : edge.l === lSite ? Math.atan2(vb.x - va.x, va.y - vb.y) : Math.atan2(va.x - vb.x, vb.y - va.y);
  }
  d3_geom_voronoiHalfEdge.prototype = {
    start: function() {
      return this.edge.l === this.site ? this.edge.a : this.edge.b;
    },
    end: function() {
      return this.edge.l === this.site ? this.edge.b : this.edge.a;
    }
  };
  function d3_geom_voronoiRedBlackTree() {
    this._ = null;
  }
  function d3_geom_voronoiRedBlackNode(node) {
    node.U = node.C = node.L = node.R = node.P = node.N = null;
  }
  d3_geom_voronoiRedBlackTree.prototype = {
    insert: function(after, node) {
      var parent, grandpa, uncle;
      if (after) {
        node.P = after;
        node.N = after.N;
        if (after.N) after.N.P = node;
        after.N = node;
        if (after.R) {
          after = after.R;
          while (after.L) after = after.L;
          after.L = node;
        } else {
          after.R = node;
        }
        parent = after;
      } else if (this._) {
        after = d3_geom_voronoiRedBlackFirst(this._);
        node.P = null;
        node.N = after;
        after.P = after.L = node;
        parent = after;
      } else {
        node.P = node.N = null;
        this._ = node;
        parent = null;
      }
      node.L = node.R = null;
      node.U = parent;
      node.C = true;
      after = node;
      while (parent && parent.C) {
        grandpa = parent.U;
        if (parent === grandpa.L) {
          uncle = grandpa.R;
          if (uncle && uncle.C) {
            parent.C = uncle.C = false;
            grandpa.C = true;
            after = grandpa;
          } else {
            if (after === parent.R) {
              d3_geom_voronoiRedBlackRotateLeft(this, parent);
              after = parent;
              parent = after.U;
            }
            parent.C = false;
            grandpa.C = true;
            d3_geom_voronoiRedBlackRotateRight(this, grandpa);
          }
        } else {
          uncle = grandpa.L;
          if (uncle && uncle.C) {
            parent.C = uncle.C = false;
            grandpa.C = true;
            after = grandpa;
          } else {
            if (after === parent.L) {
              d3_geom_voronoiRedBlackRotateRight(this, parent);
              after = parent;
              parent = after.U;
            }
            parent.C = false;
            grandpa.C = true;
            d3_geom_voronoiRedBlackRotateLeft(this, grandpa);
          }
        }
        parent = after.U;
      }
      this._.C = false;
    },
    remove: function(node) {
      if (node.N) node.N.P = node.P;
      if (node.P) node.P.N = node.N;
      node.N = node.P = null;
      var parent = node.U, sibling, left = node.L, right = node.R, next, red;
      if (!left) next = right; else if (!right) next = left; else next = d3_geom_voronoiRedBlackFirst(right);
      if (parent) {
        if (parent.L === node) parent.L = next; else parent.R = next;
      } else {
        this._ = next;
      }
      if (left && right) {
        red = next.C;
        next.C = node.C;
        next.L = left;
        left.U = next;
        if (next !== right) {
          parent = next.U;
          next.U = node.U;
          node = next.R;
          parent.L = node;
          next.R = right;
          right.U = next;
        } else {
          next.U = parent;
          parent = next;
          node = next.R;
        }
      } else {
        red = node.C;
        node = next;
      }
      if (node) node.U = parent;
      if (red) return;
      if (node && node.C) {
        node.C = false;
        return;
      }
      do {
        if (node === this._) break;
        if (node === parent.L) {
          sibling = parent.R;
          if (sibling.C) {
            sibling.C = false;
            parent.C = true;
            d3_geom_voronoiRedBlackRotateLeft(this, parent);
            sibling = parent.R;
          }
          if (sibling.L && sibling.L.C || sibling.R && sibling.R.C) {
            if (!sibling.R || !sibling.R.C) {
              sibling.L.C = false;
              sibling.C = true;
              d3_geom_voronoiRedBlackRotateRight(this, sibling);
              sibling = parent.R;
            }
            sibling.C = parent.C;
            parent.C = sibling.R.C = false;
            d3_geom_voronoiRedBlackRotateLeft(this, parent);
            node = this._;
            break;
          }
        } else {
          sibling = parent.L;
          if (sibling.C) {
            sibling.C = false;
            parent.C = true;
            d3_geom_voronoiRedBlackRotateRight(this, parent);
            sibling = parent.L;
          }
          if (sibling.L && sibling.L.C || sibling.R && sibling.R.C) {
            if (!sibling.L || !sibling.L.C) {
              sibling.R.C = false;
              sibling.C = true;
              d3_geom_voronoiRedBlackRotateLeft(this, sibling);
              sibling = parent.L;
            }
            sibling.C = parent.C;
            parent.C = sibling.L.C = false;
            d3_geom_voronoiRedBlackRotateRight(this, parent);
            node = this._;
            break;
          }
        }
        sibling.C = true;
        node = parent;
        parent = parent.U;
      } while (!node.C);
      if (node) node.C = false;
    }
  };
  function d3_geom_voronoiRedBlackRotateLeft(tree, node) {
    var p = node, q = node.R, parent = p.U;
    if (parent) {
      if (parent.L === p) parent.L = q; else parent.R = q;
    } else {
      tree._ = q;
    }
    q.U = parent;
    p.U = q;
    p.R = q.L;
    if (p.R) p.R.U = p;
    q.L = p;
  }
  function d3_geom_voronoiRedBlackRotateRight(tree, node) {
    var p = node, q = node.L, parent = p.U;
    if (parent) {
      if (parent.L === p) parent.L = q; else parent.R = q;
    } else {
      tree._ = q;
    }
    q.U = parent;
    p.U = q;
    p.L = q.R;
    if (p.L) p.L.U = p;
    q.R = p;
  }
  function d3_geom_voronoiRedBlackFirst(node) {
    while (node.L) node = node.L;
    return node;
  }
  function d3_geom_voronoi(sites, bbox) {
    var site = sites.sort(d3_geom_voronoiVertexOrder).pop(), x0, y0, circle;
    d3_geom_voronoiEdges = [];
    d3_geom_voronoiCells = new Array(sites.length);
    d3_geom_voronoiBeaches = new d3_geom_voronoiRedBlackTree();
    d3_geom_voronoiCircles = new d3_geom_voronoiRedBlackTree();
    while (true) {
      circle = d3_geom_voronoiFirstCircle;
      if (site && (!circle || site.y < circle.y || site.y === circle.y && site.x < circle.x)) {
        if (site.x !== x0 || site.y !== y0) {
          d3_geom_voronoiCells[site.i] = new d3_geom_voronoiCell(site);
          d3_geom_voronoiAddBeach(site);
          x0 = site.x, y0 = site.y;
        }
        site = sites.pop();
      } else if (circle) {
        d3_geom_voronoiRemoveBeach(circle.arc);
      } else {
        break;
      }
    }
    if (bbox) d3_geom_voronoiClipEdges(bbox), d3_geom_voronoiCloseCells(bbox);
    var diagram = {
      cells: d3_geom_voronoiCells,
      edges: d3_geom_voronoiEdges
    };
    d3_geom_voronoiBeaches = d3_geom_voronoiCircles = d3_geom_voronoiEdges = d3_geom_voronoiCells = null;
    return diagram;
  }
  function d3_geom_voronoiVertexOrder(a, b) {
    return b.y - a.y || b.x - a.x;
  }
  d3.geom.voronoi = function(points) {
    var x = d3_geom_pointX, y = d3_geom_pointY, fx = x, fy = y, clipExtent = d3_geom_voronoiClipExtent;
    if (points) return voronoi(points);
    function voronoi(data) {
      var polygons = new Array(data.length), x0 = clipExtent[0][0], y0 = clipExtent[0][1], x1 = clipExtent[1][0], y1 = clipExtent[1][1];
      d3_geom_voronoi(sites(data), clipExtent).cells.forEach(function(cell, i) {
        var edges = cell.edges, site = cell.site, polygon = polygons[i] = edges.length ? edges.map(function(e) {
          var s = e.start();
          return [ s.x, s.y ];
        }) : site.x >= x0 && site.x <= x1 && site.y >= y0 && site.y <= y1 ? [ [ x0, y1 ], [ x1, y1 ], [ x1, y0 ], [ x0, y0 ] ] : [];
        polygon.point = data[i];
      });
      return polygons;
    }
    function sites(data) {
      return data.map(function(d, i) {
        return {
          x: Math.round(fx(d, i) / ε) * ε,
          y: Math.round(fy(d, i) / ε) * ε,
          i: i
        };
      });
    }
    voronoi.links = function(data) {
      return d3_geom_voronoi(sites(data)).edges.filter(function(edge) {
        return edge.l && edge.r;
      }).map(function(edge) {
        return {
          source: data[edge.l.i],
          target: data[edge.r.i]
        };
      });
    };
    voronoi.triangles = function(data) {
      var triangles = [];
      d3_geom_voronoi(sites(data)).cells.forEach(function(cell, i) {
        var site = cell.site, edges = cell.edges.sort(d3_geom_voronoiHalfEdgeOrder), j = -1, m = edges.length, e0, s0, e1 = edges[m - 1].edge, s1 = e1.l === site ? e1.r : e1.l;
        while (++j < m) {
          e0 = e1;
          s0 = s1;
          e1 = edges[j].edge;
          s1 = e1.l === site ? e1.r : e1.l;
          if (i < s0.i && i < s1.i && d3_geom_voronoiTriangleArea(site, s0, s1) < 0) {
            triangles.push([ data[i], data[s0.i], data[s1.i] ]);
          }
        }
      });
      return triangles;
    };
    voronoi.x = function(_) {
      return arguments.length ? (fx = d3_functor(x = _), voronoi) : x;
    };
    voronoi.y = function(_) {
      return arguments.length ? (fy = d3_functor(y = _), voronoi) : y;
    };
    voronoi.clipExtent = function(_) {
      if (!arguments.length) return clipExtent === d3_geom_voronoiClipExtent ? null : clipExtent;
      clipExtent = _ == null ? d3_geom_voronoiClipExtent : _;
      return voronoi;
    };
    voronoi.size = function(_) {
      if (!arguments.length) return clipExtent === d3_geom_voronoiClipExtent ? null : clipExtent && clipExtent[1];
      return voronoi.clipExtent(_ && [ [ 0, 0 ], _ ]);
    };
    return voronoi;
  };
  var d3_geom_voronoiClipExtent = [ [ -1e6, -1e6 ], [ 1e6, 1e6 ] ];
  function d3_geom_voronoiTriangleArea(a, b, c) {
    return (a.x - c.x) * (b.y - a.y) - (a.x - b.x) * (c.y - a.y);
  }
  d3.geom.delaunay = function(vertices) {
    return d3.geom.voronoi().triangles(vertices);
  };
  d3.geom.quadtree = function(points, x1, y1, x2, y2) {
    var x = d3_geom_pointX, y = d3_geom_pointY, compat;
    if (compat = arguments.length) {
      x = d3_geom_quadtreeCompatX;
      y = d3_geom_quadtreeCompatY;
      if (compat === 3) {
        y2 = y1;
        x2 = x1;
        y1 = x1 = 0;
      }
      return quadtree(points);
    }
    function quadtree(data) {
      var d, fx = d3_functor(x), fy = d3_functor(y), xs, ys, i, n, x1_, y1_, x2_, y2_;
      if (x1 != null) {
        x1_ = x1, y1_ = y1, x2_ = x2, y2_ = y2;
      } else {
        x2_ = y2_ = -(x1_ = y1_ = Infinity);
        xs = [], ys = [];
        n = data.length;
        if (compat) for (i = 0; i < n; ++i) {
          d = data[i];
          if (d.x < x1_) x1_ = d.x;
          if (d.y < y1_) y1_ = d.y;
          if (d.x > x2_) x2_ = d.x;
          if (d.y > y2_) y2_ = d.y;
          xs.push(d.x);
          ys.push(d.y);
        } else for (i = 0; i < n; ++i) {
          var x_ = +fx(d = data[i], i), y_ = +fy(d, i);
          if (x_ < x1_) x1_ = x_;
          if (y_ < y1_) y1_ = y_;
          if (x_ > x2_) x2_ = x_;
          if (y_ > y2_) y2_ = y_;
          xs.push(x_);
          ys.push(y_);
        }
      }
      var dx = x2_ - x1_, dy = y2_ - y1_;
      if (dx > dy) y2_ = y1_ + dx; else x2_ = x1_ + dy;
      function insert(n, d, x, y, x1, y1, x2, y2) {
        if (isNaN(x) || isNaN(y)) return;
        if (n.leaf) {
          var nx = n.x, ny = n.y;
          if (nx != null) {
            if (abs(nx - x) + abs(ny - y) < .01) {
              insertChild(n, d, x, y, x1, y1, x2, y2);
            } else {
              var nPoint = n.point;
              n.x = n.y = n.point = null;
              insertChild(n, nPoint, nx, ny, x1, y1, x2, y2);
              insertChild(n, d, x, y, x1, y1, x2, y2);
            }
          } else {
            n.x = x, n.y = y, n.point = d;
          }
        } else {
          insertChild(n, d, x, y, x1, y1, x2, y2);
        }
      }
      function insertChild(n, d, x, y, x1, y1, x2, y2) {
        var xm = (x1 + x2) * .5, ym = (y1 + y2) * .5, right = x >= xm, below = y >= ym, i = below << 1 | right;
        n.leaf = false;
        n = n.nodes[i] || (n.nodes[i] = d3_geom_quadtreeNode());
        if (right) x1 = xm; else x2 = xm;
        if (below) y1 = ym; else y2 = ym;
        insert(n, d, x, y, x1, y1, x2, y2);
      }
      var root = d3_geom_quadtreeNode();
      root.add = function(d) {
        insert(root, d, +fx(d, ++i), +fy(d, i), x1_, y1_, x2_, y2_);
      };
      root.visit = function(f) {
        d3_geom_quadtreeVisit(f, root, x1_, y1_, x2_, y2_);
      };
      root.find = function(point) {
        return d3_geom_quadtreeFind(root, point[0], point[1], x1_, y1_, x2_, y2_);
      };
      i = -1;
      if (x1 == null) {
        while (++i < n) {
          insert(root, data[i], xs[i], ys[i], x1_, y1_, x2_, y2_);
        }
        --i;
      } else data.forEach(root.add);
      xs = ys = data = d = null;
      return root;
    }
    quadtree.x = function(_) {
      return arguments.length ? (x = _, quadtree) : x;
    };
    quadtree.y = function(_) {
      return arguments.length ? (y = _, quadtree) : y;
    };
    quadtree.extent = function(_) {
      if (!arguments.length) return x1 == null ? null : [ [ x1, y1 ], [ x2, y2 ] ];
      if (_ == null) x1 = y1 = x2 = y2 = null; else x1 = +_[0][0], y1 = +_[0][1], x2 = +_[1][0], 
      y2 = +_[1][1];
      return quadtree;
    };
    quadtree.size = function(_) {
      if (!arguments.length) return x1 == null ? null : [ x2 - x1, y2 - y1 ];
      if (_ == null) x1 = y1 = x2 = y2 = null; else x1 = y1 = 0, x2 = +_[0], y2 = +_[1];
      return quadtree;
    };
    return quadtree;
  };
  function d3_geom_quadtreeCompatX(d) {
    return d.x;
  }
  function d3_geom_quadtreeCompatY(d) {
    return d.y;
  }
  function d3_geom_quadtreeNode() {
    return {
      leaf: true,
      nodes: [],
      point: null,
      x: null,
      y: null
    };
  }
  function d3_geom_quadtreeVisit(f, node, x1, y1, x2, y2) {
    if (!f(node, x1, y1, x2, y2)) {
      var sx = (x1 + x2) * .5, sy = (y1 + y2) * .5, children = node.nodes;
      if (children[0]) d3_geom_quadtreeVisit(f, children[0], x1, y1, sx, sy);
      if (children[1]) d3_geom_quadtreeVisit(f, children[1], sx, y1, x2, sy);
      if (children[2]) d3_geom_quadtreeVisit(f, children[2], x1, sy, sx, y2);
      if (children[3]) d3_geom_quadtreeVisit(f, children[3], sx, sy, x2, y2);
    }
  }
  function d3_geom_quadtreeFind(root, x, y, x0, y0, x3, y3) {
    var minDistance2 = Infinity, closestPoint;
    (function find(node, x1, y1, x2, y2) {
      if (x1 > x3 || y1 > y3 || x2 < x0 || y2 < y0) return;
      if (point = node.point) {
        var point, dx = x - node.x, dy = y - node.y, distance2 = dx * dx + dy * dy;
        if (distance2 < minDistance2) {
          var distance = Math.sqrt(minDistance2 = distance2);
          x0 = x - distance, y0 = y - distance;
          x3 = x + distance, y3 = y + distance;
          closestPoint = point;
        }
      }
      var children = node.nodes, xm = (x1 + x2) * .5, ym = (y1 + y2) * .5, right = x >= xm, below = y >= ym;
      for (var i = below << 1 | right, j = i + 4; i < j; ++i) {
        if (node = children[i & 3]) switch (i & 3) {
         case 0:
          find(node, x1, y1, xm, ym);
          break;

         case 1:
          find(node, xm, y1, x2, ym);
          break;

         case 2:
          find(node, x1, ym, xm, y2);
          break;

         case 3:
          find(node, xm, ym, x2, y2);
          break;
        }
      }
    })(root, x0, y0, x3, y3);
    return closestPoint;
  }
  d3.interpolateRgb = d3_interpolateRgb;
  function d3_interpolateRgb(a, b) {
    a = d3.rgb(a);
    b = d3.rgb(b);
    var ar = a.r, ag = a.g, ab = a.b, br = b.r - ar, bg = b.g - ag, bb = b.b - ab;
    return function(t) {
      return "#" + d3_rgb_hex(Math.round(ar + br * t)) + d3_rgb_hex(Math.round(ag + bg * t)) + d3_rgb_hex(Math.round(ab + bb * t));
    };
  }
  d3.interpolateObject = d3_interpolateObject;
  function d3_interpolateObject(a, b) {
    var i = {}, c = {}, k;
    for (k in a) {
      if (k in b) {
        i[k] = d3_interpolate(a[k], b[k]);
      } else {
        c[k] = a[k];
      }
    }
    for (k in b) {
      if (!(k in a)) {
        c[k] = b[k];
      }
    }
    return function(t) {
      for (k in i) c[k] = i[k](t);
      return c;
    };
  }
  d3.interpolateNumber = d3_interpolateNumber;
  function d3_interpolateNumber(a, b) {
    a = +a, b = +b;
    return function(t) {
      return a * (1 - t) + b * t;
    };
  }
  d3.interpolateString = d3_interpolateString;
  function d3_interpolateString(a, b) {
    var bi = d3_interpolate_numberA.lastIndex = d3_interpolate_numberB.lastIndex = 0, am, bm, bs, i = -1, s = [], q = [];
    a = a + "", b = b + "";
    while ((am = d3_interpolate_numberA.exec(a)) && (bm = d3_interpolate_numberB.exec(b))) {
      if ((bs = bm.index) > bi) {
        bs = b.slice(bi, bs);
        if (s[i]) s[i] += bs; else s[++i] = bs;
      }
      if ((am = am[0]) === (bm = bm[0])) {
        if (s[i]) s[i] += bm; else s[++i] = bm;
      } else {
        s[++i] = null;
        q.push({
          i: i,
          x: d3_interpolateNumber(am, bm)
        });
      }
      bi = d3_interpolate_numberB.lastIndex;
    }
    if (bi < b.length) {
      bs = b.slice(bi);
      if (s[i]) s[i] += bs; else s[++i] = bs;
    }
    return s.length < 2 ? q[0] ? (b = q[0].x, function(t) {
      return b(t) + "";
    }) : function() {
      return b;
    } : (b = q.length, function(t) {
      for (var i = 0, o; i < b; ++i) s[(o = q[i]).i] = o.x(t);
      return s.join("");
    });
  }
  var d3_interpolate_numberA = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g, d3_interpolate_numberB = new RegExp(d3_interpolate_numberA.source, "g");
  d3.interpolate = d3_interpolate;
  function d3_interpolate(a, b) {
    var i = d3.interpolators.length, f;
    while (--i >= 0 && !(f = d3.interpolators[i](a, b))) ;
    return f;
  }
  d3.interpolators = [ function(a, b) {
    var t = typeof b;
    return (t === "string" ? d3_rgb_names.has(b.toLowerCase()) || /^(#|rgb\(|hsl\()/i.test(b) ? d3_interpolateRgb : d3_interpolateString : b instanceof d3_color ? d3_interpolateRgb : Array.isArray(b) ? d3_interpolateArray : t === "object" && isNaN(b) ? d3_interpolateObject : d3_interpolateNumber)(a, b);
  } ];
  d3.interpolateArray = d3_interpolateArray;
  function d3_interpolateArray(a, b) {
    var x = [], c = [], na = a.length, nb = b.length, n0 = Math.min(a.length, b.length), i;
    for (i = 0; i < n0; ++i) x.push(d3_interpolate(a[i], b[i]));
    for (;i < na; ++i) c[i] = a[i];
    for (;i < nb; ++i) c[i] = b[i];
    return function(t) {
      for (i = 0; i < n0; ++i) c[i] = x[i](t);
      return c;
    };
  }
  var d3_ease_default = function() {
    return d3_identity;
  };
  var d3_ease = d3.map({
    linear: d3_ease_default,
    poly: d3_ease_poly,
    quad: function() {
      return d3_ease_quad;
    },
    cubic: function() {
      return d3_ease_cubic;
    },
    sin: function() {
      return d3_ease_sin;
    },
    exp: function() {
      return d3_ease_exp;
    },
    circle: function() {
      return d3_ease_circle;
    },
    elastic: d3_ease_elastic,
    back: d3_ease_back,
    bounce: function() {
      return d3_ease_bounce;
    }
  });
  var d3_ease_mode = d3.map({
    "in": d3_identity,
    out: d3_ease_reverse,
    "in-out": d3_ease_reflect,
    "out-in": function(f) {
      return d3_ease_reflect(d3_ease_reverse(f));
    }
  });
  d3.ease = function(name) {
    var i = name.indexOf("-"), t = i >= 0 ? name.slice(0, i) : name, m = i >= 0 ? name.slice(i + 1) : "in";
    t = d3_ease.get(t) || d3_ease_default;
    m = d3_ease_mode.get(m) || d3_identity;
    return d3_ease_clamp(m(t.apply(null, d3_arraySlice.call(arguments, 1))));
  };
  function d3_ease_clamp(f) {
    return function(t) {
      return t <= 0 ? 0 : t >= 1 ? 1 : f(t);
    };
  }
  function d3_ease_reverse(f) {
    return function(t) {
      return 1 - f(1 - t);
    };
  }
  function d3_ease_reflect(f) {
    return function(t) {
      return .5 * (t < .5 ? f(2 * t) : 2 - f(2 - 2 * t));
    };
  }
  function d3_ease_quad(t) {
    return t * t;
  }
  function d3_ease_cubic(t) {
    return t * t * t;
  }
  function d3_ease_cubicInOut(t) {
    if (t <= 0) return 0;
    if (t >= 1) return 1;
    var t2 = t * t, t3 = t2 * t;
    return 4 * (t < .5 ? t3 : 3 * (t - t2) + t3 - .75);
  }
  function d3_ease_poly(e) {
    return function(t) {
      return Math.pow(t, e);
    };
  }
  function d3_ease_sin(t) {
    return 1 - Math.cos(t * halfπ);
  }
  function d3_ease_exp(t) {
    return Math.pow(2, 10 * (t - 1));
  }
  function d3_ease_circle(t) {
    return 1 - Math.sqrt(1 - t * t);
  }
  function d3_ease_elastic(a, p) {
    var s;
    if (arguments.length < 2) p = .45;
    if (arguments.length) s = p / τ * Math.asin(1 / a); else a = 1, s = p / 4;
    return function(t) {
      return 1 + a * Math.pow(2, -10 * t) * Math.sin((t - s) * τ / p);
    };
  }
  function d3_ease_back(s) {
    if (!s) s = 1.70158;
    return function(t) {
      return t * t * ((s + 1) * t - s);
    };
  }
  function d3_ease_bounce(t) {
    return t < 1 / 2.75 ? 7.5625 * t * t : t < 2 / 2.75 ? 7.5625 * (t -= 1.5 / 2.75) * t + .75 : t < 2.5 / 2.75 ? 7.5625 * (t -= 2.25 / 2.75) * t + .9375 : 7.5625 * (t -= 2.625 / 2.75) * t + .984375;
  }
  d3.interpolateHcl = d3_interpolateHcl;
  function d3_interpolateHcl(a, b) {
    a = d3.hcl(a);
    b = d3.hcl(b);
    var ah = a.h, ac = a.c, al = a.l, bh = b.h - ah, bc = b.c - ac, bl = b.l - al;
    if (isNaN(bc)) bc = 0, ac = isNaN(ac) ? b.c : ac;
    if (isNaN(bh)) bh = 0, ah = isNaN(ah) ? b.h : ah; else if (bh > 180) bh -= 360; else if (bh < -180) bh += 360;
    return function(t) {
      return d3_hcl_lab(ah + bh * t, ac + bc * t, al + bl * t) + "";
    };
  }
  d3.interpolateHsl = d3_interpolateHsl;
  function d3_interpolateHsl(a, b) {
    a = d3.hsl(a);
    b = d3.hsl(b);
    var ah = a.h, as = a.s, al = a.l, bh = b.h - ah, bs = b.s - as, bl = b.l - al;
    if (isNaN(bs)) bs = 0, as = isNaN(as) ? b.s : as;
    if (isNaN(bh)) bh = 0, ah = isNaN(ah) ? b.h : ah; else if (bh > 180) bh -= 360; else if (bh < -180) bh += 360;
    return function(t) {
      return d3_hsl_rgb(ah + bh * t, as + bs * t, al + bl * t) + "";
    };
  }
  d3.interpolateLab = d3_interpolateLab;
  function d3_interpolateLab(a, b) {
    a = d3.lab(a);
    b = d3.lab(b);
    var al = a.l, aa = a.a, ab = a.b, bl = b.l - al, ba = b.a - aa, bb = b.b - ab;
    return function(t) {
      return d3_lab_rgb(al + bl * t, aa + ba * t, ab + bb * t) + "";
    };
  }
  d3.interpolateRound = d3_interpolateRound;
  function d3_interpolateRound(a, b) {
    b -= a;
    return function(t) {
      return Math.round(a + b * t);
    };
  }
  d3.transform = function(string) {
    var g = d3_document.createElementNS(d3.ns.prefix.svg, "g");
    return (d3.transform = function(string) {
      if (string != null) {
        g.setAttribute("transform", string);
        var t = g.transform.baseVal.consolidate();
      }
      return new d3_transform(t ? t.matrix : d3_transformIdentity);
    })(string);
  };
  function d3_transform(m) {
    var r0 = [ m.a, m.b ], r1 = [ m.c, m.d ], kx = d3_transformNormalize(r0), kz = d3_transformDot(r0, r1), ky = d3_transformNormalize(d3_transformCombine(r1, r0, -kz)) || 0;
    if (r0[0] * r1[1] < r1[0] * r0[1]) {
      r0[0] *= -1;
      r0[1] *= -1;
      kx *= -1;
      kz *= -1;
    }
    this.rotate = (kx ? Math.atan2(r0[1], r0[0]) : Math.atan2(-r1[0], r1[1])) * d3_degrees;
    this.translate = [ m.e, m.f ];
    this.scale = [ kx, ky ];
    this.skew = ky ? Math.atan2(kz, ky) * d3_degrees : 0;
  }
  d3_transform.prototype.toString = function() {
    return "translate(" + this.translate + ")rotate(" + this.rotate + ")skewX(" + this.skew + ")scale(" + this.scale + ")";
  };
  function d3_transformDot(a, b) {
    return a[0] * b[0] + a[1] * b[1];
  }
  function d3_transformNormalize(a) {
    var k = Math.sqrt(d3_transformDot(a, a));
    if (k) {
      a[0] /= k;
      a[1] /= k;
    }
    return k;
  }
  function d3_transformCombine(a, b, k) {
    a[0] += k * b[0];
    a[1] += k * b[1];
    return a;
  }
  var d3_transformIdentity = {
    a: 1,
    b: 0,
    c: 0,
    d: 1,
    e: 0,
    f: 0
  };
  d3.interpolateTransform = d3_interpolateTransform;
  function d3_interpolateTransformPop(s) {
    return s.length ? s.pop() + "," : "";
  }
  function d3_interpolateTranslate(ta, tb, s, q) {
    if (ta[0] !== tb[0] || ta[1] !== tb[1]) {
      var i = s.push("translate(", null, ",", null, ")");
      q.push({
        i: i - 4,
        x: d3_interpolateNumber(ta[0], tb[0])
      }, {
        i: i - 2,
        x: d3_interpolateNumber(ta[1], tb[1])
      });
    } else if (tb[0] || tb[1]) {
      s.push("translate(" + tb + ")");
    }
  }
  function d3_interpolateRotate(ra, rb, s, q) {
    if (ra !== rb) {
      if (ra - rb > 180) rb += 360; else if (rb - ra > 180) ra += 360;
      q.push({
        i: s.push(d3_interpolateTransformPop(s) + "rotate(", null, ")") - 2,
        x: d3_interpolateNumber(ra, rb)
      });
    } else if (rb) {
      s.push(d3_interpolateTransformPop(s) + "rotate(" + rb + ")");
    }
  }
  function d3_interpolateSkew(wa, wb, s, q) {
    if (wa !== wb) {
      q.push({
        i: s.push(d3_interpolateTransformPop(s) + "skewX(", null, ")") - 2,
        x: d3_interpolateNumber(wa, wb)
      });
    } else if (wb) {
      s.push(d3_interpolateTransformPop(s) + "skewX(" + wb + ")");
    }
  }
  function d3_interpolateScale(ka, kb, s, q) {
    if (ka[0] !== kb[0] || ka[1] !== kb[1]) {
      var i = s.push(d3_interpolateTransformPop(s) + "scale(", null, ",", null, ")");
      q.push({
        i: i - 4,
        x: d3_interpolateNumber(ka[0], kb[0])
      }, {
        i: i - 2,
        x: d3_interpolateNumber(ka[1], kb[1])
      });
    } else if (kb[0] !== 1 || kb[1] !== 1) {
      s.push(d3_interpolateTransformPop(s) + "scale(" + kb + ")");
    }
  }
  function d3_interpolateTransform(a, b) {
    var s = [], q = [];
    a = d3.transform(a), b = d3.transform(b);
    d3_interpolateTranslate(a.translate, b.translate, s, q);
    d3_interpolateRotate(a.rotate, b.rotate, s, q);
    d3_interpolateSkew(a.skew, b.skew, s, q);
    d3_interpolateScale(a.scale, b.scale, s, q);
    a = b = null;
    return function(t) {
      var i = -1, n = q.length, o;
      while (++i < n) s[(o = q[i]).i] = o.x(t);
      return s.join("");
    };
  }
  function d3_uninterpolateNumber(a, b) {
    b = (b -= a = +a) || 1 / b;
    return function(x) {
      return (x - a) / b;
    };
  }
  function d3_uninterpolateClamp(a, b) {
    b = (b -= a = +a) || 1 / b;
    return function(x) {
      return Math.max(0, Math.min(1, (x - a) / b));
    };
  }
  d3.layout = {};
  d3.layout.bundle = function() {
    return function(links) {
      var paths = [], i = -1, n = links.length;
      while (++i < n) paths.push(d3_layout_bundlePath(links[i]));
      return paths;
    };
  };
  function d3_layout_bundlePath(link) {
    var start = link.source, end = link.target, lca = d3_layout_bundleLeastCommonAncestor(start, end), points = [ start ];
    while (start !== lca) {
      start = start.parent;
      points.push(start);
    }
    var k = points.length;
    while (end !== lca) {
      points.splice(k, 0, end);
      end = end.parent;
    }
    return points;
  }
  function d3_layout_bundleAncestors(node) {
    var ancestors = [], parent = node.parent;
    while (parent != null) {
      ancestors.push(node);
      node = parent;
      parent = parent.parent;
    }
    ancestors.push(node);
    return ancestors;
  }
  function d3_layout_bundleLeastCommonAncestor(a, b) {
    if (a === b) return a;
    var aNodes = d3_layout_bundleAncestors(a), bNodes = d3_layout_bundleAncestors(b), aNode = aNodes.pop(), bNode = bNodes.pop(), sharedNode = null;
    while (aNode === bNode) {
      sharedNode = aNode;
      aNode = aNodes.pop();
      bNode = bNodes.pop();
    }
    return sharedNode;
  }
  d3.layout.chord = function() {
    var chord = {}, chords, groups, matrix, n, padding = 0, sortGroups, sortSubgroups, sortChords;
    function relayout() {
      var subgroups = {}, groupSums = [], groupIndex = d3.range(n), subgroupIndex = [], k, x, x0, i, j;
      chords = [];
      groups = [];
      k = 0, i = -1;
      while (++i < n) {
        x = 0, j = -1;
        while (++j < n) {
          x += matrix[i][j];
        }
        groupSums.push(x);
        subgroupIndex.push(d3.range(n));
        k += x;
      }
      if (sortGroups) {
        groupIndex.sort(function(a, b) {
          return sortGroups(groupSums[a], groupSums[b]);
        });
      }
      if (sortSubgroups) {
        subgroupIndex.forEach(function(d, i) {
          d.sort(function(a, b) {
            return sortSubgroups(matrix[i][a], matrix[i][b]);
          });
        });
      }
      k = (τ - padding * n) / k;
      x = 0, i = -1;
      while (++i < n) {
        x0 = x, j = -1;
        while (++j < n) {
          var di = groupIndex[i], dj = subgroupIndex[di][j], v = matrix[di][dj], a0 = x, a1 = x += v * k;
          subgroups[di + "-" + dj] = {
            index: di,
            subindex: dj,
            startAngle: a0,
            endAngle: a1,
            value: v
          };
        }
        groups[di] = {
          index: di,
          startAngle: x0,
          endAngle: x,
          value: groupSums[di]
        };
        x += padding;
      }
      i = -1;
      while (++i < n) {
        j = i - 1;
        while (++j < n) {
          var source = subgroups[i + "-" + j], target = subgroups[j + "-" + i];
          if (source.value || target.value) {
            chords.push(source.value < target.value ? {
              source: target,
              target: source
            } : {
              source: source,
              target: target
            });
          }
        }
      }
      if (sortChords) resort();
    }
    function resort() {
      chords.sort(function(a, b) {
        return sortChords((a.source.value + a.target.value) / 2, (b.source.value + b.target.value) / 2);
      });
    }
    chord.matrix = function(x) {
      if (!arguments.length) return matrix;
      n = (matrix = x) && matrix.length;
      chords = groups = null;
      return chord;
    };
    chord.padding = function(x) {
      if (!arguments.length) return padding;
      padding = x;
      chords = groups = null;
      return chord;
    };
    chord.sortGroups = function(x) {
      if (!arguments.length) return sortGroups;
      sortGroups = x;
      chords = groups = null;
      return chord;
    };
    chord.sortSubgroups = function(x) {
      if (!arguments.length) return sortSubgroups;
      sortSubgroups = x;
      chords = null;
      return chord;
    };
    chord.sortChords = function(x) {
      if (!arguments.length) return sortChords;
      sortChords = x;
      if (chords) resort();
      return chord;
    };
    chord.chords = function() {
      if (!chords) relayout();
      return chords;
    };
    chord.groups = function() {
      if (!groups) relayout();
      return groups;
    };
    return chord;
  };
  d3.layout.force = function() {
    var force = {}, event = d3.dispatch("start", "tick", "end"), timer, size = [ 1, 1 ], drag, alpha, friction = .9, linkDistance = d3_layout_forceLinkDistance, linkStrength = d3_layout_forceLinkStrength, charge = -30, chargeDistance2 = d3_layout_forceChargeDistance2, gravity = .1, theta2 = .64, nodes = [], links = [], distances, strengths, charges;
    function repulse(node) {
      return function(quad, x1, _, x2) {
        if (quad.point !== node) {
          var dx = quad.cx - node.x, dy = quad.cy - node.y, dw = x2 - x1, dn = dx * dx + dy * dy;
          if (dw * dw / theta2 < dn) {
            if (dn < chargeDistance2) {
              var k = quad.charge / dn;
              node.px -= dx * k;
              node.py -= dy * k;
            }
            return true;
          }
          if (quad.point && dn && dn < chargeDistance2) {
            var k = quad.pointCharge / dn;
            node.px -= dx * k;
            node.py -= dy * k;
          }
        }
        return !quad.charge;
      };
    }
    force.tick = function() {
      if ((alpha *= .99) < .005) {
        timer = null;
        event.end({
          type: "end",
          alpha: alpha = 0
        });
        return true;
      }
      var n = nodes.length, m = links.length, q, i, o, s, t, l, k, x, y;
      for (i = 0; i < m; ++i) {
        o = links[i];
        s = o.source;
        t = o.target;
        x = t.x - s.x;
        y = t.y - s.y;
        if (l = x * x + y * y) {
          l = alpha * strengths[i] * ((l = Math.sqrt(l)) - distances[i]) / l;
          x *= l;
          y *= l;
          t.x -= x * (k = s.weight + t.weight ? s.weight / (s.weight + t.weight) : .5);
          t.y -= y * k;
          s.x += x * (k = 1 - k);
          s.y += y * k;
        }
      }
      if (k = alpha * gravity) {
        x = size[0] / 2;
        y = size[1] / 2;
        i = -1;
        if (k) while (++i < n) {
          o = nodes[i];
          o.x += (x - o.x) * k;
          o.y += (y - o.y) * k;
        }
      }
      if (charge) {
        d3_layout_forceAccumulate(q = d3.geom.quadtree(nodes), alpha, charges);
        i = -1;
        while (++i < n) {
          if (!(o = nodes[i]).fixed) {
            q.visit(repulse(o));
          }
        }
      }
      i = -1;
      while (++i < n) {
        o = nodes[i];
        if (o.fixed) {
          o.x = o.px;
          o.y = o.py;
        } else {
          o.x -= (o.px - (o.px = o.x)) * friction;
          o.y -= (o.py - (o.py = o.y)) * friction;
        }
      }
      event.tick({
        type: "tick",
        alpha: alpha
      });
    };
    force.nodes = function(x) {
      if (!arguments.length) return nodes;
      nodes = x;
      return force;
    };
    force.links = function(x) {
      if (!arguments.length) return links;
      links = x;
      return force;
    };
    force.size = function(x) {
      if (!arguments.length) return size;
      size = x;
      return force;
    };
    force.linkDistance = function(x) {
      if (!arguments.length) return linkDistance;
      linkDistance = typeof x === "function" ? x : +x;
      return force;
    };
    force.distance = force.linkDistance;
    force.linkStrength = function(x) {
      if (!arguments.length) return linkStrength;
      linkStrength = typeof x === "function" ? x : +x;
      return force;
    };
    force.friction = function(x) {
      if (!arguments.length) return friction;
      friction = +x;
      return force;
    };
    force.charge = function(x) {
      if (!arguments.length) return charge;
      charge = typeof x === "function" ? x : +x;
      return force;
    };
    force.chargeDistance = function(x) {
      if (!arguments.length) return Math.sqrt(chargeDistance2);
      chargeDistance2 = x * x;
      return force;
    };
    force.gravity = function(x) {
      if (!arguments.length) return gravity;
      gravity = +x;
      return force;
    };
    force.theta = function(x) {
      if (!arguments.length) return Math.sqrt(theta2);
      theta2 = x * x;
      return force;
    };
    force.alpha = function(x) {
      if (!arguments.length) return alpha;
      x = +x;
      if (alpha) {
        if (x > 0) {
          alpha = x;
        } else {
          timer.c = null, timer.t = NaN, timer = null;
          event.end({
            type: "end",
            alpha: alpha = 0
          });
        }
      } else if (x > 0) {
        event.start({
          type: "start",
          alpha: alpha = x
        });
        timer = d3_timer(force.tick);
      }
      return force;
    };
    force.start = function() {
      var i, n = nodes.length, m = links.length, w = size[0], h = size[1], neighbors, o;
      for (i = 0; i < n; ++i) {
        (o = nodes[i]).index = i;
        o.weight = 0;
      }
      for (i = 0; i < m; ++i) {
        o = links[i];
        if (typeof o.source == "number") o.source = nodes[o.source];
        if (typeof o.target == "number") o.target = nodes[o.target];
        ++o.source.weight;
        ++o.target.weight;
      }
      for (i = 0; i < n; ++i) {
        o = nodes[i];
        if (isNaN(o.x)) o.x = position("x", w);
        if (isNaN(o.y)) o.y = position("y", h);
        if (isNaN(o.px)) o.px = o.x;
        if (isNaN(o.py)) o.py = o.y;
      }
      distances = [];
      if (typeof linkDistance === "function") for (i = 0; i < m; ++i) distances[i] = +linkDistance.call(this, links[i], i); else for (i = 0; i < m; ++i) distances[i] = linkDistance;
      strengths = [];
      if (typeof linkStrength === "function") for (i = 0; i < m; ++i) strengths[i] = +linkStrength.call(this, links[i], i); else for (i = 0; i < m; ++i) strengths[i] = linkStrength;
      charges = [];
      if (typeof charge === "function") for (i = 0; i < n; ++i) charges[i] = +charge.call(this, nodes[i], i); else for (i = 0; i < n; ++i) charges[i] = charge;
      function position(dimension, size) {
        if (!neighbors) {
          neighbors = new Array(n);
          for (j = 0; j < n; ++j) {
            neighbors[j] = [];
          }
          for (j = 0; j < m; ++j) {
            var o = links[j];
            neighbors[o.source.index].push(o.target);
            neighbors[o.target.index].push(o.source);
          }
        }
        var candidates = neighbors[i], j = -1, l = candidates.length, x;
        while (++j < l) if (!isNaN(x = candidates[j][dimension])) return x;
        return Math.random() * size;
      }
      return force.resume();
    };
    force.resume = function() {
      return force.alpha(.1);
    };
    force.stop = function() {
      return force.alpha(0);
    };
    force.drag = function() {
      if (!drag) drag = d3.behavior.drag().origin(d3_identity).on("dragstart.force", d3_layout_forceDragstart).on("drag.force", dragmove).on("dragend.force", d3_layout_forceDragend);
      if (!arguments.length) return drag;
      this.on("mouseover.force", d3_layout_forceMouseover).on("mouseout.force", d3_layout_forceMouseout).call(drag);
    };
    function dragmove(d) {
      d.px = d3.event.x, d.py = d3.event.y;
      force.resume();
    }
    return d3.rebind(force, event, "on");
  };
  function d3_layout_forceDragstart(d) {
    d.fixed |= 2;
  }
  function d3_layout_forceDragend(d) {
    d.fixed &= ~6;
  }
  function d3_layout_forceMouseover(d) {
    d.fixed |= 4;
    d.px = d.x, d.py = d.y;
  }
  function d3_layout_forceMouseout(d) {
    d.fixed &= ~4;
  }
  function d3_layout_forceAccumulate(quad, alpha, charges) {
    var cx = 0, cy = 0;
    quad.charge = 0;
    if (!quad.leaf) {
      var nodes = quad.nodes, n = nodes.length, i = -1, c;
      while (++i < n) {
        c = nodes[i];
        if (c == null) continue;
        d3_layout_forceAccumulate(c, alpha, charges);
        quad.charge += c.charge;
        cx += c.charge * c.cx;
        cy += c.charge * c.cy;
      }
    }
    if (quad.point) {
      if (!quad.leaf) {
        quad.point.x += Math.random() - .5;
        quad.point.y += Math.random() - .5;
      }
      var k = alpha * charges[quad.point.index];
      quad.charge += quad.pointCharge = k;
      cx += k * quad.point.x;
      cy += k * quad.point.y;
    }
    quad.cx = cx / quad.charge;
    quad.cy = cy / quad.charge;
  }
  var d3_layout_forceLinkDistance = 20, d3_layout_forceLinkStrength = 1, d3_layout_forceChargeDistance2 = Infinity;
  d3.layout.hierarchy = function() {
    var sort = d3_layout_hierarchySort, children = d3_layout_hierarchyChildren, value = d3_layout_hierarchyValue;
    function hierarchy(root) {
      var stack = [ root ], nodes = [], node;
      root.depth = 0;
      while ((node = stack.pop()) != null) {
        nodes.push(node);
        if ((childs = children.call(hierarchy, node, node.depth)) && (n = childs.length)) {
          var n, childs, child;
          while (--n >= 0) {
            stack.push(child = childs[n]);
            child.parent = node;
            child.depth = node.depth + 1;
          }
          if (value) node.value = 0;
          node.children = childs;
        } else {
          if (value) node.value = +value.call(hierarchy, node, node.depth) || 0;
          delete node.children;
        }
      }
      d3_layout_hierarchyVisitAfter(root, function(node) {
        var childs, parent;
        if (sort && (childs = node.children)) childs.sort(sort);
        if (value && (parent = node.parent)) parent.value += node.value;
      });
      return nodes;
    }
    hierarchy.sort = function(x) {
      if (!arguments.length) return sort;
      sort = x;
      return hierarchy;
    };
    hierarchy.children = function(x) {
      if (!arguments.length) return children;
      children = x;
      return hierarchy;
    };
    hierarchy.value = function(x) {
      if (!arguments.length) return value;
      value = x;
      return hierarchy;
    };
    hierarchy.revalue = function(root) {
      if (value) {
        d3_layout_hierarchyVisitBefore(root, function(node) {
          if (node.children) node.value = 0;
        });
        d3_layout_hierarchyVisitAfter(root, function(node) {
          var parent;
          if (!node.children) node.value = +value.call(hierarchy, node, node.depth) || 0;
          if (parent = node.parent) parent.value += node.value;
        });
      }
      return root;
    };
    return hierarchy;
  };
  function d3_layout_hierarchyRebind(object, hierarchy) {
    d3.rebind(object, hierarchy, "sort", "children", "value");
    object.nodes = object;
    object.links = d3_layout_hierarchyLinks;
    return object;
  }
  function d3_layout_hierarchyVisitBefore(node, callback) {
    var nodes = [ node ];
    while ((node = nodes.pop()) != null) {
      callback(node);
      if ((children = node.children) && (n = children.length)) {
        var n, children;
        while (--n >= 0) nodes.push(children[n]);
      }
    }
  }
  function d3_layout_hierarchyVisitAfter(node, callback) {
    var nodes = [ node ], nodes2 = [];
    while ((node = nodes.pop()) != null) {
      nodes2.push(node);
      if ((children = node.children) && (n = children.length)) {
        var i = -1, n, children;
        while (++i < n) nodes.push(children[i]);
      }
    }
    while ((node = nodes2.pop()) != null) {
      callback(node);
    }
  }
  function d3_layout_hierarchyChildren(d) {
    return d.children;
  }
  function d3_layout_hierarchyValue(d) {
    return d.value;
  }
  function d3_layout_hierarchySort(a, b) {
    return b.value - a.value;
  }
  function d3_layout_hierarchyLinks(nodes) {
    return d3.merge(nodes.map(function(parent) {
      return (parent.children || []).map(function(child) {
        return {
          source: parent,
          target: child
        };
      });
    }));
  }
  d3.layout.partition = function() {
    var hierarchy = d3.layout.hierarchy(), size = [ 1, 1 ];
    function position(node, x, dx, dy) {
      var children = node.children;
      node.x = x;
      node.y = node.depth * dy;
      node.dx = dx;
      node.dy = dy;
      if (children && (n = children.length)) {
        var i = -1, n, c, d;
        dx = node.value ? dx / node.value : 0;
        while (++i < n) {
          position(c = children[i], x, d = c.value * dx, dy);
          x += d;
        }
      }
    }
    function depth(node) {
      var children = node.children, d = 0;
      if (children && (n = children.length)) {
        var i = -1, n;
        while (++i < n) d = Math.max(d, depth(children[i]));
      }
      return 1 + d;
    }
    function partition(d, i) {
      var nodes = hierarchy.call(this, d, i);
      position(nodes[0], 0, size[0], size[1] / depth(nodes[0]));
      return nodes;
    }
    partition.size = function(x) {
      if (!arguments.length) return size;
      size = x;
      return partition;
    };
    return d3_layout_hierarchyRebind(partition, hierarchy);
  };
  d3.layout.pie = function() {
    var value = Number, sort = d3_layout_pieSortByValue, startAngle = 0, endAngle = τ, padAngle = 0;
    function pie(data) {
      var n = data.length, values = data.map(function(d, i) {
        return +value.call(pie, d, i);
      }), a = +(typeof startAngle === "function" ? startAngle.apply(this, arguments) : startAngle), da = (typeof endAngle === "function" ? endAngle.apply(this, arguments) : endAngle) - a, p = Math.min(Math.abs(da) / n, +(typeof padAngle === "function" ? padAngle.apply(this, arguments) : padAngle)), pa = p * (da < 0 ? -1 : 1), sum = d3.sum(values), k = sum ? (da - n * pa) / sum : 0, index = d3.range(n), arcs = [], v;
      if (sort != null) index.sort(sort === d3_layout_pieSortByValue ? function(i, j) {
        return values[j] - values[i];
      } : function(i, j) {
        return sort(data[i], data[j]);
      });
      index.forEach(function(i) {
        arcs[i] = {
          data: data[i],
          value: v = values[i],
          startAngle: a,
          endAngle: a += v * k + pa,
          padAngle: p
        };
      });
      return arcs;
    }
    pie.value = function(_) {
      if (!arguments.length) return value;
      value = _;
      return pie;
    };
    pie.sort = function(_) {
      if (!arguments.length) return sort;
      sort = _;
      return pie;
    };
    pie.startAngle = function(_) {
      if (!arguments.length) return startAngle;
      startAngle = _;
      return pie;
    };
    pie.endAngle = function(_) {
      if (!arguments.length) return endAngle;
      endAngle = _;
      return pie;
    };
    pie.padAngle = function(_) {
      if (!arguments.length) return padAngle;
      padAngle = _;
      return pie;
    };
    return pie;
  };
  var d3_layout_pieSortByValue = {};
  d3.layout.stack = function() {
    var values = d3_identity, order = d3_layout_stackOrderDefault, offset = d3_layout_stackOffsetZero, out = d3_layout_stackOut, x = d3_layout_stackX, y = d3_layout_stackY;
    function stack(data, index) {
      if (!(n = data.length)) return data;
      var series = data.map(function(d, i) {
        return values.call(stack, d, i);
      });
      var points = series.map(function(d) {
        return d.map(function(v, i) {
          return [ x.call(stack, v, i), y.call(stack, v, i) ];
        });
      });
      var orders = order.call(stack, points, index);
      series = d3.permute(series, orders);
      points = d3.permute(points, orders);
      var offsets = offset.call(stack, points, index);
      var m = series[0].length, n, i, j, o;
      for (j = 0; j < m; ++j) {
        out.call(stack, series[0][j], o = offsets[j], points[0][j][1]);
        for (i = 1; i < n; ++i) {
          out.call(stack, series[i][j], o += points[i - 1][j][1], points[i][j][1]);
        }
      }
      return data;
    }
    stack.values = function(x) {
      if (!arguments.length) return values;
      values = x;
      return stack;
    };
    stack.order = function(x) {
      if (!arguments.length) return order;
      order = typeof x === "function" ? x : d3_layout_stackOrders.get(x) || d3_layout_stackOrderDefault;
      return stack;
    };
    stack.offset = function(x) {
      if (!arguments.length) return offset;
      offset = typeof x === "function" ? x : d3_layout_stackOffsets.get(x) || d3_layout_stackOffsetZero;
      return stack;
    };
    stack.x = function(z) {
      if (!arguments.length) return x;
      x = z;
      return stack;
    };
    stack.y = function(z) {
      if (!arguments.length) return y;
      y = z;
      return stack;
    };
    stack.out = function(z) {
      if (!arguments.length) return out;
      out = z;
      return stack;
    };
    return stack;
  };
  function d3_layout_stackX(d) {
    return d.x;
  }
  function d3_layout_stackY(d) {
    return d.y;
  }
  function d3_layout_stackOut(d, y0, y) {
    d.y0 = y0;
    d.y = y;
  }
  var d3_layout_stackOrders = d3.map({
    "inside-out": function(data) {
      var n = data.length, i, j, max = data.map(d3_layout_stackMaxIndex), sums = data.map(d3_layout_stackReduceSum), index = d3.range(n).sort(function(a, b) {
        return max[a] - max[b];
      }), top = 0, bottom = 0, tops = [], bottoms = [];
      for (i = 0; i < n; ++i) {
        j = index[i];
        if (top < bottom) {
          top += sums[j];
          tops.push(j);
        } else {
          bottom += sums[j];
          bottoms.push(j);
        }
      }
      return bottoms.reverse().concat(tops);
    },
    reverse: function(data) {
      return d3.range(data.length).reverse();
    },
    "default": d3_layout_stackOrderDefault
  });
  var d3_layout_stackOffsets = d3.map({
    silhouette: function(data) {
      var n = data.length, m = data[0].length, sums = [], max = 0, i, j, o, y0 = [];
      for (j = 0; j < m; ++j) {
        for (i = 0, o = 0; i < n; i++) o += data[i][j][1];
        if (o > max) max = o;
        sums.push(o);
      }
      for (j = 0; j < m; ++j) {
        y0[j] = (max - sums[j]) / 2;
      }
      return y0;
    },
    wiggle: function(data) {
      var n = data.length, x = data[0], m = x.length, i, j, k, s1, s2, s3, dx, o, o0, y0 = [];
      y0[0] = o = o0 = 0;
      for (j = 1; j < m; ++j) {
        for (i = 0, s1 = 0; i < n; ++i) s1 += data[i][j][1];
        for (i = 0, s2 = 0, dx = x[j][0] - x[j - 1][0]; i < n; ++i) {
          for (k = 0, s3 = (data[i][j][1] - data[i][j - 1][1]) / (2 * dx); k < i; ++k) {
            s3 += (data[k][j][1] - data[k][j - 1][1]) / dx;
          }
          s2 += s3 * data[i][j][1];
        }
        y0[j] = o -= s1 ? s2 / s1 * dx : 0;
        if (o < o0) o0 = o;
      }
      for (j = 0; j < m; ++j) y0[j] -= o0;
      return y0;
    },
    expand: function(data) {
      var n = data.length, m = data[0].length, k = 1 / n, i, j, o, y0 = [];
      for (j = 0; j < m; ++j) {
        for (i = 0, o = 0; i < n; i++) o += data[i][j][1];
        if (o) for (i = 0; i < n; i++) data[i][j][1] /= o; else for (i = 0; i < n; i++) data[i][j][1] = k;
      }
      for (j = 0; j < m; ++j) y0[j] = 0;
      return y0;
    },
    zero: d3_layout_stackOffsetZero
  });
  function d3_layout_stackOrderDefault(data) {
    return d3.range(data.length);
  }
  function d3_layout_stackOffsetZero(data) {
    var j = -1, m = data[0].length, y0 = [];
    while (++j < m) y0[j] = 0;
    return y0;
  }
  function d3_layout_stackMaxIndex(array) {
    var i = 1, j = 0, v = array[0][1], k, n = array.length;
    for (;i < n; ++i) {
      if ((k = array[i][1]) > v) {
        j = i;
        v = k;
      }
    }
    return j;
  }
  function d3_layout_stackReduceSum(d) {
    return d.reduce(d3_layout_stackSum, 0);
  }
  function d3_layout_stackSum(p, d) {
    return p + d[1];
  }
  d3.layout.histogram = function() {
    var frequency = true, valuer = Number, ranger = d3_layout_histogramRange, binner = d3_layout_histogramBinSturges;
    function histogram(data, i) {
      var bins = [], values = data.map(valuer, this), range = ranger.call(this, values, i), thresholds = binner.call(this, range, values, i), bin, i = -1, n = values.length, m = thresholds.length - 1, k = frequency ? 1 : 1 / n, x;
      while (++i < m) {
        bin = bins[i] = [];
        bin.dx = thresholds[i + 1] - (bin.x = thresholds[i]);
        bin.y = 0;
      }
      if (m > 0) {
        i = -1;
        while (++i < n) {
          x = values[i];
          if (x >= range[0] && x <= range[1]) {
            bin = bins[d3.bisect(thresholds, x, 1, m) - 1];
            bin.y += k;
            bin.push(data[i]);
          }
        }
      }
      return bins;
    }
    histogram.value = function(x) {
      if (!arguments.length) return valuer;
      valuer = x;
      return histogram;
    };
    histogram.range = function(x) {
      if (!arguments.length) return ranger;
      ranger = d3_functor(x);
      return histogram;
    };
    histogram.bins = function(x) {
      if (!arguments.length) return binner;
      binner = typeof x === "number" ? function(range) {
        return d3_layout_histogramBinFixed(range, x);
      } : d3_functor(x);
      return histogram;
    };
    histogram.frequency = function(x) {
      if (!arguments.length) return frequency;
      frequency = !!x;
      return histogram;
    };
    return histogram;
  };
  function d3_layout_histogramBinSturges(range, values) {
    return d3_layout_histogramBinFixed(range, Math.ceil(Math.log(values.length) / Math.LN2 + 1));
  }
  function d3_layout_histogramBinFixed(range, n) {
    var x = -1, b = +range[0], m = (range[1] - b) / n, f = [];
    while (++x <= n) f[x] = m * x + b;
    return f;
  }
  function d3_layout_histogramRange(values) {
    return [ d3.min(values), d3.max(values) ];
  }
  d3.layout.pack = function() {
    var hierarchy = d3.layout.hierarchy().sort(d3_layout_packSort), padding = 0, size = [ 1, 1 ], radius;
    function pack(d, i) {
      var nodes = hierarchy.call(this, d, i), root = nodes[0], w = size[0], h = size[1], r = radius == null ? Math.sqrt : typeof radius === "function" ? radius : function() {
        return radius;
      };
      root.x = root.y = 0;
      d3_layout_hierarchyVisitAfter(root, function(d) {
        d.r = +r(d.value);
      });
      d3_layout_hierarchyVisitAfter(root, d3_layout_packSiblings);
      if (padding) {
        var dr = padding * (radius ? 1 : Math.max(2 * root.r / w, 2 * root.r / h)) / 2;
        d3_layout_hierarchyVisitAfter(root, function(d) {
          d.r += dr;
        });
        d3_layout_hierarchyVisitAfter(root, d3_layout_packSiblings);
        d3_layout_hierarchyVisitAfter(root, function(d) {
          d.r -= dr;
        });
      }
      d3_layout_packTransform(root, w / 2, h / 2, radius ? 1 : 1 / Math.max(2 * root.r / w, 2 * root.r / h));
      return nodes;
    }
    pack.size = function(_) {
      if (!arguments.length) return size;
      size = _;
      return pack;
    };
    pack.radius = function(_) {
      if (!arguments.length) return radius;
      radius = _ == null || typeof _ === "function" ? _ : +_;
      return pack;
    };
    pack.padding = function(_) {
      if (!arguments.length) return padding;
      padding = +_;
      return pack;
    };
    return d3_layout_hierarchyRebind(pack, hierarchy);
  };
  function d3_layout_packSort(a, b) {
    return a.value - b.value;
  }
  function d3_layout_packInsert(a, b) {
    var c = a._pack_next;
    a._pack_next = b;
    b._pack_prev = a;
    b._pack_next = c;
    c._pack_prev = b;
  }
  function d3_layout_packSplice(a, b) {
    a._pack_next = b;
    b._pack_prev = a;
  }
  function d3_layout_packIntersects(a, b) {
    var dx = b.x - a.x, dy = b.y - a.y, dr = a.r + b.r;
    return .999 * dr * dr > dx * dx + dy * dy;
  }
  function d3_layout_packSiblings(node) {
    if (!(nodes = node.children) || !(n = nodes.length)) return;
    var nodes, xMin = Infinity, xMax = -Infinity, yMin = Infinity, yMax = -Infinity, a, b, c, i, j, k, n;
    function bound(node) {
      xMin = Math.min(node.x - node.r, xMin);
      xMax = Math.max(node.x + node.r, xMax);
      yMin = Math.min(node.y - node.r, yMin);
      yMax = Math.max(node.y + node.r, yMax);
    }
    nodes.forEach(d3_layout_packLink);
    a = nodes[0];
    a.x = -a.r;
    a.y = 0;
    bound(a);
    if (n > 1) {
      b = nodes[1];
      b.x = b.r;
      b.y = 0;
      bound(b);
      if (n > 2) {
        c = nodes[2];
        d3_layout_packPlace(a, b, c);
        bound(c);
        d3_layout_packInsert(a, c);
        a._pack_prev = c;
        d3_layout_packInsert(c, b);
        b = a._pack_next;
        for (i = 3; i < n; i++) {
          d3_layout_packPlace(a, b, c = nodes[i]);
          var isect = 0, s1 = 1, s2 = 1;
          for (j = b._pack_next; j !== b; j = j._pack_next, s1++) {
            if (d3_layout_packIntersects(j, c)) {
              isect = 1;
              break;
            }
          }
          if (isect == 1) {
            for (k = a._pack_prev; k !== j._pack_prev; k = k._pack_prev, s2++) {
              if (d3_layout_packIntersects(k, c)) {
                break;
              }
            }
          }
          if (isect) {
            if (s1 < s2 || s1 == s2 && b.r < a.r) d3_layout_packSplice(a, b = j); else d3_layout_packSplice(a = k, b);
            i--;
          } else {
            d3_layout_packInsert(a, c);
            b = c;
            bound(c);
          }
        }
      }
    }
    var cx = (xMin + xMax) / 2, cy = (yMin + yMax) / 2, cr = 0;
    for (i = 0; i < n; i++) {
      c = nodes[i];
      c.x -= cx;
      c.y -= cy;
      cr = Math.max(cr, c.r + Math.sqrt(c.x * c.x + c.y * c.y));
    }
    node.r = cr;
    nodes.forEach(d3_layout_packUnlink);
  }
  function d3_layout_packLink(node) {
    node._pack_next = node._pack_prev = node;
  }
  function d3_layout_packUnlink(node) {
    delete node._pack_next;
    delete node._pack_prev;
  }
  function d3_layout_packTransform(node, x, y, k) {
    var children = node.children;
    node.x = x += k * node.x;
    node.y = y += k * node.y;
    node.r *= k;
    if (children) {
      var i = -1, n = children.length;
      while (++i < n) d3_layout_packTransform(children[i], x, y, k);
    }
  }
  function d3_layout_packPlace(a, b, c) {
    var db = a.r + c.r, dx = b.x - a.x, dy = b.y - a.y;
    if (db && (dx || dy)) {
      var da = b.r + c.r, dc = dx * dx + dy * dy;
      da *= da;
      db *= db;
      var x = .5 + (db - da) / (2 * dc), y = Math.sqrt(Math.max(0, 2 * da * (db + dc) - (db -= dc) * db - da * da)) / (2 * dc);
      c.x = a.x + x * dx + y * dy;
      c.y = a.y + x * dy - y * dx;
    } else {
      c.x = a.x + db;
      c.y = a.y;
    }
  }
  d3.layout.tree = function() {
    var hierarchy = d3.layout.hierarchy().sort(null).value(null), separation = d3_layout_treeSeparation, size = [ 1, 1 ], nodeSize = null;
    function tree(d, i) {
      var nodes = hierarchy.call(this, d, i), root0 = nodes[0], root1 = wrapTree(root0);
      d3_layout_hierarchyVisitAfter(root1, firstWalk), root1.parent.m = -root1.z;
      d3_layout_hierarchyVisitBefore(root1, secondWalk);
      if (nodeSize) d3_layout_hierarchyVisitBefore(root0, sizeNode); else {
        var left = root0, right = root0, bottom = root0;
        d3_layout_hierarchyVisitBefore(root0, function(node) {
          if (node.x < left.x) left = node;
          if (node.x > right.x) right = node;
          if (node.depth > bottom.depth) bottom = node;
        });
        var tx = separation(left, right) / 2 - left.x, kx = size[0] / (right.x + separation(right, left) / 2 + tx), ky = size[1] / (bottom.depth || 1);
        d3_layout_hierarchyVisitBefore(root0, function(node) {
          node.x = (node.x + tx) * kx;
          node.y = node.depth * ky;
        });
      }
      return nodes;
    }
    function wrapTree(root0) {
      var root1 = {
        A: null,
        children: [ root0 ]
      }, queue = [ root1 ], node1;
      while ((node1 = queue.pop()) != null) {
        for (var children = node1.children, child, i = 0, n = children.length; i < n; ++i) {
          queue.push((children[i] = child = {
            _: children[i],
            parent: node1,
            children: (child = children[i].children) && child.slice() || [],
            A: null,
            a: null,
            z: 0,
            m: 0,
            c: 0,
            s: 0,
            t: null,
            i: i
          }).a = child);
        }
      }
      return root1.children[0];
    }
    function firstWalk(v) {
      var children = v.children, siblings = v.parent.children, w = v.i ? siblings[v.i - 1] : null;
      if (children.length) {
        d3_layout_treeShift(v);
        var midpoint = (children[0].z + children[children.length - 1].z) / 2;
        if (w) {
          v.z = w.z + separation(v._, w._);
          v.m = v.z - midpoint;
        } else {
          v.z = midpoint;
        }
      } else if (w) {
        v.z = w.z + separation(v._, w._);
      }
      v.parent.A = apportion(v, w, v.parent.A || siblings[0]);
    }
    function secondWalk(v) {
      v._.x = v.z + v.parent.m;
      v.m += v.parent.m;
    }
    function apportion(v, w, ancestor) {
      if (w) {
        var vip = v, vop = v, vim = w, vom = vip.parent.children[0], sip = vip.m, sop = vop.m, sim = vim.m, som = vom.m, shift;
        while (vim = d3_layout_treeRight(vim), vip = d3_layout_treeLeft(vip), vim && vip) {
          vom = d3_layout_treeLeft(vom);
          vop = d3_layout_treeRight(vop);
          vop.a = v;
          shift = vim.z + sim - vip.z - sip + separation(vim._, vip._);
          if (shift > 0) {
            d3_layout_treeMove(d3_layout_treeAncestor(vim, v, ancestor), v, shift);
            sip += shift;
            sop += shift;
          }
          sim += vim.m;
          sip += vip.m;
          som += vom.m;
          sop += vop.m;
        }
        if (vim && !d3_layout_treeRight(vop)) {
          vop.t = vim;
          vop.m += sim - sop;
        }
        if (vip && !d3_layout_treeLeft(vom)) {
          vom.t = vip;
          vom.m += sip - som;
          ancestor = v;
        }
      }
      return ancestor;
    }
    function sizeNode(node) {
      node.x *= size[0];
      node.y = node.depth * size[1];
    }
    tree.separation = function(x) {
      if (!arguments.length) return separation;
      separation = x;
      return tree;
    };
    tree.size = function(x) {
      if (!arguments.length) return nodeSize ? null : size;
      nodeSize = (size = x) == null ? sizeNode : null;
      return tree;
    };
    tree.nodeSize = function(x) {
      if (!arguments.length) return nodeSize ? size : null;
      nodeSize = (size = x) == null ? null : sizeNode;
      return tree;
    };
    return d3_layout_hierarchyRebind(tree, hierarchy);
  };
  function d3_layout_treeSeparation(a, b) {
    return a.parent == b.parent ? 1 : 2;
  }
  function d3_layout_treeLeft(v) {
    var children = v.children;
    return children.length ? children[0] : v.t;
  }
  function d3_layout_treeRight(v) {
    var children = v.children, n;
    return (n = children.length) ? children[n - 1] : v.t;
  }
  function d3_layout_treeMove(wm, wp, shift) {
    var change = shift / (wp.i - wm.i);
    wp.c -= change;
    wp.s += shift;
    wm.c += change;
    wp.z += shift;
    wp.m += shift;
  }
  function d3_layout_treeShift(v) {
    var shift = 0, change = 0, children = v.children, i = children.length, w;
    while (--i >= 0) {
      w = children[i];
      w.z += shift;
      w.m += shift;
      shift += w.s + (change += w.c);
    }
  }
  function d3_layout_treeAncestor(vim, v, ancestor) {
    return vim.a.parent === v.parent ? vim.a : ancestor;
  }
  d3.layout.cluster = function() {
    var hierarchy = d3.layout.hierarchy().sort(null).value(null), separation = d3_layout_treeSeparation, size = [ 1, 1 ], nodeSize = false;
    function cluster(d, i) {
      var nodes = hierarchy.call(this, d, i), root = nodes[0], previousNode, x = 0;
      d3_layout_hierarchyVisitAfter(root, function(node) {
        var children = node.children;
        if (children && children.length) {
          node.x = d3_layout_clusterX(children);
          node.y = d3_layout_clusterY(children);
        } else {
          node.x = previousNode ? x += separation(node, previousNode) : 0;
          node.y = 0;
          previousNode = node;
        }
      });
      var left = d3_layout_clusterLeft(root), right = d3_layout_clusterRight(root), x0 = left.x - separation(left, right) / 2, x1 = right.x + separation(right, left) / 2;
      d3_layout_hierarchyVisitAfter(root, nodeSize ? function(node) {
        node.x = (node.x - root.x) * size[0];
        node.y = (root.y - node.y) * size[1];
      } : function(node) {
        node.x = (node.x - x0) / (x1 - x0) * size[0];
        node.y = (1 - (root.y ? node.y / root.y : 1)) * size[1];
      });
      return nodes;
    }
    cluster.separation = function(x) {
      if (!arguments.length) return separation;
      separation = x;
      return cluster;
    };
    cluster.size = function(x) {
      if (!arguments.length) return nodeSize ? null : size;
      nodeSize = (size = x) == null;
      return cluster;
    };
    cluster.nodeSize = function(x) {
      if (!arguments.length) return nodeSize ? size : null;
      nodeSize = (size = x) != null;
      return cluster;
    };
    return d3_layout_hierarchyRebind(cluster, hierarchy);
  };
  function d3_layout_clusterY(children) {
    return 1 + d3.max(children, function(child) {
      return child.y;
    });
  }
  function d3_layout_clusterX(children) {
    return children.reduce(function(x, child) {
      return x + child.x;
    }, 0) / children.length;
  }
  function d3_layout_clusterLeft(node) {
    var children = node.children;
    return children && children.length ? d3_layout_clusterLeft(children[0]) : node;
  }
  function d3_layout_clusterRight(node) {
    var children = node.children, n;
    return children && (n = children.length) ? d3_layout_clusterRight(children[n - 1]) : node;
  }
  d3.layout.treemap = function() {
    var hierarchy = d3.layout.hierarchy(), round = Math.round, size = [ 1, 1 ], padding = null, pad = d3_layout_treemapPadNull, sticky = false, stickies, mode = "squarify", ratio = .5 * (1 + Math.sqrt(5));
    function scale(children, k) {
      var i = -1, n = children.length, child, area;
      while (++i < n) {
        area = (child = children[i]).value * (k < 0 ? 0 : k);
        child.area = isNaN(area) || area <= 0 ? 0 : area;
      }
    }
    function squarify(node) {
      var children = node.children;
      if (children && children.length) {
        var rect = pad(node), row = [], remaining = children.slice(), child, best = Infinity, score, u = mode === "slice" ? rect.dx : mode === "dice" ? rect.dy : mode === "slice-dice" ? node.depth & 1 ? rect.dy : rect.dx : Math.min(rect.dx, rect.dy), n;
        scale(remaining, rect.dx * rect.dy / node.value);
        row.area = 0;
        while ((n = remaining.length) > 0) {
          row.push(child = remaining[n - 1]);
          row.area += child.area;
          if (mode !== "squarify" || (score = worst(row, u)) <= best) {
            remaining.pop();
            best = score;
          } else {
            row.area -= row.pop().area;
            position(row, u, rect, false);
            u = Math.min(rect.dx, rect.dy);
            row.length = row.area = 0;
            best = Infinity;
          }
        }
        if (row.length) {
          position(row, u, rect, true);
          row.length = row.area = 0;
        }
        children.forEach(squarify);
      }
    }
    function stickify(node) {
      var children = node.children;
      if (children && children.length) {
        var rect = pad(node), remaining = children.slice(), child, row = [];
        scale(remaining, rect.dx * rect.dy / node.value);
        row.area = 0;
        while (child = remaining.pop()) {
          row.push(child);
          row.area += child.area;
          if (child.z != null) {
            position(row, child.z ? rect.dx : rect.dy, rect, !remaining.length);
            row.length = row.area = 0;
          }
        }
        children.forEach(stickify);
      }
    }
    function worst(row, u) {
      var s = row.area, r, rmax = 0, rmin = Infinity, i = -1, n = row.length;
      while (++i < n) {
        if (!(r = row[i].area)) continue;
        if (r < rmin) rmin = r;
        if (r > rmax) rmax = r;
      }
      s *= s;
      u *= u;
      return s ? Math.max(u * rmax * ratio / s, s / (u * rmin * ratio)) : Infinity;
    }
    function position(row, u, rect, flush) {
      var i = -1, n = row.length, x = rect.x, y = rect.y, v = u ? round(row.area / u) : 0, o;
      if (u == rect.dx) {
        if (flush || v > rect.dy) v = rect.dy;
        while (++i < n) {
          o = row[i];
          o.x = x;
          o.y = y;
          o.dy = v;
          x += o.dx = Math.min(rect.x + rect.dx - x, v ? round(o.area / v) : 0);
        }
        o.z = true;
        o.dx += rect.x + rect.dx - x;
        rect.y += v;
        rect.dy -= v;
      } else {
        if (flush || v > rect.dx) v = rect.dx;
        while (++i < n) {
          o = row[i];
          o.x = x;
          o.y = y;
          o.dx = v;
          y += o.dy = Math.min(rect.y + rect.dy - y, v ? round(o.area / v) : 0);
        }
        o.z = false;
        o.dy += rect.y + rect.dy - y;
        rect.x += v;
        rect.dx -= v;
      }
    }
    function treemap(d) {
      var nodes = stickies || hierarchy(d), root = nodes[0];
      root.x = root.y = 0;
      if (root.value) root.dx = size[0], root.dy = size[1]; else root.dx = root.dy = 0;
      if (stickies) hierarchy.revalue(root);
      scale([ root ], root.dx * root.dy / root.value);
      (stickies ? stickify : squarify)(root);
      if (sticky) stickies = nodes;
      return nodes;
    }
    treemap.size = function(x) {
      if (!arguments.length) return size;
      size = x;
      return treemap;
    };
    treemap.padding = function(x) {
      if (!arguments.length) return padding;
      function padFunction(node) {
        var p = x.call(treemap, node, node.depth);
        return p == null ? d3_layout_treemapPadNull(node) : d3_layout_treemapPad(node, typeof p === "number" ? [ p, p, p, p ] : p);
      }
      function padConstant(node) {
        return d3_layout_treemapPad(node, x);
      }
      var type;
      pad = (padding = x) == null ? d3_layout_treemapPadNull : (type = typeof x) === "function" ? padFunction : type === "number" ? (x = [ x, x, x, x ], 
      padConstant) : padConstant;
      return treemap;
    };
    treemap.round = function(x) {
      if (!arguments.length) return round != Number;
      round = x ? Math.round : Number;
      return treemap;
    };
    treemap.sticky = function(x) {
      if (!arguments.length) return sticky;
      sticky = x;
      stickies = null;
      return treemap;
    };
    treemap.ratio = function(x) {
      if (!arguments.length) return ratio;
      ratio = x;
      return treemap;
    };
    treemap.mode = function(x) {
      if (!arguments.length) return mode;
      mode = x + "";
      return treemap;
    };
    return d3_layout_hierarchyRebind(treemap, hierarchy);
  };
  function d3_layout_treemapPadNull(node) {
    return {
      x: node.x,
      y: node.y,
      dx: node.dx,
      dy: node.dy
    };
  }
  function d3_layout_treemapPad(node, padding) {
    var x = node.x + padding[3], y = node.y + padding[0], dx = node.dx - padding[1] - padding[3], dy = node.dy - padding[0] - padding[2];
    if (dx < 0) {
      x += dx / 2;
      dx = 0;
    }
    if (dy < 0) {
      y += dy / 2;
      dy = 0;
    }
    return {
      x: x,
      y: y,
      dx: dx,
      dy: dy
    };
  }
  d3.random = {
    normal: function(µ, σ) {
      var n = arguments.length;
      if (n < 2) σ = 1;
      if (n < 1) µ = 0;
      return function() {
        var x, y, r;
        do {
          x = Math.random() * 2 - 1;
          y = Math.random() * 2 - 1;
          r = x * x + y * y;
        } while (!r || r > 1);
        return µ + σ * x * Math.sqrt(-2 * Math.log(r) / r);
      };
    },
    logNormal: function() {
      var random = d3.random.normal.apply(d3, arguments);
      return function() {
        return Math.exp(random());
      };
    },
    bates: function(m) {
      var random = d3.random.irwinHall(m);
      return function() {
        return random() / m;
      };
    },
    irwinHall: function(m) {
      return function() {
        for (var s = 0, j = 0; j < m; j++) s += Math.random();
        return s;
      };
    }
  };
  d3.scale = {};
  function d3_scaleExtent(domain) {
    var start = domain[0], stop = domain[domain.length - 1];
    return start < stop ? [ start, stop ] : [ stop, start ];
  }
  function d3_scaleRange(scale) {
    return scale.rangeExtent ? scale.rangeExtent() : d3_scaleExtent(scale.range());
  }
  function d3_scale_bilinear(domain, range, uninterpolate, interpolate) {
    var u = uninterpolate(domain[0], domain[1]), i = interpolate(range[0], range[1]);
    return function(x) {
      return i(u(x));
    };
  }
  function d3_scale_nice(domain, nice) {
    var i0 = 0, i1 = domain.length - 1, x0 = domain[i0], x1 = domain[i1], dx;
    if (x1 < x0) {
      dx = i0, i0 = i1, i1 = dx;
      dx = x0, x0 = x1, x1 = dx;
    }
    domain[i0] = nice.floor(x0);
    domain[i1] = nice.ceil(x1);
    return domain;
  }
  function d3_scale_niceStep(step) {
    return step ? {
      floor: function(x) {
        return Math.floor(x / step) * step;
      },
      ceil: function(x) {
        return Math.ceil(x / step) * step;
      }
    } : d3_scale_niceIdentity;
  }
  var d3_scale_niceIdentity = {
    floor: d3_identity,
    ceil: d3_identity
  };
  function d3_scale_polylinear(domain, range, uninterpolate, interpolate) {
    var u = [], i = [], j = 0, k = Math.min(domain.length, range.length) - 1;
    if (domain[k] < domain[0]) {
      domain = domain.slice().reverse();
      range = range.slice().reverse();
    }
    while (++j <= k) {
      u.push(uninterpolate(domain[j - 1], domain[j]));
      i.push(interpolate(range[j - 1], range[j]));
    }
    return function(x) {
      var j = d3.bisect(domain, x, 1, k) - 1;
      return i[j](u[j](x));
    };
  }
  d3.scale.linear = function() {
    return d3_scale_linear([ 0, 1 ], [ 0, 1 ], d3_interpolate, false);
  };
  function d3_scale_linear(domain, range, interpolate, clamp) {
    var output, input;
    function rescale() {
      var linear = Math.min(domain.length, range.length) > 2 ? d3_scale_polylinear : d3_scale_bilinear, uninterpolate = clamp ? d3_uninterpolateClamp : d3_uninterpolateNumber;
      output = linear(domain, range, uninterpolate, interpolate);
      input = linear(range, domain, uninterpolate, d3_interpolate);
      return scale;
    }
    function scale(x) {
      return output(x);
    }
    scale.invert = function(y) {
      return input(y);
    };
    scale.domain = function(x) {
      if (!arguments.length) return domain;
      domain = x.map(Number);
      return rescale();
    };
    scale.range = function(x) {
      if (!arguments.length) return range;
      range = x;
      return rescale();
    };
    scale.rangeRound = function(x) {
      return scale.range(x).interpolate(d3_interpolateRound);
    };
    scale.clamp = function(x) {
      if (!arguments.length) return clamp;
      clamp = x;
      return rescale();
    };
    scale.interpolate = function(x) {
      if (!arguments.length) return interpolate;
      interpolate = x;
      return rescale();
    };
    scale.ticks = function(m) {
      return d3_scale_linearTicks(domain, m);
    };
    scale.tickFormat = function(m, format) {
      return d3_scale_linearTickFormat(domain, m, format);
    };
    scale.nice = function(m) {
      d3_scale_linearNice(domain, m);
      return rescale();
    };
    scale.copy = function() {
      return d3_scale_linear(domain, range, interpolate, clamp);
    };
    return rescale();
  }
  function d3_scale_linearRebind(scale, linear) {
    return d3.rebind(scale, linear, "range", "rangeRound", "interpolate", "clamp");
  }
  function d3_scale_linearNice(domain, m) {
    d3_scale_nice(domain, d3_scale_niceStep(d3_scale_linearTickRange(domain, m)[2]));
    d3_scale_nice(domain, d3_scale_niceStep(d3_scale_linearTickRange(domain, m)[2]));
    return domain;
  }
  function d3_scale_linearTickRange(domain, m) {
    if (m == null) m = 10;
    var extent = d3_scaleExtent(domain), span = extent[1] - extent[0], step = Math.pow(10, Math.floor(Math.log(span / m) / Math.LN10)), err = m / span * step;
    if (err <= .15) step *= 10; else if (err <= .35) step *= 5; else if (err <= .75) step *= 2;
    extent[0] = Math.ceil(extent[0] / step) * step;
    extent[1] = Math.floor(extent[1] / step) * step + step * .5;
    extent[2] = step;
    return extent;
  }
  function d3_scale_linearTicks(domain, m) {
    return d3.range.apply(d3, d3_scale_linearTickRange(domain, m));
  }
  function d3_scale_linearTickFormat(domain, m, format) {
    var range = d3_scale_linearTickRange(domain, m);
    if (format) {
      var match = d3_format_re.exec(format);
      match.shift();
      if (match[8] === "s") {
        var prefix = d3.formatPrefix(Math.max(abs(range[0]), abs(range[1])));
        if (!match[7]) match[7] = "." + d3_scale_linearPrecision(prefix.scale(range[2]));
        match[8] = "f";
        format = d3.format(match.join(""));
        return function(d) {
          return format(prefix.scale(d)) + prefix.symbol;
        };
      }
      if (!match[7]) match[7] = "." + d3_scale_linearFormatPrecision(match[8], range);
      format = match.join("");
    } else {
      format = ",." + d3_scale_linearPrecision(range[2]) + "f";
    }
    return d3.format(format);
  }
  var d3_scale_linearFormatSignificant = {
    s: 1,
    g: 1,
    p: 1,
    r: 1,
    e: 1
  };
  function d3_scale_linearPrecision(value) {
    return -Math.floor(Math.log(value) / Math.LN10 + .01);
  }
  function d3_scale_linearFormatPrecision(type, range) {
    var p = d3_scale_linearPrecision(range[2]);
    return type in d3_scale_linearFormatSignificant ? Math.abs(p - d3_scale_linearPrecision(Math.max(abs(range[0]), abs(range[1])))) + +(type !== "e") : p - (type === "%") * 2;
  }
  d3.scale.log = function() {
    return d3_scale_log(d3.scale.linear().domain([ 0, 1 ]), 10, true, [ 1, 10 ]);
  };
  function d3_scale_log(linear, base, positive, domain) {
    function log(x) {
      return (positive ? Math.log(x < 0 ? 0 : x) : -Math.log(x > 0 ? 0 : -x)) / Math.log(base);
    }
    function pow(x) {
      return positive ? Math.pow(base, x) : -Math.pow(base, -x);
    }
    function scale(x) {
      return linear(log(x));
    }
    scale.invert = function(x) {
      return pow(linear.invert(x));
    };
    scale.domain = function(x) {
      if (!arguments.length) return domain;
      positive = x[0] >= 0;
      linear.domain((domain = x.map(Number)).map(log));
      return scale;
    };
    scale.base = function(_) {
      if (!arguments.length) return base;
      base = +_;
      linear.domain(domain.map(log));
      return scale;
    };
    scale.nice = function() {
      var niced = d3_scale_nice(domain.map(log), positive ? Math : d3_scale_logNiceNegative);
      linear.domain(niced);
      domain = niced.map(pow);
      return scale;
    };
    scale.ticks = function() {
      var extent = d3_scaleExtent(domain), ticks = [], u = extent[0], v = extent[1], i = Math.floor(log(u)), j = Math.ceil(log(v)), n = base % 1 ? 2 : base;
      if (isFinite(j - i)) {
        if (positive) {
          for (;i < j; i++) for (var k = 1; k < n; k++) ticks.push(pow(i) * k);
          ticks.push(pow(i));
        } else {
          ticks.push(pow(i));
          for (;i++ < j; ) for (var k = n - 1; k > 0; k--) ticks.push(pow(i) * k);
        }
        for (i = 0; ticks[i] < u; i++) {}
        for (j = ticks.length; ticks[j - 1] > v; j--) {}
        ticks = ticks.slice(i, j);
      }
      return ticks;
    };
    scale.tickFormat = function(n, format) {
      if (!arguments.length) return d3_scale_logFormat;
      if (arguments.length < 2) format = d3_scale_logFormat; else if (typeof format !== "function") format = d3.format(format);
      var k = Math.max(1, base * n / scale.ticks().length);
      return function(d) {
        var i = d / pow(Math.round(log(d)));
        if (i * base < base - .5) i *= base;
        return i <= k ? format(d) : "";
      };
    };
    scale.copy = function() {
      return d3_scale_log(linear.copy(), base, positive, domain);
    };
    return d3_scale_linearRebind(scale, linear);
  }
  var d3_scale_logFormat = d3.format(".0e"), d3_scale_logNiceNegative = {
    floor: function(x) {
      return -Math.ceil(-x);
    },
    ceil: function(x) {
      return -Math.floor(-x);
    }
  };
  d3.scale.pow = function() {
    return d3_scale_pow(d3.scale.linear(), 1, [ 0, 1 ]);
  };
  function d3_scale_pow(linear, exponent, domain) {
    var powp = d3_scale_powPow(exponent), powb = d3_scale_powPow(1 / exponent);
    function scale(x) {
      return linear(powp(x));
    }
    scale.invert = function(x) {
      return powb(linear.invert(x));
    };
    scale.domain = function(x) {
      if (!arguments.length) return domain;
      linear.domain((domain = x.map(Number)).map(powp));
      return scale;
    };
    scale.ticks = function(m) {
      return d3_scale_linearTicks(domain, m);
    };
    scale.tickFormat = function(m, format) {
      return d3_scale_linearTickFormat(domain, m, format);
    };
    scale.nice = function(m) {
      return scale.domain(d3_scale_linearNice(domain, m));
    };
    scale.exponent = function(x) {
      if (!arguments.length) return exponent;
      powp = d3_scale_powPow(exponent = x);
      powb = d3_scale_powPow(1 / exponent);
      linear.domain(domain.map(powp));
      return scale;
    };
    scale.copy = function() {
      return d3_scale_pow(linear.copy(), exponent, domain);
    };
    return d3_scale_linearRebind(scale, linear);
  }
  function d3_scale_powPow(e) {
    return function(x) {
      return x < 0 ? -Math.pow(-x, e) : Math.pow(x, e);
    };
  }
  d3.scale.sqrt = function() {
    return d3.scale.pow().exponent(.5);
  };
  d3.scale.ordinal = function() {
    return d3_scale_ordinal([], {
      t: "range",
      a: [ [] ]
    });
  };
  function d3_scale_ordinal(domain, ranger) {
    var index, range, rangeBand;
    function scale(x) {
      return range[((index.get(x) || (ranger.t === "range" ? index.set(x, domain.push(x)) : NaN)) - 1) % range.length];
    }
    function steps(start, step) {
      return d3.range(domain.length).map(function(i) {
        return start + step * i;
      });
    }
    scale.domain = function(x) {
      if (!arguments.length) return domain;
      domain = [];
      index = new d3_Map();
      var i = -1, n = x.length, xi;
      while (++i < n) if (!index.has(xi = x[i])) index.set(xi, domain.push(xi));
      return scale[ranger.t].apply(scale, ranger.a);
    };
    scale.range = function(x) {
      if (!arguments.length) return range;
      range = x;
      rangeBand = 0;
      ranger = {
        t: "range",
        a: arguments
      };
      return scale;
    };
    scale.rangePoints = function(x, padding) {
      if (arguments.length < 2) padding = 0;
      var start = x[0], stop = x[1], step = domain.length < 2 ? (start = (start + stop) / 2, 
      0) : (stop - start) / (domain.length - 1 + padding);
      range = steps(start + step * padding / 2, step);
      rangeBand = 0;
      ranger = {
        t: "rangePoints",
        a: arguments
      };
      return scale;
    };
    scale.rangeRoundPoints = function(x, padding) {
      if (arguments.length < 2) padding = 0;
      var start = x[0], stop = x[1], step = domain.length < 2 ? (start = stop = Math.round((start + stop) / 2), 
      0) : (stop - start) / (domain.length - 1 + padding) | 0;
      range = steps(start + Math.round(step * padding / 2 + (stop - start - (domain.length - 1 + padding) * step) / 2), step);
      rangeBand = 0;
      ranger = {
        t: "rangeRoundPoints",
        a: arguments
      };
      return scale;
    };
    scale.rangeBands = function(x, padding, outerPadding) {
      if (arguments.length < 2) padding = 0;
      if (arguments.length < 3) outerPadding = padding;
      var reverse = x[1] < x[0], start = x[reverse - 0], stop = x[1 - reverse], step = (stop - start) / (domain.length - padding + 2 * outerPadding);
      range = steps(start + step * outerPadding, step);
      if (reverse) range.reverse();
      rangeBand = step * (1 - padding);
      ranger = {
        t: "rangeBands",
        a: arguments
      };
      return scale;
    };
    scale.rangeRoundBands = function(x, padding, outerPadding) {
      if (arguments.length < 2) padding = 0;
      if (arguments.length < 3) outerPadding = padding;
      var reverse = x[1] < x[0], start = x[reverse - 0], stop = x[1 - reverse], step = Math.floor((stop - start) / (domain.length - padding + 2 * outerPadding));
      range = steps(start + Math.round((stop - start - (domain.length - padding) * step) / 2), step);
      if (reverse) range.reverse();
      rangeBand = Math.round(step * (1 - padding));
      ranger = {
        t: "rangeRoundBands",
        a: arguments
      };
      return scale;
    };
    scale.rangeBand = function() {
      return rangeBand;
    };
    scale.rangeExtent = function() {
      return d3_scaleExtent(ranger.a[0]);
    };
    scale.copy = function() {
      return d3_scale_ordinal(domain, ranger);
    };
    return scale.domain(domain);
  }
  d3.scale.category10 = function() {
    return d3.scale.ordinal().range(d3_category10);
  };
  d3.scale.category20 = function() {
    return d3.scale.ordinal().range(d3_category20);
  };
  d3.scale.category20b = function() {
    return d3.scale.ordinal().range(d3_category20b);
  };
  d3.scale.category20c = function() {
    return d3.scale.ordinal().range(d3_category20c);
  };
  var d3_category10 = [ 2062260, 16744206, 2924588, 14034728, 9725885, 9197131, 14907330, 8355711, 12369186, 1556175 ].map(d3_rgbString);
  var d3_category20 = [ 2062260, 11454440, 16744206, 16759672, 2924588, 10018698, 14034728, 16750742, 9725885, 12955861, 9197131, 12885140, 14907330, 16234194, 8355711, 13092807, 12369186, 14408589, 1556175, 10410725 ].map(d3_rgbString);
  var d3_category20b = [ 3750777, 5395619, 7040719, 10264286, 6519097, 9216594, 11915115, 13556636, 9202993, 12426809, 15186514, 15190932, 8666169, 11356490, 14049643, 15177372, 8077683, 10834324, 13528509, 14589654 ].map(d3_rgbString);
  var d3_category20c = [ 3244733, 7057110, 10406625, 13032431, 15095053, 16616764, 16625259, 16634018, 3253076, 7652470, 10607003, 13101504, 7695281, 10394312, 12369372, 14342891, 6513507, 9868950, 12434877, 14277081 ].map(d3_rgbString);
  d3.scale.quantile = function() {
    return d3_scale_quantile([], []);
  };
  function d3_scale_quantile(domain, range) {
    var thresholds;
    function rescale() {
      var k = 0, q = range.length;
      thresholds = [];
      while (++k < q) thresholds[k - 1] = d3.quantile(domain, k / q);
      return scale;
    }
    function scale(x) {
      if (!isNaN(x = +x)) return range[d3.bisect(thresholds, x)];
    }
    scale.domain = function(x) {
      if (!arguments.length) return domain;
      domain = x.map(d3_number).filter(d3_numeric).sort(d3_ascending);
      return rescale();
    };
    scale.range = function(x) {
      if (!arguments.length) return range;
      range = x;
      return rescale();
    };
    scale.quantiles = function() {
      return thresholds;
    };
    scale.invertExtent = function(y) {
      y = range.indexOf(y);
      return y < 0 ? [ NaN, NaN ] : [ y > 0 ? thresholds[y - 1] : domain[0], y < thresholds.length ? thresholds[y] : domain[domain.length - 1] ];
    };
    scale.copy = function() {
      return d3_scale_quantile(domain, range);
    };
    return rescale();
  }
  d3.scale.quantize = function() {
    return d3_scale_quantize(0, 1, [ 0, 1 ]);
  };
  function d3_scale_quantize(x0, x1, range) {
    var kx, i;
    function scale(x) {
      return range[Math.max(0, Math.min(i, Math.floor(kx * (x - x0))))];
    }
    function rescale() {
      kx = range.length / (x1 - x0);
      i = range.length - 1;
      return scale;
    }
    scale.domain = function(x) {
      if (!arguments.length) return [ x0, x1 ];
      x0 = +x[0];
      x1 = +x[x.length - 1];
      return rescale();
    };
    scale.range = function(x) {
      if (!arguments.length) return range;
      range = x;
      return rescale();
    };
    scale.invertExtent = function(y) {
      y = range.indexOf(y);
      y = y < 0 ? NaN : y / kx + x0;
      return [ y, y + 1 / kx ];
    };
    scale.copy = function() {
      return d3_scale_quantize(x0, x1, range);
    };
    return rescale();
  }
  d3.scale.threshold = function() {
    return d3_scale_threshold([ .5 ], [ 0, 1 ]);
  };
  function d3_scale_threshold(domain, range) {
    function scale(x) {
      if (x <= x) return range[d3.bisect(domain, x)];
    }
    scale.domain = function(_) {
      if (!arguments.length) return domain;
      domain = _;
      return scale;
    };
    scale.range = function(_) {
      if (!arguments.length) return range;
      range = _;
      return scale;
    };
    scale.invertExtent = function(y) {
      y = range.indexOf(y);
      return [ domain[y - 1], domain[y] ];
    };
    scale.copy = function() {
      return d3_scale_threshold(domain, range);
    };
    return scale;
  }
  d3.scale.identity = function() {
    return d3_scale_identity([ 0, 1 ]);
  };
  function d3_scale_identity(domain) {
    function identity(x) {
      return +x;
    }
    identity.invert = identity;
    identity.domain = identity.range = function(x) {
      if (!arguments.length) return domain;
      domain = x.map(identity);
      return identity;
    };
    identity.ticks = function(m) {
      return d3_scale_linearTicks(domain, m);
    };
    identity.tickFormat = function(m, format) {
      return d3_scale_linearTickFormat(domain, m, format);
    };
    identity.copy = function() {
      return d3_scale_identity(domain);
    };
    return identity;
  }
  d3.svg = {};
  function d3_zero() {
    return 0;
  }
  d3.svg.arc = function() {
    var innerRadius = d3_svg_arcInnerRadius, outerRadius = d3_svg_arcOuterRadius, cornerRadius = d3_zero, padRadius = d3_svg_arcAuto, startAngle = d3_svg_arcStartAngle, endAngle = d3_svg_arcEndAngle, padAngle = d3_svg_arcPadAngle;
    function arc() {
      var r0 = Math.max(0, +innerRadius.apply(this, arguments)), r1 = Math.max(0, +outerRadius.apply(this, arguments)), a0 = startAngle.apply(this, arguments) - halfπ, a1 = endAngle.apply(this, arguments) - halfπ, da = Math.abs(a1 - a0), cw = a0 > a1 ? 0 : 1;
      if (r1 < r0) rc = r1, r1 = r0, r0 = rc;
      if (da >= τε) return circleSegment(r1, cw) + (r0 ? circleSegment(r0, 1 - cw) : "") + "Z";
      var rc, cr, rp, ap, p0 = 0, p1 = 0, x0, y0, x1, y1, x2, y2, x3, y3, path = [];
      if (ap = (+padAngle.apply(this, arguments) || 0) / 2) {
        rp = padRadius === d3_svg_arcAuto ? Math.sqrt(r0 * r0 + r1 * r1) : +padRadius.apply(this, arguments);
        if (!cw) p1 *= -1;
        if (r1) p1 = d3_asin(rp / r1 * Math.sin(ap));
        if (r0) p0 = d3_asin(rp / r0 * Math.sin(ap));
      }
      if (r1) {
        x0 = r1 * Math.cos(a0 + p1);
        y0 = r1 * Math.sin(a0 + p1);
        x1 = r1 * Math.cos(a1 - p1);
        y1 = r1 * Math.sin(a1 - p1);
        var l1 = Math.abs(a1 - a0 - 2 * p1) <= π ? 0 : 1;
        if (p1 && d3_svg_arcSweep(x0, y0, x1, y1) === cw ^ l1) {
          var h1 = (a0 + a1) / 2;
          x0 = r1 * Math.cos(h1);
          y0 = r1 * Math.sin(h1);
          x1 = y1 = null;
        }
      } else {
        x0 = y0 = 0;
      }
      if (r0) {
        x2 = r0 * Math.cos(a1 - p0);
        y2 = r0 * Math.sin(a1 - p0);
        x3 = r0 * Math.cos(a0 + p0);
        y3 = r0 * Math.sin(a0 + p0);
        var l0 = Math.abs(a0 - a1 + 2 * p0) <= π ? 0 : 1;
        if (p0 && d3_svg_arcSweep(x2, y2, x3, y3) === 1 - cw ^ l0) {
          var h0 = (a0 + a1) / 2;
          x2 = r0 * Math.cos(h0);
          y2 = r0 * Math.sin(h0);
          x3 = y3 = null;
        }
      } else {
        x2 = y2 = 0;
      }
      if (da > ε && (rc = Math.min(Math.abs(r1 - r0) / 2, +cornerRadius.apply(this, arguments))) > .001) {
        cr = r0 < r1 ^ cw ? 0 : 1;
        var rc1 = rc, rc0 = rc;
        if (da < π) {
          var oc = x3 == null ? [ x2, y2 ] : x1 == null ? [ x0, y0 ] : d3_geom_polygonIntersect([ x0, y0 ], [ x3, y3 ], [ x1, y1 ], [ x2, y2 ]), ax = x0 - oc[0], ay = y0 - oc[1], bx = x1 - oc[0], by = y1 - oc[1], kc = 1 / Math.sin(Math.acos((ax * bx + ay * by) / (Math.sqrt(ax * ax + ay * ay) * Math.sqrt(bx * bx + by * by))) / 2), lc = Math.sqrt(oc[0] * oc[0] + oc[1] * oc[1]);
          rc0 = Math.min(rc, (r0 - lc) / (kc - 1));
          rc1 = Math.min(rc, (r1 - lc) / (kc + 1));
        }
        if (x1 != null) {
          var t30 = d3_svg_arcCornerTangents(x3 == null ? [ x2, y2 ] : [ x3, y3 ], [ x0, y0 ], r1, rc1, cw), t12 = d3_svg_arcCornerTangents([ x1, y1 ], [ x2, y2 ], r1, rc1, cw);
          if (rc === rc1) {
            path.push("M", t30[0], "A", rc1, ",", rc1, " 0 0,", cr, " ", t30[1], "A", r1, ",", r1, " 0 ", 1 - cw ^ d3_svg_arcSweep(t30[1][0], t30[1][1], t12[1][0], t12[1][1]), ",", cw, " ", t12[1], "A", rc1, ",", rc1, " 0 0,", cr, " ", t12[0]);
          } else {
            path.push("M", t30[0], "A", rc1, ",", rc1, " 0 1,", cr, " ", t12[0]);
          }
        } else {
          path.push("M", x0, ",", y0);
        }
        if (x3 != null) {
          var t03 = d3_svg_arcCornerTangents([ x0, y0 ], [ x3, y3 ], r0, -rc0, cw), t21 = d3_svg_arcCornerTangents([ x2, y2 ], x1 == null ? [ x0, y0 ] : [ x1, y1 ], r0, -rc0, cw);
          if (rc === rc0) {
            path.push("L", t21[0], "A", rc0, ",", rc0, " 0 0,", cr, " ", t21[1], "A", r0, ",", r0, " 0 ", cw ^ d3_svg_arcSweep(t21[1][0], t21[1][1], t03[1][0], t03[1][1]), ",", 1 - cw, " ", t03[1], "A", rc0, ",", rc0, " 0 0,", cr, " ", t03[0]);
          } else {
            path.push("L", t21[0], "A", rc0, ",", rc0, " 0 0,", cr, " ", t03[0]);
          }
        } else {
          path.push("L", x2, ",", y2);
        }
      } else {
        path.push("M", x0, ",", y0);
        if (x1 != null) path.push("A", r1, ",", r1, " 0 ", l1, ",", cw, " ", x1, ",", y1);
        path.push("L", x2, ",", y2);
        if (x3 != null) path.push("A", r0, ",", r0, " 0 ", l0, ",", 1 - cw, " ", x3, ",", y3);
      }
      path.push("Z");
      return path.join("");
    }
    function circleSegment(r1, cw) {
      return "M0," + r1 + "A" + r1 + "," + r1 + " 0 1," + cw + " 0," + -r1 + "A" + r1 + "," + r1 + " 0 1," + cw + " 0," + r1;
    }
    arc.innerRadius = function(v) {
      if (!arguments.length) return innerRadius;
      innerRadius = d3_functor(v);
      return arc;
    };
    arc.outerRadius = function(v) {
      if (!arguments.length) return outerRadius;
      outerRadius = d3_functor(v);
      return arc;
    };
    arc.cornerRadius = function(v) {
      if (!arguments.length) return cornerRadius;
      cornerRadius = d3_functor(v);
      return arc;
    };
    arc.padRadius = function(v) {
      if (!arguments.length) return padRadius;
      padRadius = v == d3_svg_arcAuto ? d3_svg_arcAuto : d3_functor(v);
      return arc;
    };
    arc.startAngle = function(v) {
      if (!arguments.length) return startAngle;
      startAngle = d3_functor(v);
      return arc;
    };
    arc.endAngle = function(v) {
      if (!arguments.length) return endAngle;
      endAngle = d3_functor(v);
      return arc;
    };
    arc.padAngle = function(v) {
      if (!arguments.length) return padAngle;
      padAngle = d3_functor(v);
      return arc;
    };
    arc.centroid = function() {
      var r = (+innerRadius.apply(this, arguments) + +outerRadius.apply(this, arguments)) / 2, a = (+startAngle.apply(this, arguments) + +endAngle.apply(this, arguments)) / 2 - halfπ;
      return [ Math.cos(a) * r, Math.sin(a) * r ];
    };
    return arc;
  };
  var d3_svg_arcAuto = "auto";
  function d3_svg_arcInnerRadius(d) {
    return d.innerRadius;
  }
  function d3_svg_arcOuterRadius(d) {
    return d.outerRadius;
  }
  function d3_svg_arcStartAngle(d) {
    return d.startAngle;
  }
  function d3_svg_arcEndAngle(d) {
    return d.endAngle;
  }
  function d3_svg_arcPadAngle(d) {
    return d && d.padAngle;
  }
  function d3_svg_arcSweep(x0, y0, x1, y1) {
    return (x0 - x1) * y0 - (y0 - y1) * x0 > 0 ? 0 : 1;
  }
  function d3_svg_arcCornerTangents(p0, p1, r1, rc, cw) {
    var x01 = p0[0] - p1[0], y01 = p0[1] - p1[1], lo = (cw ? rc : -rc) / Math.sqrt(x01 * x01 + y01 * y01), ox = lo * y01, oy = -lo * x01, x1 = p0[0] + ox, y1 = p0[1] + oy, x2 = p1[0] + ox, y2 = p1[1] + oy, x3 = (x1 + x2) / 2, y3 = (y1 + y2) / 2, dx = x2 - x1, dy = y2 - y1, d2 = dx * dx + dy * dy, r = r1 - rc, D = x1 * y2 - x2 * y1, d = (dy < 0 ? -1 : 1) * Math.sqrt(Math.max(0, r * r * d2 - D * D)), cx0 = (D * dy - dx * d) / d2, cy0 = (-D * dx - dy * d) / d2, cx1 = (D * dy + dx * d) / d2, cy1 = (-D * dx + dy * d) / d2, dx0 = cx0 - x3, dy0 = cy0 - y3, dx1 = cx1 - x3, dy1 = cy1 - y3;
    if (dx0 * dx0 + dy0 * dy0 > dx1 * dx1 + dy1 * dy1) cx0 = cx1, cy0 = cy1;
    return [ [ cx0 - ox, cy0 - oy ], [ cx0 * r1 / r, cy0 * r1 / r ] ];
  }
  function d3_svg_line(projection) {
    var x = d3_geom_pointX, y = d3_geom_pointY, defined = d3_true, interpolate = d3_svg_lineLinear, interpolateKey = interpolate.key, tension = .7;
    function line(data) {
      var segments = [], points = [], i = -1, n = data.length, d, fx = d3_functor(x), fy = d3_functor(y);
      function segment() {
        segments.push("M", interpolate(projection(points), tension));
      }
      while (++i < n) {
        if (defined.call(this, d = data[i], i)) {
          points.push([ +fx.call(this, d, i), +fy.call(this, d, i) ]);
        } else if (points.length) {
          segment();
          points = [];
        }
      }
      if (points.length) segment();
      return segments.length ? segments.join("") : null;
    }
    line.x = function(_) {
      if (!arguments.length) return x;
      x = _;
      return line;
    };
    line.y = function(_) {
      if (!arguments.length) return y;
      y = _;
      return line;
    };
    line.defined = function(_) {
      if (!arguments.length) return defined;
      defined = _;
      return line;
    };
    line.interpolate = function(_) {
      if (!arguments.length) return interpolateKey;
      if (typeof _ === "function") interpolateKey = interpolate = _; else interpolateKey = (interpolate = d3_svg_lineInterpolators.get(_) || d3_svg_lineLinear).key;
      return line;
    };
    line.tension = function(_) {
      if (!arguments.length) return tension;
      tension = _;
      return line;
    };
    return line;
  }
  d3.svg.line = function() {
    return d3_svg_line(d3_identity);
  };
  var d3_svg_lineInterpolators = d3.map({
    linear: d3_svg_lineLinear,
    "linear-closed": d3_svg_lineLinearClosed,
    step: d3_svg_lineStep,
    "step-before": d3_svg_lineStepBefore,
    "step-after": d3_svg_lineStepAfter,
    basis: d3_svg_lineBasis,
    "basis-open": d3_svg_lineBasisOpen,
    "basis-closed": d3_svg_lineBasisClosed,
    bundle: d3_svg_lineBundle,
    cardinal: d3_svg_lineCardinal,
    "cardinal-open": d3_svg_lineCardinalOpen,
    "cardinal-closed": d3_svg_lineCardinalClosed,
    monotone: d3_svg_lineMonotone
  });
  d3_svg_lineInterpolators.forEach(function(key, value) {
    value.key = key;
    value.closed = /-closed$/.test(key);
  });
  function d3_svg_lineLinear(points) {
    return points.length > 1 ? points.join("L") : points + "Z";
  }
  function d3_svg_lineLinearClosed(points) {
    return points.join("L") + "Z";
  }
  function d3_svg_lineStep(points) {
    var i = 0, n = points.length, p = points[0], path = [ p[0], ",", p[1] ];
    while (++i < n) path.push("H", (p[0] + (p = points[i])[0]) / 2, "V", p[1]);
    if (n > 1) path.push("H", p[0]);
    return path.join("");
  }
  function d3_svg_lineStepBefore(points) {
    var i = 0, n = points.length, p = points[0], path = [ p[0], ",", p[1] ];
    while (++i < n) path.push("V", (p = points[i])[1], "H", p[0]);
    return path.join("");
  }
  function d3_svg_lineStepAfter(points) {
    var i = 0, n = points.length, p = points[0], path = [ p[0], ",", p[1] ];
    while (++i < n) path.push("H", (p = points[i])[0], "V", p[1]);
    return path.join("");
  }
  function d3_svg_lineCardinalOpen(points, tension) {
    return points.length < 4 ? d3_svg_lineLinear(points) : points[1] + d3_svg_lineHermite(points.slice(1, -1), d3_svg_lineCardinalTangents(points, tension));
  }
  function d3_svg_lineCardinalClosed(points, tension) {
    return points.length < 3 ? d3_svg_lineLinearClosed(points) : points[0] + d3_svg_lineHermite((points.push(points[0]), 
    points), d3_svg_lineCardinalTangents([ points[points.length - 2] ].concat(points, [ points[1] ]), tension));
  }
  function d3_svg_lineCardinal(points, tension) {
    return points.length < 3 ? d3_svg_lineLinear(points) : points[0] + d3_svg_lineHermite(points, d3_svg_lineCardinalTangents(points, tension));
  }
  function d3_svg_lineHermite(points, tangents) {
    if (tangents.length < 1 || points.length != tangents.length && points.length != tangents.length + 2) {
      return d3_svg_lineLinear(points);
    }
    var quad = points.length != tangents.length, path = "", p0 = points[0], p = points[1], t0 = tangents[0], t = t0, pi = 1;
    if (quad) {
      path += "Q" + (p[0] - t0[0] * 2 / 3) + "," + (p[1] - t0[1] * 2 / 3) + "," + p[0] + "," + p[1];
      p0 = points[1];
      pi = 2;
    }
    if (tangents.length > 1) {
      t = tangents[1];
      p = points[pi];
      pi++;
      path += "C" + (p0[0] + t0[0]) + "," + (p0[1] + t0[1]) + "," + (p[0] - t[0]) + "," + (p[1] - t[1]) + "," + p[0] + "," + p[1];
      for (var i = 2; i < tangents.length; i++, pi++) {
        p = points[pi];
        t = tangents[i];
        path += "S" + (p[0] - t[0]) + "," + (p[1] - t[1]) + "," + p[0] + "," + p[1];
      }
    }
    if (quad) {
      var lp = points[pi];
      path += "Q" + (p[0] + t[0] * 2 / 3) + "," + (p[1] + t[1] * 2 / 3) + "," + lp[0] + "," + lp[1];
    }
    return path;
  }
  function d3_svg_lineCardinalTangents(points, tension) {
    var tangents = [], a = (1 - tension) / 2, p0, p1 = points[0], p2 = points[1], i = 1, n = points.length;
    while (++i < n) {
      p0 = p1;
      p1 = p2;
      p2 = points[i];
      tangents.push([ a * (p2[0] - p0[0]), a * (p2[1] - p0[1]) ]);
    }
    return tangents;
  }
  function d3_svg_lineBasis(points) {
    if (points.length < 3) return d3_svg_lineLinear(points);
    var i = 1, n = points.length, pi = points[0], x0 = pi[0], y0 = pi[1], px = [ x0, x0, x0, (pi = points[1])[0] ], py = [ y0, y0, y0, pi[1] ], path = [ x0, ",", y0, "L", d3_svg_lineDot4(d3_svg_lineBasisBezier3, px), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier3, py) ];
    points.push(points[n - 1]);
    while (++i <= n) {
      pi = points[i];
      px.shift();
      px.push(pi[0]);
      py.shift();
      py.push(pi[1]);
      d3_svg_lineBasisBezier(path, px, py);
    }
    points.pop();
    path.push("L", pi);
    return path.join("");
  }
  function d3_svg_lineBasisOpen(points) {
    if (points.length < 4) return d3_svg_lineLinear(points);
    var path = [], i = -1, n = points.length, pi, px = [ 0 ], py = [ 0 ];
    while (++i < 3) {
      pi = points[i];
      px.push(pi[0]);
      py.push(pi[1]);
    }
    path.push(d3_svg_lineDot4(d3_svg_lineBasisBezier3, px) + "," + d3_svg_lineDot4(d3_svg_lineBasisBezier3, py));
    --i;
    while (++i < n) {
      pi = points[i];
      px.shift();
      px.push(pi[0]);
      py.shift();
      py.push(pi[1]);
      d3_svg_lineBasisBezier(path, px, py);
    }
    return path.join("");
  }
  function d3_svg_lineBasisClosed(points) {
    var path, i = -1, n = points.length, m = n + 4, pi, px = [], py = [];
    while (++i < 4) {
      pi = points[i % n];
      px.push(pi[0]);
      py.push(pi[1]);
    }
    path = [ d3_svg_lineDot4(d3_svg_lineBasisBezier3, px), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier3, py) ];
    --i;
    while (++i < m) {
      pi = points[i % n];
      px.shift();
      px.push(pi[0]);
      py.shift();
      py.push(pi[1]);
      d3_svg_lineBasisBezier(path, px, py);
    }
    return path.join("");
  }
  function d3_svg_lineBundle(points, tension) {
    var n = points.length - 1;
    if (n) {
      var x0 = points[0][0], y0 = points[0][1], dx = points[n][0] - x0, dy = points[n][1] - y0, i = -1, p, t;
      while (++i <= n) {
        p = points[i];
        t = i / n;
        p[0] = tension * p[0] + (1 - tension) * (x0 + t * dx);
        p[1] = tension * p[1] + (1 - tension) * (y0 + t * dy);
      }
    }
    return d3_svg_lineBasis(points);
  }
  function d3_svg_lineDot4(a, b) {
    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];
  }
  var d3_svg_lineBasisBezier1 = [ 0, 2 / 3, 1 / 3, 0 ], d3_svg_lineBasisBezier2 = [ 0, 1 / 3, 2 / 3, 0 ], d3_svg_lineBasisBezier3 = [ 0, 1 / 6, 2 / 3, 1 / 6 ];
  function d3_svg_lineBasisBezier(path, x, y) {
    path.push("C", d3_svg_lineDot4(d3_svg_lineBasisBezier1, x), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier1, y), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier2, x), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier2, y), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier3, x), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier3, y));
  }
  function d3_svg_lineSlope(p0, p1) {
    return (p1[1] - p0[1]) / (p1[0] - p0[0]);
  }
  function d3_svg_lineFiniteDifferences(points) {
    var i = 0, j = points.length - 1, m = [], p0 = points[0], p1 = points[1], d = m[0] = d3_svg_lineSlope(p0, p1);
    while (++i < j) {
      m[i] = (d + (d = d3_svg_lineSlope(p0 = p1, p1 = points[i + 1]))) / 2;
    }
    m[i] = d;
    return m;
  }
  function d3_svg_lineMonotoneTangents(points) {
    var tangents = [], d, a, b, s, m = d3_svg_lineFiniteDifferences(points), i = -1, j = points.length - 1;
    while (++i < j) {
      d = d3_svg_lineSlope(points[i], points[i + 1]);
      if (abs(d) < ε) {
        m[i] = m[i + 1] = 0;
      } else {
        a = m[i] / d;
        b = m[i + 1] / d;
        s = a * a + b * b;
        if (s > 9) {
          s = d * 3 / Math.sqrt(s);
          m[i] = s * a;
          m[i + 1] = s * b;
        }
      }
    }
    i = -1;
    while (++i <= j) {
      s = (points[Math.min(j, i + 1)][0] - points[Math.max(0, i - 1)][0]) / (6 * (1 + m[i] * m[i]));
      tangents.push([ s || 0, m[i] * s || 0 ]);
    }
    return tangents;
  }
  function d3_svg_lineMonotone(points) {
    return points.length < 3 ? d3_svg_lineLinear(points) : points[0] + d3_svg_lineHermite(points, d3_svg_lineMonotoneTangents(points));
  }
  d3.svg.line.radial = function() {
    var line = d3_svg_line(d3_svg_lineRadial);
    line.radius = line.x, delete line.x;
    line.angle = line.y, delete line.y;
    return line;
  };
  function d3_svg_lineRadial(points) {
    var point, i = -1, n = points.length, r, a;
    while (++i < n) {
      point = points[i];
      r = point[0];
      a = point[1] - halfπ;
      point[0] = r * Math.cos(a);
      point[1] = r * Math.sin(a);
    }
    return points;
  }
  function d3_svg_area(projection) {
    var x0 = d3_geom_pointX, x1 = d3_geom_pointX, y0 = 0, y1 = d3_geom_pointY, defined = d3_true, interpolate = d3_svg_lineLinear, interpolateKey = interpolate.key, interpolateReverse = interpolate, L = "L", tension = .7;
    function area(data) {
      var segments = [], points0 = [], points1 = [], i = -1, n = data.length, d, fx0 = d3_functor(x0), fy0 = d3_functor(y0), fx1 = x0 === x1 ? function() {
        return x;
      } : d3_functor(x1), fy1 = y0 === y1 ? function() {
        return y;
      } : d3_functor(y1), x, y;
      function segment() {
        segments.push("M", interpolate(projection(points1), tension), L, interpolateReverse(projection(points0.reverse()), tension), "Z");
      }
      while (++i < n) {
        if (defined.call(this, d = data[i], i)) {
          points0.push([ x = +fx0.call(this, d, i), y = +fy0.call(this, d, i) ]);
          points1.push([ +fx1.call(this, d, i), +fy1.call(this, d, i) ]);
        } else if (points0.length) {
          segment();
          points0 = [];
          points1 = [];
        }
      }
      if (points0.length) segment();
      return segments.length ? segments.join("") : null;
    }
    area.x = function(_) {
      if (!arguments.length) return x1;
      x0 = x1 = _;
      return area;
    };
    area.x0 = function(_) {
      if (!arguments.length) return x0;
      x0 = _;
      return area;
    };
    area.x1 = function(_) {
      if (!arguments.length) return x1;
      x1 = _;
      return area;
    };
    area.y = function(_) {
      if (!arguments.length) return y1;
      y0 = y1 = _;
      return area;
    };
    area.y0 = function(_) {
      if (!arguments.length) return y0;
      y0 = _;
      return area;
    };
    area.y1 = function(_) {
      if (!arguments.length) return y1;
      y1 = _;
      return area;
    };
    area.defined = function(_) {
      if (!arguments.length) return defined;
      defined = _;
      return area;
    };
    area.interpolate = function(_) {
      if (!arguments.length) return interpolateKey;
      if (typeof _ === "function") interpolateKey = interpolate = _; else interpolateKey = (interpolate = d3_svg_lineInterpolators.get(_) || d3_svg_lineLinear).key;
      interpolateReverse = interpolate.reverse || interpolate;
      L = interpolate.closed ? "M" : "L";
      return area;
    };
    area.tension = function(_) {
      if (!arguments.length) return tension;
      tension = _;
      return area;
    };
    return area;
  }
  d3_svg_lineStepBefore.reverse = d3_svg_lineStepAfter;
  d3_svg_lineStepAfter.reverse = d3_svg_lineStepBefore;
  d3.svg.area = function() {
    return d3_svg_area(d3_identity);
  };
  d3.svg.area.radial = function() {
    var area = d3_svg_area(d3_svg_lineRadial);
    area.radius = area.x, delete area.x;
    area.innerRadius = area.x0, delete area.x0;
    area.outerRadius = area.x1, delete area.x1;
    area.angle = area.y, delete area.y;
    area.startAngle = area.y0, delete area.y0;
    area.endAngle = area.y1, delete area.y1;
    return area;
  };
  d3.svg.chord = function() {
    var source = d3_source, target = d3_target, radius = d3_svg_chordRadius, startAngle = d3_svg_arcStartAngle, endAngle = d3_svg_arcEndAngle;
    function chord(d, i) {
      var s = subgroup(this, source, d, i), t = subgroup(this, target, d, i);
      return "M" + s.p0 + arc(s.r, s.p1, s.a1 - s.a0) + (equals(s, t) ? curve(s.r, s.p1, s.r, s.p0) : curve(s.r, s.p1, t.r, t.p0) + arc(t.r, t.p1, t.a1 - t.a0) + curve(t.r, t.p1, s.r, s.p0)) + "Z";
    }
    function subgroup(self, f, d, i) {
      var subgroup = f.call(self, d, i), r = radius.call(self, subgroup, i), a0 = startAngle.call(self, subgroup, i) - halfπ, a1 = endAngle.call(self, subgroup, i) - halfπ;
      return {
        r: r,
        a0: a0,
        a1: a1,
        p0: [ r * Math.cos(a0), r * Math.sin(a0) ],
        p1: [ r * Math.cos(a1), r * Math.sin(a1) ]
      };
    }
    function equals(a, b) {
      return a.a0 == b.a0 && a.a1 == b.a1;
    }
    function arc(r, p, a) {
      return "A" + r + "," + r + " 0 " + +(a > π) + ",1 " + p;
    }
    function curve(r0, p0, r1, p1) {
      return "Q 0,0 " + p1;
    }
    chord.radius = function(v) {
      if (!arguments.length) return radius;
      radius = d3_functor(v);
      return chord;
    };
    chord.source = function(v) {
      if (!arguments.length) return source;
      source = d3_functor(v);
      return chord;
    };
    chord.target = function(v) {
      if (!arguments.length) return target;
      target = d3_functor(v);
      return chord;
    };
    chord.startAngle = function(v) {
      if (!arguments.length) return startAngle;
      startAngle = d3_functor(v);
      return chord;
    };
    chord.endAngle = function(v) {
      if (!arguments.length) return endAngle;
      endAngle = d3_functor(v);
      return chord;
    };
    return chord;
  };
  function d3_svg_chordRadius(d) {
    return d.radius;
  }
  d3.svg.diagonal = function() {
    var source = d3_source, target = d3_target, projection = d3_svg_diagonalProjection;
    function diagonal(d, i) {
      var p0 = source.call(this, d, i), p3 = target.call(this, d, i), m = (p0.y + p3.y) / 2, p = [ p0, {
        x: p0.x,
        y: m
      }, {
        x: p3.x,
        y: m
      }, p3 ];
      p = p.map(projection);
      return "M" + p[0] + "C" + p[1] + " " + p[2] + " " + p[3];
    }
    diagonal.source = function(x) {
      if (!arguments.length) return source;
      source = d3_functor(x);
      return diagonal;
    };
    diagonal.target = function(x) {
      if (!arguments.length) return target;
      target = d3_functor(x);
      return diagonal;
    };
    diagonal.projection = function(x) {
      if (!arguments.length) return projection;
      projection = x;
      return diagonal;
    };
    return diagonal;
  };
  function d3_svg_diagonalProjection(d) {
    return [ d.x, d.y ];
  }
  d3.svg.diagonal.radial = function() {
    var diagonal = d3.svg.diagonal(), projection = d3_svg_diagonalProjection, projection_ = diagonal.projection;
    diagonal.projection = function(x) {
      return arguments.length ? projection_(d3_svg_diagonalRadialProjection(projection = x)) : projection;
    };
    return diagonal;
  };
  function d3_svg_diagonalRadialProjection(projection) {
    return function() {
      var d = projection.apply(this, arguments), r = d[0], a = d[1] - halfπ;
      return [ r * Math.cos(a), r * Math.sin(a) ];
    };
  }
  d3.svg.symbol = function() {
    var type = d3_svg_symbolType, size = d3_svg_symbolSize;
    function symbol(d, i) {
      return (d3_svg_symbols.get(type.call(this, d, i)) || d3_svg_symbolCircle)(size.call(this, d, i));
    }
    symbol.type = function(x) {
      if (!arguments.length) return type;
      type = d3_functor(x);
      return symbol;
    };
    symbol.size = function(x) {
      if (!arguments.length) return size;
      size = d3_functor(x);
      return symbol;
    };
    return symbol;
  };
  function d3_svg_symbolSize() {
    return 64;
  }
  function d3_svg_symbolType() {
    return "circle";
  }
  function d3_svg_symbolCircle(size) {
    var r = Math.sqrt(size / π);
    return "M0," + r + "A" + r + "," + r + " 0 1,1 0," + -r + "A" + r + "," + r + " 0 1,1 0," + r + "Z";
  }
  var d3_svg_symbols = d3.map({
    circle: d3_svg_symbolCircle,
    cross: function(size) {
      var r = Math.sqrt(size / 5) / 2;
      return "M" + -3 * r + "," + -r + "H" + -r + "V" + -3 * r + "H" + r + "V" + -r + "H" + 3 * r + "V" + r + "H" + r + "V" + 3 * r + "H" + -r + "V" + r + "H" + -3 * r + "Z";
    },
    diamond: function(size) {
      var ry = Math.sqrt(size / (2 * d3_svg_symbolTan30)), rx = ry * d3_svg_symbolTan30;
      return "M0," + -ry + "L" + rx + ",0" + " 0," + ry + " " + -rx + ",0" + "Z";
    },
    square: function(size) {
      var r = Math.sqrt(size) / 2;
      return "M" + -r + "," + -r + "L" + r + "," + -r + " " + r + "," + r + " " + -r + "," + r + "Z";
    },
    "triangle-down": function(size) {
      var rx = Math.sqrt(size / d3_svg_symbolSqrt3), ry = rx * d3_svg_symbolSqrt3 / 2;
      return "M0," + ry + "L" + rx + "," + -ry + " " + -rx + "," + -ry + "Z";
    },
    "triangle-up": function(size) {
      var rx = Math.sqrt(size / d3_svg_symbolSqrt3), ry = rx * d3_svg_symbolSqrt3 / 2;
      return "M0," + -ry + "L" + rx + "," + ry + " " + -rx + "," + ry + "Z";
    }
  });
  d3.svg.symbolTypes = d3_svg_symbols.keys();
  var d3_svg_symbolSqrt3 = Math.sqrt(3), d3_svg_symbolTan30 = Math.tan(30 * d3_radians);
  d3_selectionPrototype.transition = function(name) {
    var id = d3_transitionInheritId || ++d3_transitionId, ns = d3_transitionNamespace(name), subgroups = [], subgroup, node, transition = d3_transitionInherit || {
      time: Date.now(),
      ease: d3_ease_cubicInOut,
      delay: 0,
      duration: 250
    };
    for (var j = -1, m = this.length; ++j < m; ) {
      subgroups.push(subgroup = []);
      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {
        if (node = group[i]) d3_transitionNode(node, i, ns, id, transition);
        subgroup.push(node);
      }
    }
    return d3_transition(subgroups, ns, id);
  };
  d3_selectionPrototype.interrupt = function(name) {
    return this.each(name == null ? d3_selection_interrupt : d3_selection_interruptNS(d3_transitionNamespace(name)));
  };
  var d3_selection_interrupt = d3_selection_interruptNS(d3_transitionNamespace());
  function d3_selection_interruptNS(ns) {
    return function() {
      var lock, activeId, active;
      if ((lock = this[ns]) && (active = lock[activeId = lock.active])) {
        active.timer.c = null;
        active.timer.t = NaN;
        if (--lock.count) delete lock[activeId]; else delete this[ns];
        lock.active += .5;
        active.event && active.event.interrupt.call(this, this.__data__, active.index);
      }
    };
  }
  function d3_transition(groups, ns, id) {
    d3_subclass(groups, d3_transitionPrototype);
    groups.namespace = ns;
    groups.id = id;
    return groups;
  }
  var d3_transitionPrototype = [], d3_transitionId = 0, d3_transitionInheritId, d3_transitionInherit;
  d3_transitionPrototype.call = d3_selectionPrototype.call;
  d3_transitionPrototype.empty = d3_selectionPrototype.empty;
  d3_transitionPrototype.node = d3_selectionPrototype.node;
  d3_transitionPrototype.size = d3_selectionPrototype.size;
  d3.transition = function(selection, name) {
    return selection && selection.transition ? d3_transitionInheritId ? selection.transition(name) : selection : d3.selection().transition(selection);
  };
  d3.transition.prototype = d3_transitionPrototype;
  d3_transitionPrototype.select = function(selector) {
    var id = this.id, ns = this.namespace, subgroups = [], subgroup, subnode, node;
    selector = d3_selection_selector(selector);
    for (var j = -1, m = this.length; ++j < m; ) {
      subgroups.push(subgroup = []);
      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {
        if ((node = group[i]) && (subnode = selector.call(node, node.__data__, i, j))) {
          if ("__data__" in node) subnode.__data__ = node.__data__;
          d3_transitionNode(subnode, i, ns, id, node[ns][id]);
          subgroup.push(subnode);
        } else {
          subgroup.push(null);
        }
      }
    }
    return d3_transition(subgroups, ns, id);
  };
  d3_transitionPrototype.selectAll = function(selector) {
    var id = this.id, ns = this.namespace, subgroups = [], subgroup, subnodes, node, subnode, transition;
    selector = d3_selection_selectorAll(selector);
    for (var j = -1, m = this.length; ++j < m; ) {
      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {
        if (node = group[i]) {
          transition = node[ns][id];
          subnodes = selector.call(node, node.__data__, i, j);
          subgroups.push(subgroup = []);
          for (var k = -1, o = subnodes.length; ++k < o; ) {
            if (subnode = subnodes[k]) d3_transitionNode(subnode, k, ns, id, transition);
            subgroup.push(subnode);
          }
        }
      }
    }
    return d3_transition(subgroups, ns, id);
  };
  d3_transitionPrototype.filter = function(filter) {
    var subgroups = [], subgroup, group, node;
    if (typeof filter !== "function") filter = d3_selection_filter(filter);
    for (var j = 0, m = this.length; j < m; j++) {
      subgroups.push(subgroup = []);
      for (var group = this[j], i = 0, n = group.length; i < n; i++) {
        if ((node = group[i]) && filter.call(node, node.__data__, i, j)) {
          subgroup.push(node);
        }
      }
    }
    return d3_transition(subgroups, this.namespace, this.id);
  };
  d3_transitionPrototype.tween = function(name, tween) {
    var id = this.id, ns = this.namespace;
    if (arguments.length < 2) return this.node()[ns][id].tween.get(name);
    return d3_selection_each(this, tween == null ? function(node) {
      node[ns][id].tween.remove(name);
    } : function(node) {
      node[ns][id].tween.set(name, tween);
    });
  };
  function d3_transition_tween(groups, name, value, tween) {
    var id = groups.id, ns = groups.namespace;
    return d3_selection_each(groups, typeof value === "function" ? function(node, i, j) {
      node[ns][id].tween.set(name, tween(value.call(node, node.__data__, i, j)));
    } : (value = tween(value), function(node) {
      node[ns][id].tween.set(name, value);
    }));
  }
  d3_transitionPrototype.attr = function(nameNS, value) {
    if (arguments.length < 2) {
      for (value in nameNS) this.attr(value, nameNS[value]);
      return this;
    }
    var interpolate = nameNS == "transform" ? d3_interpolateTransform : d3_interpolate, name = d3.ns.qualify(nameNS);
    function attrNull() {
      this.removeAttribute(name);
    }
    function attrNullNS() {
      this.removeAttributeNS(name.space, name.local);
    }
    function attrTween(b) {
      return b == null ? attrNull : (b += "", function() {
        var a = this.getAttribute(name), i;
        return a !== b && (i = interpolate(a, b), function(t) {
          this.setAttribute(name, i(t));
        });
      });
    }
    function attrTweenNS(b) {
      return b == null ? attrNullNS : (b += "", function() {
        var a = this.getAttributeNS(name.space, name.local), i;
        return a !== b && (i = interpolate(a, b), function(t) {
          this.setAttributeNS(name.space, name.local, i(t));
        });
      });
    }
    return d3_transition_tween(this, "attr." + nameNS, value, name.local ? attrTweenNS : attrTween);
  };
  d3_transitionPrototype.attrTween = function(nameNS, tween) {
    var name = d3.ns.qualify(nameNS);
    function attrTween(d, i) {
      var f = tween.call(this, d, i, this.getAttribute(name));
      return f && function(t) {
        this.setAttribute(name, f(t));
      };
    }
    function attrTweenNS(d, i) {
      var f = tween.call(this, d, i, this.getAttributeNS(name.space, name.local));
      return f && function(t) {
        this.setAttributeNS(name.space, name.local, f(t));
      };
    }
    return this.tween("attr." + nameNS, name.local ? attrTweenNS : attrTween);
  };
  d3_transitionPrototype.style = function(name, value, priority) {
    var n = arguments.length;
    if (n < 3) {
      if (typeof name !== "string") {
        if (n < 2) value = "";
        for (priority in name) this.style(priority, name[priority], value);
        return this;
      }
      priority = "";
    }
    function styleNull() {
      this.style.removeProperty(name);
    }
    function styleString(b) {
      return b == null ? styleNull : (b += "", function() {
        var a = d3_window(this).getComputedStyle(this, null).getPropertyValue(name), i;
        return a !== b && (i = d3_interpolate(a, b), function(t) {
          this.style.setProperty(name, i(t), priority);
        });
      });
    }
    return d3_transition_tween(this, "style." + name, value, styleString);
  };
  d3_transitionPrototype.styleTween = function(name, tween, priority) {
    if (arguments.length < 3) priority = "";
    function styleTween(d, i) {
      var f = tween.call(this, d, i, d3_window(this).getComputedStyle(this, null).getPropertyValue(name));
      return f && function(t) {
        this.style.setProperty(name, f(t), priority);
      };
    }
    return this.tween("style." + name, styleTween);
  };
  d3_transitionPrototype.text = function(value) {
    return d3_transition_tween(this, "text", value, d3_transition_text);
  };
  function d3_transition_text(b) {
    if (b == null) b = "";
    return function() {
      this.textContent = b;
    };
  }
  d3_transitionPrototype.remove = function() {
    var ns = this.namespace;
    return this.each("end.transition", function() {
      var p;
      if (this[ns].count < 2 && (p = this.parentNode)) p.removeChild(this);
    });
  };
  d3_transitionPrototype.ease = function(value) {
    var id = this.id, ns = this.namespace;
    if (arguments.length < 1) return this.node()[ns][id].ease;
    if (typeof value !== "function") value = d3.ease.apply(d3, arguments);
    return d3_selection_each(this, function(node) {
      node[ns][id].ease = value;
    });
  };
  d3_transitionPrototype.delay = function(value) {
    var id = this.id, ns = this.namespace;
    if (arguments.length < 1) return this.node()[ns][id].delay;
    return d3_selection_each(this, typeof value === "function" ? function(node, i, j) {
      node[ns][id].delay = +value.call(node, node.__data__, i, j);
    } : (value = +value, function(node) {
      node[ns][id].delay = value;
    }));
  };
  d3_transitionPrototype.duration = function(value) {
    var id = this.id, ns = this.namespace;
    if (arguments.length < 1) return this.node()[ns][id].duration;
    return d3_selection_each(this, typeof value === "function" ? function(node, i, j) {
      node[ns][id].duration = Math.max(1, value.call(node, node.__data__, i, j));
    } : (value = Math.max(1, value), function(node) {
      node[ns][id].duration = value;
    }));
  };
  d3_transitionPrototype.each = function(type, listener) {
    var id = this.id, ns = this.namespace;
    if (arguments.length < 2) {
      var inherit = d3_transitionInherit, inheritId = d3_transitionInheritId;
      try {
        d3_transitionInheritId = id;
        d3_selection_each(this, function(node, i, j) {
          d3_transitionInherit = node[ns][id];
          type.call(node, node.__data__, i, j);
        });
      } finally {
        d3_transitionInherit = inherit;
        d3_transitionInheritId = inheritId;
      }
    } else {
      d3_selection_each(this, function(node) {
        var transition = node[ns][id];
        (transition.event || (transition.event = d3.dispatch("start", "end", "interrupt"))).on(type, listener);
      });
    }
    return this;
  };
  d3_transitionPrototype.transition = function() {
    var id0 = this.id, id1 = ++d3_transitionId, ns = this.namespace, subgroups = [], subgroup, group, node, transition;
    for (var j = 0, m = this.length; j < m; j++) {
      subgroups.push(subgroup = []);
      for (var group = this[j], i = 0, n = group.length; i < n; i++) {
        if (node = group[i]) {
          transition = node[ns][id0];
          d3_transitionNode(node, i, ns, id1, {
            time: transition.time,
            ease: transition.ease,
            delay: transition.delay + transition.duration,
            duration: transition.duration
          });
        }
        subgroup.push(node);
      }
    }
    return d3_transition(subgroups, ns, id1);
  };
  function d3_transitionNamespace(name) {
    return name == null ? "__transition__" : "__transition_" + name + "__";
  }
  function d3_transitionNode(node, i, ns, id, inherit) {
    var lock = node[ns] || (node[ns] = {
      active: 0,
      count: 0
    }), transition = lock[id], time, timer, duration, ease, tweens;
    function schedule(elapsed) {
      var delay = transition.delay;
      timer.t = delay + time;
      if (delay <= elapsed) return start(elapsed - delay);
      timer.c = start;
    }
    function start(elapsed) {
      var activeId = lock.active, active = lock[activeId];
      if (active) {
        active.timer.c = null;
        active.timer.t = NaN;
        --lock.count;
        delete lock[activeId];
        active.event && active.event.interrupt.call(node, node.__data__, active.index);
      }
      for (var cancelId in lock) {
        if (+cancelId < id) {
          var cancel = lock[cancelId];
          cancel.timer.c = null;
          cancel.timer.t = NaN;
          --lock.count;
          delete lock[cancelId];
        }
      }
      timer.c = tick;
      d3_timer(function() {
        if (timer.c && tick(elapsed || 1)) {
          timer.c = null;
          timer.t = NaN;
        }
        return 1;
      }, 0, time);
      lock.active = id;
      transition.event && transition.event.start.call(node, node.__data__, i);
      tweens = [];
      transition.tween.forEach(function(key, value) {
        if (value = value.call(node, node.__data__, i)) {
          tweens.push(value);
        }
      });
      ease = transition.ease;
      duration = transition.duration;
    }
    function tick(elapsed) {
      var t = elapsed / duration, e = ease(t), n = tweens.length;
      while (n > 0) {
        tweens[--n].call(node, e);
      }
      if (t >= 1) {
        transition.event && transition.event.end.call(node, node.__data__, i);
        if (--lock.count) delete lock[id]; else delete node[ns];
        return 1;
      }
    }
    if (!transition) {
      time = inherit.time;
      timer = d3_timer(schedule, 0, time);
      transition = lock[id] = {
        tween: new d3_Map(),
        time: time,
        timer: timer,
        delay: inherit.delay,
        duration: inherit.duration,
        ease: inherit.ease,
        index: i
      };
      inherit = null;
      ++lock.count;
    }
  }
  d3.svg.axis = function() {
    var scale = d3.scale.linear(), orient = d3_svg_axisDefaultOrient, innerTickSize = 6, outerTickSize = 6, tickPadding = 3, tickArguments_ = [ 10 ], tickValues = null, tickFormat_;
    function axis(g) {
      g.each(function() {
        var g = d3.select(this);
        var scale0 = this.__chart__ || scale, scale1 = this.__chart__ = scale.copy();
        var ticks = tickValues == null ? scale1.ticks ? scale1.ticks.apply(scale1, tickArguments_) : scale1.domain() : tickValues, tickFormat = tickFormat_ == null ? scale1.tickFormat ? scale1.tickFormat.apply(scale1, tickArguments_) : d3_identity : tickFormat_, tick = g.selectAll(".tick").data(ticks, scale1), tickEnter = tick.enter().insert("g", ".domain").attr("class", "tick").style("opacity", ε), tickExit = d3.transition(tick.exit()).style("opacity", ε).remove(), tickUpdate = d3.transition(tick.order()).style("opacity", 1), tickSpacing = Math.max(innerTickSize, 0) + tickPadding, tickTransform;
        var range = d3_scaleRange(scale1), path = g.selectAll(".domain").data([ 0 ]), pathUpdate = (path.enter().append("path").attr("class", "domain"), 
        d3.transition(path));
        tickEnter.append("line");
        tickEnter.append("text");
        var lineEnter = tickEnter.select("line"), lineUpdate = tickUpdate.select("line"), text = tick.select("text").text(tickFormat), textEnter = tickEnter.select("text"), textUpdate = tickUpdate.select("text"), sign = orient === "top" || orient === "left" ? -1 : 1, x1, x2, y1, y2;
        if (orient === "bottom" || orient === "top") {
          tickTransform = d3_svg_axisX, x1 = "x", y1 = "y", x2 = "x2", y2 = "y2";
          text.attr("dy", sign < 0 ? "0em" : ".71em").style("text-anchor", "middle");
          pathUpdate.attr("d", "M" + range[0] + "," + sign * outerTickSize + "V0H" + range[1] + "V" + sign * outerTickSize);
        } else {
          tickTransform = d3_svg_axisY, x1 = "y", y1 = "x", x2 = "y2", y2 = "x2";
          text.attr("dy", ".32em").style("text-anchor", sign < 0 ? "end" : "start");
          pathUpdate.attr("d", "M" + sign * outerTickSize + "," + range[0] + "H0V" + range[1] + "H" + sign * outerTickSize);
        }
        lineEnter.attr(y2, sign * innerTickSize);
        textEnter.attr(y1, sign * tickSpacing);
        lineUpdate.attr(x2, 0).attr(y2, sign * innerTickSize);
        textUpdate.attr(x1, 0).attr(y1, sign * tickSpacing);
        if (scale1.rangeBand) {
          var x = scale1, dx = x.rangeBand() / 2;
          scale0 = scale1 = function(d) {
            return x(d) + dx;
          };
        } else if (scale0.rangeBand) {
          scale0 = scale1;
        } else {
          tickExit.call(tickTransform, scale1, scale0);
        }
        tickEnter.call(tickTransform, scale0, scale1);
        tickUpdate.call(tickTransform, scale1, scale1);
      });
    }
    axis.scale = function(x) {
      if (!arguments.length) return scale;
      scale = x;
      return axis;
    };
    axis.orient = function(x) {
      if (!arguments.length) return orient;
      orient = x in d3_svg_axisOrients ? x + "" : d3_svg_axisDefaultOrient;
      return axis;
    };
    axis.ticks = function() {
      if (!arguments.length) return tickArguments_;
      tickArguments_ = d3_array(arguments);
      return axis;
    };
    axis.tickValues = function(x) {
      if (!arguments.length) return tickValues;
      tickValues = x;
      return axis;
    };
    axis.tickFormat = function(x) {
      if (!arguments.length) return tickFormat_;
      tickFormat_ = x;
      return axis;
    };
    axis.tickSize = function(x) {
      var n = arguments.length;
      if (!n) return innerTickSize;
      innerTickSize = +x;
      outerTickSize = +arguments[n - 1];
      return axis;
    };
    axis.innerTickSize = function(x) {
      if (!arguments.length) return innerTickSize;
      innerTickSize = +x;
      return axis;
    };
    axis.outerTickSize = function(x) {
      if (!arguments.length) return outerTickSize;
      outerTickSize = +x;
      return axis;
    };
    axis.tickPadding = function(x) {
      if (!arguments.length) return tickPadding;
      tickPadding = +x;
      return axis;
    };
    axis.tickSubdivide = function() {
      return arguments.length && axis;
    };
    return axis;
  };
  var d3_svg_axisDefaultOrient = "bottom", d3_svg_axisOrients = {
    top: 1,
    right: 1,
    bottom: 1,
    left: 1
  };
  function d3_svg_axisX(selection, x0, x1) {
    selection.attr("transform", function(d) {
      var v0 = x0(d);
      return "translate(" + (isFinite(v0) ? v0 : x1(d)) + ",0)";
    });
  }
  function d3_svg_axisY(selection, y0, y1) {
    selection.attr("transform", function(d) {
      var v0 = y0(d);
      return "translate(0," + (isFinite(v0) ? v0 : y1(d)) + ")";
    });
  }
  d3.svg.brush = function() {
    var event = d3_eventDispatch(brush, "brushstart", "brush", "brushend"), x = null, y = null, xExtent = [ 0, 0 ], yExtent = [ 0, 0 ], xExtentDomain, yExtentDomain, xClamp = true, yClamp = true, resizes = d3_svg_brushResizes[0];
    function brush(g) {
      g.each(function() {
        var g = d3.select(this).style("pointer-events", "all").style("-webkit-tap-highlight-color", "rgba(0,0,0,0)").on("mousedown.brush", brushstart).on("touchstart.brush", brushstart);
        var background = g.selectAll(".background").data([ 0 ]);
        background.enter().append("rect").attr("class", "background").style("visibility", "hidden").style("cursor", "crosshair");
        g.selectAll(".extent").data([ 0 ]).enter().append("rect").attr("class", "extent").style("cursor", "move");
        var resize = g.selectAll(".resize").data(resizes, d3_identity);
        resize.exit().remove();
        resize.enter().append("g").attr("class", function(d) {
          return "resize " + d;
        }).style("cursor", function(d) {
          return d3_svg_brushCursor[d];
        }).append("rect").attr("x", function(d) {
          return /[ew]$/.test(d) ? -3 : null;
        }).attr("y", function(d) {
          return /^[ns]/.test(d) ? -3 : null;
        }).attr("width", 6).attr("height", 6).style("visibility", "hidden");
        resize.style("display", brush.empty() ? "none" : null);
        var gUpdate = d3.transition(g), backgroundUpdate = d3.transition(background), range;
        if (x) {
          range = d3_scaleRange(x);
          backgroundUpdate.attr("x", range[0]).attr("width", range[1] - range[0]);
          redrawX(gUpdate);
        }
        if (y) {
          range = d3_scaleRange(y);
          backgroundUpdate.attr("y", range[0]).attr("height", range[1] - range[0]);
          redrawY(gUpdate);
        }
        redraw(gUpdate);
      });
    }
    brush.event = function(g) {
      g.each(function() {
        var event_ = event.of(this, arguments), extent1 = {
          x: xExtent,
          y: yExtent,
          i: xExtentDomain,
          j: yExtentDomain
        }, extent0 = this.__chart__ || extent1;
        this.__chart__ = extent1;
        if (d3_transitionInheritId) {
          d3.select(this).transition().each("start.brush", function() {
            xExtentDomain = extent0.i;
            yExtentDomain = extent0.j;
            xExtent = extent0.x;
            yExtent = extent0.y;
            event_({
              type: "brushstart"
            });
          }).tween("brush:brush", function() {
            var xi = d3_interpolateArray(xExtent, extent1.x), yi = d3_interpolateArray(yExtent, extent1.y);
            xExtentDomain = yExtentDomain = null;
            return function(t) {
              xExtent = extent1.x = xi(t);
              yExtent = extent1.y = yi(t);
              event_({
                type: "brush",
                mode: "resize"
              });
            };
          }).each("end.brush", function() {
            xExtentDomain = extent1.i;
            yExtentDomain = extent1.j;
            event_({
              type: "brush",
              mode: "resize"
            });
            event_({
              type: "brushend"
            });
          });
        } else {
          event_({
            type: "brushstart"
          });
          event_({
            type: "brush",
            mode: "resize"
          });
          event_({
            type: "brushend"
          });
        }
      });
    };
    function redraw(g) {
      g.selectAll(".resize").attr("transform", function(d) {
        return "translate(" + xExtent[+/e$/.test(d)] + "," + yExtent[+/^s/.test(d)] + ")";
      });
    }
    function redrawX(g) {
      g.select(".extent").attr("x", xExtent[0]);
      g.selectAll(".extent,.n>rect,.s>rect").attr("width", xExtent[1] - xExtent[0]);
    }
    function redrawY(g) {
      g.select(".extent").attr("y", yExtent[0]);
      g.selectAll(".extent,.e>rect,.w>rect").attr("height", yExtent[1] - yExtent[0]);
    }
    function brushstart() {
      var target = this, eventTarget = d3.select(d3.event.target), event_ = event.of(target, arguments), g = d3.select(target), resizing = eventTarget.datum(), resizingX = !/^(n|s)$/.test(resizing) && x, resizingY = !/^(e|w)$/.test(resizing) && y, dragging = eventTarget.classed("extent"), dragRestore = d3_event_dragSuppress(target), center, origin = d3.mouse(target), offset;
      var w = d3.select(d3_window(target)).on("keydown.brush", keydown).on("keyup.brush", keyup);
      if (d3.event.changedTouches) {
        w.on("touchmove.brush", brushmove).on("touchend.brush", brushend);
      } else {
        w.on("mousemove.brush", brushmove).on("mouseup.brush", brushend);
      }
      g.interrupt().selectAll("*").interrupt();
      if (dragging) {
        origin[0] = xExtent[0] - origin[0];
        origin[1] = yExtent[0] - origin[1];
      } else if (resizing) {
        var ex = +/w$/.test(resizing), ey = +/^n/.test(resizing);
        offset = [ xExtent[1 - ex] - origin[0], yExtent[1 - ey] - origin[1] ];
        origin[0] = xExtent[ex];
        origin[1] = yExtent[ey];
      } else if (d3.event.altKey) center = origin.slice();
      g.style("pointer-events", "none").selectAll(".resize").style("display", null);
      d3.select("body").style("cursor", eventTarget.style("cursor"));
      event_({
        type: "brushstart"
      });
      brushmove();
      function keydown() {
        if (d3.event.keyCode == 32) {
          if (!dragging) {
            center = null;
            origin[0] -= xExtent[1];
            origin[1] -= yExtent[1];
            dragging = 2;
          }
          d3_eventPreventDefault();
        }
      }
      function keyup() {
        if (d3.event.keyCode == 32 && dragging == 2) {
          origin[0] += xExtent[1];
          origin[1] += yExtent[1];
          dragging = 0;
          d3_eventPreventDefault();
        }
      }
      function brushmove() {
        var point = d3.mouse(target), moved = false;
        if (offset) {
          point[0] += offset[0];
          point[1] += offset[1];
        }
        if (!dragging) {
          if (d3.event.altKey) {
            if (!center) center = [ (xExtent[0] + xExtent[1]) / 2, (yExtent[0] + yExtent[1]) / 2 ];
            origin[0] = xExtent[+(point[0] < center[0])];
            origin[1] = yExtent[+(point[1] < center[1])];
          } else center = null;
        }
        if (resizingX && move1(point, x, 0)) {
          redrawX(g);
          moved = true;
        }
        if (resizingY && move1(point, y, 1)) {
          redrawY(g);
          moved = true;
        }
        if (moved) {
          redraw(g);
          event_({
            type: "brush",
            mode: dragging ? "move" : "resize"
          });
        }
      }
      function move1(point, scale, i) {
        var range = d3_scaleRange(scale), r0 = range[0], r1 = range[1], position = origin[i], extent = i ? yExtent : xExtent, size = extent[1] - extent[0], min, max;
        if (dragging) {
          r0 -= position;
          r1 -= size + position;
        }
        min = (i ? yClamp : xClamp) ? Math.max(r0, Math.min(r1, point[i])) : point[i];
        if (dragging) {
          max = (min += position) + size;
        } else {
          if (center) position = Math.max(r0, Math.min(r1, 2 * center[i] - min));
          if (position < min) {
            max = min;
            min = position;
          } else {
            max = position;
          }
        }
        if (extent[0] != min || extent[1] != max) {
          if (i) yExtentDomain = null; else xExtentDomain = null;
          extent[0] = min;
          extent[1] = max;
          return true;
        }
      }
      function brushend() {
        brushmove();
        g.style("pointer-events", "all").selectAll(".resize").style("display", brush.empty() ? "none" : null);
        d3.select("body").style("cursor", null);
        w.on("mousemove.brush", null).on("mouseup.brush", null).on("touchmove.brush", null).on("touchend.brush", null).on("keydown.brush", null).on("keyup.brush", null);
        dragRestore();
        event_({
          type: "brushend"
        });
      }
    }
    brush.x = function(z) {
      if (!arguments.length) return x;
      x = z;
      resizes = d3_svg_brushResizes[!x << 1 | !y];
      return brush;
    };
    brush.y = function(z) {
      if (!arguments.length) return y;
      y = z;
      resizes = d3_svg_brushResizes[!x << 1 | !y];
      return brush;
    };
    brush.clamp = function(z) {
      if (!arguments.length) return x && y ? [ xClamp, yClamp ] : x ? xClamp : y ? yClamp : null;
      if (x && y) xClamp = !!z[0], yClamp = !!z[1]; else if (x) xClamp = !!z; else if (y) yClamp = !!z;
      return brush;
    };
    brush.extent = function(z) {
      var x0, x1, y0, y1, t;
      if (!arguments.length) {
        if (x) {
          if (xExtentDomain) {
            x0 = xExtentDomain[0], x1 = xExtentDomain[1];
          } else {
            x0 = xExtent[0], x1 = xExtent[1];
            if (x.invert) x0 = x.invert(x0), x1 = x.invert(x1);
            if (x1 < x0) t = x0, x0 = x1, x1 = t;
          }
        }
        if (y) {
          if (yExtentDomain) {
            y0 = yExtentDomain[0], y1 = yExtentDomain[1];
          } else {
            y0 = yExtent[0], y1 = yExtent[1];
            if (y.invert) y0 = y.invert(y0), y1 = y.invert(y1);
            if (y1 < y0) t = y0, y0 = y1, y1 = t;
          }
        }
        return x && y ? [ [ x0, y0 ], [ x1, y1 ] ] : x ? [ x0, x1 ] : y && [ y0, y1 ];
      }
      if (x) {
        x0 = z[0], x1 = z[1];
        if (y) x0 = x0[0], x1 = x1[0];
        xExtentDomain = [ x0, x1 ];
        if (x.invert) x0 = x(x0), x1 = x(x1);
        if (x1 < x0) t = x0, x0 = x1, x1 = t;
        if (x0 != xExtent[0] || x1 != xExtent[1]) xExtent = [ x0, x1 ];
      }
      if (y) {
        y0 = z[0], y1 = z[1];
        if (x) y0 = y0[1], y1 = y1[1];
        yExtentDomain = [ y0, y1 ];
        if (y.invert) y0 = y(y0), y1 = y(y1);
        if (y1 < y0) t = y0, y0 = y1, y1 = t;
        if (y0 != yExtent[0] || y1 != yExtent[1]) yExtent = [ y0, y1 ];
      }
      return brush;
    };
    brush.clear = function() {
      if (!brush.empty()) {
        xExtent = [ 0, 0 ], yExtent = [ 0, 0 ];
        xExtentDomain = yExtentDomain = null;
      }
      return brush;
    };
    brush.empty = function() {
      return !!x && xExtent[0] == xExtent[1] || !!y && yExtent[0] == yExtent[1];
    };
    return d3.rebind(brush, event, "on");
  };
  var d3_svg_brushCursor = {
    n: "ns-resize",
    e: "ew-resize",
    s: "ns-resize",
    w: "ew-resize",
    nw: "nwse-resize",
    ne: "nesw-resize",
    se: "nwse-resize",
    sw: "nesw-resize"
  };
  var d3_svg_brushResizes = [ [ "n", "e", "s", "w", "nw", "ne", "se", "sw" ], [ "e", "w" ], [ "n", "s" ], [] ];
  var d3_time_format = d3_time.format = d3_locale_enUS.timeFormat;
  var d3_time_formatUtc = d3_time_format.utc;
  var d3_time_formatIso = d3_time_formatUtc("%Y-%m-%dT%H:%M:%S.%LZ");
  d3_time_format.iso = Date.prototype.toISOString && +new Date("2000-01-01T00:00:00.000Z") ? d3_time_formatIsoNative : d3_time_formatIso;
  function d3_time_formatIsoNative(date) {
    return date.toISOString();
  }
  d3_time_formatIsoNative.parse = function(string) {
    var date = new Date(string);
    return isNaN(date) ? null : date;
  };
  d3_time_formatIsoNative.toString = d3_time_formatIso.toString;
  d3_time.second = d3_time_interval(function(date) {
    return new d3_date(Math.floor(date / 1e3) * 1e3);
  }, function(date, offset) {
    date.setTime(date.getTime() + Math.floor(offset) * 1e3);
  }, function(date) {
    return date.getSeconds();
  });
  d3_time.seconds = d3_time.second.range;
  d3_time.seconds.utc = d3_time.second.utc.range;
  d3_time.minute = d3_time_interval(function(date) {
    return new d3_date(Math.floor(date / 6e4) * 6e4);
  }, function(date, offset) {
    date.setTime(date.getTime() + Math.floor(offset) * 6e4);
  }, function(date) {
    return date.getMinutes();
  });
  d3_time.minutes = d3_time.minute.range;
  d3_time.minutes.utc = d3_time.minute.utc.range;
  d3_time.hour = d3_time_interval(function(date) {
    var timezone = date.getTimezoneOffset() / 60;
    return new d3_date((Math.floor(date / 36e5 - timezone) + timezone) * 36e5);
  }, function(date, offset) {
    date.setTime(date.getTime() + Math.floor(offset) * 36e5);
  }, function(date) {
    return date.getHours();
  });
  d3_time.hours = d3_time.hour.range;
  d3_time.hours.utc = d3_time.hour.utc.range;
  d3_time.month = d3_time_interval(function(date) {
    date = d3_time.day(date);
    date.setDate(1);
    return date;
  }, function(date, offset) {
    date.setMonth(date.getMonth() + offset);
  }, function(date) {
    return date.getMonth();
  });
  d3_time.months = d3_time.month.range;
  d3_time.months.utc = d3_time.month.utc.range;
  function d3_time_scale(linear, methods, format) {
    function scale(x) {
      return linear(x);
    }
    scale.invert = function(x) {
      return d3_time_scaleDate(linear.invert(x));
    };
    scale.domain = function(x) {
      if (!arguments.length) return linear.domain().map(d3_time_scaleDate);
      linear.domain(x);
      return scale;
    };
    function tickMethod(extent, count) {
      var span = extent[1] - extent[0], target = span / count, i = d3.bisect(d3_time_scaleSteps, target);
      return i == d3_time_scaleSteps.length ? [ methods.year, d3_scale_linearTickRange(extent.map(function(d) {
        return d / 31536e6;
      }), count)[2] ] : !i ? [ d3_time_scaleMilliseconds, d3_scale_linearTickRange(extent, count)[2] ] : methods[target / d3_time_scaleSteps[i - 1] < d3_time_scaleSteps[i] / target ? i - 1 : i];
    }
    scale.nice = function(interval, skip) {
      var domain = scale.domain(), extent = d3_scaleExtent(domain), method = interval == null ? tickMethod(extent, 10) : typeof interval === "number" && tickMethod(extent, interval);
      if (method) interval = method[0], skip = method[1];
      function skipped(date) {
        return !isNaN(date) && !interval.range(date, d3_time_scaleDate(+date + 1), skip).length;
      }
      return scale.domain(d3_scale_nice(domain, skip > 1 ? {
        floor: function(date) {
          while (skipped(date = interval.floor(date))) date = d3_time_scaleDate(date - 1);
          return date;
        },
        ceil: function(date) {
          while (skipped(date = interval.ceil(date))) date = d3_time_scaleDate(+date + 1);
          return date;
        }
      } : interval));
    };
    scale.ticks = function(interval, skip) {
      var extent = d3_scaleExtent(scale.domain()), method = interval == null ? tickMethod(extent, 10) : typeof interval === "number" ? tickMethod(extent, interval) : !interval.range && [ {
        range: interval
      }, skip ];
      if (method) interval = method[0], skip = method[1];
      return interval.range(extent[0], d3_time_scaleDate(+extent[1] + 1), skip < 1 ? 1 : skip);
    };
    scale.tickFormat = function() {
      return format;
    };
    scale.copy = function() {
      return d3_time_scale(linear.copy(), methods, format);
    };
    return d3_scale_linearRebind(scale, linear);
  }
  function d3_time_scaleDate(t) {
    return new Date(t);
  }
  var d3_time_scaleSteps = [ 1e3, 5e3, 15e3, 3e4, 6e4, 3e5, 9e5, 18e5, 36e5, 108e5, 216e5, 432e5, 864e5, 1728e5, 6048e5, 2592e6, 7776e6, 31536e6 ];
  var d3_time_scaleLocalMethods = [ [ d3_time.second, 1 ], [ d3_time.second, 5 ], [ d3_time.second, 15 ], [ d3_time.second, 30 ], [ d3_time.minute, 1 ], [ d3_time.minute, 5 ], [ d3_time.minute, 15 ], [ d3_time.minute, 30 ], [ d3_time.hour, 1 ], [ d3_time.hour, 3 ], [ d3_time.hour, 6 ], [ d3_time.hour, 12 ], [ d3_time.day, 1 ], [ d3_time.day, 2 ], [ d3_time.week, 1 ], [ d3_time.month, 1 ], [ d3_time.month, 3 ], [ d3_time.year, 1 ] ];
  var d3_time_scaleLocalFormat = d3_time_format.multi([ [ ".%L", function(d) {
    return d.getMilliseconds();
  } ], [ ":%S", function(d) {
    return d.getSeconds();
  } ], [ "%I:%M", function(d) {
    return d.getMinutes();
  } ], [ "%I %p", function(d) {
    return d.getHours();
  } ], [ "%a %d", function(d) {
    return d.getDay() && d.getDate() != 1;
  } ], [ "%b %d", function(d) {
    return d.getDate() != 1;
  } ], [ "%B", function(d) {
    return d.getMonth();
  } ], [ "%Y", d3_true ] ]);
  var d3_time_scaleMilliseconds = {
    range: function(start, stop, step) {
      return d3.range(Math.ceil(start / step) * step, +stop, step).map(d3_time_scaleDate);
    },
    floor: d3_identity,
    ceil: d3_identity
  };
  d3_time_scaleLocalMethods.year = d3_time.year;
  d3_time.scale = function() {
    return d3_time_scale(d3.scale.linear(), d3_time_scaleLocalMethods, d3_time_scaleLocalFormat);
  };
  var d3_time_scaleUtcMethods = d3_time_scaleLocalMethods.map(function(m) {
    return [ m[0].utc, m[1] ];
  });
  var d3_time_scaleUtcFormat = d3_time_formatUtc.multi([ [ ".%L", function(d) {
    return d.getUTCMilliseconds();
  } ], [ ":%S", function(d) {
    return d.getUTCSeconds();
  } ], [ "%I:%M", function(d) {
    return d.getUTCMinutes();
  } ], [ "%I %p", function(d) {
    return d.getUTCHours();
  } ], [ "%a %d", function(d) {
    return d.getUTCDay() && d.getUTCDate() != 1;
  } ], [ "%b %d", function(d) {
    return d.getUTCDate() != 1;
  } ], [ "%B", function(d) {
    return d.getUTCMonth();
  } ], [ "%Y", d3_true ] ]);
  d3_time_scaleUtcMethods.year = d3_time.year.utc;
  d3_time.scale.utc = function() {
    return d3_time_scale(d3.scale.linear(), d3_time_scaleUtcMethods, d3_time_scaleUtcFormat);
  };
  d3.text = d3_xhrType(function(request) {
    return request.responseText;
  });
  d3.json = function(url, callback) {
    return d3_xhr(url, "application/json", d3_json, callback);
  };
  function d3_json(request) {
    return JSON.parse(request.responseText);
  }
  d3.html = function(url, callback) {
    return d3_xhr(url, "text/html", d3_html, callback);
  };
  function d3_html(request) {
    var range = d3_document.createRange();
    range.selectNode(d3_document.body);
    return range.createContextualFragment(request.responseText);
  }
  d3.xml = d3_xhrType(function(request) {
    return request.responseXML;
  });
  if (typeof define === "function" && define.amd) this.d3 = d3, define(d3); else if (typeof module === "object" && module.exports) module.exports = d3; else this.d3 = d3;
}();
},{}],191:[function(require,module,exports){
(function(window) {
    var re = {
        not_string: /[^s]/,
        number: /[diefg]/,
        json: /[j]/,
        not_json: /[^j]/,
        text: /^[^\x25]+/,
        modulo: /^\x25{2}/,
        placeholder: /^\x25(?:([1-9]\d*)\$|\(([^\)]+)\))?(\+)?(0|'[^$])?(-)?(\d+)?(?:\.(\d+))?([b-gijosuxX])/,
        key: /^([a-z_][a-z_\d]*)/i,
        key_access: /^\.([a-z_][a-z_\d]*)/i,
        index_access: /^\[(\d+)\]/,
        sign: /^[\+\-]/
    }

    function sprintf() {
        var key = arguments[0], cache = sprintf.cache
        if (!(cache[key] && cache.hasOwnProperty(key))) {
            cache[key] = sprintf.parse(key)
        }
        return sprintf.format.call(null, cache[key], arguments)
    }

    sprintf.format = function(parse_tree, argv) {
        var cursor = 1, tree_length = parse_tree.length, node_type = "", arg, output = [], i, k, match, pad, pad_character, pad_length, is_positive = true, sign = ""
        for (i = 0; i < tree_length; i++) {
            node_type = get_type(parse_tree[i])
            if (node_type === "string") {
                output[output.length] = parse_tree[i]
            }
            else if (node_type === "array") {
                match = parse_tree[i] // convenience purposes only
                if (match[2]) { // keyword argument
                    arg = argv[cursor]
                    for (k = 0; k < match[2].length; k++) {
                        if (!arg.hasOwnProperty(match[2][k])) {
                            throw new Error(sprintf("[sprintf] property '%s' does not exist", match[2][k]))
                        }
                        arg = arg[match[2][k]]
                    }
                }
                else if (match[1]) { // positional argument (explicit)
                    arg = argv[match[1]]
                }
                else { // positional argument (implicit)
                    arg = argv[cursor++]
                }

                if (get_type(arg) == "function") {
                    arg = arg()
                }

                if (re.not_string.test(match[8]) && re.not_json.test(match[8]) && (get_type(arg) != "number" && isNaN(arg))) {
                    throw new TypeError(sprintf("[sprintf] expecting number but found %s", get_type(arg)))
                }

                if (re.number.test(match[8])) {
                    is_positive = arg >= 0
                }

                switch (match[8]) {
                    case "b":
                        arg = arg.toString(2)
                    break
                    case "c":
                        arg = String.fromCharCode(arg)
                    break
                    case "d":
                    case "i":
                        arg = parseInt(arg, 10)
                    break
                    case "j":
                        arg = JSON.stringify(arg, null, match[6] ? parseInt(match[6]) : 0)
                    break
                    case "e":
                        arg = match[7] ? arg.toExponential(match[7]) : arg.toExponential()
                    break
                    case "f":
                        arg = match[7] ? parseFloat(arg).toFixed(match[7]) : parseFloat(arg)
                    break
                    case "g":
                        arg = match[7] ? parseFloat(arg).toPrecision(match[7]) : parseFloat(arg)
                    break
                    case "o":
                        arg = arg.toString(8)
                    break
                    case "s":
                        arg = ((arg = String(arg)) && match[7] ? arg.substring(0, match[7]) : arg)
                    break
                    case "u":
                        arg = arg >>> 0
                    break
                    case "x":
                        arg = arg.toString(16)
                    break
                    case "X":
                        arg = arg.toString(16).toUpperCase()
                    break
                }
                if (re.json.test(match[8])) {
                    output[output.length] = arg
                }
                else {
                    if (re.number.test(match[8]) && (!is_positive || match[3])) {
                        sign = is_positive ? "+" : "-"
                        arg = arg.toString().replace(re.sign, "")
                    }
                    else {
                        sign = ""
                    }
                    pad_character = match[4] ? match[4] === "0" ? "0" : match[4].charAt(1) : " "
                    pad_length = match[6] - (sign + arg).length
                    pad = match[6] ? (pad_length > 0 ? str_repeat(pad_character, pad_length) : "") : ""
                    output[output.length] = match[5] ? sign + arg + pad : (pad_character === "0" ? sign + pad + arg : pad + sign + arg)
                }
            }
        }
        return output.join("")
    }

    sprintf.cache = {}

    sprintf.parse = function(fmt) {
        var _fmt = fmt, match = [], parse_tree = [], arg_names = 0
        while (_fmt) {
            if ((match = re.text.exec(_fmt)) !== null) {
                parse_tree[parse_tree.length] = match[0]
            }
            else if ((match = re.modulo.exec(_fmt)) !== null) {
                parse_tree[parse_tree.length] = "%"
            }
            else if ((match = re.placeholder.exec(_fmt)) !== null) {
                if (match[2]) {
                    arg_names |= 1
                    var field_list = [], replacement_field = match[2], field_match = []
                    if ((field_match = re.key.exec(replacement_field)) !== null) {
                        field_list[field_list.length] = field_match[1]
                        while ((replacement_field = replacement_field.substring(field_match[0].length)) !== "") {
                            if ((field_match = re.key_access.exec(replacement_field)) !== null) {
                                field_list[field_list.length] = field_match[1]
                            }
                            else if ((field_match = re.index_access.exec(replacement_field)) !== null) {
                                field_list[field_list.length] = field_match[1]
                            }
                            else {
                                throw new SyntaxError("[sprintf] failed to parse named argument key")
                            }
                        }
                    }
                    else {
                        throw new SyntaxError("[sprintf] failed to parse named argument key")
                    }
                    match[2] = field_list
                }
                else {
                    arg_names |= 2
                }
                if (arg_names === 3) {
                    throw new Error("[sprintf] mixing positional and named placeholders is not (yet) supported")
                }
                parse_tree[parse_tree.length] = match
            }
            else {
                throw new SyntaxError("[sprintf] unexpected placeholder")
            }
            _fmt = _fmt.substring(match[0].length)
        }
        return parse_tree
    }

    var vsprintf = function(fmt, argv, _argv) {
        _argv = (argv || []).slice(0)
        _argv.splice(0, 0, fmt)
        return sprintf.apply(null, _argv)
    }

    /**
     * helpers
     */
    function get_type(variable) {
        return Object.prototype.toString.call(variable).slice(8, -1).toLowerCase()
    }

    function str_repeat(input, multiplier) {
        return Array(multiplier + 1).join(input)
    }

    /**
     * export to either browser or node.js
     */
    if (typeof exports !== "undefined") {
        exports.sprintf = sprintf
        exports.vsprintf = vsprintf
    }
    else {
        window.sprintf = sprintf
        window.vsprintf = vsprintf

        if (typeof define === "function" && define.amd) {
            define(function() {
                return {
                    sprintf: sprintf,
                    vsprintf: vsprintf
                }
            })
        }
    }
})(typeof window === "undefined" ? this : window);

},{}],192:[function(require,module,exports){
var trim = require('./trim');
var decap = require('./decapitalize');

module.exports = function camelize(str, decapitalize) {
  str = trim(str).replace(/[-_\s]+(.)?/g, function(match, c) {
    return c ? c.toUpperCase() : '';
  });

  if (decapitalize === true) {
    return decap(str);
  } else {
    return str;
  }
};

},{"./decapitalize":201,"./trim":254}],193:[function(require,module,exports){
var makeString = require('./helper/makeString');

module.exports = function capitalize(str, lowercaseRest) {
  str = makeString(str);
  var remainingChars = !lowercaseRest ? str.slice(1) : str.slice(1).toLowerCase();

  return str.charAt(0).toUpperCase() + remainingChars;
};

},{"./helper/makeString":211}],194:[function(require,module,exports){
var makeString = require('./helper/makeString');

module.exports = function chars(str) {
  return makeString(str).split('');
};

},{"./helper/makeString":211}],195:[function(require,module,exports){
module.exports = function chop(str, step) {
  if (str == null) return [];
  str = String(str);
  step = ~~step;
  return step > 0 ? str.match(new RegExp('.{1,' + step + '}', 'g')) : [str];
};

},{}],196:[function(require,module,exports){
var capitalize = require('./capitalize');
var camelize = require('./camelize');
var makeString = require('./helper/makeString');

module.exports = function classify(str) {
  str = makeString(str);
  return capitalize(camelize(str.replace(/[\W_]/g, ' ')).replace(/\s/g, ''));
};

},{"./camelize":192,"./capitalize":193,"./helper/makeString":211}],197:[function(require,module,exports){
var trim = require('./trim');

module.exports = function clean(str) {
  return trim(str).replace(/\s\s+/g, ' ');
};

},{"./trim":254}],198:[function(require,module,exports){

var makeString = require('./helper/makeString');

var from  = 'ąàáäâãåæăćčĉęèéëêĝĥìíïîĵłľńňòóöőôõðøśșşšŝťțţŭùúüűûñÿýçżźž',
  to    = 'aaaaaaaaaccceeeeeghiiiijllnnoooooooossssstttuuuuuunyyczzz';

from += from.toUpperCase();
to += to.toUpperCase();

to = to.split('');

// for tokens requireing multitoken output
from += 'ß';
to.push('ss');


module.exports = function cleanDiacritics(str) {
  return makeString(str).replace(/.{1}/g, function(c){
    var index = from.indexOf(c);
    return index === -1 ? c : to[index];
  });
};

},{"./helper/makeString":211}],199:[function(require,module,exports){
var makeString = require('./helper/makeString');

module.exports = function(str, substr) {
  str = makeString(str);
  substr = makeString(substr);

  if (str.length === 0 || substr.length === 0) return 0;
  
  return str.split(substr).length - 1;
};

},{"./helper/makeString":211}],200:[function(require,module,exports){
var trim = require('./trim');

module.exports = function dasherize(str) {
  return trim(str).replace(/([A-Z])/g, '-$1').replace(/[-_\s]+/g, '-').toLowerCase();
};

},{"./trim":254}],201:[function(require,module,exports){
var makeString = require('./helper/makeString');

module.exports = function decapitalize(str) {
  str = makeString(str);
  return str.charAt(0).toLowerCase() + str.slice(1);
};

},{"./helper/makeString":211}],202:[function(require,module,exports){
var makeString = require('./helper/makeString');

function getIndent(str) {
  var matches = str.match(/^[\s\\t]*/gm);
  var indent = matches[0].length;
  
  for (var i = 1; i < matches.length; i++) {
    indent = Math.min(matches[i].length, indent);
  }

  return indent;
}

module.exports = function dedent(str, pattern) {
  str = makeString(str);
  var indent = getIndent(str);
  var reg;

  if (indent === 0) return str;

  if (typeof pattern === 'string') {
    reg = new RegExp('^' + pattern, 'gm');
  } else {
    reg = new RegExp('^[ \\t]{' + indent + '}', 'gm');
  }

  return str.replace(reg, '');
};

},{"./helper/makeString":211}],203:[function(require,module,exports){
var makeString = require('./helper/makeString');
var toPositive = require('./helper/toPositive');

module.exports = function endsWith(str, ends, position) {
  str = makeString(str);
  ends = '' + ends;
  if (typeof position == 'undefined') {
    position = str.length - ends.length;
  } else {
    position = Math.min(toPositive(position), str.length) - ends.length;
  }
  return position >= 0 && str.indexOf(ends, position) === position;
};

},{"./helper/makeString":211,"./helper/toPositive":213}],204:[function(require,module,exports){
var makeString = require('./helper/makeString');
var escapeChars = require('./helper/escapeChars');

var regexString = '[';
for(var key in escapeChars) {
  regexString += key;
}
regexString += ']';

var regex = new RegExp( regexString, 'g');

module.exports = function escapeHTML(str) {

  return makeString(str).replace(regex, function(m) {
    return '&' + escapeChars[m] + ';';
  });
};

},{"./helper/escapeChars":208,"./helper/makeString":211}],205:[function(require,module,exports){
module.exports = function() {
  var result = {};

  for (var prop in this) {
    if (!this.hasOwnProperty(prop) || prop.match(/^(?:include|contains|reverse|join|map|wrap)$/)) continue;
    result[prop] = this[prop];
  }

  return result;
};

},{}],206:[function(require,module,exports){
var makeString = require('./makeString');

module.exports = function adjacent(str, direction) {
  str = makeString(str);
  if (str.length === 0) {
    return '';
  }
  return str.slice(0, -1) + String.fromCharCode(str.charCodeAt(str.length - 1) + direction);
};

},{"./makeString":211}],207:[function(require,module,exports){
var escapeRegExp = require('./escapeRegExp');

module.exports = function defaultToWhiteSpace(characters) {
  if (characters == null)
    return '\\s';
  else if (characters.source)
    return characters.source;
  else
    return '[' + escapeRegExp(characters) + ']';
};

},{"./escapeRegExp":209}],208:[function(require,module,exports){
/* We're explicitly defining the list of entities we want to escape.
nbsp is an HTML entity, but we don't want to escape all space characters in a string, hence its omission in this map.

*/
var escapeChars = {
  '¢' : 'cent',
  '£' : 'pound',
  '¥' : 'yen',
  '€': 'euro',
  '©' :'copy',
  '®' : 'reg',
  '<' : 'lt',
  '>' : 'gt',
  '"' : 'quot',
  '&' : 'amp',
  '\'' : '#39'
};

module.exports = escapeChars;

},{}],209:[function(require,module,exports){
var makeString = require('./makeString');

module.exports = function escapeRegExp(str) {
  return makeString(str).replace(/([.*+?^=!:${}()|[\]\/\\])/g, '\\$1');
};

},{"./makeString":211}],210:[function(require,module,exports){
/*
We're explicitly defining the list of entities that might see in escape HTML strings
*/
var htmlEntities = {
  nbsp: ' ',
  cent: '¢',
  pound: '£',
  yen: '¥',
  euro: '€',
  copy: '©',
  reg: '®',
  lt: '<',
  gt: '>',
  quot: '"',
  amp: '&',
  apos: '\''
};

module.exports = htmlEntities;

},{}],211:[function(require,module,exports){
/**
 * Ensure some object is a coerced to a string
 **/
module.exports = function makeString(object) {
  if (object == null) return '';
  return '' + object;
};

},{}],212:[function(require,module,exports){
module.exports = function strRepeat(str, qty){
  if (qty < 1) return '';
  var result = '';
  while (qty > 0) {
    if (qty & 1) result += str;
    qty >>= 1, str += str;
  }
  return result;
};

},{}],213:[function(require,module,exports){
module.exports = function toPositive(number) {
  return number < 0 ? 0 : (+number || 0);
};

},{}],214:[function(require,module,exports){
var capitalize = require('./capitalize');
var underscored = require('./underscored');
var trim = require('./trim');

module.exports = function humanize(str) {
  return capitalize(trim(underscored(str).replace(/_id$/, '').replace(/_/g, ' ')));
};

},{"./capitalize":193,"./trim":254,"./underscored":256}],215:[function(require,module,exports){
var makeString = require('./helper/makeString');

module.exports = function include(str, needle) {
  if (needle === '') return true;
  return makeString(str).indexOf(needle) !== -1;
};

},{"./helper/makeString":211}],216:[function(require,module,exports){
/*
* Underscore.string
* (c) 2010 Esa-Matti Suuronen <esa-matti aet suuronen dot org>
* Underscore.string is freely distributable under the terms of the MIT license.
* Documentation: https://github.com/epeli/underscore.string
* Some code is borrowed from MooTools and Alexandru Marasteanu.
* Version '3.3.4'
* @preserve
*/

'use strict';

function s(value) {
  /* jshint validthis: true */
  if (!(this instanceof s)) return new s(value);
  this._wrapped = value;
}

s.VERSION = '3.3.4';

s.isBlank          = require('./isBlank');
s.stripTags        = require('./stripTags');
s.capitalize       = require('./capitalize');
s.decapitalize     = require('./decapitalize');
s.chop             = require('./chop');
s.trim             = require('./trim');
s.clean            = require('./clean');
s.cleanDiacritics  = require('./cleanDiacritics');
s.count            = require('./count');
s.chars            = require('./chars');
s.swapCase         = require('./swapCase');
s.escapeHTML       = require('./escapeHTML');
s.unescapeHTML     = require('./unescapeHTML');
s.splice           = require('./splice');
s.insert           = require('./insert');
s.replaceAll       = require('./replaceAll');
s.include          = require('./include');
s.join             = require('./join');
s.lines            = require('./lines');
s.dedent           = require('./dedent');
s.reverse          = require('./reverse');
s.startsWith       = require('./startsWith');
s.endsWith         = require('./endsWith');
s.pred             = require('./pred');
s.succ             = require('./succ');
s.titleize         = require('./titleize');
s.camelize         = require('./camelize');
s.underscored      = require('./underscored');
s.dasherize        = require('./dasherize');
s.classify         = require('./classify');
s.humanize         = require('./humanize');
s.ltrim            = require('./ltrim');
s.rtrim            = require('./rtrim');
s.truncate         = require('./truncate');
s.prune            = require('./prune');
s.words            = require('./words');
s.pad              = require('./pad');
s.lpad             = require('./lpad');
s.rpad             = require('./rpad');
s.lrpad            = require('./lrpad');
s.sprintf          = require('./sprintf');
s.vsprintf         = require('./vsprintf');
s.toNumber         = require('./toNumber');
s.numberFormat     = require('./numberFormat');
s.strRight         = require('./strRight');
s.strRightBack     = require('./strRightBack');
s.strLeft          = require('./strLeft');
s.strLeftBack      = require('./strLeftBack');
s.toSentence       = require('./toSentence');
s.toSentenceSerial = require('./toSentenceSerial');
s.slugify          = require('./slugify');
s.surround         = require('./surround');
s.quote            = require('./quote');
s.unquote          = require('./unquote');
s.repeat           = require('./repeat');
s.naturalCmp       = require('./naturalCmp');
s.levenshtein      = require('./levenshtein');
s.toBoolean        = require('./toBoolean');
s.exports          = require('./exports');
s.escapeRegExp     = require('./helper/escapeRegExp');
s.wrap             = require('./wrap');
s.map              = require('./map');

// Aliases
s.strip     = s.trim;
s.lstrip    = s.ltrim;
s.rstrip    = s.rtrim;
s.center    = s.lrpad;
s.rjust     = s.lpad;
s.ljust     = s.rpad;
s.contains  = s.include;
s.q         = s.quote;
s.toBool    = s.toBoolean;
s.camelcase = s.camelize;
s.mapChars  = s.map;


// Implement chaining
s.prototype = {
  value: function value() {
    return this._wrapped;
  }
};

function fn2method(key, fn) {
  if (typeof fn !== 'function') return;
  s.prototype[key] = function() {
    var args = [this._wrapped].concat(Array.prototype.slice.call(arguments));
    var res = fn.apply(null, args);
    // if the result is non-string stop the chain and return the value
    return typeof res === 'string' ? new s(res) : res;
  };
}

// Copy functions to instance methods for chaining
for (var key in s) fn2method(key, s[key]);

fn2method('tap', function tap(string, fn) {
  return fn(string);
});

function prototype2method(methodName) {
  fn2method(methodName, function(context) {
    var args = Array.prototype.slice.call(arguments, 1);
    return String.prototype[methodName].apply(context, args);
  });
}

var prototypeMethods = [
  'toUpperCase',
  'toLowerCase',
  'split',
  'replace',
  'slice',
  'substring',
  'substr',
  'concat'
];

for (var method in prototypeMethods) prototype2method(prototypeMethods[method]);


module.exports = s;

},{"./camelize":192,"./capitalize":193,"./chars":194,"./chop":195,"./classify":196,"./clean":197,"./cleanDiacritics":198,"./count":199,"./dasherize":200,"./decapitalize":201,"./dedent":202,"./endsWith":203,"./escapeHTML":204,"./exports":205,"./helper/escapeRegExp":209,"./humanize":214,"./include":215,"./insert":217,"./isBlank":218,"./join":219,"./levenshtein":220,"./lines":221,"./lpad":222,"./lrpad":223,"./ltrim":224,"./map":225,"./naturalCmp":226,"./numberFormat":227,"./pad":228,"./pred":229,"./prune":230,"./quote":231,"./repeat":232,"./replaceAll":233,"./reverse":234,"./rpad":235,"./rtrim":236,"./slugify":237,"./splice":238,"./sprintf":239,"./startsWith":240,"./strLeft":241,"./strLeftBack":242,"./strRight":243,"./strRightBack":244,"./stripTags":245,"./succ":246,"./surround":247,"./swapCase":248,"./titleize":249,"./toBoolean":250,"./toNumber":251,"./toSentence":252,"./toSentenceSerial":253,"./trim":254,"./truncate":255,"./underscored":256,"./unescapeHTML":257,"./unquote":258,"./vsprintf":259,"./words":260,"./wrap":261}],217:[function(require,module,exports){
var splice = require('./splice');

module.exports = function insert(str, i, substr) {
  return splice(str, i, 0, substr);
};

},{"./splice":238}],218:[function(require,module,exports){
var makeString = require('./helper/makeString');

module.exports = function isBlank(str) {
  return (/^\s*$/).test(makeString(str));
};

},{"./helper/makeString":211}],219:[function(require,module,exports){
var makeString = require('./helper/makeString');
var slice = [].slice;

module.exports = function join() {
  var args = slice.call(arguments),
    separator = args.shift();

  return args.join(makeString(separator));
};

},{"./helper/makeString":211}],220:[function(require,module,exports){
var makeString = require('./helper/makeString');

/**
 * Based on the implementation here: https://github.com/hiddentao/fast-levenshtein
 */
module.exports = function levenshtein(str1, str2) {
  'use strict';
  str1 = makeString(str1);
  str2 = makeString(str2);

  // Short cut cases  
  if (str1 === str2) return 0;
  if (!str1 || !str2) return Math.max(str1.length, str2.length);

  // two rows
  var prevRow = new Array(str2.length + 1);

  // initialise previous row
  for (var i = 0; i < prevRow.length; ++i) {
    prevRow[i] = i;
  }

  // calculate current row distance from previous row
  for (i = 0; i < str1.length; ++i) {
    var nextCol = i + 1;

    for (var j = 0; j < str2.length; ++j) {
      var curCol = nextCol;

      // substution
      nextCol = prevRow[j] + ( (str1.charAt(i) === str2.charAt(j)) ? 0 : 1 );
      // insertion
      var tmp = curCol + 1;
      if (nextCol > tmp) {
        nextCol = tmp;
      }
      // deletion
      tmp = prevRow[j + 1] + 1;
      if (nextCol > tmp) {
        nextCol = tmp;
      }

      // copy current col value into previous (in preparation for next iteration)
      prevRow[j] = curCol;
    }

    // copy last col value into previous (in preparation for next iteration)
    prevRow[j] = nextCol;
  }

  return nextCol;
};

},{"./helper/makeString":211}],221:[function(require,module,exports){
module.exports = function lines(str) {
  if (str == null) return [];
  return String(str).split(/\r\n?|\n/);
};

},{}],222:[function(require,module,exports){
var pad = require('./pad');

module.exports = function lpad(str, length, padStr) {
  return pad(str, length, padStr);
};

},{"./pad":228}],223:[function(require,module,exports){
var pad = require('./pad');

module.exports = function lrpad(str, length, padStr) {
  return pad(str, length, padStr, 'both');
};

},{"./pad":228}],224:[function(require,module,exports){
var makeString = require('./helper/makeString');
var defaultToWhiteSpace = require('./helper/defaultToWhiteSpace');
var nativeTrimLeft = String.prototype.trimLeft;

module.exports = function ltrim(str, characters) {
  str = makeString(str);
  if (!characters && nativeTrimLeft) return nativeTrimLeft.call(str);
  characters = defaultToWhiteSpace(characters);
  return str.replace(new RegExp('^' + characters + '+'), '');
};

},{"./helper/defaultToWhiteSpace":207,"./helper/makeString":211}],225:[function(require,module,exports){
var makeString = require('./helper/makeString');

module.exports = function(str, callback) {
  str = makeString(str);

  if (str.length === 0 || typeof callback !== 'function') return str;

  return str.replace(/./g, callback);
};

},{"./helper/makeString":211}],226:[function(require,module,exports){
module.exports = function naturalCmp(str1, str2) {
  if (str1 == str2) return 0;
  if (!str1) return -1;
  if (!str2) return 1;

  var cmpRegex = /(\.\d+|\d+|\D+)/g,
    tokens1 = String(str1).match(cmpRegex),
    tokens2 = String(str2).match(cmpRegex),
    count = Math.min(tokens1.length, tokens2.length);

  for (var i = 0; i < count; i++) {
    var a = tokens1[i],
      b = tokens2[i];

    if (a !== b) {
      var num1 = +a;
      var num2 = +b;
      if (num1 === num1 && num2 === num2) {
        return num1 > num2 ? 1 : -1;
      }
      return a < b ? -1 : 1;
    }
  }

  if (tokens1.length != tokens2.length)
    return tokens1.length - tokens2.length;

  return str1 < str2 ? -1 : 1;
};

},{}],227:[function(require,module,exports){
module.exports = function numberFormat(number, dec, dsep, tsep) {
  if (isNaN(number) || number == null) return '';

  number = number.toFixed(~~dec);
  tsep = typeof tsep == 'string' ? tsep : ',';

  var parts = number.split('.'),
    fnums = parts[0],
    decimals = parts[1] ? (dsep || '.') + parts[1] : '';

  return fnums.replace(/(\d)(?=(?:\d{3})+$)/g, '$1' + tsep) + decimals;
};

},{}],228:[function(require,module,exports){
var makeString = require('./helper/makeString');
var strRepeat = require('./helper/strRepeat');

module.exports = function pad(str, length, padStr, type) {
  str = makeString(str);
  length = ~~length;

  var padlen = 0;

  if (!padStr)
    padStr = ' ';
  else if (padStr.length > 1)
    padStr = padStr.charAt(0);

  switch (type) {
  case 'right':
    padlen = length - str.length;
    return str + strRepeat(padStr, padlen);
  case 'both':
    padlen = length - str.length;
    return strRepeat(padStr, Math.ceil(padlen / 2)) + str + strRepeat(padStr, Math.floor(padlen / 2));
  default: // 'left'
    padlen = length - str.length;
    return strRepeat(padStr, padlen) + str;
  }
};

},{"./helper/makeString":211,"./helper/strRepeat":212}],229:[function(require,module,exports){
var adjacent = require('./helper/adjacent');

module.exports = function succ(str) {
  return adjacent(str, -1);
};

},{"./helper/adjacent":206}],230:[function(require,module,exports){
/**
 * _s.prune: a more elegant version of truncate
 * prune extra chars, never leaving a half-chopped word.
 * @author github.com/rwz
 */
var makeString = require('./helper/makeString');
var rtrim = require('./rtrim');

module.exports = function prune(str, length, pruneStr) {
  str = makeString(str);
  length = ~~length;
  pruneStr = pruneStr != null ? String(pruneStr) : '...';

  if (str.length <= length) return str;

  var tmpl = function(c) {
      return c.toUpperCase() !== c.toLowerCase() ? 'A' : ' ';
    },
    template = str.slice(0, length + 1).replace(/.(?=\W*\w*$)/g, tmpl); // 'Hello, world' -> 'HellAA AAAAA'

  if (template.slice(template.length - 2).match(/\w\w/))
    template = template.replace(/\s*\S+$/, '');
  else
    template = rtrim(template.slice(0, template.length - 1));

  return (template + pruneStr).length > str.length ? str : str.slice(0, template.length) + pruneStr;
};

},{"./helper/makeString":211,"./rtrim":236}],231:[function(require,module,exports){
var surround = require('./surround');

module.exports = function quote(str, quoteChar) {
  return surround(str, quoteChar || '"');
};

},{"./surround":247}],232:[function(require,module,exports){
var makeString = require('./helper/makeString');
var strRepeat = require('./helper/strRepeat');

module.exports = function repeat(str, qty, separator) {
  str = makeString(str);

  qty = ~~qty;

  // using faster implementation if separator is not needed;
  if (separator == null) return strRepeat(str, qty);

  // this one is about 300x slower in Google Chrome
  /*eslint no-empty: 0*/
  for (var repeat = []; qty > 0; repeat[--qty] = str) {}
  return repeat.join(separator);
};

},{"./helper/makeString":211,"./helper/strRepeat":212}],233:[function(require,module,exports){
var makeString = require('./helper/makeString');

module.exports = function replaceAll(str, find, replace, ignorecase) {
  var flags = (ignorecase === true)?'gi':'g';
  var reg = new RegExp(find, flags);

  return makeString(str).replace(reg, replace);
};

},{"./helper/makeString":211}],234:[function(require,module,exports){
var chars = require('./chars');

module.exports = function reverse(str) {
  return chars(str).reverse().join('');
};

},{"./chars":194}],235:[function(require,module,exports){
var pad = require('./pad');

module.exports = function rpad(str, length, padStr) {
  return pad(str, length, padStr, 'right');
};

},{"./pad":228}],236:[function(require,module,exports){
var makeString = require('./helper/makeString');
var defaultToWhiteSpace = require('./helper/defaultToWhiteSpace');
var nativeTrimRight = String.prototype.trimRight;

module.exports = function rtrim(str, characters) {
  str = makeString(str);
  if (!characters && nativeTrimRight) return nativeTrimRight.call(str);
  characters = defaultToWhiteSpace(characters);
  return str.replace(new RegExp(characters + '+$'), '');
};

},{"./helper/defaultToWhiteSpace":207,"./helper/makeString":211}],237:[function(require,module,exports){
var trim = require('./trim');
var dasherize = require('./dasherize');
var cleanDiacritics = require('./cleanDiacritics');

module.exports = function slugify(str) {
  return trim(dasherize(cleanDiacritics(str).replace(/[^\w\s-]/g, '-').toLowerCase()), '-');
};

},{"./cleanDiacritics":198,"./dasherize":200,"./trim":254}],238:[function(require,module,exports){
var chars = require('./chars');

module.exports = function splice(str, i, howmany, substr) {
  var arr = chars(str);
  arr.splice(~~i, ~~howmany, substr);
  return arr.join('');
};

},{"./chars":194}],239:[function(require,module,exports){
var deprecate = require('util-deprecate');

module.exports = deprecate(require('sprintf-js').sprintf,
  'sprintf() will be removed in the next major release, use the sprintf-js package instead.');

},{"sprintf-js":191,"util-deprecate":263}],240:[function(require,module,exports){
var makeString = require('./helper/makeString');
var toPositive = require('./helper/toPositive');

module.exports = function startsWith(str, starts, position) {
  str = makeString(str);
  starts = '' + starts;
  position = position == null ? 0 : Math.min(toPositive(position), str.length);
  return str.lastIndexOf(starts, position) === position;
};

},{"./helper/makeString":211,"./helper/toPositive":213}],241:[function(require,module,exports){
var makeString = require('./helper/makeString');

module.exports = function strLeft(str, sep) {
  str = makeString(str);
  sep = makeString(sep);
  var pos = !sep ? -1 : str.indexOf(sep);
  return~ pos ? str.slice(0, pos) : str;
};

},{"./helper/makeString":211}],242:[function(require,module,exports){
var makeString = require('./helper/makeString');

module.exports = function strLeftBack(str, sep) {
  str = makeString(str);
  sep = makeString(sep);
  var pos = str.lastIndexOf(sep);
  return~ pos ? str.slice(0, pos) : str;
};

},{"./helper/makeString":211}],243:[function(require,module,exports){
var makeString = require('./helper/makeString');

module.exports = function strRight(str, sep) {
  str = makeString(str);
  sep = makeString(sep);
  var pos = !sep ? -1 : str.indexOf(sep);
  return~ pos ? str.slice(pos + sep.length, str.length) : str;
};

},{"./helper/makeString":211}],244:[function(require,module,exports){
var makeString = require('./helper/makeString');

module.exports = function strRightBack(str, sep) {
  str = makeString(str);
  sep = makeString(sep);
  var pos = !sep ? -1 : str.lastIndexOf(sep);
  return~ pos ? str.slice(pos + sep.length, str.length) : str;
};

},{"./helper/makeString":211}],245:[function(require,module,exports){
var makeString = require('./helper/makeString');

module.exports = function stripTags(str) {
  return makeString(str).replace(/<\/?[^>]+>/g, '');
};

},{"./helper/makeString":211}],246:[function(require,module,exports){
var adjacent = require('./helper/adjacent');

module.exports = function succ(str) {
  return adjacent(str, 1);
};

},{"./helper/adjacent":206}],247:[function(require,module,exports){
module.exports = function surround(str, wrapper) {
  return [wrapper, str, wrapper].join('');
};

},{}],248:[function(require,module,exports){
var makeString = require('./helper/makeString');

module.exports = function swapCase(str) {
  return makeString(str).replace(/\S/g, function(c) {
    return c === c.toUpperCase() ? c.toLowerCase() : c.toUpperCase();
  });
};

},{"./helper/makeString":211}],249:[function(require,module,exports){
var makeString = require('./helper/makeString');

module.exports = function titleize(str) {
  return makeString(str).toLowerCase().replace(/(?:^|\s|-)\S/g, function(c) {
    return c.toUpperCase();
  });
};

},{"./helper/makeString":211}],250:[function(require,module,exports){
var trim = require('./trim');

function boolMatch(s, matchers) {
  var i, matcher, down = s.toLowerCase();
  matchers = [].concat(matchers);
  for (i = 0; i < matchers.length; i += 1) {
    matcher = matchers[i];
    if (!matcher) continue;
    if (matcher.test && matcher.test(s)) return true;
    if (matcher.toLowerCase() === down) return true;
  }
}

module.exports = function toBoolean(str, trueValues, falseValues) {
  if (typeof str === 'number') str = '' + str;
  if (typeof str !== 'string') return !!str;
  str = trim(str);
  if (boolMatch(str, trueValues || ['true', '1'])) return true;
  if (boolMatch(str, falseValues || ['false', '0'])) return false;
};

},{"./trim":254}],251:[function(require,module,exports){
module.exports = function toNumber(num, precision) {
  if (num == null) return 0;
  var factor = Math.pow(10, isFinite(precision) ? precision : 0);
  return Math.round(num * factor) / factor;
};

},{}],252:[function(require,module,exports){
var rtrim = require('./rtrim');

module.exports = function toSentence(array, separator, lastSeparator, serial) {
  separator = separator || ', ';
  lastSeparator = lastSeparator || ' and ';
  var a = array.slice(),
    lastMember = a.pop();

  if (array.length > 2 && serial) lastSeparator = rtrim(separator) + lastSeparator;

  return a.length ? a.join(separator) + lastSeparator + lastMember : lastMember;
};

},{"./rtrim":236}],253:[function(require,module,exports){
var toSentence = require('./toSentence');

module.exports = function toSentenceSerial(array, sep, lastSep) {
  return toSentence(array, sep, lastSep, true);
};

},{"./toSentence":252}],254:[function(require,module,exports){
var makeString = require('./helper/makeString');
var defaultToWhiteSpace = require('./helper/defaultToWhiteSpace');
var nativeTrim = String.prototype.trim;

module.exports = function trim(str, characters) {
  str = makeString(str);
  if (!characters && nativeTrim) return nativeTrim.call(str);
  characters = defaultToWhiteSpace(characters);
  return str.replace(new RegExp('^' + characters + '+|' + characters + '+$', 'g'), '');
};

},{"./helper/defaultToWhiteSpace":207,"./helper/makeString":211}],255:[function(require,module,exports){
var makeString = require('./helper/makeString');

module.exports = function truncate(str, length, truncateStr) {
  str = makeString(str);
  truncateStr = truncateStr || '...';
  length = ~~length;
  return str.length > length ? str.slice(0, length) + truncateStr : str;
};

},{"./helper/makeString":211}],256:[function(require,module,exports){
var trim = require('./trim');

module.exports = function underscored(str) {
  return trim(str).replace(/([a-z\d])([A-Z]+)/g, '$1_$2').replace(/[-\s]+/g, '_').toLowerCase();
};

},{"./trim":254}],257:[function(require,module,exports){
var makeString = require('./helper/makeString');
var htmlEntities = require('./helper/htmlEntities');

module.exports = function unescapeHTML(str) {
  return makeString(str).replace(/\&([^;]+);/g, function(entity, entityCode) {
    var match;

    if (entityCode in htmlEntities) {
      return htmlEntities[entityCode];
    /*eslint no-cond-assign: 0*/
    } else if (match = entityCode.match(/^#x([\da-fA-F]+)$/)) {
      return String.fromCharCode(parseInt(match[1], 16));
    /*eslint no-cond-assign: 0*/
    } else if (match = entityCode.match(/^#(\d+)$/)) {
      return String.fromCharCode(~~match[1]);
    } else {
      return entity;
    }
  });
};

},{"./helper/htmlEntities":210,"./helper/makeString":211}],258:[function(require,module,exports){
module.exports = function unquote(str, quoteChar) {
  quoteChar = quoteChar || '"';
  if (str[0] === quoteChar && str[str.length - 1] === quoteChar)
    return str.slice(1, str.length - 1);
  else return str;
};

},{}],259:[function(require,module,exports){
var deprecate = require('util-deprecate');

module.exports = deprecate(require('sprintf-js').vsprintf,
  'vsprintf() will be removed in the next major release, use the sprintf-js package instead.');

},{"sprintf-js":191,"util-deprecate":263}],260:[function(require,module,exports){
var isBlank = require('./isBlank');
var trim = require('./trim');

module.exports = function words(str, delimiter) {
  if (isBlank(str)) return [];
  return trim(str, delimiter).split(delimiter || /\s+/);
};

},{"./isBlank":218,"./trim":254}],261:[function(require,module,exports){
// Wrap
// wraps a string by a certain width

var makeString = require('./helper/makeString');

module.exports = function wrap(str, options){
  str = makeString(str);
  
  options = options || {};
  
  var width = options.width || 75;
  var seperator = options.seperator || '\n';
  var cut = options.cut || false;
  var preserveSpaces = options.preserveSpaces || false;
  var trailingSpaces = options.trailingSpaces || false;
  
  var result;
  
  if(width <= 0){
    return str;
  }
  
  else if(!cut){
  
    var words = str.split(' ');
    var current_column = 0;
    result = '';
  
    while(words.length > 0){
      
      // if adding a space and the next word would cause this line to be longer than width...
      if(1 + words[0].length + current_column > width){
        //start a new line if this line is not already empty
        if(current_column > 0){
          // add a space at the end of the line is preserveSpaces is true
          if (preserveSpaces){
            result += ' ';
            current_column++;
          }
          // fill the rest of the line with spaces if trailingSpaces option is true
          else if(trailingSpaces){
            while(current_column < width){
              result += ' ';
              current_column++;
            }            
          }
          //start new line
          result += seperator;
          current_column = 0;
        }
      }
  
      // if not at the begining of the line, add a space in front of the word
      if(current_column > 0){
        result += ' ';
        current_column++;
      }
  
      // tack on the next word, update current column, a pop words array
      result += words[0];
      current_column += words[0].length;
      words.shift();
  
    }
  
    // fill the rest of the line with spaces if trailingSpaces option is true
    if(trailingSpaces){
      while(current_column < width){
        result += ' ';
        current_column++;
      }            
    }
  
    return result;
  
  }
  
  else {
  
    var index = 0;
    result = '';
  
    // walk through each character and add seperators where appropriate
    while(index < str.length){
      if(index % width == 0 && index > 0){
        result += seperator;
      }
      result += str.charAt(index);
      index++;
    }
  
    // fill the rest of the line with spaces if trailingSpaces option is true
    if(trailingSpaces){
      while(index % width > 0){
        result += ' ';
        index++;
      }            
    }
    
    return result;
  }
};

},{"./helper/makeString":211}],262:[function(require,module,exports){
//     Underscore.js 1.8.3
//     http://underscorejs.org
//     (c) 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
//     Underscore may be freely distributed under the MIT license.

(function() {

  // Baseline setup
  // --------------

  // Establish the root object, `window` in the browser, or `exports` on the server.
  var root = this;

  // Save the previous value of the `_` variable.
  var previousUnderscore = root._;

  // Save bytes in the minified (but not gzipped) version:
  var ArrayProto = Array.prototype, ObjProto = Object.prototype, FuncProto = Function.prototype;

  // Create quick reference variables for speed access to core prototypes.
  var
    push             = ArrayProto.push,
    slice            = ArrayProto.slice,
    toString         = ObjProto.toString,
    hasOwnProperty   = ObjProto.hasOwnProperty;

  // All **ECMAScript 5** native function implementations that we hope to use
  // are declared here.
  var
    nativeIsArray      = Array.isArray,
    nativeKeys         = Object.keys,
    nativeBind         = FuncProto.bind,
    nativeCreate       = Object.create;

  // Naked function reference for surrogate-prototype-swapping.
  var Ctor = function(){};

  // Create a safe reference to the Underscore object for use below.
  var _ = function(obj) {
    if (obj instanceof _) return obj;
    if (!(this instanceof _)) return new _(obj);
    this._wrapped = obj;
  };

  // Export the Underscore object for **Node.js**, with
  // backwards-compatibility for the old `require()` API. If we're in
  // the browser, add `_` as a global object.
  if (typeof exports !== 'undefined') {
    if (typeof module !== 'undefined' && module.exports) {
      exports = module.exports = _;
    }
    exports._ = _;
  } else {
    root._ = _;
  }

  // Current version.
  _.VERSION = '1.8.3';

  // Internal function that returns an efficient (for current engines) version
  // of the passed-in callback, to be repeatedly applied in other Underscore
  // functions.
  var optimizeCb = function(func, context, argCount) {
    if (context === void 0) return func;
    switch (argCount == null ? 3 : argCount) {
      case 1: return function(value) {
        return func.call(context, value);
      };
      case 2: return function(value, other) {
        return func.call(context, value, other);
      };
      case 3: return function(value, index, collection) {
        return func.call(context, value, index, collection);
      };
      case 4: return function(accumulator, value, index, collection) {
        return func.call(context, accumulator, value, index, collection);
      };
    }
    return function() {
      return func.apply(context, arguments);
    };
  };

  // A mostly-internal function to generate callbacks that can be applied
  // to each element in a collection, returning the desired result — either
  // identity, an arbitrary callback, a property matcher, or a property accessor.
  var cb = function(value, context, argCount) {
    if (value == null) return _.identity;
    if (_.isFunction(value)) return optimizeCb(value, context, argCount);
    if (_.isObject(value)) return _.matcher(value);
    return _.property(value);
  };
  _.iteratee = function(value, context) {
    return cb(value, context, Infinity);
  };

  // An internal function for creating assigner functions.
  var createAssigner = function(keysFunc, undefinedOnly) {
    return function(obj) {
      var length = arguments.length;
      if (length < 2 || obj == null) return obj;
      for (var index = 1; index < length; index++) {
        var source = arguments[index],
            keys = keysFunc(source),
            l = keys.length;
        for (var i = 0; i < l; i++) {
          var key = keys[i];
          if (!undefinedOnly || obj[key] === void 0) obj[key] = source[key];
        }
      }
      return obj;
    };
  };

  // An internal function for creating a new object that inherits from another.
  var baseCreate = function(prototype) {
    if (!_.isObject(prototype)) return {};
    if (nativeCreate) return nativeCreate(prototype);
    Ctor.prototype = prototype;
    var result = new Ctor;
    Ctor.prototype = null;
    return result;
  };

  var property = function(key) {
    return function(obj) {
      return obj == null ? void 0 : obj[key];
    };
  };

  // Helper for collection methods to determine whether a collection
  // should be iterated as an array or as an object
  // Related: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength
  // Avoids a very nasty iOS 8 JIT bug on ARM-64. #2094
  var MAX_ARRAY_INDEX = Math.pow(2, 53) - 1;
  var getLength = property('length');
  var isArrayLike = function(collection) {
    var length = getLength(collection);
    return typeof length == 'number' && length >= 0 && length <= MAX_ARRAY_INDEX;
  };

  // Collection Functions
  // --------------------

  // The cornerstone, an `each` implementation, aka `forEach`.
  // Handles raw objects in addition to array-likes. Treats all
  // sparse array-likes as if they were dense.
  _.each = _.forEach = function(obj, iteratee, context) {
    iteratee = optimizeCb(iteratee, context);
    var i, length;
    if (isArrayLike(obj)) {
      for (i = 0, length = obj.length; i < length; i++) {
        iteratee(obj[i], i, obj);
      }
    } else {
      var keys = _.keys(obj);
      for (i = 0, length = keys.length; i < length; i++) {
        iteratee(obj[keys[i]], keys[i], obj);
      }
    }
    return obj;
  };

  // Return the results of applying the iteratee to each element.
  _.map = _.collect = function(obj, iteratee, context) {
    iteratee = cb(iteratee, context);
    var keys = !isArrayLike(obj) && _.keys(obj),
        length = (keys || obj).length,
        results = Array(length);
    for (var index = 0; index < length; index++) {
      var currentKey = keys ? keys[index] : index;
      results[index] = iteratee(obj[currentKey], currentKey, obj);
    }
    return results;
  };

  // Create a reducing function iterating left or right.
  function createReduce(dir) {
    // Optimized iterator function as using arguments.length
    // in the main function will deoptimize the, see #1991.
    function iterator(obj, iteratee, memo, keys, index, length) {
      for (; index >= 0 && index < length; index += dir) {
        var currentKey = keys ? keys[index] : index;
        memo = iteratee(memo, obj[currentKey], currentKey, obj);
      }
      return memo;
    }

    return function(obj, iteratee, memo, context) {
      iteratee = optimizeCb(iteratee, context, 4);
      var keys = !isArrayLike(obj) && _.keys(obj),
          length = (keys || obj).length,
          index = dir > 0 ? 0 : length - 1;
      // Determine the initial value if none is provided.
      if (arguments.length < 3) {
        memo = obj[keys ? keys[index] : index];
        index += dir;
      }
      return iterator(obj, iteratee, memo, keys, index, length);
    };
  }

  // **Reduce** builds up a single result from a list of values, aka `inject`,
  // or `foldl`.
  _.reduce = _.foldl = _.inject = createReduce(1);

  // The right-associative version of reduce, also known as `foldr`.
  _.reduceRight = _.foldr = createReduce(-1);

  // Return the first value which passes a truth test. Aliased as `detect`.
  _.find = _.detect = function(obj, predicate, context) {
    var key;
    if (isArrayLike(obj)) {
      key = _.findIndex(obj, predicate, context);
    } else {
      key = _.findKey(obj, predicate, context);
    }
    if (key !== void 0 && key !== -1) return obj[key];
  };

  // Return all the elements that pass a truth test.
  // Aliased as `select`.
  _.filter = _.select = function(obj, predicate, context) {
    var results = [];
    predicate = cb(predicate, context);
    _.each(obj, function(value, index, list) {
      if (predicate(value, index, list)) results.push(value);
    });
    return results;
  };

  // Return all the elements for which a truth test fails.
  _.reject = function(obj, predicate, context) {
    return _.filter(obj, _.negate(cb(predicate)), context);
  };

  // Determine whether all of the elements match a truth test.
  // Aliased as `all`.
  _.every = _.all = function(obj, predicate, context) {
    predicate = cb(predicate, context);
    var keys = !isArrayLike(obj) && _.keys(obj),
        length = (keys || obj).length;
    for (var index = 0; index < length; index++) {
      var currentKey = keys ? keys[index] : index;
      if (!predicate(obj[currentKey], currentKey, obj)) return false;
    }
    return true;
  };

  // Determine if at least one element in the object matches a truth test.
  // Aliased as `any`.
  _.some = _.any = function(obj, predicate, context) {
    predicate = cb(predicate, context);
    var keys = !isArrayLike(obj) && _.keys(obj),
        length = (keys || obj).length;
    for (var index = 0; index < length; index++) {
      var currentKey = keys ? keys[index] : index;
      if (predicate(obj[currentKey], currentKey, obj)) return true;
    }
    return false;
  };

  // Determine if the array or object contains a given item (using `===`).
  // Aliased as `includes` and `include`.
  _.contains = _.includes = _.include = function(obj, item, fromIndex, guard) {
    if (!isArrayLike(obj)) obj = _.values(obj);
    if (typeof fromIndex != 'number' || guard) fromIndex = 0;
    return _.indexOf(obj, item, fromIndex) >= 0;
  };

  // Invoke a method (with arguments) on every item in a collection.
  _.invoke = function(obj, method) {
    var args = slice.call(arguments, 2);
    var isFunc = _.isFunction(method);
    return _.map(obj, function(value) {
      var func = isFunc ? method : value[method];
      return func == null ? func : func.apply(value, args);
    });
  };

  // Convenience version of a common use case of `map`: fetching a property.
  _.pluck = function(obj, key) {
    return _.map(obj, _.property(key));
  };

  // Convenience version of a common use case of `filter`: selecting only objects
  // containing specific `key:value` pairs.
  _.where = function(obj, attrs) {
    return _.filter(obj, _.matcher(attrs));
  };

  // Convenience version of a common use case of `find`: getting the first object
  // containing specific `key:value` pairs.
  _.findWhere = function(obj, attrs) {
    return _.find(obj, _.matcher(attrs));
  };

  // Return the maximum element (or element-based computation).
  _.max = function(obj, iteratee, context) {
    var result = -Infinity, lastComputed = -Infinity,
        value, computed;
    if (iteratee == null && obj != null) {
      obj = isArrayLike(obj) ? obj : _.values(obj);
      for (var i = 0, length = obj.length; i < length; i++) {
        value = obj[i];
        if (value > result) {
          result = value;
        }
      }
    } else {
      iteratee = cb(iteratee, context);
      _.each(obj, function(value, index, list) {
        computed = iteratee(value, index, list);
        if (computed > lastComputed || computed === -Infinity && result === -Infinity) {
          result = value;
          lastComputed = computed;
        }
      });
    }
    return result;
  };

  // Return the minimum element (or element-based computation).
  _.min = function(obj, iteratee, context) {
    var result = Infinity, lastComputed = Infinity,
        value, computed;
    if (iteratee == null && obj != null) {
      obj = isArrayLike(obj) ? obj : _.values(obj);
      for (var i = 0, length = obj.length; i < length; i++) {
        value = obj[i];
        if (value < result) {
          result = value;
        }
      }
    } else {
      iteratee = cb(iteratee, context);
      _.each(obj, function(value, index, list) {
        computed = iteratee(value, index, list);
        if (computed < lastComputed || computed === Infinity && result === Infinity) {
          result = value;
          lastComputed = computed;
        }
      });
    }
    return result;
  };

  // Shuffle a collection, using the modern version of the
  // [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher–Yates_shuffle).
  _.shuffle = function(obj) {
    var set = isArrayLike(obj) ? obj : _.values(obj);
    var length = set.length;
    var shuffled = Array(length);
    for (var index = 0, rand; index < length; index++) {
      rand = _.random(0, index);
      if (rand !== index) shuffled[index] = shuffled[rand];
      shuffled[rand] = set[index];
    }
    return shuffled;
  };

  // Sample **n** random values from a collection.
  // If **n** is not specified, returns a single random element.
  // The internal `guard` argument allows it to work with `map`.
  _.sample = function(obj, n, guard) {
    if (n == null || guard) {
      if (!isArrayLike(obj)) obj = _.values(obj);
      return obj[_.random(obj.length - 1)];
    }
    return _.shuffle(obj).slice(0, Math.max(0, n));
  };

  // Sort the object's values by a criterion produced by an iteratee.
  _.sortBy = function(obj, iteratee, context) {
    iteratee = cb(iteratee, context);
    return _.pluck(_.map(obj, function(value, index, list) {
      return {
        value: value,
        index: index,
        criteria: iteratee(value, index, list)
      };
    }).sort(function(left, right) {
      var a = left.criteria;
      var b = right.criteria;
      if (a !== b) {
        if (a > b || a === void 0) return 1;
        if (a < b || b === void 0) return -1;
      }
      return left.index - right.index;
    }), 'value');
  };

  // An internal function used for aggregate "group by" operations.
  var group = function(behavior) {
    return function(obj, iteratee, context) {
      var result = {};
      iteratee = cb(iteratee, context);
      _.each(obj, function(value, index) {
        var key = iteratee(value, index, obj);
        behavior(result, value, key);
      });
      return result;
    };
  };

  // Groups the object's values by a criterion. Pass either a string attribute
  // to group by, or a function that returns the criterion.
  _.groupBy = group(function(result, value, key) {
    if (_.has(result, key)) result[key].push(value); else result[key] = [value];
  });

  // Indexes the object's values by a criterion, similar to `groupBy`, but for
  // when you know that your index values will be unique.
  _.indexBy = group(function(result, value, key) {
    result[key] = value;
  });

  // Counts instances of an object that group by a certain criterion. Pass
  // either a string attribute to count by, or a function that returns the
  // criterion.
  _.countBy = group(function(result, value, key) {
    if (_.has(result, key)) result[key]++; else result[key] = 1;
  });

  // Safely create a real, live array from anything iterable.
  _.toArray = function(obj) {
    if (!obj) return [];
    if (_.isArray(obj)) return slice.call(obj);
    if (isArrayLike(obj)) return _.map(obj, _.identity);
    return _.values(obj);
  };

  // Return the number of elements in an object.
  _.size = function(obj) {
    if (obj == null) return 0;
    return isArrayLike(obj) ? obj.length : _.keys(obj).length;
  };

  // Split a collection into two arrays: one whose elements all satisfy the given
  // predicate, and one whose elements all do not satisfy the predicate.
  _.partition = function(obj, predicate, context) {
    predicate = cb(predicate, context);
    var pass = [], fail = [];
    _.each(obj, function(value, key, obj) {
      (predicate(value, key, obj) ? pass : fail).push(value);
    });
    return [pass, fail];
  };

  // Array Functions
  // ---------------

  // Get the first element of an array. Passing **n** will return the first N
  // values in the array. Aliased as `head` and `take`. The **guard** check
  // allows it to work with `_.map`.
  _.first = _.head = _.take = function(array, n, guard) {
    if (array == null) return void 0;
    if (n == null || guard) return array[0];
    return _.initial(array, array.length - n);
  };

  // Returns everything but the last entry of the array. Especially useful on
  // the arguments object. Passing **n** will return all the values in
  // the array, excluding the last N.
  _.initial = function(array, n, guard) {
    return slice.call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)));
  };

  // Get the last element of an array. Passing **n** will return the last N
  // values in the array.
  _.last = function(array, n, guard) {
    if (array == null) return void 0;
    if (n == null || guard) return array[array.length - 1];
    return _.rest(array, Math.max(0, array.length - n));
  };

  // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.
  // Especially useful on the arguments object. Passing an **n** will return
  // the rest N values in the array.
  _.rest = _.tail = _.drop = function(array, n, guard) {
    return slice.call(array, n == null || guard ? 1 : n);
  };

  // Trim out all falsy values from an array.
  _.compact = function(array) {
    return _.filter(array, _.identity);
  };

  // Internal implementation of a recursive `flatten` function.
  var flatten = function(input, shallow, strict, startIndex) {
    var output = [], idx = 0;
    for (var i = startIndex || 0, length = getLength(input); i < length; i++) {
      var value = input[i];
      if (isArrayLike(value) && (_.isArray(value) || _.isArguments(value))) {
        //flatten current level of array or arguments object
        if (!shallow) value = flatten(value, shallow, strict);
        var j = 0, len = value.length;
        output.length += len;
        while (j < len) {
          output[idx++] = value[j++];
        }
      } else if (!strict) {
        output[idx++] = value;
      }
    }
    return output;
  };

  // Flatten out an array, either recursively (by default), or just one level.
  _.flatten = function(array, shallow) {
    return flatten(array, shallow, false);
  };

  // Return a version of the array that does not contain the specified value(s).
  _.without = function(array) {
    return _.difference(array, slice.call(arguments, 1));
  };

  // Produce a duplicate-free version of the array. If the array has already
  // been sorted, you have the option of using a faster algorithm.
  // Aliased as `unique`.
  _.uniq = _.unique = function(array, isSorted, iteratee, context) {
    if (!_.isBoolean(isSorted)) {
      context = iteratee;
      iteratee = isSorted;
      isSorted = false;
    }
    if (iteratee != null) iteratee = cb(iteratee, context);
    var result = [];
    var seen = [];
    for (var i = 0, length = getLength(array); i < length; i++) {
      var value = array[i],
          computed = iteratee ? iteratee(value, i, array) : value;
      if (isSorted) {
        if (!i || seen !== computed) result.push(value);
        seen = computed;
      } else if (iteratee) {
        if (!_.contains(seen, computed)) {
          seen.push(computed);
          result.push(value);
        }
      } else if (!_.contains(result, value)) {
        result.push(value);
      }
    }
    return result;
  };

  // Produce an array that contains the union: each distinct element from all of
  // the passed-in arrays.
  _.union = function() {
    return _.uniq(flatten(arguments, true, true));
  };

  // Produce an array that contains every item shared between all the
  // passed-in arrays.
  _.intersection = function(array) {
    var result = [];
    var argsLength = arguments.length;
    for (var i = 0, length = getLength(array); i < length; i++) {
      var item = array[i];
      if (_.contains(result, item)) continue;
      for (var j = 1; j < argsLength; j++) {
        if (!_.contains(arguments[j], item)) break;
      }
      if (j === argsLength) result.push(item);
    }
    return result;
  };

  // Take the difference between one array and a number of other arrays.
  // Only the elements present in just the first array will remain.
  _.difference = function(array) {
    var rest = flatten(arguments, true, true, 1);
    return _.filter(array, function(value){
      return !_.contains(rest, value);
    });
  };

  // Zip together multiple lists into a single array -- elements that share
  // an index go together.
  _.zip = function() {
    return _.unzip(arguments);
  };

  // Complement of _.zip. Unzip accepts an array of arrays and groups
  // each array's elements on shared indices
  _.unzip = function(array) {
    var length = array && _.max(array, getLength).length || 0;
    var result = Array(length);

    for (var index = 0; index < length; index++) {
      result[index] = _.pluck(array, index);
    }
    return result;
  };

  // Converts lists into objects. Pass either a single array of `[key, value]`
  // pairs, or two parallel arrays of the same length -- one of keys, and one of
  // the corresponding values.
  _.object = function(list, values) {
    var result = {};
    for (var i = 0, length = getLength(list); i < length; i++) {
      if (values) {
        result[list[i]] = values[i];
      } else {
        result[list[i][0]] = list[i][1];
      }
    }
    return result;
  };

  // Generator function to create the findIndex and findLastIndex functions
  function createPredicateIndexFinder(dir) {
    return function(array, predicate, context) {
      predicate = cb(predicate, context);
      var length = getLength(array);
      var index = dir > 0 ? 0 : length - 1;
      for (; index >= 0 && index < length; index += dir) {
        if (predicate(array[index], index, array)) return index;
      }
      return -1;
    };
  }

  // Returns the first index on an array-like that passes a predicate test
  _.findIndex = createPredicateIndexFinder(1);
  _.findLastIndex = createPredicateIndexFinder(-1);

  // Use a comparator function to figure out the smallest index at which
  // an object should be inserted so as to maintain order. Uses binary search.
  _.sortedIndex = function(array, obj, iteratee, context) {
    iteratee = cb(iteratee, context, 1);
    var value = iteratee(obj);
    var low = 0, high = getLength(array);
    while (low < high) {
      var mid = Math.floor((low + high) / 2);
      if (iteratee(array[mid]) < value) low = mid + 1; else high = mid;
    }
    return low;
  };

  // Generator function to create the indexOf and lastIndexOf functions
  function createIndexFinder(dir, predicateFind, sortedIndex) {
    return function(array, item, idx) {
      var i = 0, length = getLength(array);
      if (typeof idx == 'number') {
        if (dir > 0) {
            i = idx >= 0 ? idx : Math.max(idx + length, i);
        } else {
            length = idx >= 0 ? Math.min(idx + 1, length) : idx + length + 1;
        }
      } else if (sortedIndex && idx && length) {
        idx = sortedIndex(array, item);
        return array[idx] === item ? idx : -1;
      }
      if (item !== item) {
        idx = predicateFind(slice.call(array, i, length), _.isNaN);
        return idx >= 0 ? idx + i : -1;
      }
      for (idx = dir > 0 ? i : length - 1; idx >= 0 && idx < length; idx += dir) {
        if (array[idx] === item) return idx;
      }
      return -1;
    };
  }

  // Return the position of the first occurrence of an item in an array,
  // or -1 if the item is not included in the array.
  // If the array is large and already in sort order, pass `true`
  // for **isSorted** to use binary search.
  _.indexOf = createIndexFinder(1, _.findIndex, _.sortedIndex);
  _.lastIndexOf = createIndexFinder(-1, _.findLastIndex);

  // Generate an integer Array containing an arithmetic progression. A port of
  // the native Python `range()` function. See
  // [the Python documentation](http://docs.python.org/library/functions.html#range).
  _.range = function(start, stop, step) {
    if (stop == null) {
      stop = start || 0;
      start = 0;
    }
    step = step || 1;

    var length = Math.max(Math.ceil((stop - start) / step), 0);
    var range = Array(length);

    for (var idx = 0; idx < length; idx++, start += step) {
      range[idx] = start;
    }

    return range;
  };

  // Function (ahem) Functions
  // ------------------

  // Determines whether to execute a function as a constructor
  // or a normal function with the provided arguments
  var executeBound = function(sourceFunc, boundFunc, context, callingContext, args) {
    if (!(callingContext instanceof boundFunc)) return sourceFunc.apply(context, args);
    var self = baseCreate(sourceFunc.prototype);
    var result = sourceFunc.apply(self, args);
    if (_.isObject(result)) return result;
    return self;
  };

  // Create a function bound to a given object (assigning `this`, and arguments,
  // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if
  // available.
  _.bind = function(func, context) {
    if (nativeBind && func.bind === nativeBind) return nativeBind.apply(func, slice.call(arguments, 1));
    if (!_.isFunction(func)) throw new TypeError('Bind must be called on a function');
    var args = slice.call(arguments, 2);
    var bound = function() {
      return executeBound(func, bound, context, this, args.concat(slice.call(arguments)));
    };
    return bound;
  };

  // Partially apply a function by creating a version that has had some of its
  // arguments pre-filled, without changing its dynamic `this` context. _ acts
  // as a placeholder, allowing any combination of arguments to be pre-filled.
  _.partial = function(func) {
    var boundArgs = slice.call(arguments, 1);
    var bound = function() {
      var position = 0, length = boundArgs.length;
      var args = Array(length);
      for (var i = 0; i < length; i++) {
        args[i] = boundArgs[i] === _ ? arguments[position++] : boundArgs[i];
      }
      while (position < arguments.length) args.push(arguments[position++]);
      return executeBound(func, bound, this, this, args);
    };
    return bound;
  };

  // Bind a number of an object's methods to that object. Remaining arguments
  // are the method names to be bound. Useful for ensuring that all callbacks
  // defined on an object belong to it.
  _.bindAll = function(obj) {
    var i, length = arguments.length, key;
    if (length <= 1) throw new Error('bindAll must be passed function names');
    for (i = 1; i < length; i++) {
      key = arguments[i];
      obj[key] = _.bind(obj[key], obj);
    }
    return obj;
  };

  // Memoize an expensive function by storing its results.
  _.memoize = function(func, hasher) {
    var memoize = function(key) {
      var cache = memoize.cache;
      var address = '' + (hasher ? hasher.apply(this, arguments) : key);
      if (!_.has(cache, address)) cache[address] = func.apply(this, arguments);
      return cache[address];
    };
    memoize.cache = {};
    return memoize;
  };

  // Delays a function for the given number of milliseconds, and then calls
  // it with the arguments supplied.
  _.delay = function(func, wait) {
    var args = slice.call(arguments, 2);
    return setTimeout(function(){
      return func.apply(null, args);
    }, wait);
  };

  // Defers a function, scheduling it to run after the current call stack has
  // cleared.
  _.defer = _.partial(_.delay, _, 1);

  // Returns a function, that, when invoked, will only be triggered at most once
  // during a given window of time. Normally, the throttled function will run
  // as much as it can, without ever going more than once per `wait` duration;
  // but if you'd like to disable the execution on the leading edge, pass
  // `{leading: false}`. To disable execution on the trailing edge, ditto.
  _.throttle = function(func, wait, options) {
    var context, args, result;
    var timeout = null;
    var previous = 0;
    if (!options) options = {};
    var later = function() {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    };
    return function() {
      var now = _.now();
      if (!previous && options.leading === false) previous = now;
      var remaining = wait - (now - previous);
      context = this;
      args = arguments;
      if (remaining <= 0 || remaining > wait) {
        if (timeout) {
          clearTimeout(timeout);
          timeout = null;
        }
        previous = now;
        result = func.apply(context, args);
        if (!timeout) context = args = null;
      } else if (!timeout && options.trailing !== false) {
        timeout = setTimeout(later, remaining);
      }
      return result;
    };
  };

  // Returns a function, that, as long as it continues to be invoked, will not
  // be triggered. The function will be called after it stops being called for
  // N milliseconds. If `immediate` is passed, trigger the function on the
  // leading edge, instead of the trailing.
  _.debounce = function(func, wait, immediate) {
    var timeout, args, context, timestamp, result;

    var later = function() {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    };

    return function() {
      context = this;
      args = arguments;
      timestamp = _.now();
      var callNow = immediate && !timeout;
      if (!timeout) timeout = setTimeout(later, wait);
      if (callNow) {
        result = func.apply(context, args);
        context = args = null;
      }

      return result;
    };
  };

  // Returns the first function passed as an argument to the second,
  // allowing you to adjust arguments, run code before and after, and
  // conditionally execute the original function.
  _.wrap = function(func, wrapper) {
    return _.partial(wrapper, func);
  };

  // Returns a negated version of the passed-in predicate.
  _.negate = function(predicate) {
    return function() {
      return !predicate.apply(this, arguments);
    };
  };

  // Returns a function that is the composition of a list of functions, each
  // consuming the return value of the function that follows.
  _.compose = function() {
    var args = arguments;
    var start = args.length - 1;
    return function() {
      var i = start;
      var result = args[start].apply(this, arguments);
      while (i--) result = args[i].call(this, result);
      return result;
    };
  };

  // Returns a function that will only be executed on and after the Nth call.
  _.after = function(times, func) {
    return function() {
      if (--times < 1) {
        return func.apply(this, arguments);
      }
    };
  };

  // Returns a function that will only be executed up to (but not including) the Nth call.
  _.before = function(times, func) {
    var memo;
    return function() {
      if (--times > 0) {
        memo = func.apply(this, arguments);
      }
      if (times <= 1) func = null;
      return memo;
    };
  };

  // Returns a function that will be executed at most one time, no matter how
  // often you call it. Useful for lazy initialization.
  _.once = _.partial(_.before, 2);

  // Object Functions
  // ----------------

  // Keys in IE < 9 that won't be iterated by `for key in ...` and thus missed.
  var hasEnumBug = !{toString: null}.propertyIsEnumerable('toString');
  var nonEnumerableProps = ['valueOf', 'isPrototypeOf', 'toString',
                      'propertyIsEnumerable', 'hasOwnProperty', 'toLocaleString'];

  function collectNonEnumProps(obj, keys) {
    var nonEnumIdx = nonEnumerableProps.length;
    var constructor = obj.constructor;
    var proto = (_.isFunction(constructor) && constructor.prototype) || ObjProto;

    // Constructor is a special case.
    var prop = 'constructor';
    if (_.has(obj, prop) && !_.contains(keys, prop)) keys.push(prop);

    while (nonEnumIdx--) {
      prop = nonEnumerableProps[nonEnumIdx];
      if (prop in obj && obj[prop] !== proto[prop] && !_.contains(keys, prop)) {
        keys.push(prop);
      }
    }
  }

  // Retrieve the names of an object's own properties.
  // Delegates to **ECMAScript 5**'s native `Object.keys`
  _.keys = function(obj) {
    if (!_.isObject(obj)) return [];
    if (nativeKeys) return nativeKeys(obj);
    var keys = [];
    for (var key in obj) if (_.has(obj, key)) keys.push(key);
    // Ahem, IE < 9.
    if (hasEnumBug) collectNonEnumProps(obj, keys);
    return keys;
  };

  // Retrieve all the property names of an object.
  _.allKeys = function(obj) {
    if (!_.isObject(obj)) return [];
    var keys = [];
    for (var key in obj) keys.push(key);
    // Ahem, IE < 9.
    if (hasEnumBug) collectNonEnumProps(obj, keys);
    return keys;
  };

  // Retrieve the values of an object's properties.
  _.values = function(obj) {
    var keys = _.keys(obj);
    var length = keys.length;
    var values = Array(length);
    for (var i = 0; i < length; i++) {
      values[i] = obj[keys[i]];
    }
    return values;
  };

  // Returns the results of applying the iteratee to each element of the object
  // In contrast to _.map it returns an object
  _.mapObject = function(obj, iteratee, context) {
    iteratee = cb(iteratee, context);
    var keys =  _.keys(obj),
          length = keys.length,
          results = {},
          currentKey;
      for (var index = 0; index < length; index++) {
        currentKey = keys[index];
        results[currentKey] = iteratee(obj[currentKey], currentKey, obj);
      }
      return results;
  };

  // Convert an object into a list of `[key, value]` pairs.
  _.pairs = function(obj) {
    var keys = _.keys(obj);
    var length = keys.length;
    var pairs = Array(length);
    for (var i = 0; i < length; i++) {
      pairs[i] = [keys[i], obj[keys[i]]];
    }
    return pairs;
  };

  // Invert the keys and values of an object. The values must be serializable.
  _.invert = function(obj) {
    var result = {};
    var keys = _.keys(obj);
    for (var i = 0, length = keys.length; i < length; i++) {
      result[obj[keys[i]]] = keys[i];
    }
    return result;
  };

  // Return a sorted list of the function names available on the object.
  // Aliased as `methods`
  _.functions = _.methods = function(obj) {
    var names = [];
    for (var key in obj) {
      if (_.isFunction(obj[key])) names.push(key);
    }
    return names.sort();
  };

  // Extend a given object with all the properties in passed-in object(s).
  _.extend = createAssigner(_.allKeys);

  // Assigns a given object with all the own properties in the passed-in object(s)
  // (https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)
  _.extendOwn = _.assign = createAssigner(_.keys);

  // Returns the first key on an object that passes a predicate test
  _.findKey = function(obj, predicate, context) {
    predicate = cb(predicate, context);
    var keys = _.keys(obj), key;
    for (var i = 0, length = keys.length; i < length; i++) {
      key = keys[i];
      if (predicate(obj[key], key, obj)) return key;
    }
  };

  // Return a copy of the object only containing the whitelisted properties.
  _.pick = function(object, oiteratee, context) {
    var result = {}, obj = object, iteratee, keys;
    if (obj == null) return result;
    if (_.isFunction(oiteratee)) {
      keys = _.allKeys(obj);
      iteratee = optimizeCb(oiteratee, context);
    } else {
      keys = flatten(arguments, false, false, 1);
      iteratee = function(value, key, obj) { return key in obj; };
      obj = Object(obj);
    }
    for (var i = 0, length = keys.length; i < length; i++) {
      var key = keys[i];
      var value = obj[key];
      if (iteratee(value, key, obj)) result[key] = value;
    }
    return result;
  };

   // Return a copy of the object without the blacklisted properties.
  _.omit = function(obj, iteratee, context) {
    if (_.isFunction(iteratee)) {
      iteratee = _.negate(iteratee);
    } else {
      var keys = _.map(flatten(arguments, false, false, 1), String);
      iteratee = function(value, key) {
        return !_.contains(keys, key);
      };
    }
    return _.pick(obj, iteratee, context);
  };

  // Fill in a given object with default properties.
  _.defaults = createAssigner(_.allKeys, true);

  // Creates an object that inherits from the given prototype object.
  // If additional properties are provided then they will be added to the
  // created object.
  _.create = function(prototype, props) {
    var result = baseCreate(prototype);
    if (props) _.extendOwn(result, props);
    return result;
  };

  // Create a (shallow-cloned) duplicate of an object.
  _.clone = function(obj) {
    if (!_.isObject(obj)) return obj;
    return _.isArray(obj) ? obj.slice() : _.extend({}, obj);
  };

  // Invokes interceptor with the obj, and then returns obj.
  // The primary purpose of this method is to "tap into" a method chain, in
  // order to perform operations on intermediate results within the chain.
  _.tap = function(obj, interceptor) {
    interceptor(obj);
    return obj;
  };

  // Returns whether an object has a given set of `key:value` pairs.
  _.isMatch = function(object, attrs) {
    var keys = _.keys(attrs), length = keys.length;
    if (object == null) return !length;
    var obj = Object(object);
    for (var i = 0; i < length; i++) {
      var key = keys[i];
      if (attrs[key] !== obj[key] || !(key in obj)) return false;
    }
    return true;
  };


  // Internal recursive comparison function for `isEqual`.
  var eq = function(a, b, aStack, bStack) {
    // Identical objects are equal. `0 === -0`, but they aren't identical.
    // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).
    if (a === b) return a !== 0 || 1 / a === 1 / b;
    // A strict comparison is necessary because `null == undefined`.
    if (a == null || b == null) return a === b;
    // Unwrap any wrapped objects.
    if (a instanceof _) a = a._wrapped;
    if (b instanceof _) b = b._wrapped;
    // Compare `[[Class]]` names.
    var className = toString.call(a);
    if (className !== toString.call(b)) return false;
    switch (className) {
      // Strings, numbers, regular expressions, dates, and booleans are compared by value.
      case '[object RegExp]':
      // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')
      case '[object String]':
        // Primitives and their corresponding object wrappers are equivalent; thus, `"5"` is
        // equivalent to `new String("5")`.
        return '' + a === '' + b;
      case '[object Number]':
        // `NaN`s are equivalent, but non-reflexive.
        // Object(NaN) is equivalent to NaN
        if (+a !== +a) return +b !== +b;
        // An `egal` comparison is performed for other numeric values.
        return +a === 0 ? 1 / +a === 1 / b : +a === +b;
      case '[object Date]':
      case '[object Boolean]':
        // Coerce dates and booleans to numeric primitive values. Dates are compared by their
        // millisecond representations. Note that invalid dates with millisecond representations
        // of `NaN` are not equivalent.
        return +a === +b;
    }

    var areArrays = className === '[object Array]';
    if (!areArrays) {
      if (typeof a != 'object' || typeof b != 'object') return false;

      // Objects with different constructors are not equivalent, but `Object`s or `Array`s
      // from different frames are.
      var aCtor = a.constructor, bCtor = b.constructor;
      if (aCtor !== bCtor && !(_.isFunction(aCtor) && aCtor instanceof aCtor &&
                               _.isFunction(bCtor) && bCtor instanceof bCtor)
                          && ('constructor' in a && 'constructor' in b)) {
        return false;
      }
    }
    // Assume equality for cyclic structures. The algorithm for detecting cyclic
    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.

    // Initializing stack of traversed objects.
    // It's done here since we only need them for objects and arrays comparison.
    aStack = aStack || [];
    bStack = bStack || [];
    var length = aStack.length;
    while (length--) {
      // Linear search. Performance is inversely proportional to the number of
      // unique nested structures.
      if (aStack[length] === a) return bStack[length] === b;
    }

    // Add the first object to the stack of traversed objects.
    aStack.push(a);
    bStack.push(b);

    // Recursively compare objects and arrays.
    if (areArrays) {
      // Compare array lengths to determine if a deep comparison is necessary.
      length = a.length;
      if (length !== b.length) return false;
      // Deep compare the contents, ignoring non-numeric properties.
      while (length--) {
        if (!eq(a[length], b[length], aStack, bStack)) return false;
      }
    } else {
      // Deep compare objects.
      var keys = _.keys(a), key;
      length = keys.length;
      // Ensure that both objects contain the same number of properties before comparing deep equality.
      if (_.keys(b).length !== length) return false;
      while (length--) {
        // Deep compare each member
        key = keys[length];
        if (!(_.has(b, key) && eq(a[key], b[key], aStack, bStack))) return false;
      }
    }
    // Remove the first object from the stack of traversed objects.
    aStack.pop();
    bStack.pop();
    return true;
  };

  // Perform a deep comparison to check if two objects are equal.
  _.isEqual = function(a, b) {
    return eq(a, b);
  };

  // Is a given array, string, or object empty?
  // An "empty" object has no enumerable own-properties.
  _.isEmpty = function(obj) {
    if (obj == null) return true;
    if (isArrayLike(obj) && (_.isArray(obj) || _.isString(obj) || _.isArguments(obj))) return obj.length === 0;
    return _.keys(obj).length === 0;
  };

  // Is a given value a DOM element?
  _.isElement = function(obj) {
    return !!(obj && obj.nodeType === 1);
  };

  // Is a given value an array?
  // Delegates to ECMA5's native Array.isArray
  _.isArray = nativeIsArray || function(obj) {
    return toString.call(obj) === '[object Array]';
  };

  // Is a given variable an object?
  _.isObject = function(obj) {
    var type = typeof obj;
    return type === 'function' || type === 'object' && !!obj;
  };

  // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp, isError.
  _.each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp', 'Error'], function(name) {
    _['is' + name] = function(obj) {
      return toString.call(obj) === '[object ' + name + ']';
    };
  });

  // Define a fallback version of the method in browsers (ahem, IE < 9), where
  // there isn't any inspectable "Arguments" type.
  if (!_.isArguments(arguments)) {
    _.isArguments = function(obj) {
      return _.has(obj, 'callee');
    };
  }

  // Optimize `isFunction` if appropriate. Work around some typeof bugs in old v8,
  // IE 11 (#1621), and in Safari 8 (#1929).
  if (typeof /./ != 'function' && typeof Int8Array != 'object') {
    _.isFunction = function(obj) {
      return typeof obj == 'function' || false;
    };
  }

  // Is a given object a finite number?
  _.isFinite = function(obj) {
    return isFinite(obj) && !isNaN(parseFloat(obj));
  };

  // Is the given value `NaN`? (NaN is the only number which does not equal itself).
  _.isNaN = function(obj) {
    return _.isNumber(obj) && obj !== +obj;
  };

  // Is a given value a boolean?
  _.isBoolean = function(obj) {
    return obj === true || obj === false || toString.call(obj) === '[object Boolean]';
  };

  // Is a given value equal to null?
  _.isNull = function(obj) {
    return obj === null;
  };

  // Is a given variable undefined?
  _.isUndefined = function(obj) {
    return obj === void 0;
  };

  // Shortcut function for checking if an object has a given property directly
  // on itself (in other words, not on a prototype).
  _.has = function(obj, key) {
    return obj != null && hasOwnProperty.call(obj, key);
  };

  // Utility Functions
  // -----------------

  // Run Underscore.js in *noConflict* mode, returning the `_` variable to its
  // previous owner. Returns a reference to the Underscore object.
  _.noConflict = function() {
    root._ = previousUnderscore;
    return this;
  };

  // Keep the identity function around for default iteratees.
  _.identity = function(value) {
    return value;
  };

  // Predicate-generating functions. Often useful outside of Underscore.
  _.constant = function(value) {
    return function() {
      return value;
    };
  };

  _.noop = function(){};

  _.property = property;

  // Generates a function for a given object that returns a given property.
  _.propertyOf = function(obj) {
    return obj == null ? function(){} : function(key) {
      return obj[key];
    };
  };

  // Returns a predicate for checking whether an object has a given set of
  // `key:value` pairs.
  _.matcher = _.matches = function(attrs) {
    attrs = _.extendOwn({}, attrs);
    return function(obj) {
      return _.isMatch(obj, attrs);
    };
  };

  // Run a function **n** times.
  _.times = function(n, iteratee, context) {
    var accum = Array(Math.max(0, n));
    iteratee = optimizeCb(iteratee, context, 1);
    for (var i = 0; i < n; i++) accum[i] = iteratee(i);
    return accum;
  };

  // Return a random integer between min and max (inclusive).
  _.random = function(min, max) {
    if (max == null) {
      max = min;
      min = 0;
    }
    return min + Math.floor(Math.random() * (max - min + 1));
  };

  // A (possibly faster) way to get the current timestamp as an integer.
  _.now = Date.now || function() {
    return new Date().getTime();
  };

   // List of HTML entities for escaping.
  var escapeMap = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#x27;',
    '`': '&#x60;'
  };
  var unescapeMap = _.invert(escapeMap);

  // Functions for escaping and unescaping strings to/from HTML interpolation.
  var createEscaper = function(map) {
    var escaper = function(match) {
      return map[match];
    };
    // Regexes for identifying a key that needs to be escaped
    var source = '(?:' + _.keys(map).join('|') + ')';
    var testRegexp = RegExp(source);
    var replaceRegexp = RegExp(source, 'g');
    return function(string) {
      string = string == null ? '' : '' + string;
      return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;
    };
  };
  _.escape = createEscaper(escapeMap);
  _.unescape = createEscaper(unescapeMap);

  // If the value of the named `property` is a function then invoke it with the
  // `object` as context; otherwise, return it.
  _.result = function(object, property, fallback) {
    var value = object == null ? void 0 : object[property];
    if (value === void 0) {
      value = fallback;
    }
    return _.isFunction(value) ? value.call(object) : value;
  };

  // Generate a unique integer id (unique within the entire client session).
  // Useful for temporary DOM ids.
  var idCounter = 0;
  _.uniqueId = function(prefix) {
    var id = ++idCounter + '';
    return prefix ? prefix + id : id;
  };

  // By default, Underscore uses ERB-style template delimiters, change the
  // following template settings to use alternative delimiters.
  _.templateSettings = {
    evaluate    : /<%([\s\S]+?)%>/g,
    interpolate : /<%=([\s\S]+?)%>/g,
    escape      : /<%-([\s\S]+?)%>/g
  };

  // When customizing `templateSettings`, if you don't want to define an
  // interpolation, evaluation or escaping regex, we need one that is
  // guaranteed not to match.
  var noMatch = /(.)^/;

  // Certain characters need to be escaped so that they can be put into a
  // string literal.
  var escapes = {
    "'":      "'",
    '\\':     '\\',
    '\r':     'r',
    '\n':     'n',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  var escaper = /\\|'|\r|\n|\u2028|\u2029/g;

  var escapeChar = function(match) {
    return '\\' + escapes[match];
  };

  // JavaScript micro-templating, similar to John Resig's implementation.
  // Underscore templating handles arbitrary delimiters, preserves whitespace,
  // and correctly escapes quotes within interpolated code.
  // NB: `oldSettings` only exists for backwards compatibility.
  _.template = function(text, settings, oldSettings) {
    if (!settings && oldSettings) settings = oldSettings;
    settings = _.defaults({}, settings, _.templateSettings);

    // Combine delimiters into one regular expression via alternation.
    var matcher = RegExp([
      (settings.escape || noMatch).source,
      (settings.interpolate || noMatch).source,
      (settings.evaluate || noMatch).source
    ].join('|') + '|$', 'g');

    // Compile the template source, escaping string literals appropriately.
    var index = 0;
    var source = "__p+='";
    text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {
      source += text.slice(index, offset).replace(escaper, escapeChar);
      index = offset + match.length;

      if (escape) {
        source += "'+\n((__t=(" + escape + "))==null?'':_.escape(__t))+\n'";
      } else if (interpolate) {
        source += "'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'";
      } else if (evaluate) {
        source += "';\n" + evaluate + "\n__p+='";
      }

      // Adobe VMs need the match returned to produce the correct offest.
      return match;
    });
    source += "';\n";

    // If a variable is not specified, place data values in local scope.
    if (!settings.variable) source = 'with(obj||{}){\n' + source + '}\n';

    source = "var __t,__p='',__j=Array.prototype.join," +
      "print=function(){__p+=__j.call(arguments,'');};\n" +
      source + 'return __p;\n';

    try {
      var render = new Function(settings.variable || 'obj', '_', source);
    } catch (e) {
      e.source = source;
      throw e;
    }

    var template = function(data) {
      return render.call(this, data, _);
    };

    // Provide the compiled source as a convenience for precompilation.
    var argument = settings.variable || 'obj';
    template.source = 'function(' + argument + '){\n' + source + '}';

    return template;
  };

  // Add a "chain" function. Start chaining a wrapped Underscore object.
  _.chain = function(obj) {
    var instance = _(obj);
    instance._chain = true;
    return instance;
  };

  // OOP
  // ---------------
  // If Underscore is called as a function, it returns a wrapped object that
  // can be used OO-style. This wrapper holds altered versions of all the
  // underscore functions. Wrapped objects may be chained.

  // Helper function to continue chaining intermediate results.
  var result = function(instance, obj) {
    return instance._chain ? _(obj).chain() : obj;
  };

  // Add your own custom functions to the Underscore object.
  _.mixin = function(obj) {
    _.each(_.functions(obj), function(name) {
      var func = _[name] = obj[name];
      _.prototype[name] = function() {
        var args = [this._wrapped];
        push.apply(args, arguments);
        return result(this, func.apply(_, args));
      };
    });
  };

  // Add all of the Underscore functions to the wrapper object.
  _.mixin(_);

  // Add all mutator Array functions to the wrapper.
  _.each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {
    var method = ArrayProto[name];
    _.prototype[name] = function() {
      var obj = this._wrapped;
      method.apply(obj, arguments);
      if ((name === 'shift' || name === 'splice') && obj.length === 0) delete obj[0];
      return result(this, obj);
    };
  });

  // Add all accessor Array functions to the wrapper.
  _.each(['concat', 'join', 'slice'], function(name) {
    var method = ArrayProto[name];
    _.prototype[name] = function() {
      return result(this, method.apply(this._wrapped, arguments));
    };
  });

  // Extracts the result from a wrapped and chained object.
  _.prototype.value = function() {
    return this._wrapped;
  };

  // Provide unwrapping proxy for some methods used in engine operations
  // such as arithmetic and JSON stringification.
  _.prototype.valueOf = _.prototype.toJSON = _.prototype.value;

  _.prototype.toString = function() {
    return '' + this._wrapped;
  };

  // AMD registration happens at the end for compatibility with AMD loaders
  // that may not enforce next-turn semantics on modules. Even though general
  // practice for AMD registration is to be anonymous, underscore registers
  // as a named module because, like jQuery, it is a base library that is
  // popular enough to be bundled in a third party lib, but not be part of
  // an AMD load request. Those cases could generate an error when an
  // anonymous define() is called outside of a loader request.
  if (typeof define === 'function' && define.amd) {
    define('underscore', [], function() {
      return _;
    });
  }
}.call(this));

},{}],263:[function(require,module,exports){
(function (global){

/**
 * Module exports.
 */

module.exports = deprecate;

/**
 * Mark that a method should not be used.
 * Returns a modified function which warns once by default.
 *
 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
 *
 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
 * will throw an Error when invoked.
 *
 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
 * will invoke `console.trace()` instead of `console.error()`.
 *
 * @param {Function} fn - the function to deprecate
 * @param {String} msg - the string to print to the console when `fn` is invoked
 * @returns {Function} a new "deprecated" version of `fn`
 * @api public
 */

function deprecate (fn, msg) {
  if (config('noDeprecation')) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (config('throwDeprecation')) {
        throw new Error(msg);
      } else if (config('traceDeprecation')) {
        console.trace(msg);
      } else {
        console.warn(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
}

/**
 * Checks `localStorage` for boolean values for the given `name`.
 *
 * @param {String} name
 * @returns {Boolean}
 * @api private
 */

function config (name) {
  // accessing global.localStorage can trigger a DOMException in sandboxed iframes
  try {
    if (!global.localStorage) return false;
  } catch (_) {
    return false;
  }
  var val = global.localStorage[name];
  if (null == val) return false;
  return String(val).toLowerCase() === 'true';
}

}).call(this,typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}]},{},[28])
//# sourceMappingURL=data:application/json;base64,
